
========================================================================
disasm
========================================================================

------------------------------------------------------------------------
Region: PM_REGION
------------------------------------------------------------------------

 <$reset>
0x000000        03000000                 Null = Null + Null;
0x000001        DDF00041                 jump $pre_main;

 <$interrupt.handler>
0x000002        F100001C                 pushm <r0, r1, r2>;
0x000003        0920FE4D                 r0 = Null + M[0xfffe4d];
0x000004        F3200000                 push r0;
0x000005        1900FE4D                 M[0xfffe4d] = Null + Null;
0x000006        0920FE93                 r0 = Null + M[0xfffe93];
0x000007        F3200000                 push r0;
0x000008        1900FE93                 M[0xfffe93] = Null + Null;
0x000009        0920FE71                 r0 = Null + M[0xfffe71];
0x00000A        1920005D                 M[$interrupt.start_time] = r0 + Null;
0x00000B        81EEFFBF                 rFlags = rFlags AND 0xffbf;
0x00000C        1900FE12                 M[0xfffe12] = Null + Null;
0x00000D        0930FE19                 r1 = Null + M[0xfffe19];
0x00000E        0940FE44                 r2 = Null + M[0xfffe44];
0x00000F        F1007FF8                 pushm <r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, rLink, rFlags>;
0x000010        F101FFFF                 pushm <I0, I1, I2, I3, I4, I5, I6, I7, M0, M1, M2, M3, L0, L1, L4, L5>;
0x000011        F1023FFF                 pushm <rMAC2, rMAC1, rMAC0, DoLoopStart, DoLoopEnd, DivResult, DivRemainder, rMACB2, rMACB1, rMACB0, B0, B1, B4, B5>;
0x000012        1900FE17                 M[0xfffe17] = Null + Null;
0x000013        51C00000                 L0 = Null + 0;
0x000014        51D00000                 L1 = Null + 0;
0x000015        51E00000                 L4 = Null + 0;
0x000016        51F00000                 L5 = Null + 0;
0x000017        F3000000                 push Null;
0x000018        F1DAFFFF                 B5 = M[SP + -0x1];
0x000019        F1CAFFFF                 B4 = M[SP + -0x1];
0x00001A        F1BAFFFF                 B1 = M[SP + -0x1];
0x00001B        F3A60000                 pop B0;
0x00001C        0940FE18                 r2 = Null + M[0xfffe18];
0x00001D        D1549279                 r3 = M[r2 + -28039];
0x00001E        01E00080                 rFlags = Null + 128;
0x00001F        E420002F                 r0 = Null + 1;
0x000020        090064D7                 Null = Null + M[$interrupt.block_count];
0x000021        00200001                 if NE r0 = Null + Null;
0x000022        1920FE12                 M[0xfffe12] = r0 + Null;
0x000023        E005000F                 call r3;
0x000024        01E00000                 rFlags = Null + 0;
0x000025        F1063FFF                 popm <rMAC2, rMAC12, rMAC0, DoLoopStart, DoLoopEnd, DivResult, DivRemainder, rMACB2, rMACB12, rMACB0, B0, B1, B4, B5>;
0x000026        F105FFFF                 popm <I0, I1, I2, I3, I4, I5, I6, I7, M0, M1, M2, M3, L0, L1, L4, L5>;
0x000027        F1047FF8                 popm <r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, rLink, rFlags>;
0x000028        1940FE44                 M[0xfffe44] = r2 + Null;
0x000029        85334000                 r1 = r1 OR 0x4000;
0x00002A        1930FE16                 M[0xfffe16] = r1 + Null;
0x00002B        093094D7                 r1 = Null + M[$interrupt.total_time];
0x00002C        2933005D                 r1 = r1 - M[$interrupt.start_time];
0x00002D        0933FE71                 r1 = r1 + M[0xfffe71];
0x00002E        193094D7                 M[$interrupt.total_time] = r1 + Null;
0x00002F        F104000C                 popm <r0, r1>;
0x000030        1930FE93                 M[0xfffe93] = r1 + Null;
0x000031        1920FE4D                 M[0xfffe4d] = r0 + Null;
0x000032        F104001C                 popm <r0, r1, r2>;
0x000033        DC0E000F                 rti;

 <$flash.init_pm>
0x000034        092061B5                 r0 = Null + M[$flash.code.address];
0x000035        1920FE83                 M[0xfffe83] = r0 + Null;
0x000036        FD000004 85200000        r0 = Null OR 0x40000;
0x000038        1920FE84                 M[0xfffe84] = r0 + Null;
0x000039        DC0D000F                 rts;

 <$flash.init_dmconst>
0x00003A        092061BD                 r0 = Null + M[$flash.data24.address];
0x00003B        1920FE5C                 M[0xfffe5c] = r0 + Null;
0x00003C        01200002                 r0 = Null + 2;
0x00003D        1920FE62                 M[0xfffe62] = r0 + Null;
0x00003E        092061B9                 r0 = Null + M[$flash.data16.address];
0x00003F        1920FE5B                 M[0xfffe5b] = r0 + Null;
0x000040        1900FE61                 M[0xfffe61] = Null + Null;
0x000041        DC0D000F                 rts;

 <$pre_main>
0x000042        E1F0FFF2                 call $flash.init_pm;
0x000043        DDF031C2                 jump $main;

 <$cbops.rate_adjustment_and_shift.main>
0x000044        F3D00000                 push rLink;
0x000045        F1F00001                 pushm <FP(=SP)>, SP = SP + 0xf;
0x000046        F1070001                 FP = FP + 1;
0x000047        D14A0000                 r2 = M[r8 + 0];
0x000048        D058004F                 r3 = M[r6 + r2];
0x000049        5040005F                 I4 = Null + r3;
0x00004A        D069004F                 r4 = M[r7 + r2];
0x00004B        50E0006F                 L4 = Null + r4;
0x00004C        D14A0001                 r2 = M[r8 + 1];
0x00004D        D058004F                 r3 = M[r6 + r2];
0x00004E        5050005F                 I5 = Null + r3;
0x00004F        D069004F                 r4 = M[r7 + r2];
0x000050        50F0006F                 L5 = Null + r4;
0x000051        D14A0002                 r2 = M[r8 + 2];
0x000052        F14C0000                 M[FP + 0] = r2;
0x000053        DD40000A                 if NEG jump $M.cbops.rate_adjustment_and_shift.main.no_right_channel;
0x000054        D058004F                 r3 = M[r6 + r2];
0x000055        F15C0001                 M[FP + 0x1] = r3;
0x000056        D069004F                 r4 = M[r7 + r2];
0x000057        F16C0002                 M[FP + 0x2] = r4;
0x000058        D14A0003                 r2 = M[r8 + 3];
0x000059        D058004F                 r3 = M[r6 + r2];
0x00005A        F15C0004                 M[FP + 0x4] = r3;
0x00005B        D069004F                 r4 = M[r7 + r2];
0x00005C        F16C0005                 M[FP + 0x5] = r4;

 <$M.cbops.rate_adjustment_and_shift.main.no_right_channel>
0x00005D        D19A0004                 r7 = M[r8 + 4];
0x00005E        F19C0007                 M[FP + 0x7] = r7;
0x00005F        D12A0006                 r0 = M[r8 + 6];
0x000060        5000002F                 I0 = Null + r0;
0x000061        0120000C                 r0 = Null + 12;
0x000062        D13A000B                 r1 = M[r8 + 11];
0x000063        00320000                 if EQ r1 = r0 + Null;
0x000064        50C0003F                 L0 = Null + r1;
0x000065        50D0003F                 L1 = Null + r1;
0x000066        D12A0005                 r0 = M[r8 + 5];
0x000067        99330015                 r1 = r1 * 21 (int);
0x000068        8D33007F                 r1 = r1 LSHIFT -1;
0x000069        5032003F                 I3 = r0 + r1;
0x00006A        D12A0008                 r0 = M[r8 + 8];
0x00006B        D062000F                 r4 = M[r0 + Null];
0x00006C        D17A000C                 r5 = M[r8 + 12];
0x00006D        E430002F                 r1 = Null + 1;
0x00006E        2027006F                 r0 = r5 - r4;
0x00006F        20200024                 if NEG r0 = Null - r0;
0x000070        FD000000 954220C5        r2 = r0 * 0.0010000467300415039 (frac);
0x000072        21023127                 Null = r0 - 12583;
0x000073        00430004                 if NEG r2 = r1 + Null;
0x000074        21340026                 r1 = r2 - 38;
0x000075        20440035                 if POS r2 = r2 - r1;
0x000076        2037006F                 r1 = r5 - r4;
0x000077        2023004F                 r0 = r1 - r2;
0x000078        20330025                 if POS r1 = r1 - r0;
0x000079        0023004F                 r0 = r1 + r2;
0x00007A        20330024                 if NEG r1 = r1 - r0;
0x00007B        23730000                 r5 = r5 - r1;
0x00007C        D57A000C                 M[r8 + 12] = r5;
0x00007D        01300186                 r1 = Null + 390;
0x00007E        01400197                 r2 = Null + 407;
0x00007F        01500000                 r3 = Null + 0;
0x000080        D12A0009                 r0 = M[r8 + 9];
0x000081        E402003F                 Null = r0 - 1;
0x000082        00530000                 if EQ r3 = r1 + Null;
0x000083        21020002                 Null = r0 - 2;
0x000084        00540000                 if EQ r3 = r2 + Null;
0x000085        4420004F                 r0 = Null + I4;
0x000086        FD0000FF 8122FF80        r0 = r0 AND 0xffff80;
0x000088        FD0000FF 21023780        Null = r0 - -51328;
0x00008A        00500000                 if EQ r3 = Null + Null;
0x00008B        195064E2                 M[$M.cbops.rate_adjustment_and_shift.main.dither_function] = r3 + Null;
0x00008C        F1CC000C                 M[FP + 0xc] = r10;
0x00008D        19C094E1                 M[$M.cbops.rate_adjustment_and_shift.amount_used] = r10 + Null;
0x00008E        D5CA0012                 M[r8 + 18] = r10;
0x00008F        F10C000D                 M[FP + 0xd] = Null;
0x000090        51B00001                 M3 = Null + 1;

 <$M.cbops.rate_adjustment_and_shift.main.sra_gen_main_loop>
0x000091        092064E2                 r0 = Null + M[$M.cbops.rate_adjustment_and_shift.main.dither_function];
0x000092        E11000DC                 if NE call $M.cbops.rate_adjustment_and_shift.main.dither_preset;
0x000093        E1F0002A                 call $M.cbops.rate_adjustment_and_shift.main.sra_resample;
0x000094        509000CF                 M1 = Null + r10;
0x000095        02002100                 Null = Null + Null, r0 = M[I0,M1];
0x000096        F138000D                 r1 = M[FP + 0xd];
0x000097        005A003F                 r3 = r8 + r1;
0x000098        4430000F                 r1 = Null + I0;
0x000099        D5350006                 M[r3 + 6] = r1;
0x00009A        092064E2                 r0 = Null + M[$M.cbops.rate_adjustment_and_shift.main.dither_function];
0x00009B        E11000DC                 if NE call $M.cbops.rate_adjustment_and_shift.main.run_dither_function;
0x00009C        F138000D                 r1 = M[FP + 0xd];
0x00009D        DD100010                 if NE jump $M.cbops.rate_adjustment_and_shift.main.finished;
0x00009E        F1380000                 r1 = M[FP + 0];
0x00009F        DD40000E                 if NEG jump $M.cbops.rate_adjustment_and_shift.main.finished;
0x0000A0        D13A0007                 r1 = M[r8 + 7];
0x0000A1        5000003F                 I0 = Null + r1;
0x0000A2        F1380001                 r1 = M[FP + 0x1];
0x0000A3        5040003F                 I4 = Null + r1;
0x0000A4        F1380002                 r1 = M[FP + 0x2];
0x0000A5        50E0003F                 L4 = Null + r1;
0x0000A6        F1380004                 r1 = M[FP + 0x4];
0x0000A7        5050003F                 I5 = Null + r1;
0x0000A8        F1380005                 r1 = M[FP + 0x5];
0x0000A9        50F0003F                 L5 = Null + r1;
0x0000AA        E430002F                 r1 = Null + 1;
0x0000AB        F13C000D                 M[FP + 0xd] = r1;
0x0000AC        DDF0FFE5                 jump $M.cbops.rate_adjustment_and_shift.main.sra_gen_main_loop;

 <$M.cbops.rate_adjustment_and_shift.main.finished>
0x0000AD        D56A000D                 M[r8 + 13] = r4;
0x0000AE        6420009F                 r0 = Null - M1;
0x0000AF        D52A000E                 M[r8 + 14] = r0;
0x0000B0        51F00000                 L5 = Null + 0;
0x0000B1        51E00000                 L4 = Null + 0;
0x0000B2        51C00000                 L0 = Null + 0;
0x0000B3        51D00000                 L1 = Null + 0;
0x0000B4        4420007F                 r0 = Null + I7;
0x0000B5        192094DE                 M[$cbops.amount_written] = r0 + Null;
0x0000B6        094064DE                 r2 = Null + M[$cbops.amount_to_use];
0x0000B7        D13AFFFE                 r1 = M[r8 + -2];
0x0000B8        E403002F                 Null = r1 + 1;
0x0000B9        00420001                 if NE r2 = r0 + Null;
0x0000BA        194064DE                 M[$cbops.amount_to_use] = r2 + Null;
0x0000BB        F1F64000                 SP = SP - 0xf, popm <FP>;
0x0000BC        DDF0160D                 jump $pop_rLink_and_rts;

 <$M.cbops.rate_adjustment_and_shift.main.sra_resample>
0x0000BD        D17A000C                 r5 = M[r8 + 12];
0x0000BE        F1670008                 r4 = FP + 8;
0x0000BF        5020006F                 I2 = Null + r4;
0x0000C0        D16A000D                 r4 = M[r8 + 13];
0x0000C1        01800015                 r6 = Null + 21;
0x0000C2        70A0008F                 M2 = Null - r6;
0x0000C3        5080008F                 M0 = Null + r6;
0x0000C4        CC16008F                 rMAC = r4 * r6 (SS);
0x0000C5        F1C8000C                 r10 = M[FP + 0xc];
0x0000C6        51700000                 I7 = Null + 0;
0x0000C7        D12A000E                 r0 = M[r8 + 14];
0x0000C8        DD000003                 if EQ jump $M.cbops.rate_adjustment_and_shift.main.start_gen;
0x0000C9        03000031                 Null = Null + Null, r1 = M[I4,1];
0x0000CA        67CBB100                 r10 = r10 - M3, M[I0,1] = r1;

 <$M.cbops.rate_adjustment_and_shift.main.start_gen>
0x0000CB        690C0024                 Null = L0 - 36;
0x0000CC        DD00003F                 if EQ jump $M.cbops.rate_adjustment_and_shift.main.run_high_quality_gen_loop;
0x0000CD        690C0001                 Null = L0 - 1;
0x0000CE        DD000096                 if EQ jump $M.cbops.rate_adjustment_and_shift.main.run_interp_only_loop;
0x0000CF        E5F00039                 do $M.cbops.rate_adjustment_and_shift.main.sra_gen_loop;
0x0000D0        8D510018                 r3 = rMAC LSHIFT 24;
0x0000D1        8D55007F                 r3 = r3 LSHIFT -1;
0x0000D2        8D410000                 r2 = rMAC LSHIFT 0;
0x0000D3        5863004F                 I6 = I3 + r2;
0x0000D4        6524FFEA                 r0 = -22 - r2;
0x0000D5        7092004F                 M1 = r0 - r2;
0x0000D6        5810000F                 I1 = I0 + Null;
0x0000D7        2211273A                 rMAC = rMAC - rMAC, r0 = M[I1,M3], r1 = M[I6,M2];
0x0000D8        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x0000D9        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x0000DA        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x0000DB        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x0000DC        BE232739                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M1];
0x0000DD        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0000DE        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0000DF        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0000E0        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0000E1        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0000E2        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0000E3        BF230030                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I4,0];
0x0000E4        79990002                 M1 = M1 - 2;
0x0000E5        474B9800                 r2 = r2 + M3, M[I2,0] = rMAC;
0x0000E6        DD400003                 if NEG jump $M.cbops.rate_adjustment_and_shift.main.no_extra_load;
0x0000E7        71980001                 M1 = r6 - 1;
0x0000E8        2040B78F                 r2 = Null - r6, M[I1,M3] = r1;

 <$M.cbops.rate_adjustment_and_shift.main.no_extra_load>
0x0000E9        5863004F                 I6 = I3 + r2;
0x0000EA        5E7B273A                 I7 = I7 + M3, r0 = M[I1,M3], r1 = M[I6,M2];
0x0000EB        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x0000EC        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x0000ED        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x0000EE        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x0000EF        AE232739                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M1];
0x0000F0        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0000F1        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0000F2        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0000F3        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0000F4        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0000F5        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0000F6        AF233B00                 rMAC = rMAC + r0 * r1 (SS), r1 = M[I2,-1];

 <$M.cbops.rate_adjustment_and_shift.main.continue_resample_proc>
0x0000F7        CF150051                 rMAC = rMAC * r3 (SS), r3 = M[I4,1];
0x0000F8        FD00007F BD13FFFF        rMAC = rMAC - r1 * 0.99999988079071045 (SS);
0x0000FA        00312B0F                 r1 = rMAC + Null, r0 = M[I2,M3];
0x0000FB        93320000                 r1 = r1 ASHIFT r0;

 <$M.cbops.rate_adjustment_and_shift.main.update_ratio>
0x0000FC        226700B7                 r4 = r4 - r5, M[I5,M3] = r1;
0x0000FD        DD40000A                 if NEG jump $M.cbops.rate_adjustment_and_shift.main.no_extra_copy;
0x0000FE        FD000080 01660000        r4 = r4 + -8388608;
0x000100        0007000F                 Null = r5 + Null;
0x000101        DD400004                 if NEG jump $M.cbops.rate_adjustment_and_shift.main.is_neg_rate;

 <$M.cbops.rate_adjustment_and_shift.main.is_pos_rate>
0x000102        03005353                 Null = Null + Null, r3 = M[I0,-1], r3 = M[I4,-1];
0x000103        47CB5000                 r10 = r10 + M3, r3 = M[I0,0];
0x000104        DDF00003                 jump $M.cbops.rate_adjustment_and_shift.main.no_extra_copy;

 <$M.cbops.rate_adjustment_and_shift.main.is_neg_rate>
0x000105        66CBD353                 r10 = r10 - M3, M[I0,M3] = r3, r3 = M[I4,M3];
0x000106        DDD00003                 if LE jump $M.cbops.rate_adjustment_and_shift.main.end_rts;

 <$M.cbops.rate_adjustment_and_shift.main.no_extra_copy>
0x000107        CC16D38F                 rMAC = r4 * r6 (SS), M[I0,M3] = r3;

 <$M.cbops.rate_adjustment_and_shift.main.sra_gen_loop>
0x000108        DC0D000F                 rts;

 <$M.cbops.rate_adjustment_and_shift.main.end_rts>
0x000109        66CBD300                 r10 = r10 - M3, M[I0,M3] = r3;
0x00010A        DC0D000F                 rts;

 <$M.cbops.rate_adjustment_and_shift.main.run_high_quality_gen_loop>
0x00010B        E5F0FFFD                 do $M.cbops.rate_adjustment_and_shift.main.sra_gen_loop;
0x00010C        8D510018                 r3 = rMAC LSHIFT 24;
0x00010D        8D55007F                 r3 = r3 LSHIFT -1;
0x00010E        8D410000                 r2 = rMAC LSHIFT 0;
0x00010F        5863004F                 I6 = I3 + r2;
0x000110        6524FFEA                 r0 = -22 - r2;
0x000111        7092004F                 M1 = r0 - r2;
0x000112        5810000F                 I1 = I0 + Null;
0x000113        2211273A                 rMAC = rMAC - rMAC, r0 = M[I1,M3], r1 = M[I6,M2];
0x000114        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000115        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000116        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000117        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000118        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000119        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x00011A        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x00011B        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x00011C        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x00011D        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x00011E        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x00011F        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000120        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000121        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000122        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000123        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000124        BE232739                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M1];
0x000125        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000126        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000127        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000128        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000129        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x00012A        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x00012B        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x00012C        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x00012D        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x00012E        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x00012F        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000130        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000131        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000132        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000133        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000134        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000135        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000136        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000137        BF230030                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I4,0];
0x000138        79990002                 M1 = M1 - 2;
0x000139        474B9800                 r2 = r2 + M3, M[I2,0] = rMAC;
0x00013A        DD400003                 if NEG jump $M.cbops.rate_adjustment_and_shift.main.no_extra_load_hd;
0x00013B        71980001                 M1 = r6 - 1;
0x00013C        2040B78F                 r2 = Null - r6, M[I1,M3] = r1;

 <$M.cbops.rate_adjustment_and_shift.main.no_extra_load_hd>
0x00013D        5863004F                 I6 = I3 + r2;
0x00013E        5E7B273A                 I7 = I7 + M3, r0 = M[I1,M3], r1 = M[I6,M2];
0x00013F        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000140        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000141        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000142        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000143        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000144        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000145        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000146        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000147        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000148        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000149        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x00014A        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x00014B        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x00014C        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x00014D        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x00014E        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x00014F        AE232739                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M1];
0x000150        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000151        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000152        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000153        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000154        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000155        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000156        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000157        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000158        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000159        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x00015A        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x00015B        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x00015C        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x00015D        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x00015E        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x00015F        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000160        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000161        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000162        AF233B00                 rMAC = rMAC + r0 * r1 (SS), r1 = M[I2,-1];
0x000163        DDF0FF94                 jump $M.cbops.rate_adjustment_and_shift.main.continue_resample_proc;

 <$M.cbops.rate_adjustment_and_shift.main.run_interp_only_loop>
0x000164        F1880007                 r6 = M[FP + 0x7];
0x000165        E5F0FFA3                 do $M.cbops.rate_adjustment_and_shift.main.sra_gen_loop;
0x000166        5E7B0053                 I7 = I7 + M3, r3 = M[I4,M3];
0x000167        CF563000                 rMAC = r3 * r4 (SS), r1 = M[I0,0];
0x000168        BC13006F                 rMAC = rMAC - r1 * r4 (SS);
0x000169        FD00007F AD15FFFF        rMAC = rMAC + r3 * 0.99999988079071045 (SS);
0x00016B        0031000F                 r1 = rMAC + Null;
0x00016C        93380000                 r1 = r1 ASHIFT r6;
0x00016D        DDF0FF8F                 jump $M.cbops.rate_adjustment_and_shift.main.update_ratio;

 <$M.cbops.rate_adjustment_and_shift.main.dither_preset>
0x00016E        4420005F                 r0 = Null + I5;
0x00016F        F12C0009                 M[FP + 0x9] = r0;
0x000170        442000FF                 r0 = Null + L5;
0x000171        F12C000A                 M[FP + 0xa] = r0;
0x000172        51F00000                 L5 = Null + 0;
0x000173        FD0000FF 51503780        I5 = Null + -51328;
0x000175        F10C0007                 M[FP + 0x7] = Null;
0x000176        DC0D000F                 rts;

 <$M.cbops.rate_adjustment_and_shift.main.run_dither_function>
0x000177        094094E2                 r2 = Null + M[$M.cbops.rate_adjustment_and_shift.main.rand_num];
0x000178        FD0000FF 51203780        I2 = Null + -51328;
0x00017A        44C0007F                 r10 = Null + I7;
0x00017B        F1380009                 r1 = M[FP + 0x9];
0x00017C        5050003F                 I5 = Null + r1;
0x00017D        F138000A                 r1 = M[FP + 0xa];
0x00017E        50F0003F                 L5 = Null + r1;
0x00017F        D19A0004                 r7 = M[r8 + 4];
0x000180        FD00007F 0170FFFF        r5 = Null + 8388607;
0x000182        6589FFE8                 r6 = -24 - r7;
0x000183        9087008F                 r6 = r5 ASHIFT r6;
0x000184        51A00011                 M2 = Null + 17;
0x000185        DC02000F                 jump r0;

 <$sra.tpdf_dither_func>
0x000186        01503555                 r3 = Null + 13653;
0x000187        FD0000FF 51603751        I6 = Null + -51375;
0x000189        03001900                 Null = Null + Null, rMAC = M[I2,1];
0x00018A        AC14008F                 rMAC = rMAC + r2 * r6 (SS);
0x00018B        E5F00009                 do $M.cbops.rate_adjustment_and_shift.main.tpdf_dither_loop;
0x00018C        9B450000                 r2 = r2 * r3 (int);
0x00018D        474A0000                 r2 = r2 + M2;
0x00018E        AC14008F                 rMAC = rMAC + r2 * r6 (SS);
0x00018F        AC17008F                 rMAC = rMAC + r5 * r6 (SS);
0x000190        9B450098                 r2 = r2 * r3 (int), M[I6,0] = rMAC;
0x000191        474A0038                 r2 = r2 + M2, r1 = M[I6,0];
0x000192        93391900                 r1 = r1 ASHIFT r7, rMAC = M[I2,1];
0x000193        AF4800B5                 rMAC = rMAC + r2 * r6 (SS), M[I5,1] = r1;

 <$M.cbops.rate_adjustment_and_shift.main.tpdf_dither_loop>
0x000194        03001300                 Null = Null + Null, rMAC = M[I0,-1];
0x000195        194094E2                 M[$M.cbops.rate_adjustment_and_shift.main.rand_num] = r2 + Null;
0x000196        DC0D000F                 rts;

 <$sra.noiseshaped_dither_func>
0x000197        F3600000                 push r4;
0x000198        F168000D                 r4 = M[FP + 0xd];
0x000199        002A006F                 r0 = r8 + r4;
0x00019A        FD0000FF 19803758        M[0xff3758] = r6 + Null;
0x00019C        D1220010                 r0 = M[r0 + 16];
0x00019D        511201B8                 I1 = r0 + 440;
0x00019E        013201C0                 r1 = r0 + 448;
0x00019F        0006000F                 Null = r4 + Null;
0x0001A0        50100031                 if NE I1 = Null + r1;
0x0001A1        51D00005                 L1 = Null + 5;
0x0001A2        FD0000FF 51603752        I6 = Null + -51374;
0x0001A4        5180FFFA                 M0 = Null + -6;
0x0001A5        01603555                 r4 = Null + 13653;
0x0001A6        FD0000FF 19803751        M[0xff3751] = r6 + Null;
0x0001A8        95886000                 r6 = r6 * 0.75 (frac);
0x0001A9        E450003F                 r3 = Null - 1;
0x0001AA        2020009F                 r0 = Null - r7;
0x0001AB        93523400                 r3 = r3 ASHIFT r0, r1 = M[I1,0];
0x0001AC        E5F00011                 do $M.cbops.rate_adjustment_and_shift.main.shaped_dither_loop;
0x0001AD        9B461929                 r2 = r2 * r4 (int), rMAC = M[I2,1], r0 = M[I6,1];
0x0001AE        474AB700                 r2 = r2 + M2, M[I1,-1] = r1;
0x0001AF        BF323729                 rMAC = rMAC - r1 * r0 (SS), r1 = M[I1,-1], r0 = M[I6,1];
0x0001B0        BF323729                 rMAC = rMAC - r1 * r0 (SS), r1 = M[I1,-1], r0 = M[I6,1];
0x0001B1        BF323729                 rMAC = rMAC - r1 * r0 (SS), r1 = M[I1,-1], r0 = M[I6,1];
0x0001B2        BF323429                 rMAC = rMAC - r1 * r0 (SS), r1 = M[I1,0], r0 = M[I6,1];
0x0001B3        BC13002F                 rMAC = rMAC - r1 * r0 (SS);
0x0001B4        AF480098                 rMAC = rMAC + r2 * r6 (SS), M[I6,0] = rMAC;
0x0001B5        9B460029                 r2 = r2 * r4 (int), r0 = M[I6,1];
0x0001B6        474A0000                 r2 = r2 + M2;
0x0001B7        AE480038                 rMAC = rMAC + r2 * r6 (SS), r1 = M[I6,M0];
0x0001B8        AC17003F                 rMAC = rMAC + r5 * r1 (SS);
0x0001B9        8031005F                 r1 = rMAC AND r3;
0x0001BA        90E3009F                 rMAC = r1 ASHIFT r7;
0x0001BB        23320095                 r1 = r1 - r0, M[I5,1] = rMAC;
0x0001BC        9D330004                 r1 = r1 * 4 (int) (sat);

 <$M.cbops.rate_adjustment_and_shift.main.shaped_dither_loop>
0x0001BD        194094E2                 M[$M.cbops.rate_adjustment_and_shift.main.rand_num] = r2 + Null;
0x0001BE        0300B400                 Null = Null + Null, M[I1,0] = r1;
0x0001BF        F168000D                 r4 = M[FP + 0xd];
0x0001C0        002A006F                 r0 = r8 + r4;
0x0001C1        4430001F                 r1 = Null + I1;
0x0001C2        81330007                 r1 = r1 AND 0x7;
0x0001C3        D5320010                 M[r0 + 16] = r1;
0x0001C4        58DC000F                 L1 = L0 + Null;
0x0001C5        F3640000                 pop r4;
0x0001C6        DC0D000F                 rts;

 <$spkr_ctrl_system.process>
0x0001C7        F3D00000                 push rLink;
0x0001C8        D1290009                 r0 = M[r7 + 9];
0x0001C9        D3200000                 r0 = M[r0 + Null];
0x0001CA        D139000A                 r1 = M[r7 + 10];
0x0001CB        8002003F                 Null = r0 AND r1;
0x0001CC        DD1000EC                 if NE jump $M.spkr_ctrl_system.processing.bypass;
0x0001CD        D1A9000B                 r8 = M[r7 + 11];
0x0001CE        D1290000                 r0 = M[r7 + 0];
0x0001CF        E1F0012F                 call $M.spkr_ctrl_system.processing.get_ptrs;
0x0001D0        00C5000F                 r10 = r3 + Null;
0x0001D1        D1290008                 r0 = M[r7 + 8];
0x0001D2        5020002F                 I2 = Null + r0;
0x0001D3        D1290006                 r0 = M[r7 + 6];
0x0001D4        DD000008                 if EQ jump $M.spkr_ctrl_system.processing.clearBassBuffer;
0x0001D5        E1F00129                 call $M.spkr_ctrl_system.processing.get_ptrs;
0x0001D6        5000002F                 I0 = Null + r0;
0x0001D7        50C0003F                 L0 = Null + r1;
0x0001D8        E5F00003                 do $M.spkr_ctrl_system.processing.inputLFEcopyLoop;
0x0001D9        03002100                 Null = Null + Null, r0 = M[I0,1];
0x0001DA        0300A900                 Null = Null + Null, M[I2,1] = r0;

 <$M.spkr_ctrl_system.processing.inputLFEcopyLoop>
0x0001DB        DDF00004                 jump $M.spkr_ctrl_system.processing.bassChannelReadyForMixingLR;

 <$M.spkr_ctrl_system.processing.clearBassBuffer>
0x0001DC        01200000                 r0 = Null + 0;
0x0001DD        E5F00002                 do $M.spkr_ctrl_system.processing.bassChannelReadyForMixingLR;
0x0001DE        0300A900                 Null = Null + Null, M[I2,1] = r0;

 <$M.spkr_ctrl_system.processing.bassChannelReadyForMixingLR>
0x0001DF        D1290000                 r0 = M[r7 + 0];
0x0001E0        E1F0011E                 call $M.spkr_ctrl_system.processing.get_ptrs;
0x0001E1        5000002F                 I0 = Null + r0;
0x0001E2        50C0003F                 L0 = Null + r1;
0x0001E3        00C5000F                 r10 = r3 + Null;
0x0001E4        F3C00000                 push r10;
0x0001E5        D1290001                 r0 = M[r7 + 1];
0x0001E6        E1F00118                 call $M.spkr_ctrl_system.processing.get_ptrs;
0x0001E7        5040002F                 I4 = Null + r0;
0x0001E8        50E0003F                 L4 = Null + r1;
0x0001E9        D1290008                 r0 = M[r7 + 8];
0x0001EA        5020002F                 I2 = Null + r0;
0x0001EB        F3A00000                 push r8;
0x0001EC        D1AA0006                 r8 = M[r8 + 6];
0x0001ED        D15A000C                 r3 = M[r8 + 12];
0x0001EE        D16A000D                 r4 = M[r8 + 13];
0x0001EF        D17A000E                 r5 = M[r8 + 14];
0x0001F0        F3A40000                 pop r8;
0x0001F1        E5F00007                 do $M.spkr_ctrl_system.processing.createBassLoop;
0x0001F2        03002100                 Null = Null + Null, r0 = M[I0,1];
0x0001F3        CF250021                 rMAC = r0 * r3 (SS), r0 = M[I4,1];
0x0001F4        AF262800                 rMAC = rMAC + r0 * r4 (SS), r0 = M[I2,0];
0x0001F5        AC12007F                 rMAC = rMAC + r0 * r5 (SS);
0x0001F6        91210002                 r0 = rMAC ASHIFT 2;
0x0001F7        0300A900                 Null = Null + Null, M[I2,1] = r0;

 <$M.spkr_ctrl_system.processing.createBassLoop>
0x0001F8        F3640000                 pop r4;
0x0001F9        D12A0005                 r0 = M[r8 + 5];
0x0001FA        DD00000A                 if EQ jump $M.spkr_ctrl_system.processing.dontFilterBass;
0x0001FB        F1000600                 pushm <r7, r8>;
0x0001FC        0092000F                 r7 = r0 + Null;
0x0001FD        D1290000                 r0 = M[r7 + 0];
0x0001FE        5000002F                 I0 = Null + r0;
0x0001FF        5040002F                 I4 = Null + r0;
0x000200        51C00000                 L0 = Null + 0;
0x000201        51E00000                 L4 = Null + 0;
0x000202        E1F00B04                 call $audio_proc.hq_peq.process_op;
0x000203        F1040600                 popm <r7, r8>;

 <$M.spkr_ctrl_system.processing.dontFilterBass>
0x000204        D1290002                 r0 = M[r7 + 2];
0x000205        DD000025                 if EQ jump $M.spkr_ctrl_system.processing.dontCreateLeftPriOutput;
0x000206        D1290000                 r0 = M[r7 + 0];
0x000207        E1F000F7                 call $M.spkr_ctrl_system.processing.get_ptrs;
0x000208        5000002F                 I0 = Null + r0;
0x000209        50C0003F                 L0 = Null + r1;
0x00020A        00C5000F                 r10 = r3 + Null;
0x00020B        D1290001                 r0 = M[r7 + 1];
0x00020C        E1F000F2                 call $M.spkr_ctrl_system.processing.get_ptrs;
0x00020D        5040002F                 I4 = Null + r0;
0x00020E        50E0003F                 L4 = Null + r1;
0x00020F        D1290008                 r0 = M[r7 + 8];
0x000210        5020002F                 I2 = Null + r0;
0x000211        D1290002                 r0 = M[r7 + 2];
0x000212        005C000F                 r3 = r10 + Null;
0x000213        E1F014B4                 call $frmbuffer.set_frame_size;
0x000214        E1F000EA                 call $M.spkr_ctrl_system.processing.get_ptrs;
0x000215        5010002F                 I1 = Null + r0;
0x000216        50D0003F                 L1 = Null + r1;
0x000217        F3A00000                 push r8;
0x000218        D1AA0006                 r8 = M[r8 + 6];
0x000219        D15A0000                 r3 = M[r8 + 0];
0x00021A        D16A0001                 r4 = M[r8 + 1];
0x00021B        D17A0002                 r5 = M[r8 + 2];
0x00021C        F3A40000                 pop r8;
0x00021D        E5F00007                 do $M.spkr_ctrl_system.processing.createLeftPriOutLoop;
0x00021E        03002100                 Null = Null + Null, r0 = M[I0,1];
0x00021F        CF250021                 rMAC = r0 * r3 (SS), r0 = M[I4,1];
0x000220        AF262900                 rMAC = rMAC + r0 * r4 (SS), r0 = M[I2,1];
0x000221        AC12007F                 rMAC = rMAC + r0 * r5 (SS);
0x000222        91210002                 r0 = rMAC ASHIFT 2;
0x000223        0300A500                 Null = Null + Null, M[I1,1] = r0;

 <$M.spkr_ctrl_system.processing.createLeftPriOutLoop>
0x000224        D12A0001                 r0 = M[r8 + 1];
0x000225        DD000005                 if EQ jump $M.spkr_ctrl_system.processing.dontCreateLeftPriOutput;
0x000226        F1000600                 pushm <r7, r8>;
0x000227        0092000F                 r7 = r0 + Null;
0x000228        E1F00AD2                 call $audio_proc.hq_peq.process;
0x000229        F1040600                 popm <r7, r8>;

 <$M.spkr_ctrl_system.processing.dontCreateLeftPriOutput>
0x00022A        D1290003                 r0 = M[r7 + 3];
0x00022B        DD000025                 if EQ jump $M.spkr_ctrl_system.processing.dontCreateRightPriOutput;
0x00022C        D1290000                 r0 = M[r7 + 0];
0x00022D        E1F000D1                 call $M.spkr_ctrl_system.processing.get_ptrs;
0x00022E        5000002F                 I0 = Null + r0;
0x00022F        50C0003F                 L0 = Null + r1;
0x000230        00C5000F                 r10 = r3 + Null;
0x000231        D1290001                 r0 = M[r7 + 1];
0x000232        E1F000CC                 call $M.spkr_ctrl_system.processing.get_ptrs;
0x000233        5040002F                 I4 = Null + r0;
0x000234        50E0003F                 L4 = Null + r1;
0x000235        D1290008                 r0 = M[r7 + 8];
0x000236        5020002F                 I2 = Null + r0;
0x000237        D1290003                 r0 = M[r7 + 3];
0x000238        005C000F                 r3 = r10 + Null;
0x000239        E1F0148E                 call $frmbuffer.set_frame_size;
0x00023A        E1F000C4                 call $M.spkr_ctrl_system.processing.get_ptrs;
0x00023B        5010002F                 I1 = Null + r0;
0x00023C        50D0003F                 L1 = Null + r1;
0x00023D        F3A00000                 push r8;
0x00023E        D1AA0006                 r8 = M[r8 + 6];
0x00023F        D15A0003                 r3 = M[r8 + 3];
0x000240        D16A0004                 r4 = M[r8 + 4];
0x000241        D17A0005                 r5 = M[r8 + 5];
0x000242        F3A40000                 pop r8;
0x000243        E5F00007                 do $M.spkr_ctrl_system.processing.createRightPriOutLoop;
0x000244        03002100                 Null = Null + Null, r0 = M[I0,1];
0x000245        CF250021                 rMAC = r0 * r3 (SS), r0 = M[I4,1];
0x000246        AF262900                 rMAC = rMAC + r0 * r4 (SS), r0 = M[I2,1];
0x000247        AC12007F                 rMAC = rMAC + r0 * r5 (SS);
0x000248        91210002                 r0 = rMAC ASHIFT 2;
0x000249        0300A500                 Null = Null + Null, M[I1,1] = r0;

 <$M.spkr_ctrl_system.processing.createRightPriOutLoop>
0x00024A        D12A0002                 r0 = M[r8 + 2];
0x00024B        DD000005                 if EQ jump $M.spkr_ctrl_system.processing.dontCreateRightPriOutput;
0x00024C        F1000600                 pushm <r7, r8>;
0x00024D        0092000F                 r7 = r0 + Null;
0x00024E        E1F00AAC                 call $audio_proc.hq_peq.process;
0x00024F        F1040600                 popm <r7, r8>;

 <$M.spkr_ctrl_system.processing.dontCreateRightPriOutput>
0x000250        D1290004                 r0 = M[r7 + 4];
0x000251        DD000025                 if EQ jump $M.spkr_ctrl_system.processing.dontCreateLeftSecOutput;
0x000252        D1290000                 r0 = M[r7 + 0];
0x000253        E1F000AB                 call $M.spkr_ctrl_system.processing.get_ptrs;
0x000254        5000002F                 I0 = Null + r0;
0x000255        50C0003F                 L0 = Null + r1;
0x000256        00C5000F                 r10 = r3 + Null;
0x000257        D1290001                 r0 = M[r7 + 1];
0x000258        E1F000A6                 call $M.spkr_ctrl_system.processing.get_ptrs;
0x000259        5040002F                 I4 = Null + r0;
0x00025A        50E0003F                 L4 = Null + r1;
0x00025B        D1290008                 r0 = M[r7 + 8];
0x00025C        5020002F                 I2 = Null + r0;
0x00025D        D1290004                 r0 = M[r7 + 4];
0x00025E        005C000F                 r3 = r10 + Null;
0x00025F        E1F01468                 call $frmbuffer.set_frame_size;
0x000260        E1F0009E                 call $M.spkr_ctrl_system.processing.get_ptrs;
0x000261        5010002F                 I1 = Null + r0;
0x000262        50D0003F                 L1 = Null + r1;
0x000263        F3A00000                 push r8;
0x000264        D1AA0006                 r8 = M[r8 + 6];
0x000265        D15A0006                 r3 = M[r8 + 6];
0x000266        D16A0007                 r4 = M[r8 + 7];
0x000267        D17A0008                 r5 = M[r8 + 8];
0x000268        F3A40000                 pop r8;
0x000269        E5F00007                 do $M.spkr_ctrl_system.processing.createLeftSecOutLoop;
0x00026A        03002100                 Null = Null + Null, r0 = M[I0,1];
0x00026B        CF250021                 rMAC = r0 * r3 (SS), r0 = M[I4,1];
0x00026C        AF262900                 rMAC = rMAC + r0 * r4 (SS), r0 = M[I2,1];
0x00026D        AC12007F                 rMAC = rMAC + r0 * r5 (SS);
0x00026E        91210002                 r0 = rMAC ASHIFT 2;
0x00026F        0300A500                 Null = Null + Null, M[I1,1] = r0;

 <$M.spkr_ctrl_system.processing.createLeftSecOutLoop>
0x000270        D12A0003                 r0 = M[r8 + 3];
0x000271        DD000005                 if EQ jump $M.spkr_ctrl_system.processing.dontCreateLeftSecOutput;
0x000272        F1000600                 pushm <r7, r8>;
0x000273        0092000F                 r7 = r0 + Null;
0x000274        E1F00A86                 call $audio_proc.hq_peq.process;
0x000275        F1040600                 popm <r7, r8>;

 <$M.spkr_ctrl_system.processing.dontCreateLeftSecOutput>
0x000276        D1290005                 r0 = M[r7 + 5];
0x000277        DD000025                 if EQ jump $M.spkr_ctrl_system.processing.dontCreateRightSecOutput;
0x000278        D1290000                 r0 = M[r7 + 0];
0x000279        E1F00085                 call $M.spkr_ctrl_system.processing.get_ptrs;
0x00027A        5000002F                 I0 = Null + r0;
0x00027B        50C0003F                 L0 = Null + r1;
0x00027C        00C5000F                 r10 = r3 + Null;
0x00027D        D1290001                 r0 = M[r7 + 1];
0x00027E        E1F00080                 call $M.spkr_ctrl_system.processing.get_ptrs;
0x00027F        5040002F                 I4 = Null + r0;
0x000280        50E0003F                 L4 = Null + r1;
0x000281        D1290008                 r0 = M[r7 + 8];
0x000282        5020002F                 I2 = Null + r0;
0x000283        D1290005                 r0 = M[r7 + 5];
0x000284        005C000F                 r3 = r10 + Null;
0x000285        E1F01442                 call $frmbuffer.set_frame_size;
0x000286        E1F00078                 call $M.spkr_ctrl_system.processing.get_ptrs;
0x000287        5010002F                 I1 = Null + r0;
0x000288        50D0003F                 L1 = Null + r1;
0x000289        F3A00000                 push r8;
0x00028A        D1AA0006                 r8 = M[r8 + 6];
0x00028B        D15A0009                 r3 = M[r8 + 9];
0x00028C        D16A000A                 r4 = M[r8 + 10];
0x00028D        D17A000B                 r5 = M[r8 + 11];
0x00028E        F3A40000                 pop r8;
0x00028F        E5F00007                 do $M.spkr_ctrl_system.processing.createRightSecOutLoop;
0x000290        03002100                 Null = Null + Null, r0 = M[I0,1];
0x000291        CF250021                 rMAC = r0 * r3 (SS), r0 = M[I4,1];
0x000292        AF262900                 rMAC = rMAC + r0 * r4 (SS), r0 = M[I2,1];
0x000293        AC12007F                 rMAC = rMAC + r0 * r5 (SS);
0x000294        91210002                 r0 = rMAC ASHIFT 2;
0x000295        0300A500                 Null = Null + Null, M[I1,1] = r0;

 <$M.spkr_ctrl_system.processing.createRightSecOutLoop>
0x000296        D12A0004                 r0 = M[r8 + 4];
0x000297        DD000005                 if EQ jump $M.spkr_ctrl_system.processing.dontCreateRightSecOutput;
0x000298        F1000600                 pushm <r7, r8>;
0x000299        0092000F                 r7 = r0 + Null;
0x00029A        E1F00A60                 call $audio_proc.hq_peq.process;
0x00029B        F1040600                 popm <r7, r8>;

 <$M.spkr_ctrl_system.processing.dontCreateRightSecOutput>
0x00029C        D1290007                 r0 = M[r7 + 7];
0x00029D        DD000015                 if EQ jump $M.spkr_ctrl_system.processing.createSubOutLoop;
0x00029E        D1290000                 r0 = M[r7 + 0];
0x00029F        E1F0005F                 call $M.spkr_ctrl_system.processing.get_ptrs;
0x0002A0        00C5000F                 r10 = r3 + Null;
0x0002A1        D1290008                 r0 = M[r7 + 8];
0x0002A2        5020002F                 I2 = Null + r0;
0x0002A3        D1290007                 r0 = M[r7 + 7];
0x0002A4        005C000F                 r3 = r10 + Null;
0x0002A5        E1F01422                 call $frmbuffer.set_frame_size;
0x0002A6        E1F00058                 call $M.spkr_ctrl_system.processing.get_ptrs;
0x0002A7        5010002F                 I1 = Null + r0;
0x0002A8        50D0003F                 L1 = Null + r1;
0x0002A9        F3A00000                 push r8;
0x0002AA        D1AA0006                 r8 = M[r8 + 6];
0x0002AB        D15A000F                 r3 = M[r8 + 15];
0x0002AC        F3A40000                 pop r8;
0x0002AD        E5F00005                 do $M.spkr_ctrl_system.processing.createSubOutLoop;
0x0002AE        03002900                 Null = Null + Null, r0 = M[I2,1];
0x0002AF        CC12005F                 rMAC = r0 * r3 (SS);
0x0002B0        91210002                 r0 = rMAC ASHIFT 2;
0x0002B1        0300A500                 Null = Null + Null, M[I1,1] = r0;

 <$M.spkr_ctrl_system.processing.createSubOutLoop>
0x0002B2        51C00000                 L0 = Null + 0;
0x0002B3        51D00000                 L1 = Null + 0;
0x0002B4        51E00000                 L4 = Null + 0;
0x0002B5        51F00000                 L5 = Null + 0;
0x0002B6        F3D40000                 pop rLink;
0x0002B7        DC0D000F                 rts;

 <$M.spkr_ctrl_system.processing.bypass>
0x0002B8        D1290000                 r0 = M[r7 + 0];
0x0002B9        E1F00045                 call $M.spkr_ctrl_system.processing.get_ptrs;
0x0002BA        5000002F                 I0 = Null + r0;
0x0002BB        50C0003F                 L0 = Null + r1;
0x0002BC        00C5000F                 r10 = r3 + Null;
0x0002BD        D1290001                 r0 = M[r7 + 1];
0x0002BE        E1F00040                 call $M.spkr_ctrl_system.processing.get_ptrs;
0x0002BF        5040002F                 I4 = Null + r0;
0x0002C0        50E0003F                 L4 = Null + r1;
0x0002C1        D1290002                 r0 = M[r7 + 2];
0x0002C2        005C000F                 r3 = r10 + Null;
0x0002C3        E1F01404                 call $frmbuffer.set_frame_size;
0x0002C4        E1F0003A                 call $M.spkr_ctrl_system.processing.get_ptrs;
0x0002C5        5010002F                 I1 = Null + r0;
0x0002C6        50D0003F                 L1 = Null + r1;
0x0002C7        D1290003                 r0 = M[r7 + 3];
0x0002C8        005C000F                 r3 = r10 + Null;
0x0002C9        E1F013FE                 call $frmbuffer.set_frame_size;
0x0002CA        E1F00034                 call $M.spkr_ctrl_system.processing.get_ptrs;
0x0002CB        5050002F                 I5 = Null + r0;
0x0002CC        50F0003F                 L5 = Null + r1;
0x0002CD        F3C00000                 push r10;
0x0002CE        E5F00003                 do $M.spkr_ctrl_system.processing.copyLRinToLRoutLoop;
0x0002CF        03002131                 Null = Null + Null, r0 = M[I0,1], r1 = M[I4,1];
0x0002D0        0300A5B5                 Null = Null + Null, M[I1,1] = r0, M[I5,1] = r1;

 <$M.spkr_ctrl_system.processing.copyLRinToLRoutLoop>
0x0002D1        F3C40000                 pop r10;
0x0002D2        D1290007                 r0 = M[r7 + 7];
0x0002D3        DD000013                 if EQ jump $M.spkr_ctrl_system.processing.bypassClearSubOutputLoop;
0x0002D4        005C000F                 r3 = r10 + Null;
0x0002D5        E1F013F2                 call $frmbuffer.set_frame_size;
0x0002D6        E1F00028                 call $M.spkr_ctrl_system.processing.get_ptrs;
0x0002D7        00C5000F                 r10 = r3 + Null;
0x0002D8        5010002F                 I1 = Null + r0;
0x0002D9        50D0003F                 L1 = Null + r1;
0x0002DA        D1290006                 r0 = M[r7 + 6];
0x0002DB        DD000008                 if EQ jump $M.spkr_ctrl_system.processing.bypassClearSubOutput;
0x0002DC        E1F00022                 call $M.spkr_ctrl_system.processing.get_ptrs;
0x0002DD        5000002F                 I0 = Null + r0;
0x0002DE        50C0003F                 L0 = Null + r1;
0x0002DF        E5F00003                 do $M.spkr_ctrl_system.processing.bypassLFEcopyLoop;
0x0002E0        03002100                 Null = Null + Null, r0 = M[I0,1];
0x0002E1        0300A500                 Null = Null + Null, M[I1,1] = r0;

 <$M.spkr_ctrl_system.processing.bypassLFEcopyLoop>
0x0002E2        DDF00004                 jump $M.spkr_ctrl_system.processing.bypassClearSubOutputLoop;

 <$M.spkr_ctrl_system.processing.bypassClearSubOutput>
0x0002E3        01200000                 r0 = Null + 0;
0x0002E4        E5F00002                 do $M.spkr_ctrl_system.processing.bypassClearSubOutputLoop;
0x0002E5        0300A500                 Null = Null + Null, M[I1,1] = r0;

 <$M.spkr_ctrl_system.processing.bypassClearSubOutputLoop>
0x0002E6        D1290004                 r0 = M[r7 + 4];
0x0002E7        DD000008                 if EQ jump $M.spkr_ctrl_system.processing.bypassClearLeftSecOutputLoop;
0x0002E8        E1F00016                 call $M.spkr_ctrl_system.processing.get_ptrs;
0x0002E9        00C5000F                 r10 = r3 + Null;
0x0002EA        5010002F                 I1 = Null + r0;
0x0002EB        50D0003F                 L1 = Null + r1;
0x0002EC        01200000                 r0 = Null + 0;
0x0002ED        E5F00002                 do $M.spkr_ctrl_system.processing.bypassClearLeftSecOutputLoop;
0x0002EE        0300A500                 Null = Null + Null, M[I1,1] = r0;

 <$M.spkr_ctrl_system.processing.bypassClearLeftSecOutputLoop>
0x0002EF        D1290005                 r0 = M[r7 + 5];
0x0002F0        DD000008                 if EQ jump $M.spkr_ctrl_system.processing.bypassClearRightSecOutputLoop;
0x0002F1        E1F0000D                 call $M.spkr_ctrl_system.processing.get_ptrs;
0x0002F2        00C5000F                 r10 = r3 + Null;
0x0002F3        5010002F                 I1 = Null + r0;
0x0002F4        50D0003F                 L1 = Null + r1;
0x0002F5        01200000                 r0 = Null + 0;
0x0002F6        E5F00002                 do $M.spkr_ctrl_system.processing.bypassClearRightSecOutputLoop;
0x0002F7        0300A500                 Null = Null + Null, M[I1,1] = r0;

 <$M.spkr_ctrl_system.processing.bypassClearRightSecOutputLoop>
0x0002F8        51C00000                 L0 = Null + 0;
0x0002F9        51D00000                 L1 = Null + 0;
0x0002FA        51E00000                 L4 = Null + 0;
0x0002FB        51F00000                 L5 = Null + 0;
0x0002FC        F3D40000                 pop rLink;
0x0002FD        DC0D000F                 rts;

 <$M.spkr_ctrl_system.processing.get_ptrs>
0x0002FE        F3D00000                 push rLink;
0x0002FF        E1F0139C                 call $frmbuffer.get_buffer;
0x000300        F3D40000                 pop rLink;
0x000301        DC0D000F                 rts;

 <$cbops.auto_upsample_and_mix.main>
0x000302        F3D00000                 push rLink;
0x000303        FD000000 0150BB80        r3 = Null + 48000;
0x000305        01601F40                 r4 = Null + 8000;
0x000306        D13A0006                 r1 = M[r8 + 6];
0x000307        D0330001                 if NE r1 = M[r1 + Null];
0x000308        00360000                 if EQ r1 = r4 + Null;
0x000309        D14A0004                 r2 = M[r8 + 4];
0x00030A        D0440001                 if NE r2 = M[r2 + Null];
0x00030B        00450000                 if EQ r2 = r3 + Null;
0x00030C        D12A000B                 r0 = M[r8 + 11];
0x00030D        2002003F                 Null = r0 - r1;
0x00030E        DD100004                 if NE jump $M.cbops.auto_upsample_and_mix.main.do_set_up;
0x00030F        D12A000A                 r0 = M[r8 + 10];
0x000310        2002004F                 Null = r0 - r2;
0x000311        DD00001E                 if EQ jump $M.cbops.auto_upsample_and_mix.main.set_up_done;

 <$M.cbops.auto_upsample_and_mix.main.do_set_up>
0x000312        D53A000B                 M[r8 + 11] = r1;
0x000313        D54A000A                 M[r8 + 10] = r2;
0x000314        D50A000C                 M[r8 + 12] = Null;
0x000315        FD00007F 0120FFFF        r0 = Null + 8388607;
0x000317        D52A0009                 M[r8 + 9] = r0;
0x000318        E460002F                 r4 = Null + 1;
0x000319        FD000073 95233333        r0 = r1 * 0.89999997615814209 (frac);
0x00031B        2004002F                 Null = r2 - r0;
0x00031C        DD400012                 if NEG jump $M.cbops.auto_upsample_and_mix.main.set_opmode;
0x00031D        01600002                 r4 = Null + 2;
0x00031E        E450002F                 r3 = Null + 1;
0x00031F        2003004F                 Null = r1 - r2;
0x000320        DD00000E                 if EQ jump $M.cbops.auto_upsample_and_mix.main.set_opmode;
0x000321        00500004                 if NEG r3 = Null + Null;
0x000322        2033004C                 if GT r1 = r1 - r2;
0x000323        D55A000C                 M[r8 + 12] = r3;
0x000324        0013000F                 rMAC = r1 + Null;
0x000325        91340001                 r1 = r2 ASHIFT 1;
0x000326        D9030000                 Div = rMAC / r1;
0x000327        D9200001                 r0 = DivResult;
0x000328        D9300002                 r1 = DivRemainder;
0x000329        E450002F                 r3 = Null + 1;
0x00032A        2003004F                 Null = r1 - r2;
0x00032B        00220055                 if POS r0 = r0 + r3;
0x00032C        D52A0009                 M[r8 + 9] = r0;
0x00032D        01600000                 r4 = Null + 0;

 <$M.cbops.auto_upsample_and_mix.main.set_opmode>
0x00032E        D56A0011                 M[r8 + 17] = r4;

 <$M.cbops.auto_upsample_and_mix.main.set_up_done>
0x00032F        D12A0002                 r0 = M[r8 + 2];
0x000330        E1F01337                 call $cbuffer.calc_amount_data;
0x000331        D13A0009                 r1 = M[r8 + 9];
0x000332        D15A000C                 r3 = M[r8 + 12];
0x000333        9B5C0000                 r3 = r3 * r10 (int);
0x000334        973C0000                 r1 = r1 * r10 (frac);
0x000335        E433002F                 r1 = r1 + 1;
0x000336        03350000                 r1 = r1 + r3;
0x000337        D14A0010                 r2 = M[r8 + 16];
0x000338        E444002F                 r2 = r2 + 1;
0x000339        D16A000F                 r4 = M[r8 + 15];
0x00033A        DD000004                 if EQ jump $M.cbops.auto_upsample_and_mix.main.no_tone;
0x00033B        0002000F                 Null = r0 + Null;
0x00033C        00400001                 if NE r2 = Null + Null;
0x00033D        DDF00003                 jump $M.cbops.auto_upsample_and_mix.main.set_new_state;

 <$M.cbops.auto_upsample_and_mix.main.no_tone>
0x00033E        2002003F                 Null = r0 - r1;
0x00033F        00400004                 if NEG r2 = Null + Null;

 <$M.cbops.auto_upsample_and_mix.main.set_new_state>
0x000340        0026000F                 r0 = r4 + Null;
0x000341        E450002F                 r3 = Null + 1;
0x000342        21040003                 Null = r2 - 3;
0x000343        88660055                 if POS r4 = r4 XOR r3;
0x000344        FD00007F 0130FFFF        r1 = Null + 8388607;
0x000346        D15A000E                 r3 = M[r8 + 14];
0x000347        2006002F                 Null = r4 - r0;
0x000348        00530001                 if NE r3 = r1 + Null;
0x000349        D54A0010                 M[r8 + 16] = r2;
0x00034A        D55A000E                 M[r8 + 14] = r3;
0x00034B        D56A000F                 M[r8 + 15] = r4;
0x00034C        8406005F                 Null = r4 OR r3;
0x00034D        DD00137C                 if EQ jump $pop_rLink_and_rts;
0x00034E        D12A0002                 r0 = M[r8 + 2];
0x00034F        E1F01337                 call $cbuffer.get_read_address_and_size;
0x000350        5000002F                 I0 = Null + r0;
0x000351        50C0003F                 L0 = Null + r1;
0x000352        51D0000C                 L1 = Null + 12;
0x000353        D12A0005                 r0 = M[r8 + 5];
0x000354        5010002F                 I1 = Null + r0;
0x000355        D12A0000                 r0 = M[r8 + 0];
0x000356        D038002F                 r1 = M[r6 + r0];
0x000357        5040003F                 I4 = Null + r1;
0x000358        D039002F                 r1 = M[r7 + r0];
0x000359        50E0003F                 L4 = Null + r1;
0x00035A        515094E3                 I5 = Null + -27421;
0x00035B        51F00001                 L5 = Null + 1;
0x00035C        D12A0001                 r0 = M[r8 + 1];
0x00035D        DD400005                 if NEG jump $M.cbops.auto_upsample_and_mix.main.no_right_channel;
0x00035E        D038002F                 r1 = M[r6 + r0];
0x00035F        5050003F                 I5 = Null + r1;
0x000360        D039002F                 r1 = M[r7 + r0];
0x000361        50F0003F                 L5 = Null + r1;

 <$M.cbops.auto_upsample_and_mix.main.no_right_channel>
0x000362        D16A0008                 r4 = M[r8 + 8];
0x000363        FD00007F 0150FFFF        r3 = Null + 8388607;
0x000365        D14A000E                 r2 = M[r8 + 14];
0x000366        DD000017                 if EQ jump $M.cbops.auto_upsample_and_mix.main.do_resample_mix;
0x000367        D10A000F                 Null = M[r8 + 15];
0x000368        DD100004                 if NE jump $M.cbops.auto_upsample_and_mix.main.do_soft_move;
0x000369        FD00007F 0160FFFF        r4 = Null + 8388607;
0x00036B        D15A0008                 r3 = M[r8 + 8];

 <$M.cbops.auto_upsample_and_mix.main.do_soft_move>
0x00036C        23560000                 r3 = r3 - r4;
0x00036D        FD00007F 0180FFFF        r6 = Null + 8388607;
0x00036F        FD000002 0170AAAB        r5 = Null + 174763;
0x000371        E5F00007                 do $M.cbops.auto_upsample_and_mix.main.soft_move_loop;
0x000372        CF450020                 rMAC = r2 * r3 (SS), r0 = M[I4,0];
0x000373        AC16008F                 rMAC = rMAC + r4 * r6 (SS);
0x000374        97210034                 r0 = r0 * rMAC (frac), r1 = M[I5,0];
0x000375        973100A1                 r1 = r1 * rMAC (frac), M[I4,1] = r0;
0x000376        234700B5                 r2 = r2 - r5, M[I5,1] = r1;
0x000377        00400004                 if NEG r2 = Null + Null;

 <$M.cbops.auto_upsample_and_mix.main.soft_move_loop>
0x000378        D54A000E                 M[r8 + 14] = r2;
0x000379        DDF01350                 jump $pop_rLink_and_rts;

 <$M.cbops.auto_upsample_and_mix.main.end_soft_move>
0x00037A        01400000                 r2 = Null + 0;
0x00037B        D54A000E                 M[r8 + 14] = r2;
0x00037C        DDF0134D                 jump $pop_rLink_and_rts;

 <$M.cbops.auto_upsample_and_mix.main.do_resample_mix>
0x00037D        D12A0011                 r0 = M[r8 + 17];
0x00037E        21020000                 Null = r0 - 0;
0x00037F        DD00001F                 if EQ jump $M.cbops.auto_upsample_and_mix.main.resampling_op;
0x000380        21020002                 Null = r0 - 2;
0x000381        DD000003                 if EQ jump $M.cbops.auto_upsample_and_mix.main.justmix_op;

 <$M.cbops.auto_upsample_and_mix.main.ignore_op>
0x000382        009C000F                 r7 = r10 + Null;
0x000383        DDF0006D                 jump $M.cbops.auto_upsample_and_mix.main.op_done;

 <$M.cbops.auto_upsample_and_mix.main.justmix_op>
0x000384        009C000F                 r7 = r10 + Null;
0x000385        D12A0002                 r0 = M[r8 + 2];
0x000386        E1F012E1                 call $cbuffer.calc_amount_data;
0x000387        E4C2005F                 r10 = MIN r0;
0x000388        204900CF                 r2 = r7 - r10;
0x000389        D16A0007                 r4 = M[r8 + 7];
0x00038A        D17A0008                 r5 = M[r8 + 8];
0x00038B        009C000F                 r7 = r10 + Null;
0x00038C        03002000                 Null = Null + Null, r0 = M[I0,0];
0x00038D        FD00007F 0180FFFF        r6 = Null + 8388607;
0x00038F        E5F00007                 do $M.cbops.auto_upsample_and_mix.main.just_mix_loop;
0x000390        9726A550                 r0 = r0 * r4 (frac), M[I1,1] = r0, r3 = M[I4,0];
0x000391        CF750034                 rMAC = r5 * r3 (SS), r1 = M[I5,0];
0x000392        AF285100                 rMAC = rMAC + r0 * r6 (SS), r3 = M[I0,1];
0x000393        CF730091                 rMAC = r5 * r1 (SS), M[I4,1] = rMAC;
0x000394        AF282000                 rMAC = rMAC + r0 * r6 (SS), r0 = M[I0,0];
0x000395        03000095                 Null = Null + Null, M[I5,1] = rMAC;

 <$M.cbops.auto_upsample_and_mix.main.just_mix_loop>
0x000396        00C4000F                 r10 = r2 + Null;
0x000397        01200000                 r0 = Null + 0;
0x000398        E5F00005                 do $M.cbops.auto_upsample_and_mix.main.just_mix_zero_loop;
0x000399        0300A550                 Null = Null + Null, M[I1,1] = r0, r3 = M[I4,0];
0x00039A        CF755134                 rMAC = r5 * r3 (SS), r3 = M[I0,1], r1 = M[I5,0];
0x00039B        CF730091                 rMAC = r5 * r1 (SS), M[I4,1] = rMAC;
0x00039C        03000095                 Null = Null + Null, M[I5,1] = rMAC;

 <$M.cbops.auto_upsample_and_mix.main.just_mix_zero_loop>
0x00039D        DDF00053                 jump $M.cbops.auto_upsample_and_mix.main.op_done;

 <$M.cbops.auto_upsample_and_mix.main.resampling_op>
0x00039E        D17A0003                 r5 = M[r8 + 3];
0x00039F        5137007E                 I3 = r5 + 126;
0x0003A0        D17A0009                 r5 = M[r8 + 9];
0x0003A1        D16A000D                 r4 = M[r8 + 13];
0x0003A2        51B00001                 M3 = Null + 1;
0x0003A3        01800015                 r6 = Null + 21;
0x0003A4        70A0008F                 M2 = Null - r6;
0x0003A5        5080008F                 M0 = Null + r6;
0x0003A6        01900000                 r7 = Null + 0;
0x0003A7        D10A000C                 Null = M[r8 + 12];
0x0003A8        DD000006                 if EQ jump $M.cbops.auto_upsample_and_mix.main.upsampling;

 <$M.cbops.auto_upsample_and_mix.main.downsampling>
0x0003A9        E5F00044                 do $M.cbops.auto_upsample_and_mix.main.fractinal_gen_loop;
0x0003AA        23112000                 rMAC = rMAC - rMAC, r0 = M[I0,0];
0x0003AB        469BA700                 r7 = r7 + M3, M[I1,M3] = r0;
0x0003AC        02009300                 Null = Null + Null, M[I0,M3] = rMAC;
0x0003AD        DDF00002                 jump $M.cbops.auto_upsample_and_mix.main.start_norm;

 <$M.cbops.auto_upsample_and_mix.main.upsampling>
0x0003AE        E5F0003F                 do $M.cbops.auto_upsample_and_mix.main.fractinal_gen_loop;

 <$M.cbops.auto_upsample_and_mix.main.start_norm>
0x0003AF        03670000                 r4 = r4 + r5;
0x0003B0        DD400006                 if NEG jump $M.cbops.auto_upsample_and_mix.main.no_extra_copy;
0x0003B1        23112000                 rMAC = rMAC - rMAC, r0 = M[I0,0];
0x0003B2        FD000080 21660000        r4 = r4 - -8388608;
0x0003B4        469BA700                 r7 = r7 + M3, M[I1,M3] = r0;
0x0003B5        02009300                 Null = Null + Null, M[I0,M3] = rMAC;

 <$M.cbops.auto_upsample_and_mix.main.no_extra_copy>
0x0003B6        CC16008F                 rMAC = r4 * r6 (SS);
0x0003B7        8D510018                 r3 = rMAC LSHIFT 24;
0x0003B8        8D55007F                 r3 = r3 LSHIFT -1;
0x0003B9        8D410000                 r2 = rMAC LSHIFT 0;
0x0003BA        5863004F                 I6 = I3 + r2;
0x0003BB        6524FFEA                 r0 = -22 - r2;
0x0003BC        7092004F                 M1 = r0 - r2;
0x0003BD        5871000F                 I7 = I1 + Null;
0x0003BE        2211273A                 rMAC = rMAC - rMAC, r0 = M[I1,M3], r1 = M[I6,M2];
0x0003BF        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x0003C0        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x0003C1        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x0003C2        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x0003C3        BE232739                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M1];
0x0003C4        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0003C5        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0003C6        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0003C7        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0003C8        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0003C9        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0003CA        BF233000                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I0,0];
0x0003CB        79990002                 M1 = M1 - 2;
0x0003CC        474B0000                 r2 = r2 + M3;
0x0003CD        DD400003                 if NEG jump $M.cbops.auto_upsample_and_mix.main.no_extra_load;
0x0003CE        71980001                 M1 = r6 - 1;
0x0003CF        2040B78F                 r2 = Null - r6, M[I1,M3] = r1;

 <$M.cbops.auto_upsample_and_mix.main.no_extra_load>
0x0003D0        5863004F                 I6 = I3 + r2;
0x0003D1        0041000F                 r2 = rMAC + Null;
0x0003D2        0200273A                 Null = Null + Null, r0 = M[I1,M3], r1 = M[I6,M2];
0x0003D3        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x0003D4        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x0003D5        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x0003D6        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x0003D7        AE232739                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M1];
0x0003D8        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0003D9        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0003DA        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0003DB        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0003DC        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0003DD        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0003DE        AC12003F                 rMAC = rMAC + r0 * r1 (SS);
0x0003DF        5817000F                 I1 = I7 + Null;
0x0003E0        CF152B00                 rMAC = rMAC * r3 (SS), r0 = M[I2,-1];
0x0003E1        FD00007F BD14FFFF        rMAC = rMAC - r2 * 0.99999988079071045 (SS);
0x0003E3        D14A0007                 r2 = M[r8 + 7];
0x0003E4        97410050                 r2 = r2 * rMAC (frac), r3 = M[I4,0];
0x0003E5        D12A0008                 r0 = M[r8 + 8];
0x0003E6        CF250034                 rMAC = r0 * r3 (SS), r1 = M[I5,0];
0x0003E7        FD00007F AD14FFFF        rMAC = rMAC + r2 * 0.99999988079071045 (SS);
0x0003E9        CF320091                 rMAC = r1 * r0 (SS), M[I4,1] = rMAC;
0x0003EA        FD00007F AD14FFFF        rMAC = rMAC + r2 * 0.99999988079071045 (SS);
0x0003EC        03000095                 Null = Null + Null, M[I5,1] = rMAC;

 <$M.cbops.auto_upsample_and_mix.main.fractinal_gen_loop>
0x0003ED        4420001F                 r0 = Null + I1;
0x0003EE        D52A0005                 M[r8 + 5] = r0;
0x0003EF        D56A000D                 M[r8 + 13] = r4;

 <$M.cbops.auto_upsample_and_mix.main.op_done>
0x0003F0        D12A0002                 r0 = M[r8 + 2];
0x0003F1        E1F01276                 call $cbuffer.calc_amount_data;
0x0003F2        2039002F                 r1 = r7 - r0;
0x0003F3        20990035                 if POS r7 = r7 - r1;
0x0003F4        D12A0002                 r0 = M[r8 + 2];
0x0003F5        E1F01291                 call $cbuffer.get_read_address_and_size;
0x0003F6        5000002F                 I0 = Null + r0;
0x0003F7        50C0003F                 L0 = Null + r1;
0x0003F8        5080009F                 M0 = Null + r7;
0x0003F9        02002000                 Null = Null + Null, r0 = M[I0,M0];
0x0003FA        4430000F                 r1 = Null + I0;
0x0003FB        D12A0002                 r0 = M[r8 + 2];
0x0003FC        E1F012A4                 call $cbuffer.set_read_address;

 <$M.cbops.auto_upsample_and_mix.main.end>
0x0003FD        51E00000                 L4 = Null + 0;
0x0003FE        51D00000                 L1 = Null + 0;
0x0003FF        51C00000                 L0 = Null + 0;
0x000400        51F00000                 L5 = Null + 0;
0x000401        DDF012C8                 jump $pop_rLink_and_rts;

 <$sra_tagtimes>
0x000402        F3D00000                 push rLink;
0x000403        0920006F                 r0 = Null + M[$app_config.io];
0x000404        21020005                 Null = r0 - 5;
0x000405        DD000006                 if EQ jump $M.sra_tagtimes.wired_fix;
0x000406        21020008                 Null = r0 - 8;
0x000407        DD000004                 if EQ jump $M.sra_tagtimes.wired_fix;
0x000408        2102000A                 Null = r0 - 10;
0x000409        DD000002                 if EQ jump $M.sra_tagtimes.wired_fix;
0x00040A        DDF00020                 jump $M.sra_tagtimes.calc_a2dp_fix_rate;

 <$M.sra_tagtimes.wired_fix>
0x00040B        0920578A                 r0 = Null + M[0x578a];
0x00040C        E1F0125B                 call $cbuffer.calc_amount_data;
0x00040D        0062000F                 r4 = r0 + Null;
0x00040E        0074000F                 r5 = r2 + Null;
0x00040F        093057A3                 r1 = Null + M[0x57a3];
0x000410        8D660008                 r4 = r4 LSHIFT 8;
0x000411        FD000001 CD1647AE        rMAC = r4 * 0.0099999904632568359 (SS);
0x000413        FD00007E AD13B852        rMAC = rMAC + r1 * 0.99000000953674316 (SS);
0x000415        191057A3                 M[0x57a3] = rMAC + Null;
0x000416        8D770009                 r5 = r5 LSHIFT 9;
0x000417        D9070000                 Div = rMAC / r5;
0x000418        D9600001                 r4 = DivResult;
0x000419        FD000059 6566999A        r4 = 5872026 - r4;
0x00041B        FD000019 2126999A        r0 = r4 - 1677722;
0x00041D        20660025                 if POS r4 = r4 - r0;
0x00041E        FD000019 0126999A        r0 = r4 + 1677722;
0x000420        20660024                 if NEG r4 = r4 - r0;
0x000421        FD000000 9526A3D7        r0 = r4 * 0.004999995231628418 (frac);
0x000423        0930579F                 r1 = Null + M[0x579f];
0x000424        2062003F                 r4 = r0 - r1;
0x000425        95660400                 r4 = r4 * 0.03125 (frac);
0x000426        03360000                 r1 = r1 + r4;
0x000427        1930579F                 M[0x579f] = r1 + Null;
0x000428        019020C5                 r7 = Null + 8389;
0x000429        DDF00058                 jump $M.sra_tagtimes.set_final_rate;

 <$M.sra_tagtimes.calc_a2dp_fix_rate>
0x00042A        09205789                 r0 = Null + M[0x5789];
0x00042B        E1F0123C                 call $cbuffer.calc_amount_data;
0x00042C        0072000F                 r5 = r0 + Null;

 <$M.sra_tagtimes.skip_port_data>
0x00042D        0920578A                 r0 = Null + M[0x578a];
0x00042E        E1F01239                 call $cbuffer.calc_amount_data;
0x00042F        03720000                 r5 = r5 + r0;
0x000430        0977579E                 r5 = r5 + M[0x579e];
0x000431        1970579E                 M[0x579e] = r5 + Null;
0x000432        0960579D                 r4 = Null + M[0x579d];
0x000433        E466002F                 r4 = r4 + 1;
0x000434        1960579D                 M[0x579d] = r4 + Null;
0x000435        09305788                 r1 = Null + M[$sra_struct];
0x000436        092094A0                 r0 = Null + M[$tag_averaging_fraction];
0x000437        97320000                 r1 = r1 * r0 (frac);
0x000438        2006003F                 Null = r4 - r1;
0x000439        DD400059                 if NEG jump $M.sra_tagtimes.no_update_on_buf_level;
0x00043A        019051EC                 r7 = Null + 20972;
0x00043B        090057A2                 Null = Null + M[0x57a2];
0x00043C        DD000002                 if EQ jump $M.sra_tagtimes.no_long_term;
0x00043D        019020C5                 r7 = Null + 8389;

 <$M.sra_tagtimes.no_long_term>
0x00043E        1900579D                 M[0x579d] = Null + Null;
0x00043F        1900579E                 M[0x579e] = Null + Null;
0x000440        0980579F                 r6 = Null + M[0x579f];
0x000441        9128007E                 r0 = r6 ASHIFT -2;
0x000442        3982579F                 M[0x579f] = r6 - r0;
0x000443        0920578A                 r0 = Null + M[0x578a];
0x000444        D3200000                 r0 = M[r0 + Null];
0x000445        9B260000                 r0 = r0 * r4 (int);
0x000446        91E7007F                 rMAC = r5 ASHIFT -1 (MI);
0x000447        D9020000                 Div = rMAC / r0;
0x000448        D9300001                 r1 = DivResult;
0x000449        096057A3                 r4 = Null + M[0x57a3];
0x00044A        193057A3                 M[0x57a3] = r1 + Null;
0x00044B        2063006F                 r4 = r1 - r4;
0x00044C        FD00007D 210370A4        Null = r1 - 8220836;
0x00044E        DD400009                 if NEG jump $M.sra_tagtimes.not_full;
0x00044F        21281062                 r0 = r6 - 4194;
0x000450        0932578C                 r1 = r0 + M[0x578c];
0x000451        20220034                 if NEG r0 = r0 - r1;
0x000452        FD000001 0132EB85        r1 = r0 + 125829;
0x000454        20220034                 if NEG r0 = r0 - r1;
0x000455        1920579F                 M[0x579f] = r0 + Null;
0x000456        DDF0002B                 jump $M.sra_tagtimes.set_final_rate;

 <$M.sra_tagtimes.not_full>
0x000457        FD00006C 2123CCCD        r0 = r1 - 7130317;
0x000459        DD400007                 if NEG jump $M.sra_tagtimes.check_for_empty;
0x00045A        FD0000FE 9522147B        r0 = r0 * -0.014999985694885254 (frac);
0x00045C        FD000001 010647AE        Null = r4 + 83886;
0x00045E        00280004                 if NEG r0 = r6 + Null;
0x00045F        DDF0001B                 jump $M.sra_tagtimes.fix_rate;

 <$M.sra_tagtimes.check_for_empty>
0x000460        FD00004C 2123CCCD        r0 = r1 - 5033165;
0x000462        DD50001F                 if POS jump $M.sra_tagtimes.set_final_rate;

 <$M.sra_tagtimes.handle_empty>
0x000463        FD000019 0142999A        r2 = r0 + 1677722;
0x000465        20220044                 if NEG r0 = r0 - r2;
0x000466        FD0000FB 9522851F        r0 = r0 * -0.034999966621398926 (frac);
0x000468        FD000006 21066666        Null = r4 - 419430;
0x00046A        00280005                 if POS r0 = r6 + Null;
0x00046B        FD000002 01468F5C        r2 = r4 + 167772;
0x00046D        DD50000A                 if POS jump $M.sra_tagtimes.no_extra;
0x00046E        FD000006 01546666        r3 = r2 + 419430;
0x000470        20440055                 if POS r2 = r2 - r3;
0x000471        FD0000FF 9544BE77        r2 = r2 * -0.001999974250793457 (frac);
0x000473        03480000                 r2 = r2 + r6;
0x000474        2004002F                 Null = r2 - r0;
0x000475        00240005                 if POS r0 = r2 + Null;
0x000476        03240000                 r0 = r0 + r2;

 <$M.sra_tagtimes.no_extra>
0x000477        FD000019 2103999A        Null = r1 - 1677722;
0x000479        00280004                 if NEG r0 = r6 + Null;

 <$M.sra_tagtimes.fix_rate>
0x00047A        0038009F                 r1 = r6 + r7;
0x00047B        2002003F                 Null = r0 - r1;
0x00047C        00230005                 if POS r0 = r1 + Null;
0x00047D        2038009F                 r1 = r6 - r7;
0x00047E        2002003F                 Null = r0 - r1;
0x00047F        00230004                 if NEG r0 = r1 + Null;
0x000480        1920579F                 M[0x579f] = r0 + Null;

 <$M.sra_tagtimes.set_final_rate>
0x000481        092057A0                 r0 = Null + M[0x57a0];
0x000482        0922579F                 r0 = r0 + M[0x579f];
0x000483        2932578C                 r1 = r0 - M[0x578c];
0x000484        20220035                 if POS r0 = r0 - r1;
0x000485        0932578C                 r1 = r0 + M[0x578c];
0x000486        20220034                 if NEG r0 = r0 - r1;
0x000487        FD000001 0132EB85        r1 = r0 + 125829;
0x000489        20220034                 if NEG r0 = r0 - r1;
0x00048A        09805799                 r6 = Null + M[0x5799];
0x00048B        0038009F                 r1 = r6 + r7;
0x00048C        2002003F                 Null = r0 - r1;
0x00048D        00230005                 if POS r0 = r1 + Null;
0x00048E        2038009F                 r1 = r6 - r7;
0x00048F        2002003F                 Null = r0 - r1;
0x000490        00230004                 if NEG r0 = r1 + Null;
0x000491        19205799                 M[0x5799] = r0 + Null;

 <$M.sra_tagtimes.no_update_on_buf_level>
0x000492        09205789                 r0 = Null + M[0x5789];
0x000493        E1F011D4                 call $cbuffer.calc_amount_data;
0x000494        0052000F                 r3 = r0 + Null;
0x000495        0920578F                 r0 = Null + M[0x578f];
0x000496        E422002F                 r0 = r0 + 1;
0x000497        0005000F                 Null = r3 + Null;
0x000498        00200001                 if NE r0 = Null + Null;
0x000499        1920578F                 M[0x578f] = r0 + Null;
0x00049A        21020190                 Null = r0 - 400;
0x00049B        DD400003                 if NEG jump $M.sra_tagtimes.no_reset_sra;
0x00049C        1900579F                 M[0x579f] = Null + Null;
0x00049D        DDF00022                 jump $reset_sra;

 <$M.sra_tagtimes.no_reset_sra>
0x00049E        09205790                 r0 = Null + M[0x5790];
0x00049F        0130064A                 r1 = Null + 1610;
0x0004A0        E422002F                 r0 = r0 + 1;
0x0004A1        2002003F                 Null = r0 - r1;
0x0004A2        00230005                 if POS r0 = r1 + Null;
0x0004A3        19205790                 M[0x5790] = r0 + Null;
0x0004A4        09205791                 r0 = Null + M[0x5791];
0x0004A5        D1224FFE                 r0 = M[r0 + 20478];
0x0004A6        DC02000F                 jump r0;

 <$M.sra_tagtimes.idle>
0x0004A7        09205790                 r0 = Null + M[0x5790];
0x0004A8        21020640                 Null = r0 - 1600;
0x0004A9        DD500002                 if POS jump $M.sra_tagtimes.start;
0x0004AA        DDF00014                 jump $M.sra_tagtimes.end;

 <$M.sra_tagtimes.start>
0x0004AB        0920578A                 r0 = Null + M[0x578a];
0x0004AC        E1F011DF                 call $cbuffer.get_write_address_and_size;
0x0004AD        19205792                 M[0x5792] = r0 + Null;
0x0004AE        E420002F                 r0 = Null + 1;
0x0004AF        19205791                 M[0x5791] = r0 + Null;
0x0004B0        19005794                 M[0x5794] = Null + Null;

 <$M.sra_tagtimes.counting>
0x0004B1        09205794                 r0 = Null + M[0x5794];
0x0004B2        E422002F                 r0 = r0 + 1;
0x0004B3        19205794                 M[0x5794] = r0 + Null;
0x0004B4        E422003F                 r0 = r0 - 1;
0x0004B5        29025788                 Null = r0 - M[$sra_struct];
0x0004B6        DD400008                 if NEG jump $M.sra_tagtimes.end;
0x0004B7        09205795                 r0 = Null + M[0x5795];
0x0004B8        21020002                 Null = r0 - 2;
0x0004B9        DD100006                 if NE jump $reset_sra;
0x0004BA        0920578A                 r0 = Null + M[0x578a];
0x0004BB        E1F011D0                 call $cbuffer.get_write_address_and_size;
0x0004BC        19205793                 M[0x5793] = r0 + Null;
0x0004BD        DDF0FFEA                 jump $M.sra_tagtimes.idle;

 <$M.sra_tagtimes.end>
0x0004BE        DDF0120B                 jump $pop_rLink_and_rts;

 <$reset_sra>
0x0004BF        19005790                 M[0x5790] = Null + Null;
0x0004C0        19005795                 M[0x5795] = Null + Null;
0x0004C1        19005793                 M[0x5793] = Null + Null;
0x0004C2        19005792                 M[0x5792] = Null + Null;
0x0004C3        19005791                 M[0x5791] = Null + Null;
0x0004C4        DDF01205                 jump $pop_rLink_and_rts;

 <$volume_and_limit.apply_volume>
0x0004C5        F3D00000                 push rLink;
0x0004C6        00A9000F                 r8 = r7 + Null;
0x0004C7        D12A0003                 r0 = M[r8 + 3];
0x0004C8        D3200000                 r0 = M[r0 + Null];
0x0004C9        01100200                 rMAC = Null + 512;
0x0004CA        D9020000                 Div = rMAC / r0;
0x0004CB        D1CA0002                 r10 = M[r8 + 2];
0x0004CC        DDD011FD                 if LE jump $pop_rLink_and_rts;
0x0004CD        018A000B                 r6 = r8 + 11;
0x0004CE        FD00007F 0140FFFF        r2 = Null + 8388607;
0x0004D0        E5F0000A                 do $M.audio_proc.volume_and_limit.apply_volume.find_transfer_mnt_loop;
0x0004D1        D1280000                 r0 = M[r6 + 0];
0x0004D2        D1520002                 r3 = M[r0 + 2];
0x0004D3        2004005F                 Null = r2 - r3;
0x0004D4        00450005                 if POS r2 = r3 + Null;
0x0004D5        D1280001                 r0 = M[r6 + 1];
0x0004D6        D1520002                 r3 = M[r0 + 2];
0x0004D7        2004005F                 Null = r2 - r3;
0x0004D8        00450005                 if POS r2 = r3 + Null;
0x0004D9        01880005                 r6 = r6 + 5;

 <$M.audio_proc.volume_and_limit.apply_volume.find_transfer_mnt_loop>
0x0004DA        00C4000F                 r10 = r2 + Null;
0x0004DB        DDD011EE                 if LE jump $pop_rLink_and_rts;
0x0004DC        0920FE93                 r0 = Null + M[0xfffe93];
0x0004DD        F3200000                 push r0;
0x0004DE        D9200001                 r0 = DivResult;
0x0004DF        CC12004F                 rMAC = r0 * r2 (SS);
0x0004E0        91E10010                 rMAC = rMAC ASHIFT 16 (MI);
0x0004E1        F3C00000                 push r10;
0x0004E2        F3100000                 push rMAC;
0x0004E3        91E1007C                 rMAC = rMAC ASHIFT -4 (MI);
0x0004E4        9D710017                 r5 = rMAC * 23 (int) (sat);
0x0004E5        E420002F                 r0 = Null + 1;
0x0004E6        1920FE93                 M[0xfffe93] = r0 + Null;
0x0004E7        D12A0008                 r0 = M[r8 + 8];
0x0004E8        01320100                 r1 = r0 + 256;
0x0004E9        00300004                 if NEG r1 = Null + Null;
0x0004EA        CC13007F                 rMAC = r1 * r5 (SS);
0x0004EB        9131000F                 r1 = rMAC ASHIFT 15;
0x0004EC        01100100                 rMAC = Null + 256;
0x0004ED        AC17002F                 rMAC = rMAC + r5 * r0 (SS);
0x0004EE        91110008                 rMAC = rMAC ASHIFT 8 (56bit);
0x0004EF        CC11003F                 rMAC = rMAC * r1 (SS);
0x0004F0        91710007                 r5 = rMAC ASHIFT 7;
0x0004F1        D1CA0002                 r10 = M[r8 + 2];
0x0004F2        018A000B                 r6 = r8 + 11;
0x0004F3        51A00034                 M2 = Null + 52;
0x0004F4        D15A0004                 r3 = M[r8 + 4];
0x0004F5        01600000                 r4 = Null + 0;
0x0004F6        E5F00011                 do $M.audio_proc.volume_and_limit.apply_volume.volume_update_loop;
0x0004F7        D1280002                 r0 = M[r6 + 2];
0x0004F8        CC15002F                 rMAC = r3 * r0 (SS);
0x0004F9        91110004                 rMAC = rMAC ASHIFT 4 (56bit);
0x0004FA        D1380003                 r1 = M[r6 + 3];
0x0004FB        2021003F                 r0 = rMAC - r1;
0x0004FC        DD000009                 if EQ jump $M.audio_proc.volume_and_limit.apply_volume.next_ch_vol;
0x0004FD        20200024                 if NEG r0 = Null - r0;
0x0004FE        9443007F                 r2 = r1 * r5 (frac);
0x0004FF        474A0000                 r2 = r2 + M2;
0x000500        E442005F                 r2 = MIN r0;
0x000501        2001003F                 Null = rMAC - r1;
0x000502        20400044                 if NEG r2 = Null - r2;
0x000503        03340000                 r1 = r1 + r2;
0x000504        D5380003                 M[r6 + 3] = r1;

 <$M.audio_proc.volume_and_limit.apply_volume.next_ch_vol>
0x000505        E463006F                 r4 = MAX r1;
0x000506        01880005                 r6 = r6 + 5;

 <$M.audio_proc.volume_and_limit.apply_volume.volume_update_loop>
0x000507        1900FE93                 M[0xfffe93] = Null + Null;
0x000508        01500000                 r3 = Null + 0;
0x000509        D12A0000                 r0 = M[r8 + 0];
0x00050A        D13A0001                 r1 = M[r8 + 1];
0x00050B        8002003F                 Null = r0 AND r1;
0x00050C        DD10002A                 if NE jump $M.audio_proc.volume_and_limit.apply_volume.limiter_analysis_done;
0x00050D        FD000008 21060000        Null = r4 - 524288;
0x00050F        DD400027                 if NEG jump $M.audio_proc.volume_and_limit.apply_volume.limiter_analysis_done;
0x000510        018A000B                 r6 = r8 + 11;
0x000511        D12A0002                 r0 = M[r8 + 2];
0x000512        5090002F                 M1 = Null + r0;
0x000513        01600000                 r4 = Null + 0;
0x000514        51800001                 M0 = Null + 1;

 <$M.audio_proc.volume_and_limit.apply_volume.limiter_analysis_loop>
0x000515        D1380003                 r1 = M[r6 + 3];
0x000516        FD000008 21030000        Null = r1 - 524288;
0x000518        DD400010                 if NEG jump $M.audio_proc.volume_and_limit.apply_volume.get_next_channel;
0x000519        F1C8FFFE                 r10 = M[SP + -0x2];
0x00051A        D1280000                 r0 = M[r6 + 0];
0x00051B        E1F01180                 call $frmbuffer.get_buffer;
0x00051C        5000002F                 I0 = Null + r0;
0x00051D        50C0003F                 L0 = Null + r1;
0x00051E        E4CC003F                 r10 = r10 - 1;
0x00051F        0070400F                 r5 = Null + Null, r2 = M[I0,M0];
0x000520        E5F00003                 do $M.audio_proc.volume_and_limit.apply_volume.channel_search_loop;
0x000521        E444004F                 r2 = ABS r2;
0x000522        E474406F                 r5 = MAX r2, r2 = M[I0,M0];

 <$M.audio_proc.volume_and_limit.apply_volume.channel_search_loop>
0x000523        E444004F                 r2 = ABS r2;
0x000524        E474006F                 r5 = MAX r2;
0x000525        D1380003                 r1 = M[r6 + 3];
0x000526        97730000                 r5 = r5 * r1 (frac);
0x000527        E467006F                 r4 = MAX r5;

 <$M.audio_proc.volume_and_limit.apply_volume.get_next_channel>
0x000528        01880005                 r6 = r6 + 5;
0x000529        79990001                 M1 = M1 - 1;
0x00052A        DD10FFEB                 if NE jump $M.audio_proc.volume_and_limit.apply_volume.limiter_analysis_loop;
0x00052B        51C00000                 L0 = Null + 0;
0x00052C        01500000                 r3 = Null + 0;
0x00052D        D14A0006                 r2 = M[r8 + 6];
0x00052E        2006004F                 Null = r4 - r2;
0x00052F        DD400007                 if NEG jump $M.audio_proc.volume_and_limit.apply_volume.limiter_analysis_done;
0x000530        0016000F                 rMAC = r4 + Null;
0x000531        E1F01021                 call $math.log2_table;
0x000532        D15A0005                 r3 = M[r8 + 5];
0x000533        D13A0007                 r1 = M[r8 + 7];
0x000534        2025002F                 r0 = r3 - r0;
0x000535        9452003F                 r3 = r0 * r1 (frac);

 <$M.audio_proc.volume_and_limit.apply_volume.limiter_analysis_done>
0x000536        F128FFFF                 r0 = M[SP + -0x1];
0x000537        FD0000EF 952263EF        r0 = r0 * -0.12976276874542236 (frac);
0x000539        E1F0106C                 call $math.pow2_table;
0x00053A        FD00007F 6562FFFF        r4 = 8388607 - r0;
0x00053C        9432002F                 r1 = r0 * r0 (frac);
0x00053D        97330000                 r1 = r1 * r1 (frac);
0x00053E        9432003F                 r1 = r0 * r1 (frac);
0x00053F        FD00007F 6543FFFF        r2 = 8388607 - r1;
0x000541        D12A0009                 r0 = M[r8 + 9];
0x000542        2075002F                 r5 = r3 - r0;
0x000543        00460005                 if POS r2 = r4 + Null;
0x000544        97740000                 r5 = r5 * r2 (frac);
0x000545        03270000                 r0 = r0 + r5;
0x000546        00200005                 if POS r0 = Null + Null;
0x000547        2042005F                 r2 = r0 - r3;
0x000548        20400044                 if NEG r2 = Null - r2;
0x000549        21040054                 Null = r2 - 84;
0x00054A        00250004                 if NEG r0 = r3 + Null;
0x00054B        D52A0009                 M[r8 + 9] = r0;
0x00054C        E1F01059                 call $math.pow2_table;
0x00054D        D16A000A                 r4 = M[r8 + 10];
0x00054E        D52A000A                 M[r8 + 10] = r0;
0x00054F        018A000B                 r6 = r8 + 11;
0x000550        D12A0002                 r0 = M[r8 + 2];
0x000551        5090002F                 M1 = Null + r0;
0x000552        E420002F                 r0 = Null + 1;
0x000553        1920FE93                 M[0xfffe93] = r0 + Null;

 <$M.audio_proc.volume_and_limit.apply_volume.apply_volume_loop>
0x000554        D1280000                 r0 = M[r6 + 0];
0x000555        E1F01146                 call $frmbuffer.get_buffer;
0x000556        5000002F                 I0 = Null + r0;
0x000557        50C0003F                 L0 = Null + r1;
0x000558        D1280001                 r0 = M[r6 + 1];
0x000559        E1F01142                 call $frmbuffer.get_buffer;
0x00055A        5040002F                 I4 = Null + r0;
0x00055B        50E0003F                 L4 = Null + r1;
0x00055C        D1380003                 r1 = M[r6 + 3];
0x00055D        D12A000A                 r0 = M[r8 + 10];
0x00055E        9443002F                 r2 = r1 * r0 (frac);
0x00055F        D1380004                 r1 = M[r6 + 4];
0x000560        23430000                 r2 = r2 - r1;
0x000561        91E40080                 rMAC = r2 ASHIFT 0 (LO);
0x000562        F1C8FFFE                 r10 = M[SP + -0x2];
0x000563        D90C0000                 Div = rMAC / r10;
0x000564        E4CC003F                 r10 = r10 - 1;
0x000565        01500004                 r3 = Null + 4;
0x000566        D9700001                 r5 = DivResult;
0x000567        03374100                 r1 = r1 + r5, r2 = M[I0,1];
0x000568        CC14003F                 rMAC = r2 * r1 (SS);
0x000569        E5F00004                 do $M.audio_proc.volume_and_limit.apply_volume.volume_loop;
0x00056A        93154100                 rMAC = rMAC ASHIFT r3 (56bit), r2 = M[I0,1];
0x00056B        03370000                 r1 = r1 + r5;
0x00056C        CF430091                 rMAC = r2 * r1 (SS), M[I4,1] = rMAC;

 <$M.audio_proc.volume_and_limit.apply_volume.volume_loop>
0x00056D        93150000                 rMAC = rMAC ASHIFT r3 (56bit);
0x00056E        03000091                 Null = Null + Null, M[I4,1] = rMAC;
0x00056F        D5380004                 M[r6 + 4] = r1;
0x000570        01880005                 r6 = r6 + 5;
0x000571        79990001                 M1 = M1 - 1;
0x000572        DD10FFE2                 if NE jump $M.audio_proc.volume_and_limit.apply_volume.apply_volume_loop;
0x000573        51C00000                 L0 = Null + 0;
0x000574        51E00000                 L4 = Null + 0;
0x000575        F3240000                 pop r0;
0x000576        F3240000                 pop r0;
0x000577        F3240000                 pop r0;
0x000578        1920FE93                 M[0xfffe93] = r0 + Null;
0x000579        DDF01150                 jump $pop_rLink_and_rts;

 <$latency.calc_encoded_latency>
0x00057A        F3D00000                 push rLink;
0x00057B        D1290001                 r0 = M[r7 + 1];
0x00057C        DD00114D                 if EQ jump $pop_rLink_and_rts;
0x00057D        E1F01102                 call $block_interrupts;
0x00057E        D1290001                 r0 = M[r7 + 1];
0x00057F        E1F010D8                 call $cbuffer.calc_amount_space;
0x000580        21020002                 Null = r0 - 2;
0x000581        DD50000C                 if POS jump $M.latency_measure.calc_encoded_latency.buffer_full_check_done;
0x000582        D1290001                 r0 = M[r7 + 1];
0x000583        E1F01108                 call $cbuffer.get_write_address_and_size;
0x000584        50F0003F                 L5 = Null + r1;
0x000585        5050002F                 I5 = Null + r0;
0x000586        5180FFFC                 M0 = Null + -4;
0x000587        02000024                 Null = Null + Null, r0 = M[I5,M0];
0x000588        4430005F                 r1 = Null + I5;
0x000589        D1290001                 r0 = M[r7 + 1];
0x00058A        D539000A                 M[r7 + 10] = r1;
0x00058B        E1F01119                 call $cbuffer.set_write_address;
0x00058C        51F00000                 L5 = Null + 0;

 <$M.latency_measure.calc_encoded_latency.buffer_full_check_done>
0x00058D        D1290003                 r0 = M[r7 + 3];
0x00058E        D1490008                 r2 = M[r7 + 8];
0x00058F        D1320002                 r1 = M[r0 + 2];
0x000590        2043004F                 r2 = r1 - r2;
0x000591        DD00000C                 if EQ jump $M.latency_measure.calc_encoded_latency.unblock_and_return;
0x000592        D1290002                 r0 = M[r7 + 2];
0x000593        D1520001                 r3 = M[r0 + 1];
0x000594        D1290007                 r0 = M[r7 + 7];
0x000595        2002005F                 Null = r0 - r3;
0x000596        DD000007                 if EQ jump $M.latency_measure.calc_encoded_latency.unblock_and_return;
0x000597        D1290002                 r0 = M[r7 + 2];
0x000598        D1820002                 r6 = M[r0 + 2];
0x000599        D1290001                 r0 = M[r7 + 1];
0x00059A        E1F010CD                 call $cbuffer.calc_amount_data;
0x00059B        91C2007F                 r10 = r0 ASHIFT -1;
0x00059C        DD100003                 if NE jump $M.latency_measure.calc_encoded_latency.process_info;

 <$M.latency_measure.calc_encoded_latency.unblock_and_return>
0x00059D        E1F010D2                 call $interrupt.unblock;
0x00059E        DDF0006F                 jump $M.latency_measure.calc_encoded_latency.end;

 <$M.latency_measure.calc_encoded_latency.process_info>
0x00059F        E1F010D0                 call $interrupt.unblock;
0x0005A0        D1290001                 r0 = M[r7 + 1];
0x0005A1        E1F010E5                 call $cbuffer.get_read_address_and_size;
0x0005A2        5050002F                 I5 = Null + r0;
0x0005A3        50F0003F                 L5 = Null + r1;
0x0005A4        508C00CF                 M0 = r10 + r10;
0x0005A5        79880002                 M0 = M0 - 2;
0x0005A6        02000024                 Null = Null + Null, r0 = M[I5,M0];
0x0005A7        4440005F                 r2 = Null + I5;
0x0005A8        D169000A                 r4 = M[r7 + 10];
0x0005A9        D549000A                 M[r7 + 10] = r2;
0x0005AA        23460000                 r2 = r2 - r4;
0x0005AB        03000025                 Null = Null + Null, r0 = M[I5,1];
0x0005AC        5090002F                 M1 = Null + r0;
0x0005AD        D1290002                 r0 = M[r7 + 2];
0x0005AE        D1520000                 r3 = M[r0 + 0];
0x0005AF        50B0005F                 M3 = Null + r3;
0x0005B0        51800000                 M0 = Null + 0;
0x0005B1        D1220001                 r0 = M[r0 + 1];
0x0005B2        D1390007                 r1 = M[r7 + 7];
0x0005B3        0004000F                 Null = r2 + Null;
0x0005B4        DD00000F                 if EQ jump $M.latency_measure.calc_encoded_latency.skip_end;
0x0005B5        0048000F                 r2 = r6 + Null;
0x0005B6        E1F0005E                 call $M.latency_measure.calc_encoded_latency.is_address_within_range;
0x0005B7        0005000F                 Null = r3 + Null;
0x0005B8        DD00000B                 if EQ jump $M.latency_measure.calc_encoded_latency.skip_end;
0x0005B9        E5F00007                 do $M.latency_measure.calc_encoded_latency.skip_loop;
0x0005BA        03000067                 Null = Null + Null, r4 = M[I5,-1];
0x0005BB        03000047                 Null = Null + Null, r2 = M[I5,-1];
0x0005BC        E1F00058                 call $M.latency_measure.calc_encoded_latency.is_address_within_range;
0x0005BD        0005000F                 Null = r3 + Null;
0x0005BE        DD000004                 if EQ jump $M.latency_measure.calc_encoded_latency.skip_done;
0x0005BF        03000000                 Null = Null + Null;

 <$M.latency_measure.calc_encoded_latency.skip_loop>
0x0005C0        51F00000                 L5 = Null + 0;
0x0005C1        DDF0004C                 jump $M.latency_measure.calc_encoded_latency.end;

 <$M.latency_measure.calc_encoded_latency.skip_done>
0x0005C2        03000046                 Null = Null + Null, r2 = M[I5,2];

 <$M.latency_measure.calc_encoded_latency.skip_end>
0x0005C3        E5F0000C                 do $M.latency_measure.calc_encoded_latency.search_loop;
0x0005C4        03000067                 Null = Null + Null, r4 = M[I5,-1];
0x0005C5        03000047                 Null = Null + Null, r2 = M[I5,-1];
0x0005C6        E1F0004E                 call $M.latency_measure.calc_encoded_latency.is_address_within_range;
0x0005C7        0005000F                 Null = r3 + Null;
0x0005C8        DD10000D                 if NE jump $M.latency_measure.calc_encoded_latency.entry_found;
0x0005C9        78A9004F                 M2 = M1 - r2;
0x0005CA        5CAA00B4                 if NEG M2 = M2 + M3;
0x0005CB        5090004F                 M1 = Null + r2;
0x0005CC        5F8A0000                 M0 = M0 + M2;
0x0005CD        6C0800BF                 Null = M0 - M3;
0x0005CE        DD500003                 if POS jump $M.latency_measure.calc_encoded_latency.clean_buf;

 <$M.latency_measure.calc_encoded_latency.search_loop>
0x0005CF        51F00000                 L5 = Null + 0;
0x0005D0        DDF0003D                 jump $M.latency_measure.calc_encoded_latency.end;

 <$M.latency_measure.calc_encoded_latency.clean_buf>
0x0005D1        51F00000                 L5 = Null + 0;
0x0005D2        D1290001                 r0 = M[r7 + 1];
0x0005D3        E1F00EEB                 call $cbuffer.empty_buffer;
0x0005D4        DDF00039                 jump $M.latency_measure.calc_encoded_latency.end;

 <$M.latency_measure.calc_encoded_latency.entry_found>
0x0005D5        51900003                 M1 = Null + 3;
0x0005D6        02000025                 Null = Null + Null, r0 = M[I5,M1];
0x0005D7        4430005F                 r1 = Null + I5;
0x0005D8        D1290001                 r0 = M[r7 + 1];
0x0005D9        E1F010C7                 call $cbuffer.set_read_address;
0x0005DA        51F00000                 L5 = Null + 0;
0x0005DB        E1F010A4                 call $block_interrupts;
0x0005DC        F3600000                 push r4;
0x0005DD        F3900000                 push r7;
0x0005DE        D1990000                 r7 = M[r7 + 0];
0x0005DF        E1F00961                 call $latency.calc_pcm_latency;
0x0005E0        F3940000                 pop r7;
0x0005E1        F3640000                 pop r4;
0x0005E2        0950FE71                 r3 = Null + M[0xfffe71];
0x0005E3        2065006F                 r4 = r3 - r4;
0x0005E4        DD400028                 if NEG jump $M.latency_measure.calc_encoded_latency.end_calc;
0x0005E5        03680000                 r4 = r4 + r6;
0x0005E6        D1290003                 r0 = M[r7 + 3];
0x0005E7        E1F010A4                 call $cbuffer.get_write_address_and_size;
0x0005E8        D1490008                 r2 = M[r7 + 8];
0x0005E9        23240000                 r0 = r0 - r2;
0x0005EA        00220034                 if NEG r0 = r0 + r1;
0x0005EB        D1390004                 r1 = M[r7 + 4];
0x0005EC        D3300000                 r1 = M[r1 + Null];
0x0005ED        D1490005                 r2 = M[r7 + 5];
0x0005EE        DD000004                 if EQ jump $M.latency_measure.calc_encoded_latency.no_warp;
0x0005EF        D3400000                 r2 = M[r2 + Null];
0x0005F0        DD000002                 if EQ jump $M.latency_measure.calc_encoded_latency.no_warp;
0x0005F1        D3400000                 r2 = M[r2 + Null];

 <$M.latency_measure.calc_encoded_latency.no_warp>
0x0005F2        9453004F                 r3 = r1 * r2 (frac);
0x0005F3        9445004F                 r2 = r3 * r2 (frac);
0x0005F4        0053005F                 r3 = r1 + r3;
0x0005F5        0035004F                 r1 = r3 + r2;
0x0005F6        CC12003F                 rMAC = r0 * r1 (SS);
0x0005F7        91E10007                 rMAC = rMAC ASHIFT 7 (MI);
0x0005F8        8D310000                 r1 = rMAC LSHIFT 0;
0x0005F9        23630000                 r4 = r4 - r1;
0x0005FA        DD400012                 if NEG jump $M.latency_measure.calc_encoded_latency.end_calc;
0x0005FB        D1C90006                 r10 = M[r7 + 6];
0x0005FC        DD00000F                 if EQ jump $M.latency_measure.calc_encoded_latency.min_done;
0x0005FD        212C0004                 r0 = r10 - 4;
0x0005FE        20CC0025                 if POS r10 = r10 - r0;
0x0005FF        E4CC003F                 r10 = r10 - 1;
0x000600        5159000B                 I5 = r7 + 11;
0x000601        03000035                 Null = Null + Null, r1 = M[I5,1];
0x000602        E5F00005                 do $M.latency_measure.calc_encoded_latency.loop_min;
0x000603        03000027                 Null = Null + Null, r0 = M[I5,-1];
0x000604        2002003F                 Null = r0 - r1;
0x000605        00320004                 if NEG r1 = r0 + Null;
0x000606        030000A6                 Null = Null + Null, M[I5,2] = r0;

 <$M.latency_measure.calc_encoded_latency.loop_min>
0x000607        03000027                 Null = Null + Null, r0 = M[I5,-1];
0x000608        030000E4                 Null = Null + Null, M[I5,0] = r4;
0x000609        2006003F                 Null = r4 - r1;
0x00060A        00630005                 if POS r4 = r1 + Null;

 <$M.latency_measure.calc_encoded_latency.min_done>
0x00060B        D5690009                 M[r7 + 9] = r4;

 <$M.latency_measure.calc_encoded_latency.end_calc>
0x00060C        E1F01063                 call $interrupt.unblock;

 <$M.latency_measure.calc_encoded_latency.end>
0x00060D        D1290002                 r0 = M[r7 + 2];
0x00060E        D1220001                 r0 = M[r0 + 1];
0x00060F        D5290007                 M[r7 + 7] = r0;
0x000610        D1290003                 r0 = M[r7 + 3];
0x000611        D1220002                 r0 = M[r0 + 2];
0x000612        D5290008                 M[r7 + 8] = r0;
0x000613        DDF010B6                 jump $pop_rLink_and_rts;

 <$M.latency_measure.calc_encoded_latency.is_address_within_range>
0x000614        E450002F                 r3 = Null + 1;
0x000615        2002003F                 Null = r0 - r1;
0x000616        DD400006                 if NEG jump $M.latency_measure.calc_encoded_latency.neg_part;

 <$M.latency_measure.calc_encoded_latency.pos_part>
0x000617        2004002F                 Null = r2 - r0;
0x000618        00500005                 if POS r3 = Null + Null;
0x000619        2004003F                 Null = r2 - r1;
0x00061A        00500004                 if NEG r3 = Null + Null;
0x00061B        DC0D000F                 rts;

 <$M.latency_measure.calc_encoded_latency.neg_part>
0x00061C        2004003F                 Null = r2 - r1;
0x00061D        DC0D0005                 if POS rts;
0x00061E        2004002F                 Null = r2 - r0;
0x00061F        00500005                 if POS r3 = Null + Null;
0x000620        DC0D000F                 rts;

 <$cbops.rate_adjustment_and_shift.Limited_Process>
0x000621        F3D00000                 push rLink;
0x000622        F3700000                 push r5;
0x000623        D12A0000                 r0 = M[r8 + 0];
0x000624        E1F01043                 call $cbuffer.calc_amount_data;
0x000625        0072000F                 r5 = r0 + Null;
0x000626        D12A0001                 r0 = M[r8 + 1];
0x000627        E1F01030                 call $cbuffer.calc_amount_space;
0x000628        0092000F                 r7 = r0 + Null;
0x000629        D12A0002                 r0 = M[r8 + 2];
0x00062A        E402002F                 Null = r0 + 1;
0x00062B        DD000009                 if EQ jump $M.cbops.rate_adjustment_and_shift.Process.no_right_channel_l;
0x00062C        D12A0002                 r0 = M[r8 + 2];
0x00062D        E1F0103A                 call $cbuffer.calc_amount_data;
0x00062E        2007002F                 Null = r5 - r0;
0x00062F        00720005                 if POS r5 = r0 + Null;
0x000630        D12A0003                 r0 = M[r8 + 3];
0x000631        E1F01026                 call $cbuffer.calc_amount_space;
0x000632        2009002F                 Null = r7 - r0;
0x000633        00920005                 if POS r7 = r0 + Null;

 <$M.cbops.rate_adjustment_and_shift.Process.no_right_channel_l>
0x000634        2007009F                 Null = r5 - r7;
0x000635        00790005                 if POS r5 = r7 + Null;
0x000636        E1F00074                 call $M.cbops.rate_adjustment_and_shift.Process.amount_to_use;
0x000637        F3640000                 pop r4;
0x000638        23760000                 r5 = r5 - r4;
0x000639        00760005                 if POS r5 = r4 + Null;
0x00063A        DDF00016                 jump $M.cbops.rate_adjustment_and_shift.Process.limited_entry_point;

 <$cbops.rate_adjustment_and_shift.Process>
0x00063B        F3D00000                 push rLink;
0x00063C        D12A0000                 r0 = M[r8 + 0];
0x00063D        E1F0102A                 call $cbuffer.calc_amount_data;
0x00063E        0072000F                 r5 = r0 + Null;
0x00063F        D12A0001                 r0 = M[r8 + 1];
0x000640        E1F01017                 call $cbuffer.calc_amount_space;
0x000641        0092000F                 r7 = r0 + Null;
0x000642        D12A0002                 r0 = M[r8 + 2];
0x000643        E402002F                 Null = r0 + 1;
0x000644        DD000009                 if EQ jump $M.cbops.rate_adjustment_and_shift.Process.no_right_channel;
0x000645        D12A0002                 r0 = M[r8 + 2];
0x000646        E1F01021                 call $cbuffer.calc_amount_data;
0x000647        2007002F                 Null = r5 - r0;
0x000648        00720005                 if POS r5 = r0 + Null;
0x000649        D12A0003                 r0 = M[r8 + 3];
0x00064A        E1F0100D                 call $cbuffer.calc_amount_space;
0x00064B        2009002F                 Null = r7 - r0;
0x00064C        00920005                 if POS r7 = r0 + Null;

 <$M.cbops.rate_adjustment_and_shift.Process.no_right_channel>
0x00064D        2007009F                 Null = r5 - r7;
0x00064E        00790005                 if POS r5 = r7 + Null;
0x00064F        E1F0005B                 call $M.cbops.rate_adjustment_and_shift.Process.amount_to_use;

 <$M.cbops.rate_adjustment_and_shift.Process.limited_entry_point>
0x000650        00C7000F                 r10 = r5 + Null;
0x000651        DDD01078                 if LE jump $pop_rLink_and_rts;
0x000652        F1F00001                 pushm <FP(=SP)>, SP = SP + 0xf;
0x000653        F1070001                 FP = FP + 1;
0x000654        502000AF                 I2 = Null + r8;
0x000655        E1F0005D                 call $M.cbops.rate_adjustment_and_shift.Process.get_buffer_info;
0x000656        D19A0004                 r7 = M[r8 + 4];
0x000657        F19C0007                 M[FP + 0x7] = r7;
0x000658        D12A0006                 r0 = M[r8 + 6];
0x000659        5000002F                 I0 = Null + r0;
0x00065A        0120000C                 r0 = Null + 12;
0x00065B        D13A000B                 r1 = M[r8 + 11];
0x00065C        00320000                 if EQ r1 = r0 + Null;
0x00065D        50C0003F                 L0 = Null + r1;
0x00065E        50D0003F                 L1 = Null + r1;
0x00065F        D12A0005                 r0 = M[r8 + 5];
0x000660        99330015                 r1 = r1 * 21 (int);
0x000661        8D33007F                 r1 = r1 LSHIFT -1;
0x000662        5032003F                 I3 = r0 + r1;
0x000663        D12A0008                 r0 = M[r8 + 8];
0x000664        D062000F                 r4 = M[r0 + Null];
0x000665        D17A000C                 r5 = M[r8 + 12];
0x000666        E430002F                 r1 = Null + 1;
0x000667        2027006F                 r0 = r5 - r4;
0x000668        20200024                 if NEG r0 = Null - r0;
0x000669        FD000000 954220C5        r2 = r0 * 0.0010000467300415039 (frac);
0x00066B        21023127                 Null = r0 - 12583;
0x00066C        00430004                 if NEG r2 = r1 + Null;
0x00066D        21340026                 r1 = r2 - 38;
0x00066E        20440035                 if POS r2 = r2 - r1;
0x00066F        0930FE71                 r1 = Null + M[0xfffe71];
0x000670        D12A0012                 r0 = M[r8 + 18];
0x000671        2053002F                 r3 = r1 - r0;
0x000672        20500054                 if NEG r3 = Null - r3;
0x000673        FD000000 2105C350        Null = r3 - 50000;
0x000675        DD500008                 if POS jump $M.cbops.rate_adjustment_and_shift.Process.update_last_time;
0x000676        215502EE                 r3 = r3 - 750;
0x000677        FD000000 955515D8        r3 = r3 * 0.00066661834716796875 (frac);
0x000679        00500004                 if NEG r3 = Null + Null;
0x00067A        9B450000                 r2 = r2 * r3 (int);
0x00067B        995505DC                 r3 = r3 * 1500 (int);
0x00067C        0032005F                 r1 = r0 + r3;

 <$M.cbops.rate_adjustment_and_shift.Process.update_last_time>
0x00067D        D53A0012                 M[r8 + 18] = r1;
0x00067E        2037006F                 r1 = r5 - r4;
0x00067F        2023004F                 r0 = r1 - r2;
0x000680        20330025                 if POS r1 = r1 - r0;
0x000681        0023004F                 r0 = r1 + r2;
0x000682        20330024                 if NEG r1 = r1 - r0;
0x000683        23730000                 r5 = r5 - r1;
0x000684        D57A000C                 M[r8 + 12] = r5;
0x000685        F1CC000C                 M[FP + 0xc] = r10;
0x000686        F10C000D                 M[FP + 0xd] = Null;
0x000687        51B00001                 M3 = Null + 1;

 <$M.cbops.rate_adjustment_and_shift.Process.sra_gen_main_loop>
0x000688        E1F0FA35                 call $M.cbops.rate_adjustment_and_shift.main.sra_resample;
0x000689        509000CF                 M1 = Null + r10;
0x00068A        02002100                 Null = Null + Null, r0 = M[I0,M1];
0x00068B        02000021                 Null = Null + Null, r0 = M[I4,M1];
0x00068C        F138000D                 r1 = M[FP + 0xd];
0x00068D        005A003F                 r3 = r8 + r1;
0x00068E        4430000F                 r1 = Null + I0;
0x00068F        D5350006                 M[r3 + 6] = r1;
0x000690        F158000D                 r3 = M[FP + 0xd];
0x000691        03550000                 r3 = r3 + r3;
0x000692        01550000                 r3 = r3 + 0;
0x000693        502A005F                 I2 = r8 + r3;
0x000694        E1F00028                 call $M.cbops.rate_adjustment_and_shift.Process.set_buffer_info;
0x000695        F108000D                 Null = M[FP + 0xd];
0x000696        DD10000B                 if NE jump $M.cbops.rate_adjustment_and_shift.Process.finished;
0x000697        D12A0002                 r0 = M[r8 + 2];
0x000698        E402002F                 Null = r0 + 1;
0x000699        DD000008                 if EQ jump $M.cbops.rate_adjustment_and_shift.Process.finished;
0x00069A        512A0002                 I2 = r8 + 2;
0x00069B        E1F00017                 call $M.cbops.rate_adjustment_and_shift.Process.get_buffer_info;
0x00069C        D13A0007                 r1 = M[r8 + 7];
0x00069D        5000003F                 I0 = Null + r1;
0x00069E        E430002F                 r1 = Null + 1;
0x00069F        F13C000D                 M[FP + 0xd] = r1;
0x0006A0        DDF0FFE8                 jump $M.cbops.rate_adjustment_and_shift.Process.sra_gen_main_loop;

 <$M.cbops.rate_adjustment_and_shift.Process.finished>
0x0006A1        D56A000D                 M[r8 + 13] = r4;
0x0006A2        6420009F                 r0 = Null - M1;
0x0006A3        D52A000E                 M[r8 + 14] = r0;
0x0006A4        51F00000                 L5 = Null + 0;
0x0006A5        51E00000                 L4 = Null + 0;
0x0006A6        51C00000                 L0 = Null + 0;
0x0006A7        51D00000                 L1 = Null + 0;
0x0006A8        F1F64000                 SP = SP - 0xf, popm <FP>;
0x0006A9        DDF01020                 jump $pop_rLink_and_rts;

 <$M.cbops.rate_adjustment_and_shift.Process.amount_to_use>
0x0006AA        D12A000C                 r0 = M[r8 + 12];
0x0006AB        9462009F                 r4 = r0 * r7 (frac);
0x0006AC        2069006F                 r4 = r7 - r4;
0x0006AD        21660002                 r4 = r4 - 2;
0x0006AE        00600004                 if NEG r4 = Null + Null;
0x0006AF        2006007F                 Null = r4 - r5;
0x0006B0        00760004                 if NEG r5 = r4 + Null;
0x0006B1        DC0D000F                 rts;

 <$M.cbops.rate_adjustment_and_shift.Process.get_buffer_info>
0x0006B2        F3D00000                 push rLink;
0x0006B3        51800001                 M0 = Null + 1;
0x0006B4        02002800                 Null = Null + Null, r0 = M[I2,M0];
0x0006B5        E1F00FD1                 call $cbuffer.get_read_address_and_size;
0x0006B6        5040002F                 I4 = Null + r0;
0x0006B7        50E0283F                 L4 = Null + r1, r0 = M[I2,M0];
0x0006B8        E1F00FD3                 call $cbuffer.get_write_address_and_size;
0x0006B9        5050002F                 I5 = Null + r0;
0x0006BA        50F0003F                 L5 = Null + r1;
0x0006BB        DDF0100E                 jump $pop_rLink_and_rts;

 <$M.cbops.rate_adjustment_and_shift.Process.set_buffer_info>
0x0006BC        F3D00000                 push rLink;
0x0006BD        51800001                 M0 = Null + 1;
0x0006BE        02002800                 Null = Null + Null, r0 = M[I2,M0];
0x0006BF        4430004F                 r1 = Null + I4;
0x0006C0        E1F00FE0                 call $cbuffer.set_read_address;
0x0006C1        02002800                 Null = Null + Null, r0 = M[I2,M0];
0x0006C2        4430005F                 r1 = Null + I5;
0x0006C3        E1F00FE1                 call $cbuffer.set_write_address;
0x0006C4        DDF01005                 jump $pop_rLink_and_rts;

 <$sra_calcrate>
0x0006C5        F3D00000                 push rLink;
0x0006C6        0920006F                 r0 = Null + M[$app_config.io];
0x0006C7        21020005                 Null = r0 - 5;
0x0006C8        DD000007                 if EQ jump $M.sra_calcrate.skip_a2dp_sra_reset;
0x0006C9        21020008                 Null = r0 - 8;
0x0006CA        DD000005                 if EQ jump $M.sra_calcrate.skip_a2dp_sra_reset;
0x0006CB        2102000A                 Null = r0 - 10;
0x0006CC        DD000003                 if EQ jump $M.sra_calcrate.skip_a2dp_sra_reset;
0x0006CD        09200391                 r0 = Null + M[0x391];
0x0006CE        DD00FDF1                 if EQ jump $reset_sra;

 <$M.sra_calcrate.skip_a2dp_sra_reset>
0x0006CF        09205795                 r0 = Null + M[0x5795];
0x0006D0        D12201A5                 r0 = M[r0 + 421];
0x0006D1        DC02000F                 jump r0;

 <$M.sra_calcrate.idle>
0x0006D2        09205792                 r0 = Null + M[0x5792];
0x0006D3        DD000081                 if EQ jump $M.sra_calcrate.end;
0x0006D4        E420002F                 r0 = Null + 1;
0x0006D5        19205795                 M[0x5795] = r0 + Null;

 <$M.sra_calcrate.start>
0x0006D6        0920578A                 r0 = Null + M[0x578a];
0x0006D7        E1F00FAF                 call $cbuffer.get_read_address_and_size;
0x0006D8        09305796                 r1 = Null + M[0x5796];
0x0006D9        09405792                 r2 = Null + M[0x5792];
0x0006DA        E1F00081                 call $M.sra_calcrate.is_it_within_range;
0x0006DB        0005000F                 Null = r3 + Null;
0x0006DC        DD000078                 if EQ jump $M.sra_calcrate.end;
0x0006DD        19005792                 M[0x5792] = Null + Null;
0x0006DE        19005798                 M[0x5798] = Null + Null;
0x0006DF        01200002                 r0 = Null + 2;
0x0006E0        19205795                 M[0x5795] = r0 + Null;
0x0006E1        DDF00073                 jump $M.sra_calcrate.end;

 <$M.sra_calcrate.addup>
0x0006E2        0920578B                 r0 = Null + M[0x578b];
0x0006E3        E1F00FA8                 call $cbuffer.get_write_address_and_size;
0x0006E4        29425797                 r2 = r0 - M[0x5797];
0x0006E5        00440034                 if NEG r2 = r2 + r1;
0x0006E6        09345798                 r1 = r2 + M[0x5798];
0x0006E7        19305798                 M[0x5798] = r1 + Null;
0x0006E8        09405793                 r2 = Null + M[0x5793];
0x0006E9        DD00006B                 if EQ jump $M.sra_calcrate.end;
0x0006EA        0920578A                 r0 = Null + M[0x578a];
0x0006EB        E1F00F9B                 call $cbuffer.get_read_address_and_size;
0x0006EC        09305796                 r1 = Null + M[0x5796];
0x0006ED        09405793                 r2 = Null + M[0x5793];
0x0006EE        E1F0006D                 call $M.sra_calcrate.is_it_within_range;
0x0006EF        0005000F                 Null = r3 + Null;
0x0006F0        DD000064                 if EQ jump $M.sra_calcrate.end;
0x0006F1        19005793                 M[0x5793] = Null + Null;
0x0006F2        01200000                 r0 = Null + 0;
0x0006F3        19205795                 M[0x5795] = r0 + Null;
0x0006F4        0940578D                 r2 = Null + M[0x578d];
0x0006F5        E450002F                 r3 = Null + 1;
0x0006F6        29345798                 r1 = r2 - M[0x5798];
0x0006F7        20500054                 if NEG r3 = Null - r3;
0x0006F8        9B350000                 r1 = r1 * r3 (int);
0x0006F9        0990578C                 r7 = Null + M[0x578c];
0x0006FA        99990006                 r7 = r7 * 6 (int);
0x0006FB        97490000                 r2 = r2 * r7 (frac);
0x0006FC        2043004F                 r2 = r1 - r2;
0x0006FD        DD50FFD5                 if POS jump $M.sra_calcrate.idle;
0x0006FE        9B350000                 r1 = r1 * r3 (int);
0x0006FF        0920579B                 r0 = Null + M[0x579b];
0x000700        D53257A8                 M[r0 + 22440] = r1;
0x000701        E422002F                 r0 = r0 + 1;
0x000702        8122001F                 r0 = r0 AND 0x1f;
0x000703        1920579B                 M[0x579b] = r0 + Null;
0x000704        DD100003                 if NE jump $M.sra_calcrate.init_phase_passed;
0x000705        E440002F                 r2 = Null + 1;
0x000706        1940579C                 M[0x579c] = r2 + Null;

 <$M.sra_calcrate.init_phase_passed>
0x000707        01300020                 r1 = Null + 32;
0x000708        0900579C                 Null = Null + M[0x579c];
0x000709        00230001                 if NE r0 = r1 + Null;
0x00070A        090057A2                 Null = Null + M[0x57a2];
0x00070B        DD000003                 if EQ jump $M.sra_calcrate.calc_final_rate;
0x00070C        81020001                 Null = r0 AND 0x1;
0x00070D        DD10FFC5                 if NE jump $M.sra_calcrate.idle;

 <$M.sra_calcrate.calc_final_rate>
0x00070E        E4C2003F                 r10 = r0 - 1;
0x00070F        FD00007F 0150FFFF        r3 = Null + 8388607;
0x000711        510057A8                 I0 = Null + 22440;
0x000712        23334100                 r1 = r1 - r1, r2 = M[I0,1];
0x000713        E5F00002                 do $M.sra_calcrate.acc_loop;
0x000714        03344100                 r1 = r1 + r2, r2 = M[I0,1];

 <$M.sra_calcrate.acc_loop>
0x000715        03340000                 r1 = r1 + r2;
0x000716        20500054                 if NEG r3 = Null - r3;
0x000717        97350000                 r1 = r1 * r3 (frac);
0x000718        01100000                 rMAC = Null + 0;
0x000719        8DE30280                 rMAC0 = r1 LSHIFT 0;
0x00071A        D9020000                 Div = rMAC / r0;
0x00071B        D9300001                 r1 = DivResult;
0x00071C        91E3007F                 rMAC = r1 ASHIFT -1 (MI);
0x00071D        0940578D                 r2 = Null + M[0x578d];
0x00071E        D9040000                 Div = rMAC / r2;
0x00071F        D9300001                 r1 = DivResult;
0x000720        2943578C                 r2 = r1 - M[0x578c];
0x000721        20330045                 if POS r1 = r1 - r2;
0x000722        97350000                 r1 = r1 * r3 (frac);
0x000723        193057A0                 M[0x57a0] = r1 + Null;
0x000724        8D82007F                 r6 = r0 LSHIFT -1;
0x000725        81920001                 r7 = r0 AND 0x1;
0x000726        21080006                 Null = r6 - 6;
0x000727        DD40FFAB                 if NEG jump $M.sra_calcrate.idle;
0x000728        0960579B                 r4 = Null + M[0x579b];
0x000729        2902579B                 Null = r0 - M[0x579b];
0x00072A        00600000                 if EQ r4 = Null + Null;
0x00072B        03690000                 r4 = r4 + r7;
0x00072C        00C8000F                 r10 = r6 + Null;
0x00072D        01300000                 r1 = Null + 0;
0x00072E        E5F00005                 do $M.sra_calcrate.read_first_half_ents;
0x00072F        D15657A8                 r3 = M[r4 + 22440];
0x000730        03350000                 r1 = r1 + r3;
0x000731        E466002F                 r4 = r4 + 1;
0x000732        8166001F                 r4 = r4 AND 0x1f;

 <$M.sra_calcrate.read_first_half_ents>
0x000733        00C8000F                 r10 = r6 + Null;
0x000734        01400000                 r2 = Null + 0;
0x000735        E5F00005                 do $M.sra_calcrate.read_second_half_ents;
0x000736        D15657A8                 r3 = M[r4 + 22440];
0x000737        03450000                 r2 = r2 + r3;
0x000738        E466002F                 r4 = r4 + 1;
0x000739        8166001F                 r4 = r4 AND 0x1f;

 <$M.sra_calcrate.read_second_half_ents>
0x00073A        2053004F                 r3 = r1 - r2;
0x00073B        20500054                 if NEG r3 = Null - r3;
0x00073C        91E5007F                 rMAC = r3 ASHIFT -1 (MI);
0x00073D        0920578D                 r0 = Null + M[0x578d];
0x00073E        D9020000                 Div = rMAC / r0;
0x00073F        D9300001                 r1 = DivResult;
0x000740        99481A37                 r2 = r6 * 6711 (int);
0x000741        2003004F                 Null = r1 - r2;
0x000742        DD50FF90                 if POS jump $M.sra_calcrate.idle;
0x000743        E420002F                 r0 = Null + 1;
0x000744        192057A2                 M[0x57a2] = r0 + Null;
0x000745        092057A0                 r0 = Null + M[0x57a0];
0x000746        293257A1                 r1 = r0 - M[0x57a1];
0x000747        20300034                 if NEG r1 = Null - r1;
0x000748        2103068E                 Null = r1 - 1678;
0x000749        DD40FF89                 if NEG jump $M.sra_calcrate.idle;
0x00074A        192057A1                 M[0x57a1] = r0 + Null;
0x00074B        9122007A                 r0 = r0 ASHIFT -6;
0x00074C        91220001                 r0 = r0 ASHIFT 1;
0x00074D        85520001                 r3 = r0 OR 0x1;
0x00074E        01600000                 r4 = Null + 0;
0x00074F        01700000                 r5 = Null + 0;
0x000750        01800000                 r6 = Null + 0;
0x000751        01407070                 r2 = Null + 28784;
0x000752        E1F00D7C                 call $message.send_short;
0x000753        DDF0FF7F                 jump $M.sra_calcrate.idle;

 <$M.sra_calcrate.end>
0x000754        0920578A                 r0 = Null + M[0x578a];
0x000755        E1F00F31                 call $cbuffer.get_read_address_and_size;
0x000756        19205796                 M[0x5796] = r0 + Null;
0x000757        0920578B                 r0 = Null + M[0x578b];
0x000758        E1F00F33                 call $cbuffer.get_write_address_and_size;
0x000759        19205797                 M[0x5797] = r0 + Null;

 <$M.sra_calcrate.exit>
0x00075A        DDF00F6F                 jump $pop_rLink_and_rts;

 <$M.sra_calcrate.is_it_within_range>
0x00075B        E450002F                 r3 = Null + 1;
0x00075C        2002003F                 Null = r0 - r1;
0x00075D        DD400006                 if NEG jump $M.sra_calcrate.neg_part;

 <$M.sra_calcrate.pos_part>
0x00075E        2004002F                 Null = r2 - r0;
0x00075F        00500005                 if POS r3 = Null + Null;
0x000760        2004003F                 Null = r2 - r1;
0x000761        00500004                 if NEG r3 = Null + Null;
0x000762        DC0D000F                 rts;

 <$M.sra_calcrate.neg_part>
0x000763        2004003F                 Null = r2 - r1;
0x000764        DC0D0005                 if POS rts;
0x000765        2004002F                 Null = r2 - r0;
0x000766        00500005                 if POS r3 = Null + Null;
0x000767        DC0D000F                 rts;

 <$frame_sync.usb_in_stereo_audio_copy>
0x000768        F3D00000                 push rLink;
0x000769        D50A0009                 M[r8 + 9] = Null;

 <$frame_sync.usb_in_stereo_audio_copy_retry>
0x00076A        D12A0000                 r0 = M[r8 + 0];
0x00076B        8182000F                 r6 = r0 AND 0xf;
0x00076C        0068000F                 r4 = r6 + Null;
0x00076D        01400062                 r2 = Null + 98;
0x00076E        01500005                 r3 = Null + 5;
0x00076F        65080007                 Null = 7 - r6;
0x000770        DD500003                 if POS jump $M.frame_sync.usb_in_stereo_audio_copy.lower_port;
0x000771        0068004F                 r4 = r6 + r2;
0x000772        03850000                 r6 = r6 + r3;

 <$M.frame_sync.usb_in_stereo_audio_copy.lower_port>
0x000773        5148FE2B                 I4 = r6 + -469;
0x000774        D13A0007                 r1 = M[r8 + 7];
0x000775        D1236437                 r0 = M[r1 + 25655];
0x000776        DC02000F                 jump r0;

 <$M.frame_sync.usb_in_stereo_audio_copy.idle>
0x000777        D50A0008                 M[r8 + 8] = Null;
0x000778        E420002F                 r0 = Null + 1;
0x000779        D13A0006                 r1 = M[r8 + 6];
0x00077A        00230001                 if NE r0 = r1 + Null;
0x00077B        D52A0006                 M[r8 + 6] = r0;
0x00077C        D506FE7B                 M[r4 + -389] = Null;
0x00077D        D12A0000                 r0 = M[r8 + 0];
0x00077E        E1F00EE9                 call $cbuffer.calc_amount_data;
0x00077F        00C3000F                 r10 = r1 + Null;
0x000780        E5F00002                 do $M.frame_sync.usb_in_stereo_audio_copy.empty_loop;
0x000781        03000020                 Null = Null + Null, r0 = M[I4,0];

 <$M.frame_sync.usb_in_stereo_audio_copy.empty_loop>
0x000782        0900FE33                 Null = Null + M[0xfffe33];
0x000783        D12A0000                 r0 = M[r8 + 0];
0x000784        E1F00EE3                 call $cbuffer.calc_amount_data;
0x000785        0003000F                 Null = r1 + Null;
0x000786        DD10004E                 if NE jump $M.frame_sync.usb_in_stereo_audio_copy.exit;
0x000787        E420002F                 r0 = Null + 1;
0x000788        D52A0007                 M[r8 + 7] = r0;
0x000789        DDF0004B                 jump $M.frame_sync.usb_in_stereo_audio_copy.exit;

 <$M.frame_sync.usb_in_stereo_audio_copy.syncing_a>
0x00078A        D12A0000                 r0 = M[r8 + 0];
0x00078B        E1F00EDC                 call $cbuffer.calc_amount_data;
0x00078C        D12A0003                 r0 = M[r8 + 3];
0x00078D        21C20004                 r10 = r0 - 4;
0x00078E        E422002F                 r0 = r0 + 1;
0x00078F        2003002F                 Null = r1 - r0;
0x000790        DD400044                 if NEG jump $M.frame_sync.usb_in_stereo_audio_copy.exit;
0x000791        D13A0005                 r1 = M[r8 + 5];
0x000792        E433002F                 r1 = r1 + 1;
0x000793        8133007F                 r1 = r1 AND 0x7f;
0x000794        03000020                 Null = Null + Null, r0 = M[I4,0];
0x000795        D14A0007                 r2 = M[r8 + 7];
0x000796        01500002                 r3 = Null + 2;
0x000797        D55A0007                 M[r8 + 7] = r3;
0x000798        E404003F                 Null = r2 - 1;
0x000799        DD000014                 if EQ jump $M.frame_sync.usb_in_stereo_audio_copy.skip_and_update;
0x00079A        2003002F                 Null = r1 - r0;
0x00079B        DD000012                 if EQ jump $M.frame_sync.usb_in_stereo_audio_copy.skip_and_update;
0x00079C        03000020                 Null = Null + Null, r0 = M[I4,0];
0x00079D        03000020                 Null = Null + Null, r0 = M[I4,0];
0x00079E        03000020                 Null = Null + Null, r0 = M[I4,0];
0x00079F        03000020                 Null = Null + Null, r0 = M[I4,0];
0x0007A0        2003002F                 Null = r1 - r0;
0x0007A1        DD000004                 if EQ jump $M.frame_sync.usb_in_stereo_audio_copy.large_packet;
0x0007A2        01200000                 r0 = Null + 0;
0x0007A3        D52A0007                 M[r8 + 7] = r0;
0x0007A4        DDF00030                 jump $M.frame_sync.usb_in_stereo_audio_copy.exit;

 <$M.frame_sync.usb_in_stereo_audio_copy.large_packet>
0x0007A5        D13A0006                 r1 = M[r8 + 6];
0x0007A6        21330002                 r1 = r1 - 2;
0x0007A7        DD500003                 if POS jump $M.frame_sync.usb_in_stereo_audio_copy.skip_all_large;
0x0007A8        01300000                 r1 = Null + 0;
0x0007A9        01CC0004                 r10 = r10 + 4;

 <$M.frame_sync.usb_in_stereo_audio_copy.skip_all_large>
0x0007AA        D53A0008                 M[r8 + 8] = r1;
0x0007AB        01300003                 r1 = Null + 3;
0x0007AC        D53A0007                 M[r8 + 7] = r1;

 <$M.frame_sync.usb_in_stereo_audio_copy.skip_and_update>
0x0007AD        D52A0005                 M[r8 + 5] = r0;
0x0007AE        E5F00002                 do $M.frame_sync.usb_in_stereo_audio_copy.skip_loop;
0x0007AF        03000020                 Null = Null + Null, r0 = M[I4,0];

 <$M.frame_sync.usb_in_stereo_audio_copy.skip_loop>
0x0007B0        D12A0000                 r0 = M[r8 + 0];
0x0007B1        4430004F                 r1 = Null + I4;
0x0007B2        E1F00EEE                 call $cbuffer.set_read_address;
0x0007B3        DDF00021                 jump $M.frame_sync.usb_in_stereo_audio_copy.exit;

 <$M.frame_sync.usb_in_stereo_audio_copy.synced>
0x0007B4        D12A0001                 r0 = M[r8 + 1];
0x0007B5        E1F00EA2                 call $cbuffer.calc_amount_space;
0x0007B6        0052000F                 r3 = r0 + Null;
0x0007B7        D12A0002                 r0 = M[r8 + 2];
0x0007B8        E1F00E9F                 call $cbuffer.calc_amount_space;
0x0007B9        2005002F                 Null = r3 - r0;
0x0007BA        00520005                 if POS r3 = r0 + Null;
0x0007BB        D19A0003                 r7 = M[r8 + 3];
0x0007BC        9199007E                 r7 = r7 ASHIFT -2;
0x0007BD        2005009F                 Null = r3 - r7;
0x0007BE        DD400016                 if NEG jump $M.frame_sync.usb_in_stereo_audio_copy.exit;
0x0007BF        0900FE33                 Null = Null + M[0xfffe33];
0x0007C0        D12A0000                 r0 = M[r8 + 0];
0x0007C1        E1F00EA6                 call $cbuffer.calc_amount_data;
0x0007C2        01C0FFFC                 r10 = Null + -4;
0x0007C3        D15A0008                 r3 = M[r8 + 8];
0x0007C4        20CC00C0                 if EQ r10 = r10 - r10;
0x0007C5        D12A0003                 r0 = M[r8 + 3];
0x0007C6        032C0000                 r0 = r0 + r10;
0x0007C7        8DC2007E                 r10 = r0 LSHIFT -2;
0x0007C8        E422002F                 r0 = r0 + 1;
0x0007C9        2003002F                 Null = r1 - r0;
0x0007CA        DD40000A                 if NEG jump $M.frame_sync.usb_in_stereo_audio_copy.exit;
0x0007CB        D13A0006                 r1 = M[r8 + 6];
0x0007CC        E433003F                 r1 = r1 - 1;
0x0007CD        E425003F                 r0 = r3 - 1;
0x0007CE        00230004                 if NEG r0 = r1 + Null;
0x0007CF        D52A0008                 M[r8 + 8] = r0;
0x0007D0        E1F00007                 call $M.frame_sync.usb_in_stereo_audio_copy.usb_in_stereo_copy_helper;
0x0007D1        E420002F                 r0 = Null + 1;
0x0007D2        D52A0009                 M[r8 + 9] = r0;
0x0007D3        DDF0FF97                 jump $frame_sync.usb_in_stereo_audio_copy_retry;

 <$M.frame_sync.usb_in_stereo_audio_copy.exit>
0x0007D4        51C00000                 L0 = Null + 0;
0x0007D5        51F00000                 L5 = Null + 0;
0x0007D6        DDF00EF3                 jump $pop_rLink_and_rts;

 <$M.frame_sync.usb_in_stereo_audio_copy.usb_in_stereo_copy_helper>
0x0007D7        F3D00000                 push rLink;
0x0007D8        D13A0005                 r1 = M[r8 + 5];
0x0007D9        E433002F                 r1 = r1 + 1;
0x0007DA        8133007F                 r1 = r1 AND 0x7f;
0x0007DB        D506FE7B                 M[r4 + -389] = Null;
0x0007DC        03000020                 Null = Null + Null, r0 = M[I4,0];
0x0007DD        D52A0005                 M[r8 + 5] = r0;
0x0007DE        2003002F                 Null = r1 - r0;
0x0007DF        DD000004                 if EQ jump $M.frame_sync.usb_in_stereo_audio_copy.copy_data;
0x0007E0        01200000                 r0 = Null + 0;
0x0007E1        D52A0007                 M[r8 + 7] = r0;
0x0007E2        DDF0001B                 jump $M.frame_sync.usb_in_stereo_audio_copy.lexit;

 <$M.frame_sync.usb_in_stereo_audio_copy.copy_data>
0x0007E3        E420002F                 r0 = Null + 1;
0x0007E4        D526FE7B                 M[r4 + -389] = r0;
0x0007E5        D12A0001                 r0 = M[r8 + 1];
0x0007E6        E1F00EA5                 call $cbuffer.get_write_address_and_size;
0x0007E7        5000002F                 I0 = Null + r0;
0x0007E8        50C0003F                 L0 = Null + r1;
0x0007E9        D12A0002                 r0 = M[r8 + 2];
0x0007EA        E1F00EA1                 call $cbuffer.get_write_address_and_size;
0x0007EB        5050002F                 I5 = Null + r0;
0x0007EC        50F0003F                 L5 = Null + r1;
0x0007ED        D15A0004                 r3 = M[r8 + 4];
0x0007EE        E5F00006                 do $M.frame_sync.usb_in_stereo_audio_copy.lp_stereo_loop;
0x0007EF        03000020                 Null = Null + Null, r0 = M[I4,0];
0x0007F0        93250000                 r0 = r0 ASHIFT r3;
0x0007F1        03000030                 Null = Null + Null, r1 = M[I4,0];
0x0007F2        93350000                 r1 = r1 ASHIFT r3;
0x0007F3        0300A1B5                 Null = Null + Null, M[I0,1] = r0, M[I5,1] = r1;

 <$M.frame_sync.usb_in_stereo_audio_copy.lp_stereo_loop>
0x0007F4        D12A0000                 r0 = M[r8 + 0];
0x0007F5        4430004F                 r1 = Null + I4;
0x0007F6        E1F00EAA                 call $cbuffer.set_read_address;
0x0007F7        D12A0001                 r0 = M[r8 + 1];
0x0007F8        4430000F                 r1 = Null + I0;
0x0007F9        E1F00EAB                 call $cbuffer.set_write_address;
0x0007FA        D12A0002                 r0 = M[r8 + 2];
0x0007FB        4430005F                 r1 = Null + I5;
0x0007FC        E1F00EA8                 call $cbuffer.set_write_address;

 <$M.frame_sync.usb_in_stereo_audio_copy.lexit>
0x0007FD        DDF00ECC                 jump $pop_rLink_and_rts;

 <$audio_proc.delay.process>
0x0007FE        F3D00000                 push rLink;
0x0007FF        D18A0003                 r6 = M[r8 + 3];
0x000800        8DE80001                 rMAC = r6 LSHIFT 1 (MI);
0x000801        91E10080                 rMAC = rMAC ASHIFT 0 (LO);
0x000802        01200003                 r0 = Null + 3;
0x000803        D9020000                 Div = rMAC / r0;
0x000804        D12A0000                 r0 = M[r8 + 0];
0x000805        E1F00E96                 call $frmbuffer.get_buffer;
0x000806        5040002F                 I4 = Null + r0;
0x000807        50E0003F                 L4 = Null + r1;
0x000808        00C5000F                 r10 = r3 + Null;
0x000809        D12A0001                 r0 = M[r8 + 1];
0x00080A        E1F00EBD                 call $frmbuffer.set_frame_size;
0x00080B        E1F00E90                 call $frmbuffer.get_buffer;
0x00080C        5050002F                 I5 = Null + r0;
0x00080D        50F0003F                 L5 = Null + r1;
0x00080E        D12A0003                 r0 = M[r8 + 3];
0x00080F        70A0002F                 M2 = Null - r0;
0x000810        DD000079                 if EQ jump $M.audio_proc.delay.process.jp_no_delay;
0x000811        D12A0002                 r0 = M[r8 + 2];
0x000812        E1F00E79                 call $cbuffer.get_write_address_and_size;
0x000813        5010002F                 I1 = Null + r0;
0x000814        50D0003F                 L1 = Null + r1;
0x000815        5000002F                 I0 = Null + r0;
0x000816        50C0003F                 L0 = Null + r1;
0x000817        70A0008F                 M2 = Null - r6;
0x000818        DD000071                 if EQ jump $M.audio_proc.delay.process.jp_no_delay;
0x000819        D10A0004                 Null = M[r8 + 4];
0x00081A        DD100006                 if NE jump $M.audio_proc.delay.process.mode_16bit;
0x00081B        02003200                 Null = Null + Null, r1 = M[I0,M2];
0x00081C        E5F00003                 do $M.audio_proc.delay.process.loop_delay;
0x00081D        03003121                 Null = Null + Null, r1 = M[I0,1], r0 = M[I4,1];
0x00081E        0300A5B5                 Null = Null + Null, M[I1,1] = r0, M[I5,1] = r1;

 <$M.audio_proc.delay.process.loop_delay>
0x00081F        DDF00062                 jump $M.audio_proc.delay.process.update_delay_buffer;

 <$M.audio_proc.delay.process.mode_16bit>
0x000820        D16A0005                 r4 = M[r8 + 5];
0x000821        D9200001                 r0 = DivResult;
0x000822        D9300002                 r1 = DivRemainder;
0x000823        0003000F                 Null = r1 + Null;
0x000824        DD000005                 if EQ jump $M.audio_proc.delay.process.remainder_0;
0x000825        E403003F                 Null = r1 - 1;
0x000826        DD000006                 if EQ jump $M.audio_proc.delay.process.remainder_1;
0x000827        21030002                 Null = r1 - 2;
0x000828        DD000010                 if EQ jump $M.audio_proc.delay.process.remainder_2;

 <$M.audio_proc.delay.process.remainder_0>
0x000829        70A0002F                 M2 = Null - r0;
0x00082A        0096000F                 r7 = r4 + Null;
0x00082B        DDF00019                 jump $M.audio_proc.delay.process.done_setting_delay_read;

 <$M.audio_proc.delay.process.remainder_1>
0x00082C        0006000F                 Null = r4 + Null;
0x00082D        DD100005                 if NE jump $M.audio_proc.delay.process.rem1_writepos_not0;
0x00082E        E422002F                 r0 = r0 + 1;
0x00082F        70A0002F                 M2 = Null - r0;
0x000830        01900002                 r7 = Null + 2;
0x000831        DDF00013                 jump $M.audio_proc.delay.process.done_setting_delay_read;

 <$M.audio_proc.delay.process.rem1_writepos_not0>
0x000832        70A0002F                 M2 = Null - r0;
0x000833        E430002F                 r1 = Null + 1;
0x000834        8D06007F                 Null = r4 LSHIFT -1;
0x000835        00300000                 if EQ r1 = Null + Null;
0x000836        0093000F                 r7 = r1 + Null;
0x000837        DDF0000D                 jump $M.audio_proc.delay.process.done_setting_delay_read;

 <$M.audio_proc.delay.process.remainder_2>
0x000838        8D06007F                 Null = r4 LSHIFT -1;
0x000839        DD000004                 if EQ jump $M.audio_proc.delay.process.rem2_writepos_not2;
0x00083A        70A0002F                 M2 = Null - r0;
0x00083B        01900000                 r7 = Null + 0;
0x00083C        DDF00008                 jump $M.audio_proc.delay.process.done_setting_delay_read;

 <$M.audio_proc.delay.process.rem2_writepos_not2>
0x00083D        E422002F                 r0 = r0 + 1;
0x00083E        70A0002F                 M2 = Null - r0;
0x00083F        01300002                 r1 = Null + 2;
0x000840        0006000F                 Null = r4 + Null;
0x000841        E4300020                 if EQ r1 = Null + 1;
0x000842        0093000F                 r7 = r1 + Null;
0x000843        DDF00001                 jump $M.audio_proc.delay.process.done_setting_delay_read;

 <$M.audio_proc.delay.process.done_setting_delay_read>
0x000844        02003200                 Null = Null + Null, r1 = M[I0,M2];
0x000845        E5F0003B                 do $M.audio_proc.delay.process.loop_delay_16bit;
0x000846        03000021                 Null = Null + Null, r0 = M[I4,1];
0x000847        FD0000FF 8122FF00        r0 = r0 AND 0xffff00;
0x000849        D139946E                 r1 = M[r7 + -27538];
0x00084A        DC03000F                 jump r1;

 <$M.audio_proc.delay.process.read_byte_pos_0>
0x00084B        03003000                 Null = Null + Null, r1 = M[I0,0];
0x00084C        FD0000FF 8173FF00        r5 = r1 AND 0xffff00;
0x00084E        030000F5                 Null = Null + Null, M[I5,1] = r5;
0x00084F        01900002                 r7 = Null + 2;
0x000850        DDF00011                 jump $M.audio_proc.delay.process.do_write;

 <$M.audio_proc.delay.process.read_byte_pos_1>
0x000851        03003100                 Null = Null + Null, r1 = M[I0,1];
0x000852        8173FFFF                 r5 = r1 AND 0xffff;
0x000853        8D770008                 r5 = r5 LSHIFT 8;
0x000854        030000F5                 Null = Null + Null, M[I5,1] = r5;
0x000855        01900000                 r7 = Null + 0;
0x000856        DDF0000B                 jump $M.audio_proc.delay.process.do_write;

 <$M.audio_proc.delay.process.read_byte_pos_2>
0x000857        03003100                 Null = Null + Null, r1 = M[I0,1];
0x000858        817300FF                 r5 = r1 AND 0xff;
0x000859        8D770010                 r5 = r5 LSHIFT 16;
0x00085A        03003000                 Null = Null + Null, r1 = M[I0,0];
0x00085B        FD0000FF 81330000        r1 = r1 AND 0xff0000;
0x00085D        8D330078                 r1 = r1 LSHIFT -8;
0x00085E        87730000                 r5 = r5 OR r1;
0x00085F        030000F5                 Null = Null + Null, M[I5,1] = r5;
0x000860        E490002F                 r7 = Null + 1;

 <$M.audio_proc.delay.process.do_write>
0x000861        D1366474                 r1 = M[r4 + 25716];
0x000862        DC03000F                 jump r1;

 <$M.audio_proc.delay.process.write_byte_pos_0>
0x000863        03003400                 Null = Null + Null, r1 = M[I1,0];
0x000864        813300FF                 r1 = r1 AND 0xff;
0x000865        87320000                 r1 = r1 OR r0;
0x000866        0300B400                 Null = Null + Null, M[I1,0] = r1;
0x000867        01600002                 r4 = Null + 2;
0x000868        DDF00017                 jump $M.audio_proc.delay.process.get_next_input_sample;

 <$M.audio_proc.delay.process.write_byte_pos_1>
0x000869        03003400                 Null = Null + Null, r1 = M[I1,0];
0x00086A        FD0000FF 81330000        r1 = r1 AND 0xff0000;
0x00086C        8D420078                 r2 = r0 LSHIFT -8;
0x00086D        87340000                 r1 = r1 OR r2;
0x00086E        0300B500                 Null = Null + Null, M[I1,1] = r1;
0x00086F        01600000                 r4 = Null + 0;
0x000870        DDF0000F                 jump $M.audio_proc.delay.process.get_next_input_sample;

 <$M.audio_proc.delay.process.write_byte_pos_2>
0x000871        03003400                 Null = Null + Null, r1 = M[I1,0];
0x000872        FD0000FF 8133FF00        r1 = r1 AND 0xffff00;
0x000874        8D420070                 r2 = r0 LSHIFT -16;
0x000875        87340000                 r1 = r1 OR r2;
0x000876        0300B500                 Null = Null + Null, M[I1,1] = r1;
0x000877        03003400                 Null = Null + Null, r1 = M[I1,0];
0x000878        8133FFFF                 r1 = r1 AND 0xffff;
0x000879        8D420008                 r2 = r0 LSHIFT 8;
0x00087A        FD0000FF 81440000        r2 = r2 AND 0xff0000;
0x00087C        87340000                 r1 = r1 OR r2;
0x00087D        0300B400                 Null = Null + Null, M[I1,0] = r1;
0x00087E        E460002F                 r4 = Null + 1;

 <$M.audio_proc.delay.process.get_next_input_sample>
0x00087F        03000000                 Null = Null + Null;

 <$M.audio_proc.delay.process.loop_delay_16bit>
0x000880        D56A0005                 M[r8 + 5] = r4;

 <$M.audio_proc.delay.process.update_delay_buffer>
0x000881        D12A0002                 r0 = M[r8 + 2];
0x000882        4430001F                 r1 = Null + I1;
0x000883        E1F00E21                 call $cbuffer.set_write_address;

 <$M.audio_proc.delay.process.jp_done>
0x000884        51C00000                 L0 = Null + 0;
0x000885        51D00000                 L1 = Null + 0;
0x000886        51E00000                 L4 = Null + 0;
0x000887        51F00000                 L5 = Null + 0;
0x000888        DDF00E41                 jump $pop_rLink_and_rts;

 <$M.audio_proc.delay.process.jp_no_delay>
0x000889        E5F00003                 do $M.audio_proc.delay.process.loop_copy;
0x00088A        03000031                 Null = Null + Null, r1 = M[I4,1];
0x00088B        030000B5                 Null = Null + Null, M[I5,1] = r1;

 <$M.audio_proc.delay.process.loop_copy>
0x00088C        DDF0FFF8                 jump $M.audio_proc.delay.process.jp_done;

 <$cbops.fir_resample.main>
0x00088D        F3D00000                 push rLink;
0x00088E        D12A0000                 r0 = M[r8 + 0];
0x00088F        D038002F                 r1 = M[r6 + r0];
0x000890        5000003F                 I0 = Null + r1;
0x000891        D039002F                 r1 = M[r7 + r0];
0x000892        50C0003F                 L0 = Null + r1;
0x000893        D12A0001                 r0 = M[r8 + 1];
0x000894        D038002F                 r1 = M[r6 + r0];
0x000895        5040003F                 I4 = Null + r1;
0x000896        D039002F                 r1 = M[r7 + r0];
0x000897        50E0003F                 L4 = Null + r1;
0x000898        093064E4                 r1 = Null + M[$M.cbops.fir_resample.amount_used];
0x000899        00C30001                 if NE r10 = r1 + Null;
0x00089A        19C064E4                 M[$M.cbops.fir_resample.amount_used] = r10 + Null;
0x00089B        D10A000C                 Null = M[r8 + 12];
0x00089C        DD10000C                 if NE jump $M.cbops.fir_resample.main.do_resample;
0x00089D        D12A0006                 r0 = M[r8 + 6];
0x00089E        D13A0007                 r1 = M[r8 + 7];
0x00089F        2002003F                 Null = r0 - r1;
0x0008A0        DD100008                 if NE jump $M.cbops.fir_resample.main.do_resample;
0x0008A1        009C000F                 r7 = r10 + Null;
0x0008A2        E4CC003F                 r10 = r10 - 1;
0x0008A3        03002100                 Null = Null + Null, r0 = M[I0,1];
0x0008A4        E5F00002                 do $M.cbops.fir_resample.main.copy_loop;
0x0008A5        030021A1                 Null = Null + Null, r0 = M[I0,1], M[I4,1] = r0;

 <$M.cbops.fir_resample.main.copy_loop>
0x0008A6        030000A1                 Null = Null + Null, M[I4,1] = r0;
0x0008A7        DDF00051                 jump $M.cbops.fir_resample.main.process_done;

 <$M.cbops.fir_resample.main.do_resample>
0x0008A8        51D0000D                 L1 = Null + 13;
0x0008A9        D12A0005                 r0 = M[r8 + 5];
0x0008AA        5010002F                 I1 = Null + r0;
0x0008AB        D17A0002                 r5 = M[r8 + 2];
0x0008AC        5137007E                 I3 = r5 + 126;
0x0008AD        D17A0009                 r5 = M[r8 + 9];
0x0008AE        D15A0008                 r3 = M[r8 + 8];
0x0008AF        5050005F                 I5 = Null + r3;
0x0008B0        D16A000A                 r4 = M[r8 + 10];
0x0008B1        D12A000B                 r0 = M[r8 + 11];
0x0008B2        5020002F                 I2 = Null + r0;
0x0008B3        51B00001                 M3 = Null + 1;
0x0008B4        01800015                 r6 = Null + 21;
0x0008B5        70A0008F                 M2 = Null - r6;
0x0008B6        5080008F                 M0 = Null + r6;
0x0008B7        01900000                 r7 = Null + 0;
0x0008B8        F3A00000                 push r8;
0x0008B9        E5F00039                 do $M.cbops.fir_resample.main.fractinal_gen_loop;
0x0008BA        03005100                 Null = Null + Null, r3 = M[I0,1];
0x0008BB        7F2BD500                 I2 = I2 - M3, M[I1,1] = r3;
0x0008BC        DD500035                 if POS jump $M.cbops.fir_resample.main.continue_reading;

 <$M.cbops.fir_resample.main.generate_output_loop>
0x0008BD        CC16008F                 rMAC = r4 * r6 (SS);
0x0008BE        8DA10018                 r8 = rMAC LSHIFT 24;
0x0008BF        8DAA007F                 r8 = r8 LSHIFT -1;
0x0008C0        8D410000                 r2 = rMAC LSHIFT 0;
0x0008C1        5863004F                 I6 = I3 + r2;
0x0008C2        6524FFEA                 r0 = -22 - r2;
0x0008C3        7092004F                 M1 = r0 - r2;
0x0008C4        5871000F                 I7 = I1 + Null;
0x0008C5        2211273A                 rMAC = rMAC - rMAC, r0 = M[I1,M3], r1 = M[I6,M2];
0x0008C6        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x0008C7        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x0008C8        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x0008C9        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x0008CA        BE232739                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M1];
0x0008CB        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0008CC        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0008CD        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0008CE        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0008CF        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0008D0        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0008D1        BC12273F                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3];
0x0008D2        79990002                 M1 = M1 - 2;
0x0008D3        474B0000                 r2 = r2 + M3;
0x0008D4        DD400003                 if NEG jump $M.cbops.fir_resample.main.no_extra_load;
0x0008D5        71980001                 M1 = r6 - 1;
0x0008D6        2040378F                 r2 = Null - r6, r1 = M[I1,M3];

 <$M.cbops.fir_resample.main.no_extra_load>
0x0008D7        5863004F                 I6 = I3 + r2;
0x0008D8        0041000F                 r2 = rMAC + Null;
0x0008D9        469B273A                 r7 = r7 + M3, r0 = M[I1,M3], r1 = M[I6,M2];
0x0008DA        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x0008DB        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x0008DC        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x0008DD        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x0008DE        AE232739                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M1];
0x0008DF        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0008E0        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0008E1        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0008E2        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0008E3        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0008E4        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0008E5        AC12003F                 rMAC = rMAC + r0 * r1 (SS);
0x0008E6        5817000F                 I1 = I7 + Null;
0x0008E7        CC1100AF                 rMAC = rMAC * r8 (SS);
0x0008E8        FD00007F BD14FFFF        rMAC = rMAC - r2 * 0.99999988079071045 (SS);
0x0008EA        03670091                 r4 = r4 + r5, M[I4,1] = rMAC;
0x0008EB        DD400004                 if NEG jump $M.cbops.fir_resample.main.gen_done;
0x0008EC        59220001                 I2 = I2 + 1;
0x0008ED        FD00007F 2166FFFF        r4 = r4 - 8388607;

 <$M.cbops.fir_resample.main.gen_done>
0x0008EF        5F250000                 I2 = I2 + I5;
0x0008F0        DD40FFCD                 if NEG jump $M.cbops.fir_resample.main.generate_output_loop;

 <$M.cbops.fir_resample.main.continue_reading>
0x0008F1        03000000                 Null = Null + Null;

 <$M.cbops.fir_resample.main.fractinal_gen_loop>
0x0008F2        F3A40000                 pop r8;
0x0008F3        4420001F                 r0 = Null + I1;
0x0008F4        D52A0005                 M[r8 + 5] = r0;
0x0008F5        4420002F                 r0 = Null + I2;
0x0008F6        D52A000B                 M[r8 + 11] = r0;
0x0008F7        D56A000A                 M[r8 + 10] = r4;

 <$M.cbops.fir_resample.main.process_done>
0x0008F8        51E00000                 L4 = Null + 0;
0x0008F9        51D00000                 L1 = Null + 0;
0x0008FA        51C00000                 L0 = Null + 0;
0x0008FB        199094DE                 M[$cbops.amount_written] = r7 + Null;
0x0008FC        093064E4                 r1 = Null + M[$M.cbops.fir_resample.amount_used];
0x0008FD        D12AFFFE                 r0 = M[r8 + -2];
0x0008FE        E402002F                 Null = r0 + 1;
0x0008FF        00930000                 if EQ r7 = r1 + Null;
0x000900        199064DE                 M[$cbops.amount_to_use] = r7 + Null;
0x000901        DDF00DC8                 jump $pop_rLink_and_rts;

 <$MeloD_Expansion.process>
0x000902        D1290005                 r0 = M[r7 + 5];
0x000903        D1890006                 r6 = M[r7 + 6];
0x000904        D1A90004                 r8 = M[r7 + 4];
0x000905        D3A00000                 r8 = M[r8 + Null];
0x000906        01703D5D                 r5 = Null + 15709;
0x000907        832A0000                 r0 = r0 AND r8;
0x000908        DD000004                 if EQ jump $M.MeloD_Expansion_process.not_bypassed_in_music_manager;
0x000909        0008000F                 Null = r6 + Null;
0x00090A        DD00094C                 if EQ jump $M.audio_proc.stereo_copy.Process.func;
0x00090B        2070007F                 r5 = Null - r5;

 <$M.MeloD_Expansion_process.not_bypassed_in_music_manager>
0x00090C        F3D00000                 push rLink;
0x00090D        0920FE93                 r0 = Null + M[0xfffe93];
0x00090E        F3200000                 push r0;
0x00090F        E420002F                 r0 = Null + 1;
0x000910        1920FE93                 M[0xfffe93] = r0 + Null;
0x000911        D1290000                 r0 = M[r7 + 0];
0x000912        E1F00D89                 call $frmbuffer.get_buffer;
0x000913        5000002F                 I0 = Null + r0;
0x000914        50C0003F                 L0 = Null + r1;
0x000915        D1290001                 r0 = M[r7 + 1];
0x000916        E1F00D85                 call $frmbuffer.get_buffer;
0x000917        5040002F                 I4 = Null + r0;
0x000918        50E0003F                 L4 = Null + r1;
0x000919        00C5000F                 r10 = r3 + Null;
0x00091A        D1290002                 r0 = M[r7 + 2];
0x00091B        005C000F                 r3 = r10 + Null;
0x00091C        E1F00DAB                 call $frmbuffer.set_frame_size;
0x00091D        E1F00D7E                 call $frmbuffer.get_buffer;
0x00091E        5010002F                 I1 = Null + r0;
0x00091F        50D0003F                 L1 = Null + r1;
0x000920        D1290003                 r0 = M[r7 + 3];
0x000921        005C000F                 r3 = r10 + Null;
0x000922        E1F00DA5                 call $frmbuffer.set_frame_size;
0x000923        E1F00D78                 call $frmbuffer.get_buffer;
0x000924        5050002F                 I5 = Null + r0;
0x000925        50F0003F                 L5 = Null + r1;
0x000926        51900001                 M1 = Null + 1;
0x000927        51A0FFFE                 M2 = Null + -2;
0x000928        E5F00040                 do $M.MeloD_Expansion_process.widening_process_loop;
0x000929        D1290007                 r0 = M[r7 + 7];
0x00092A        5020002F                 I2 = Null + r0;
0x00092B        D1290008                 r0 = M[r7 + 8];
0x00092C        5060002F                 I6 = Null + r0;
0x00092D        03002030                 Null = Null + Null, r0 = M[I0,0], r1 = M[I4,0];
0x00092E        9122007F                 r0 = r0 ASHIFT -1;
0x00092F        9133007F                 r1 = r1 ASHIFT -1;
0x000930        2042003F                 r2 = r0 - r1;
0x000931        03322859                 r1 = r1 + r0, r0 = M[I2,0], r3 = M[I6,1];
0x000932        CF25C959                 rMAC = r0 * r3 (SS), M[I2,1] = r2, r3 = M[I6,1];
0x000933        AF452859                 rMAC = rMAC + r2 * r3 (SS), r0 = M[I2,0], r3 = M[I6,1];
0x000934        BC12005F                 rMAC = rMAC - r0 * r3 (SS);
0x000935        91110001                 rMAC = rMAC ASHIFT 1 (56bit);
0x000936        0041000F                 r2 = rMAC + Null;
0x000937        0023C94F                 r0 = r1 + r2, M[I2,M1] = r2;
0x000938        23344959                 r1 = r1 - r2, r2 = M[I2,1], r3 = M[I6,1];
0x000939        CF454B59                 rMAC = r2 * r3 (SS), r2 = M[I2,-1], r3 = M[I6,1];
0x00093A        AF45CA69                 rMAC = rMAC + r2 * r3 (SS), M[I2,2] = r2, r4 = M[I6,1];
0x00093B        AF264900                 rMAC = rMAC + r0 * r4 (SS), r2 = M[I2,1];
0x00093C        BC144A6F                 rMAC = rMAC - r2 * r4 (SS), r2 = M[I2,M2];
0x00093D        BF45A900                 rMAC = rMAC - r2 * r3 (SS), M[I2,1] = r0;
0x00093E        91110001                 rMAC = rMAC ASHIFT 1 (56bit);
0x00093F        0021000F                 r0 = rMAC + Null;
0x000940        0300C900                 Null = Null + Null, M[I2,1] = r2;
0x000941        0300A900                 Null = Null + Null, M[I2,1] = r0;
0x000942        03004959                 Null = Null + Null, r2 = M[I2,1], r3 = M[I6,1];
0x000943        CF454B59                 rMAC = r2 * r3 (SS), r2 = M[I2,-1], r3 = M[I6,1];
0x000944        AF45CA69                 rMAC = rMAC + r2 * r3 (SS), M[I2,2] = r2, r4 = M[I6,1];
0x000945        AF264900                 rMAC = rMAC + r0 * r4 (SS), r2 = M[I2,1];
0x000946        BC144A6F                 rMAC = rMAC - r2 * r4 (SS), r2 = M[I2,M2];
0x000947        BF45A900                 rMAC = rMAC - r2 * r3 (SS), M[I2,1] = r0;
0x000948        91110001                 rMAC = rMAC ASHIFT 1 (56bit);
0x000949        0021000F                 r0 = rMAC + Null;
0x00094A        0300C900                 Null = Null + Null, M[I2,1] = r2;
0x00094B        0300A900                 Null = Null + Null, M[I2,1] = r0;
0x00094C        03004959                 Null = Null + Null, r2 = M[I2,1], r3 = M[I6,1];
0x00094D        CF454B59                 rMAC = r2 * r3 (SS), r2 = M[I2,-1], r3 = M[I6,1];
0x00094E        AF45CA69                 rMAC = rMAC + r2 * r3 (SS), M[I2,2] = r2, r4 = M[I6,1];
0x00094F        AF364900                 rMAC = rMAC + r1 * r4 (SS), r2 = M[I2,1];
0x000950        BC144A6F                 rMAC = rMAC - r2 * r4 (SS), r2 = M[I2,M2];
0x000951        BF45B900                 rMAC = rMAC - r2 * r3 (SS), M[I2,1] = r1;
0x000952        91110001                 rMAC = rMAC ASHIFT 1 (56bit);
0x000953        0031000F                 r1 = rMAC + Null;
0x000954        0300C900                 Null = Null + Null, M[I2,1] = r2;
0x000955        0300B900                 Null = Null + Null, M[I2,1] = r1;
0x000956        03004959                 Null = Null + Null, r2 = M[I2,1], r3 = M[I6,1];
0x000957        CF454B59                 rMAC = r2 * r3 (SS), r2 = M[I2,-1], r3 = M[I6,1];
0x000958        AF45CA69                 rMAC = rMAC + r2 * r3 (SS), M[I2,2] = r2, r4 = M[I6,1];
0x000959        AF364900                 rMAC = rMAC + r1 * r4 (SS), r2 = M[I2,1];
0x00095A        BC144A6F                 rMAC = rMAC - r2 * r4 (SS), r2 = M[I2,M2];
0x00095B        BF45B900                 rMAC = rMAC - r2 * r3 (SS), M[I2,1] = r1;
0x00095C        91110001                 rMAC = rMAC ASHIFT 1 (56bit);
0x00095D        0031000F                 r1 = rMAC + Null;
0x00095E        0287C900                 r6 = r6 + r5, M[I2,M1] = r2;
0x00095F        20880074                 if NEG r6 = r6 - r5;
0x000960        FD00007F 0160FFFF        r4 = Null + 8388607;
0x000962        2268B900                 r4 = r4 - r6, M[I2,M1] = r1;
0x000963        CC12418F                 rMAC = r0 * r6 (SS), r2 = M[I0,M1];
0x000964        AE460051                 rMAC = rMAC + r2 * r4 (SS), r3 = M[I4,M1];
0x000965        CC13958F                 rMAC = r1 * r6 (SS), M[I1,M1] = rMAC;
0x000966        AC15006F                 rMAC = rMAC + r3 * r4 (SS);
0x000967        02000095                 Null = Null + Null, M[I5,M1] = rMAC;

 <$M.MeloD_Expansion_process.widening_process_loop>
0x000968        D5890006                 M[r7 + 6] = r6;
0x000969        50C0000F                 L0 = Null + Null;
0x00096A        50E0000F                 L4 = Null + Null;
0x00096B        50D0000F                 L1 = Null + Null;
0x00096C        50F0000F                 L5 = Null + Null;
0x00096D        F3240000                 pop r0;
0x00096E        1920FE93                 M[0xfffe93] = r0 + Null;
0x00096F        DDF00D5A                 jump $pop_rLink_and_rts;

 <$cmpd100.analysis>
0x000970        D12A0000                 r0 = M[r8 + 0];
0x000971        D13A0001                 r1 = M[r8 + 1];
0x000972        83320000                 r1 = r1 AND r0;
0x000973        DC0D0001                 if NE rts;
0x000974        F3D00000                 push rLink;
0x000975        D12A0002                 r0 = M[r8 + 2];
0x000976        E1F00D25                 call $frmbuffer.get_buffer;
0x000977        5000002F                 I0 = Null + r0;
0x000978        50C0003F                 L0 = Null + r1;
0x000979        D12A0003                 r0 = M[r8 + 3];
0x00097A        E1F00D21                 call $frmbuffer.get_buffer;
0x00097B        5040002F                 I4 = Null + r0;
0x00097C        50E0003F                 L4 = Null + r1;
0x00097D        00C5000F                 r10 = r3 + Null;
0x00097E        01400000                 r2 = Null + 0;
0x00097F        E5F0000A                 do $M.cmpd100.analysis.loop_find_peak;
0x000980        03002131                 Null = Null + Null, r0 = M[I0,1], r1 = M[I4,1];
0x000981        2002000F                 Null = r0 - Null;
0x000982        20200024                 if NEG r0 = Null - r0;
0x000983        2003000F                 Null = r1 - Null;
0x000984        20300034                 if NEG r1 = Null - r1;
0x000985        2002003F                 Null = r0 - r1;
0x000986        00230004                 if NEG r0 = r1 + Null;
0x000987        2004002F                 Null = r2 - r0;
0x000988        00420004                 if NEG r2 = r0 + Null;

 <$M.cmpd100.analysis.loop_find_peak>
0x000989        194094E6                 M[$M.cmpd100.analysis.MusicComp_Peak] = r2 + Null;
0x00098A        0014000F                 rMAC = r2 + Null;
0x00098B        E1F00BC7                 call $math.log2_table;
0x00098C        192064E7                 M[$M.cmpd100.analysis.MusicComp_Peak_log] = r0 + Null;
0x00098D        D14A001D                 r2 = M[r8 + 29];
0x00098E        0042004F                 r2 = r0 + r2;
0x00098F        51C00000                 L0 = Null + 0;
0x000990        51E00000                 L4 = Null + 0;
0x000991        513A0008                 I3 = r8 + 8;
0x000992        514A0012                 I4 = r8 + 18;
0x000993        51900001                 M1 = Null + 1;
0x000994        D15A000D                 r3 = M[r8 + 13];
0x000995        D16A000C                 r4 = M[r8 + 12];
0x000996        D17A000B                 r5 = M[r8 + 11];
0x000997        D18A000A                 r6 = M[r8 + 10];
0x000998        2024005F                 r0 = r2 - r3;
0x000999        DD40000D                 if NEG jump $M.cmpd100.analysis.CompressComparison;
0x00099A        D13A0011                 r1 = M[r8 + 17];
0x00099B        CF236D31                 rMAC = r0 * r1 (SS), r4 = M[I3,1], r1 = M[I4,1];
0x00099C        BF360031                 rMAC = rMAC - r1 * r4 (SS), r1 = M[I4,1];
0x00099D        BF360031                 rMAC = rMAC - r1 * r4 (SS), r1 = M[I4,1];
0x00099E        BF366F00                 rMAC = rMAC - r1 * r4 (SS), r4 = M[I3,-1];
0x00099F        AC18006F                 rMAC = rMAC + r6 * r4 (SS);
0x0009A0        BC14006F                 rMAC = rMAC - r2 * r4 (SS);
0x0009A1        510A001B                 I0 = r8 + 27;
0x0009A2        191064E8                 M[$M.cmpd100.analysis.inst_gain] = rMAC + Null;
0x0009A3        01300005                 r1 = Null + 5;
0x0009A4        193094E7                 M[$M.cmpd100.analysis.region] = r1 + Null;
0x0009A5        DDF0002B                 jump $M.cmpd100.analysis.done_comparison;

 <$M.cmpd100.analysis.CompressComparison>
0x0009A6        2024006F                 r0 = r2 - r4;
0x0009A7        DD40000C                 if NEG jump $M.cmpd100.analysis.LinearComparison;
0x0009A8        D13A0010                 r1 = M[r8 + 16];
0x0009A9        CF236D31                 rMAC = r0 * r1 (SS), r4 = M[I3,1], r1 = M[I4,1];
0x0009AA        BF360031                 rMAC = rMAC - r1 * r4 (SS), r1 = M[I4,1];
0x0009AB        BF366F00                 rMAC = rMAC - r1 * r4 (SS), r4 = M[I3,-1];
0x0009AC        AC18006F                 rMAC = rMAC + r6 * r4 (SS);
0x0009AD        BC14006F                 rMAC = rMAC - r2 * r4 (SS);
0x0009AE        510A0019                 I0 = r8 + 25;
0x0009AF        191064E8                 M[$M.cmpd100.analysis.inst_gain] = rMAC + Null;
0x0009B0        01300004                 r1 = Null + 4;
0x0009B1        193094E7                 M[$M.cmpd100.analysis.region] = r1 + Null;
0x0009B2        DDF0001E                 jump $M.cmpd100.analysis.done_comparison;

 <$M.cmpd100.analysis.LinearComparison>
0x0009B3        2024007F                 r0 = r2 - r5;
0x0009B4        DD40000B                 if NEG jump $M.cmpd100.analysis.ExpandComparison;
0x0009B5        D13A000F                 r1 = M[r8 + 15];
0x0009B6        CF236D31                 rMAC = r0 * r1 (SS), r4 = M[I3,1], r1 = M[I4,1];
0x0009B7        BF366F00                 rMAC = rMAC - r1 * r4 (SS), r4 = M[I3,-1];
0x0009B8        AC18006F                 rMAC = rMAC + r6 * r4 (SS);
0x0009B9        BC14006F                 rMAC = rMAC - r2 * r4 (SS);
0x0009BA        510A0017                 I0 = r8 + 23;
0x0009BB        191064E8                 M[$M.cmpd100.analysis.inst_gain] = rMAC + Null;
0x0009BC        01300003                 r1 = Null + 3;
0x0009BD        193094E7                 M[$M.cmpd100.analysis.region] = r1 + Null;
0x0009BE        DDF00012                 jump $M.cmpd100.analysis.done_comparison;

 <$M.cmpd100.analysis.ExpandComparison>
0x0009BF        2024008F                 r0 = r2 - r6;
0x0009C0        DD40000B                 if NEG jump $M.cmpd100.analysis.gain_one;
0x0009C1        D13A000E                 r1 = M[r8 + 14];
0x0009C2        03006D00                 Null = Null + Null, r4 = M[I3,1];
0x0009C3        CF236F00                 rMAC = r0 * r1 (SS), r4 = M[I3,-1];
0x0009C4        AC18006F                 rMAC = rMAC + r6 * r4 (SS);
0x0009C5        BC14006F                 rMAC = rMAC - r2 * r4 (SS);
0x0009C6        510A0015                 I0 = r8 + 21;
0x0009C7        191064E8                 M[$M.cmpd100.analysis.inst_gain] = rMAC + Null;
0x0009C8        01300002                 r1 = Null + 2;
0x0009C9        193094E7                 M[$M.cmpd100.analysis.region] = r1 + Null;
0x0009CA        DDF00006                 jump $M.cmpd100.analysis.done_comparison;

 <$M.cmpd100.analysis.gain_one>
0x0009CB        510A0017                 I0 = r8 + 23;
0x0009CC        01100000                 rMAC = Null + 0;
0x0009CD        191064E8                 M[$M.cmpd100.analysis.inst_gain] = rMAC + Null;
0x0009CE        E430002F                 r1 = Null + 1;
0x0009CF        193094E7                 M[$M.cmpd100.analysis.region] = r1 + Null;

 <$M.cmpd100.analysis.done_comparison>
0x0009D0        D16A0007                 r4 = M[r8 + 7];
0x0009D1        5040006F                 I4 = Null + r4;
0x0009D2        03004130                 Null = Null + Null, r2 = M[I0,1], r1 = M[I4,0];
0x0009D3        2021513F                 r0 = rMAC - r1, r3 = M[I0,M1];
0x0009D4        00540004                 if NEG r3 = r2 + Null;
0x0009D5        CF256C00                 rMAC = r0 * r3 (SS), r4 = M[I3,0];
0x0009D6        BC13006F                 rMAC = rMAC - r1 * r4 (SS);
0x0009D7        03000090                 Null = Null + Null, M[I4,0] = rMAC;
0x0009D8        DDF00CF1                 jump $pop_rLink_and_rts;

 <$pcm_sync_calc_rate>
0x0009D9        F3D00000                 push rLink;
0x0009DA        E1F00CA5                 call $block_interrupts;
0x0009DB        0960FE71                 r4 = Null + M[0xfffe71];
0x0009DC        D13A0007                 r1 = M[r8 + 7];
0x0009DD        2046003F                 r2 = r4 - r1;
0x0009DE        20400044                 if NEG r2 = Null - r2;
0x0009DF        D15A0001                 r3 = M[r8 + 1];
0x0009E0        2004005F                 Null = r2 - r3;
0x0009E1        DD500003                 if POS jump $M.pcm_sync_calcrate.read_latency;
0x0009E2        E1F00C8D                 call $interrupt.unblock;
0x0009E3        DDF00CE6                 jump $pop_rLink_and_rts;

 <$M.pcm_sync_calcrate.read_latency>
0x0009E4        03350000                 r1 = r1 + r3;
0x0009E5        2043006F                 r2 = r1 - r4;
0x0009E6        20400044                 if NEG r2 = Null - r2;
0x0009E7        2004005F                 Null = r2 - r3;
0x0009E8        00360005                 if POS r1 = r4 + Null;
0x0009E9        D53A0007                 M[r8 + 7] = r1;
0x0009EA        F3A00000                 push r8;
0x0009EB        D19A0002                 r7 = M[r8 + 2];
0x0009EC        E1F00554                 call $latency.calc_pcm_latency;
0x0009ED        F3A40000                 pop r8;
0x0009EE        F3800000                 push r6;
0x0009EF        01800000                 r6 = Null + 0;
0x0009F0        F3A00000                 push r8;
0x0009F1        D19A0003                 r7 = M[r8 + 3];
0x0009F2        E110054E                 if NE call $latency.calc_pcm_latency;
0x0009F3        F3A40000                 pop r8;
0x0009F4        F3940000                 pop r7;
0x0009F5        2058009F                 r3 = r6 - r7;
0x0009F6        E1F00C79                 call $interrupt.unblock;
0x0009F7        D55A000D                 M[r8 + 13] = r3;
0x0009F8        D12A0006                 r0 = M[r8 + 6];
0x0009F9        23520000                 r3 = r3 - r0;
0x0009FA        01302710                 r1 = Null + 10000;
0x0009FB        E453005F                 r3 = MIN r1;
0x0009FC        0130D8F0                 r1 = Null + -10000;
0x0009FD        E453006F                 r3 = MAX r1;
0x0009FE        E445004F                 r2 = ABS r3;
0x0009FF        9D250190                 r0 = r3 * 400 (int) (sat);
0x000A00        9122007F                 r0 = r0 ASHIFT -1;
0x000A01        D10A000B                 Null = M[r8 + 11];
0x000A02        DD000009                 if EQ jump $M.pcm_sync_calcrate.not_converged;

 <$M.pcm_sync_calcrate.converged>
0x000A03        210401C2                 Null = r2 - 450;
0x000A04        DD500007                 if POS jump $M.pcm_sync_calcrate.not_converged;
0x000A05        99220005                 r0 = r0 * 5 (int);
0x000A06        9482002F                 r6 = r0 * r0 (frac);
0x000A07        97280000                 r0 = r0 * r6 (frac);
0x000A08        E440002F                 r2 = Null + 1;
0x000A09        D54A000B                 M[r8 + 11] = r2;
0x000A0A        DDF00007                 jump $M.pcm_sync_calcrate.converge_check_done;

 <$M.pcm_sync_calcrate.not_converged>
0x000A0B        21040096                 Null = r2 - 150;
0x000A0C        DD40FFF7                 if NEG jump $M.pcm_sync_calcrate.converged;
0x000A0D        91820018                 r6 = r0 ASHIFT 24;
0x000A0E        97220000                 r0 = r0 * r0 (frac);
0x000A0F        97280000                 r0 = r0 * r6 (frac);
0x000A10        D50A000B                 M[r8 + 11] = Null;

 <$M.pcm_sync_calcrate.converge_check_done>
0x000A11        FD000001 213247AE        r1 = r0 - 83886;
0x000A13        20220035                 if POS r0 = r0 - r1;
0x000A14        FD000001 013247AE        r1 = r0 + 83886;
0x000A16        20220034                 if NEG r0 = r0 - r1;
0x000A17        D52A0009                 M[r8 + 9] = r0;
0x000A18        01100000                 rMAC = Null + 0;
0x000A19        D12A0005                 r0 = M[r8 + 5];
0x000A1A        DD000015                 if EQ jump $M.pcm_sync_calcrate.calc_rate_done;
0x000A1B        D3200000                 r0 = M[r0 + Null];
0x000A1C        DD000013                 if EQ jump $M.pcm_sync_calcrate.calc_rate_done;
0x000A1D        D13A0004                 r1 = M[r8 + 4];
0x000A1E        D3300000                 r1 = M[r1 + Null];
0x000A1F        DD000010                 if EQ jump $M.pcm_sync_calcrate.calc_rate_done;
0x000A20        2013002F                 rMAC = r1 - r0;
0x000A21        91E10003                 rMAC = rMAC ASHIFT 3 (MI);
0x000A22        D9020000                 Div = rMAC / r0;
0x000A23        D9100001                 rMAC = DivResult;
0x000A24        03000000                 Null = Null + Null;
0x000A25        D10A000C                 Null = M[r8 + 12];
0x000A26        DD000008                 if EQ jump $M.pcm_sync_calcrate.update_rate_before_fix;
0x000A27        E420002F                 r0 = Null + 1;
0x000A28        D10A000C                 Null = M[r8 + 12];
0x000A29        D16A000A                 r4 = M[r8 + 10];
0x000A2A        FD000001 CD1147AE        rMAC = rMAC * 0.0099999904632568359 (SS);
0x000A2C        FD00007E AD16B852        rMAC = rMAC + r4 * 0.99000000953674316 (SS);

 <$M.pcm_sync_calcrate.update_rate_before_fix>
0x000A2E        D51A000A                 M[r8 + 10] = rMAC;

 <$M.pcm_sync_calcrate.calc_rate_done>
0x000A2F        95610800                 r4 = rMAC * 0.0625 (frac);
0x000A30        D15A0009                 r3 = M[r8 + 9];
0x000A31        03650000                 r4 = r4 + r3;
0x000A32        D12A0000                 r0 = M[r8 + 0];
0x000A33        E462005F                 r4 = MIN r0;
0x000A34        2020002F                 r0 = Null - r0;
0x000A35        E462006F                 r4 = MAX r0;
0x000A36        D56A0008                 M[r8 + 8] = r4;
0x000A37        DDF00C92                 jump $pop_rLink_and_rts;

 <$cbops.copy>
0x000A38        F3D00000                 push rLink;
0x000A39        51900001                 M1 = Null + 1;
0x000A3A        510A0001                 I0 = r8 + 1;
0x000A3B        01807FFF                 r6 = Null + 32767;
0x000A3C        0098210F                 r7 = r6 + Null, r0 = M[I0,M1];
0x000A3D        00C2210F                 r10 = r0 + Null, r0 = M[I0,M1];
0x000A3E        51109183                 I1 = Null + -28285;
0x000A3F        19A094DD                 M[$cbops.struc_ptr] = r8 + Null;
0x000A40        E5F00005                 do $M.cbops.copy.min_amount_data_loop;
0x000A41        0200A500                 Null = Null + Null, M[I1,M1] = r0;
0x000A42        E1F00C25                 call $cbuffer.calc_amount_data;
0x000A43        2002008F                 Null = r0 - r6;
0x000A44        00822104                 if NEG r6 = r0 + Null, r0 = M[I0,M1];

 <$M.cbops.copy.min_amount_data_loop>
0x000A45        00C2210F                 r10 = r0 + Null, r0 = M[I0,M1];
0x000A46        E5F00005                 do $M.cbops.copy.min_amount_space_loop;
0x000A47        0200A500                 Null = Null + Null, M[I1,M1] = r0;
0x000A48        E1F00C0F                 call $cbuffer.calc_amount_space;
0x000A49        2002009F                 Null = r0 - r7;
0x000A4A        00922104                 if NEG r7 = r0 + Null, r0 = M[I0,M1];

 <$M.cbops.copy.min_amount_space_loop>
0x000A4B        0078000F                 r5 = r6 + Null;
0x000A4C        2007009F                 Null = r5 - r7;
0x000A4D        00790005                 if POS r5 = r7 + Null;
0x000A4E        D1AA0000                 r8 = M[r8 + 0];

 <$M.cbops.copy.amount_to_use_loop>
0x000A4F        D12A0001                 r0 = M[r8 + 1];
0x000A50        01AA0002                 r8 = r8 + 2;
0x000A51        D1220001                 r0 = M[r0 + 1];
0x000A52        E0020001                 if NE call r0;
0x000A53        D1AAFFFE                 r8 = M[r8 + -2];
0x000A54        E40A002F                 Null = r8 + 1;
0x000A55        DD10FFFA                 if NE jump $M.cbops.copy.amount_to_use_loop;
0x000A56        21270200                 r0 = r5 - 512;
0x000A57        20770025                 if POS r5 = r5 - r0;
0x000A58        09A094DD                 r8 = Null + M[$cbops.struc_ptr];
0x000A59        197064DE                 M[$cbops.amount_to_use] = r5 + Null;
0x000A5A        DD00003C                 if EQ jump $M.cbops.copy.done;
0x000A5B        197094DE                 M[$cbops.amount_written] = r5 + Null;
0x000A5C        510A0001                 I0 = r8 + 1;
0x000A5D        514061A5                 I4 = Null + 24997;
0x000A5E        51109173                 I1 = Null + -28301;
0x000A5F        03002100                 Null = Null + Null, r0 = M[I0,1];
0x000A60        00C2210F                 r10 = r0 + Null, r0 = M[I0,M1];
0x000A61        E5F00004                 do $M.cbops.copy.get_read_address_and_size_loop;
0x000A62        E1F00C24                 call $cbuffer.get_read_address_and_size;
0x000A63        030021A1                 Null = Null + Null, r0 = M[I0,1], M[I4,1] = r0;
0x000A64        0300B500                 Null = Null + Null, M[I1,1] = r1;

 <$M.cbops.copy.get_read_address_and_size_loop>
0x000A65        00C2210F                 r10 = r0 + Null, r0 = M[I0,M1];
0x000A66        E5F00004                 do $M.cbops.copy.get_write_address_and_size_loop;
0x000A67        E1F00C24                 call $cbuffer.get_write_address_and_size;
0x000A68        030021A1                 Null = Null + Null, r0 = M[I0,1], M[I4,1] = r0;
0x000A69        0200B500                 Null = Null + Null, M[I1,M1] = r1;

 <$M.cbops.copy.get_write_address_and_size_loop>
0x000A6A        D1AA0000                 r8 = M[r8 + 0];

 <$M.cbops.copy.operator_functions_loop>
0x000A6B        018061A5                 r6 = Null + 24997;
0x000A6C        01909173                 r7 = Null + -28301;
0x000A6D        09C064DE                 r10 = Null + M[$cbops.amount_to_use];
0x000A6E        D12A0001                 r0 = M[r8 + 1];
0x000A6F        01AA0002                 r8 = r8 + 2;
0x000A70        D1220002                 r0 = M[r0 + 2];
0x000A71        E0020001                 if NE call r0;
0x000A72        D1AAFFFE                 r8 = M[r8 + -2];
0x000A73        E40A002F                 Null = r8 + 1;
0x000A74        DD10FFF7                 if NE jump $M.cbops.copy.operator_functions_loop;
0x000A75        09A094DD                 r8 = Null + M[$cbops.struc_ptr];
0x000A76        511A0001                 I1 = r8 + 1;
0x000A77        512061A5                 I2 = Null + 24997;
0x000A78        51309173                 I3 = Null + -28301;
0x000A79        51900001                 M1 = Null + 1;
0x000A7A        092064DE                 r0 = Null + M[$cbops.amount_to_use];
0x000A7B        50A0002F                 M2 = Null + r0;
0x000A7C        092094DE                 r0 = Null + M[$cbops.amount_written];
0x000A7D        50B0252F                 M3 = Null + r0, r0 = M[I1,M1];
0x000A7E        5070252F                 I7 = Null + r0, r0 = M[I1,M1];

 <$M.cbops.copy.update_input_pointers_loop>
0x000A7F        03004D00                 Null = Null + Null, r2 = M[I3,1];
0x000A80        6404399F                 Null = r2 - M1, r1 = M[I2,M1];
0x000A81        DD000005                 if EQ jump $M.cbops.copy.input_is_a_port;
0x000A82        5000003F                 I0 = Null + r1;
0x000A83        50C0004F                 L0 = Null + r2;
0x000A84        50C0320F                 L0 = Null + Null, r1 = M[I0,M2];
0x000A85        4430000F                 r1 = Null + I0;

 <$M.cbops.copy.input_is_a_port>
0x000A86        E1F00C1A                 call $cbuffer.set_read_address;
0x000A87        03002500                 Null = Null + Null, r0 = M[I1,1];
0x000A88        79770001                 I7 = I7 - 1;
0x000A89        DDC0FFF6                 if GT jump $M.cbops.copy.update_input_pointers_loop;
0x000A8A        5070252F                 I7 = Null + r0, r0 = M[I1,M1];

 <$M.cbops.copy.update_output_pointers_loop>
0x000A8B        03004D00                 Null = Null + Null, r2 = M[I3,1];
0x000A8C        6404399F                 Null = r2 - M1, r1 = M[I2,M1];
0x000A8D        DD000005                 if EQ jump $M.cbops.copy.output_is_a_port;
0x000A8E        5000003F                 I0 = Null + r1;
0x000A8F        50C0004F                 L0 = Null + r2;
0x000A90        50C0330F                 L0 = Null + Null, r1 = M[I0,M3];
0x000A91        4430000F                 r1 = Null + I0;

 <$M.cbops.copy.output_is_a_port>
0x000A92        E1F00C12                 call $cbuffer.set_write_address;
0x000A93        03002500                 Null = Null + Null, r0 = M[I1,1];
0x000A94        79770001                 I7 = I7 - 1;
0x000A95        DDC0FFF6                 if GT jump $M.cbops.copy.update_output_pointers_loop;

 <$M.cbops.copy.done>
0x000A96        DDF00C33                 jump $pop_rLink_and_rts;

 <$iir_2ndStage_downsample>
0x000A97        F3D00000                 push rLink;
0x000A98        5F380000                 I3 = I3 + M0;
0x000A99        22993C00                 r7 = r7 - r7, r1 = M[I3,M0];
0x000A9A        000B000F                 Null = r9 + Null;
0x000A9B        00330031                 if NE r1 = r1 + r1;
0x000A9C        F3E20000                 push FP;
0x000A9D        F3A60000                 pop B0;
0x000A9E        F107000A                 FP = FP + 10;
0x000A9F        F3E20000                 push FP;
0x000AA0        F3C60000                 pop B4;
0x000AA1        F007003F                 FP = FP + r1;
0x000AA2        50E06C3F                 L4 = Null + r1, r4 = M[I3,M0];
0x000AA3        50903C6F                 M1 = Null + r4, r1 = M[I3,M0];
0x000AA4        00833C4F                 r6 = r1 + r2, r1 = M[I3,M0];
0x000AA5        00A33C7F                 r8 = r1 + r5, r1 = M[I3,M0];
0x000AA6        5060003F                 I6 = Null + r1;
0x000AA7        F3210000                 push I2;
0x000AA8        70A0386F                 M2 = Null - r4, r1 = M[I2,M0];
0x000AA9        9946000A                 r2 = r4 * 10 (int);
0x000AAA        74B4588F                 M3 = r2 - M0, r3 = M[I2,M0];
0x000AAB        5FB60000                 M3 = M3 + I6;
0x000AAC        5EB62800                 M3 = M3 + I6, r0 = M[I2,M0];
0x000AAD        5000282F                 I0 = Null + r0, r0 = M[I2,M0];
0x000AAE        5040002F                 I4 = Null + r0;
0x000AAF        51C0000A                 L0 = Null + 10;
0x000AB0        F3A00000                 push r8;
0x000AB1        F3B00000                 push r9;
0x000AB2        FD00007F 01F0FFFF        rMACB = Null + 8388607;
0x000AB4        E4B0002F                 r9 = Null + 1;
0x000AB5        20052C6F                 Null = r3 - r4, r0 = M[I3,M0];
0x000AB6        2055005A                 if GE r3 = r3 - r3;
0x000AB7        98457C2F                 r2 = r3 * r0 (int), r5 = M[I3,M0];
0x000AB8        004400F4                 if NEG r2 = r2 + rMACB;
0x000AB9        20022C4F                 Null = r0 - r2, r0 = M[I3,M0];
0x000ABA        007700BC                 if GT r5 = r5 + r9;
0x000ABB        0003000F                 Null = r1 + Null;
0x000ABC        00730001                 if NE r5 = r1 + Null;
0x000ABD        01320007                 r1 = r0 + 7;
0x000ABE        F108FFFF                 Null = M[SP + -0x1];
0x000ABF        00230001                 if NE r0 = r1 + Null;
0x000AC0        D12291C0                 r0 = M[r0 + -28224];
0x000AC1        F12CFFFF                 M[SP + -0x1] = r0;
0x000AC2        23C70000                 r10 = r10 - r5;
0x000AC3        DD400022                 if NEG jump $M.iir_2ndStage_downsample.insufficient_data;

 <$M.iir_2ndStage_downsample.loop>
0x000AC4        9434006F                 r1 = r2 * r4 (frac);
0x000AC5        5876003F                 I7 = I6 + r1;
0x000AC6        F1A8FFFF                 r8 = M[SP + -0x1];

 <$M.iir_2ndStage_downsample.read_input>
0x000AC7        5823140F                 I2 = I3 + Null, rMAC = M[I1,M0];
0x000AC8        E00A000F                 call r8;
0x000AC9        227B90B0                 r5 = r5 - r9, M[I0,M0] = rMAC, M[I4,M0] = r1;
0x000ACA        DD10FFFD                 if NE jump $M.iir_2ndStage_downsample.read_input;
0x000ACB        74A0009F                 M2 = Null - M1;
0x000ACC        4460009F                 r4 = Null + M1;
0x000ACD        025B403D                 r3 = r3 + r9, r2 = M[I0,M0], r1 = M[I7,M1];
0x000ACE        CE34403D                 rMAC = r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M1];
0x000ACF        AE34403D                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M1];
0x000AD0        AE34403D                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M1];
0x000AD1        AE34403D                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M1];
0x000AD2        7C7B007F                 I7 = M3 - I7;
0x000AD3        AE34403E                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M2];
0x000AD4        AE34403E                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M2];
0x000AD5        AE34403E                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M2];
0x000AD6        AE34403E                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M2];
0x000AD7        AE34403E                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M2];
0x000AD8        AC13004F                 rMAC = rMAC + r1 * r2 (SS);
0x000AD9        F1A8FFFE                 r8 = M[SP + -0x2];
0x000ADA        903100AF                 r1 = rMAC ASHIFT r8;
0x000ADB        029B00B4                 r7 = r7 + r9, M[I5,M0] = r1;
0x000ADC        79330003                 I3 = I3 - 3;
0x000ADD        20052C6F                 Null = r3 - r4, r0 = M[I3,M0];
0x000ADE        2055005A                 if GE r3 = r3 - r3;
0x000ADF        98457C2F                 r2 = r3 * r0 (int), r5 = M[I3,M0];
0x000AE0        004400F4                 if NEG r2 = r2 + rMACB;
0x000AE1        20022C4F                 Null = r0 - r2, r0 = M[I3,M0];
0x000AE2        007700BC                 if GT r5 = r5 + r9;
0x000AE3        23C70000                 r10 = r10 - r5;
0x000AE4        DD50FFE0                 if POS jump $M.iir_2ndStage_downsample.loop;

 <$M.iir_2ndStage_downsample.insufficient_data>
0x000AE5        006700CF                 r4 = r5 + r10;
0x000AE6        DD000008                 if EQ jump $M.iir_2ndStage_downsample.done;
0x000AE7        0076000F                 r5 = r4 + Null;
0x000AE8        F1A8FFFF                 r8 = M[SP + -0x1];

 <$M.iir_2ndStage_downsample.read_input_end>
0x000AE9        5823140F                 I2 = I3 + Null, rMAC = M[I1,M0];
0x000AEA        E00A000F                 call r8;
0x000AEB        227B90B0                 r5 = r5 - r9, M[I0,M0] = rMAC, M[I4,M0] = r1;
0x000AEC        DD10FFFD                 if NE jump $M.iir_2ndStage_downsample.read_input_end;
0x000AED        206000CF                 r4 = Null - r10;

 <$M.iir_2ndStage_downsample.done>
0x000AEE        F103FFFE                 SP = SP + -2;
0x000AEF        5832000F                 I3 = I2 + Null;
0x000AF0        F3250000                 pop I2;
0x000AF1        50C0E80F                 L0 = Null + Null, M[I2,M0] = r4;
0x000AF2        4420D80F                 r0 = Null + I0, M[I2,M0] = r3;
0x000AF3        4420A84F                 r0 = Null + I4, M[I2,M0] = r0;
0x000AF4        50E0A80F                 L4 = Null + Null, M[I2,M0] = r0;
0x000AF5        DDF00BD4                 jump $pop_rLink_and_rts;

 <$cbops.dither_and_shift.main>
0x000AF6        F3D00000                 push rLink;
0x000AF7        D12A0000                 r0 = M[r8 + 0];
0x000AF8        D038002F                 r1 = M[r6 + r0];
0x000AF9        5000003F                 I0 = Null + r1;
0x000AFA        D039002F                 r1 = M[r7 + r0];
0x000AFB        50C0003F                 L0 = Null + r1;
0x000AFC        D12A0001                 r0 = M[r8 + 1];
0x000AFD        D038002F                 r1 = M[r6 + r0];
0x000AFE        5040003F                 I4 = Null + r1;
0x000AFF        D039002F                 r1 = M[r7 + r0];
0x000B00        50E0003F                 L4 = Null + r1;
0x000B01        094064E1                 r2 = Null + M[$M.cbops.dither_and_shift.main.rand_num];
0x000B02        D15A0003                 r3 = M[r8 + 3];
0x000B03        FD00007F 0170FFFF        r5 = Null + 8388607;
0x000B05        D125945C                 r0 = M[r3 + -27556];
0x000B06        D19A0002                 r7 = M[r8 + 2];
0x000B07        6589FFE8                 r6 = -24 - r7;
0x000B08        9087008F                 r6 = r5 ASHIFT r6;
0x000B09        51900011                 M1 = Null + 17;
0x000B0A        01603555                 r4 = Null + 13653;
0x000B0B        DC02000F                 jump r0;

 <$M.cbops.dither_and_shift.main.no_dither>
0x000B0C        FD00007F 0150FFFF        r3 = Null + 8388607;
0x000B0E        9065009F                 r4 = r3 ASHIFT r7;
0x000B0F        E4CC003F                 r10 = r10 - 1;
0x000B10        03001100                 Null = Null + Null, rMAC = M[I0,1];
0x000B11        93190000                 rMAC = rMAC ASHIFT r7 (56bit);
0x000B12        E416005F                 rMAC = MIN r4;
0x000B13        E5F00004                 do $M.cbops.dither_and_shift.main.just_shift_loop;
0x000B14        03001191                 Null = Null + Null, rMAC = M[I0,1], M[I4,1] = rMAC;
0x000B15        93190000                 rMAC = rMAC ASHIFT r7 (56bit);
0x000B16        E416005F                 rMAC = MIN r4;

 <$M.cbops.dither_and_shift.main.just_shift_loop>
0x000B17        03000091                 Null = Null + Null, M[I4,1] = rMAC;
0x000B18        DDF00030                 jump $M.cbops.dither_and_shift.main.end;

 <$M.cbops.dither_and_shift.main.tpdf_dither>
0x000B19        FD0000FF 51503751        I5 = Null + -51375;
0x000B1B        03001100                 Null = Null + Null, rMAC = M[I0,1];
0x000B1C        AC14008F                 rMAC = rMAC + r2 * r6 (SS);
0x000B1D        E5F00009                 do $M.cbops.dither_and_shift.main.tpdf_dither_loop;
0x000B1E        9B460000                 r2 = r2 * r4 (int);
0x000B1F        47490000                 r2 = r2 + M1;
0x000B20        AC14008F                 rMAC = rMAC + r2 * r6 (SS);
0x000B21        AC17008F                 rMAC = rMAC + r5 * r6 (SS);
0x000B22        9B460094                 r2 = r2 * r4 (int), M[I5,0] = rMAC;
0x000B23        47490034                 r2 = r2 + M1, r1 = M[I5,0];
0x000B24        93391100                 r1 = r1 ASHIFT r7, rMAC = M[I0,1];
0x000B25        AF4800B1                 rMAC = rMAC + r2 * r6 (SS), M[I4,1] = r1;

 <$M.cbops.dither_and_shift.main.tpdf_dither_loop>
0x000B26        03001300                 Null = Null + Null, rMAC = M[I0,-1];
0x000B27        DDF00021                 jump $M.cbops.dither_and_shift.main.end;

 <$M.cbops.dither_and_shift.main.noiseshaped_dither>
0x000B28        51D00005                 L1 = Null + 5;
0x000B29        D12A0004                 r0 = M[r8 + 4];
0x000B2A        5010002F                 I1 = Null + r0;
0x000B2B        FD0000FF 5150374B        I5 = Null + -51381;
0x000B2D        5180FFFA                 M0 = Null + -6;
0x000B2E        FD0000FF 19803751        M[0xff3751] = r6 + Null;
0x000B30        95886000                 r6 = r6 * 0.75 (frac);
0x000B31        E450003F                 r3 = Null - 1;
0x000B32        2020009F                 r0 = Null - r7;
0x000B33        93523400                 r3 = r3 ASHIFT r0, r1 = M[I1,0];
0x000B34        E5F00011                 do $M.cbops.dither_and_shift.main.shaped_dither_loop;
0x000B35        9B461125                 r2 = r2 * r4 (int), rMAC = M[I0,1], r0 = M[I5,1];
0x000B36        4749B700                 r2 = r2 + M1, M[I1,-1] = r1;
0x000B37        BF323725                 rMAC = rMAC - r1 * r0 (SS), r1 = M[I1,-1], r0 = M[I5,1];
0x000B38        BF323725                 rMAC = rMAC - r1 * r0 (SS), r1 = M[I1,-1], r0 = M[I5,1];
0x000B39        BF323725                 rMAC = rMAC - r1 * r0 (SS), r1 = M[I1,-1], r0 = M[I5,1];
0x000B3A        BF323425                 rMAC = rMAC - r1 * r0 (SS), r1 = M[I1,0], r0 = M[I5,1];
0x000B3B        BC13002F                 rMAC = rMAC - r1 * r0 (SS);
0x000B3C        AF480094                 rMAC = rMAC + r2 * r6 (SS), M[I5,0] = rMAC;
0x000B3D        9B460025                 r2 = r2 * r4 (int), r0 = M[I5,1];
0x000B3E        47490000                 r2 = r2 + M1;
0x000B3F        AE480034                 rMAC = rMAC + r2 * r6 (SS), r1 = M[I5,M0];
0x000B40        AC17003F                 rMAC = rMAC + r5 * r1 (SS);
0x000B41        8031005F                 r1 = rMAC AND r3;
0x000B42        90E3009F                 rMAC = r1 ASHIFT r7;
0x000B43        23320091                 r1 = r1 - r0, M[I4,1] = rMAC;
0x000B44        9D330004                 r1 = r1 * 4 (int) (sat);

 <$M.cbops.dither_and_shift.main.shaped_dither_loop>
0x000B45        7FDDB400                 L1 = L1 - L1, M[I1,0] = r1;
0x000B46        4420001F                 r0 = Null + I1;
0x000B47        D52A0004                 M[r8 + 4] = r0;

 <$M.cbops.dither_and_shift.main.end>
0x000B48        51C00000                 L0 = Null + 0;
0x000B49        51E00000                 L4 = Null + 0;
0x000B4A        194064E1                 M[$M.cbops.dither_and_shift.main.rand_num] = r2 + Null;
0x000B4B        DDF00B7E                 jump $pop_rLink_and_rts;

 <$iir_resamplev2.Reset>
0x000B4C        D15A0005                 r3 = M[r8 + 5];
0x000B4D        DC0D0000                 if EQ rts;
0x000B4E        016A0011                 r4 = r8 + 17;
0x000B4F        012A0002                 r0 = r8 + 2;
0x000B50        01AA0009                 r8 = r8 + 9;
0x000B51        DDF0026B                 jump $reset_iir_resampler;

 <$iir_resamplev2.Limited_Process>
0x000B52        F3D00000                 push rLink;
0x000B53        F3700000                 push r5;
0x000B54        D12A0000                 r0 = M[r8 + 0];
0x000B55        E1F00B12                 call $cbuffer.calc_amount_data;
0x000B56        0082000F                 r6 = r0 + Null;
0x000B57        D12A0001                 r0 = M[r8 + 1];
0x000B58        E1F00AFF                 call $cbuffer.calc_amount_space;
0x000B59        0092000F                 r7 = r0 + Null;
0x000B5A        E1F00900                 call $iir_resamplev2.amount_to_use;
0x000B5B        F3640000                 pop r4;
0x000B5C        23760000                 r5 = r5 - r4;
0x000B5D        00760005                 if POS r5 = r4 + Null;
0x000B5E        DDF00009                 jump $M.iir_resamplev2.process.limit_entry_point;

 <$iir_resamplev2.Process>
0x000B5F        F3D00000                 push rLink;
0x000B60        D12A0000                 r0 = M[r8 + 0];
0x000B61        E1F00B06                 call $cbuffer.calc_amount_data;
0x000B62        0082000F                 r6 = r0 + Null;
0x000B63        D12A0001                 r0 = M[r8 + 1];
0x000B64        E1F00AF3                 call $cbuffer.calc_amount_space;
0x000B65        0092000F                 r7 = r0 + Null;
0x000B66        E1F008F4                 call $iir_resamplev2.amount_to_use;

 <$M.iir_resamplev2.process.limit_entry_point>
0x000B67        00C7000F                 r10 = r5 + Null;
0x000B68        DDD00B61                 if LE jump $pop_rLink_and_rts;
0x000B69        51800001                 M0 = Null + 1;
0x000B6A        500000AF                 I0 = Null + r8;
0x000B6B        F2A02000                 push r8, r0 = M[I0,M0];
0x000B6C        E1F00B1A                 call $cbuffer.get_read_address_and_size;
0x000B6D        5010002F                 I1 = Null + r0;
0x000B6E        50D0203F                 L1 = Null + r1, r0 = M[I0,M0];
0x000B6F        E1F00B1C                 call $cbuffer.get_write_address_and_size;
0x000B70        50F0503F                 L5 = Null + r1, r3 = M[I0,M0];
0x000B71        5050002F                 I5 = Null + r0;
0x000B72        012A0002                 r0 = r8 + 2;
0x000B73        016A0011                 r4 = r8 + 17;
0x000B74        01AA0009                 r8 = r8 + 9;
0x000B75        F3C00000                 push r10;
0x000B76        F101A022                 pushm <I1, I5, L1, L5>;
0x000B77        F1022800                 pushm <B1, B5>;
0x000B78        E1F0032E                 call $iir_perform_resample;
0x000B79        F1062800                 popm <B1, B5>;
0x000B7A        F105A022                 popm <I1, I5, L1, L5>;
0x000B7B        F3C40000                 pop r10;
0x000B7C        509000CF                 M1 = Null + r10;
0x000B7D        02002500                 Null = Null + Null, r0 = M[I1,M1];
0x000B7E        5090009F                 M1 = Null + r7;
0x000B7F        02000025                 Null = Null + Null, r0 = M[I5,M1];
0x000B80        50D0000F                 L1 = Null + Null;
0x000B81        50F0000F                 L5 = Null + Null;
0x000B82        F3000000                 push Null;
0x000B83        F1AAFFFF                 B0 = M[SP + -0x1];
0x000B84        F1BAFFFF                 B1 = M[SP + -0x1];
0x000B85        F1CAFFFF                 B4 = M[SP + -0x1];
0x000B86        F3D60000                 pop B5;
0x000B87        F3A40000                 pop r8;
0x000B88        D12A0001                 r0 = M[r8 + 1];
0x000B89        4430005F                 r1 = Null + I5;
0x000B8A        E1F00B1A                 call $cbuffer.set_write_address;
0x000B8B        D12A0000                 r0 = M[r8 + 0];
0x000B8C        4430001F                 r1 = Null + I1;
0x000B8D        E1F00B13                 call $cbuffer.set_read_address;
0x000B8E        DDF00B3B                 jump $pop_rLink_and_rts;

 <$iir_resamplerv2.iir_19_s5_diir>
0x000B8F        93183900                 rMAC = rMAC ASHIFT r6 (56bit), r1 = M[I2,1];
0x000B90        8D210018                 r0 = rMAC LSHIFT 24;
0x000B91        8C41000F                 r2 = rMAC LSHIFT Null;
0x000B92        C7233922                 rMAC = r0 * r1 (US), r1 = M[I2,1], r0 = M[I4,2];
0x000B93        B7233922                 rMAC = rMAC - r0 * r1 (US), r1 = M[I2,1], r0 = M[I4,2];
0x000B94        B7233922                 rMAC = rMAC - r0 * r1 (US), r1 = M[I2,1], r0 = M[I4,2];
0x000B95        51A0FFFA                 M2 = Null + -6;
0x000B96        B7233821                 rMAC = rMAC - r0 * r1 (US), r1 = M[I2,0], r0 = M[I4,1];
0x000B97        B6230022                 rMAC = rMAC - r0 * r1 (US), r0 = M[I4,M2];
0x000B98        79220004                 I2 = I2 - 4;
0x000B99        91110068                 rMAC = rMAC ASHIFT -24 (56bit);
0x000B9A        BF233900                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I2,1];
0x000B9B        AF433922                 rMAC = rMAC + r2 * r1 (SS), r1 = M[I2,1], r0 = M[I4,2];
0x000B9C        BF233922                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I2,1], r0 = M[I4,2];
0x000B9D        BF233A22                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I2,2], r0 = M[I4,2];
0x000B9E        BF233921                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I2,1], r0 = M[I4,1];
0x000B9F        93133920                 rMAC = rMAC ASHIFT r1 (56bit), r1 = M[I2,1], r0 = M[I4,0];
0x000BA0        8C41000F                 r2 = rMAC LSHIFT Null;
0x000BA1        8D610018                 r4 = rMAC LSHIFT 24;
0x000BA2        C76339E2                 rMAC = r4 * r1 (US), r1 = M[I2,1], M[I4,2] = r4;
0x000BA3        B7233922                 rMAC = rMAC - r0 * r1 (US), r1 = M[I2,1], r0 = M[I4,2];
0x000BA4        B7233922                 rMAC = rMAC - r0 * r1 (US), r1 = M[I2,1], r0 = M[I4,2];
0x000BA5        B7233821                 rMAC = rMAC - r0 * r1 (US), r1 = M[I2,0], r0 = M[I4,1];
0x000BA6        B6230022                 rMAC = rMAC - r0 * r1 (US), r0 = M[I4,M2];
0x000BA7        79220004                 I2 = I2 - 4;
0x000BA8        91110068                 rMAC = rMAC ASHIFT -24 (56bit);
0x000BA9        BF233920                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I2,1], r0 = M[I4,0];
0x000BAA        AF4339C2                 rMAC = rMAC + r2 * r1 (SS), r1 = M[I2,1], M[I4,2] = r2;
0x000BAB        BF233922                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I2,1], r0 = M[I4,2];
0x000BAC        BF233A22                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I2,2], r0 = M[I4,2];
0x000BAD        BF233921                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I2,1], r0 = M[I4,1];
0x000BAE        93133920                 rMAC = rMAC ASHIFT r1 (56bit), r1 = M[I2,1], r0 = M[I4,0];
0x000BAF        8C41000F                 r2 = rMAC LSHIFT Null;
0x000BB0        8D610018                 r4 = rMAC LSHIFT 24;
0x000BB1        C76339E2                 rMAC = r4 * r1 (US), r1 = M[I2,1], M[I4,2] = r4;
0x000BB2        B7233922                 rMAC = rMAC - r0 * r1 (US), r1 = M[I2,1], r0 = M[I4,2];
0x000BB3        B7233922                 rMAC = rMAC - r0 * r1 (US), r1 = M[I2,1], r0 = M[I4,2];
0x000BB4        B7233821                 rMAC = rMAC - r0 * r1 (US), r1 = M[I2,0], r0 = M[I4,1];
0x000BB5        B6230022                 rMAC = rMAC - r0 * r1 (US), r0 = M[I4,M2];
0x000BB6        79220004                 I2 = I2 - 4;
0x000BB7        91110068                 rMAC = rMAC ASHIFT -24 (56bit);
0x000BB8        BF233920                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I2,1], r0 = M[I4,0];
0x000BB9        AF4339C2                 rMAC = rMAC + r2 * r1 (SS), r1 = M[I2,1], M[I4,2] = r2;
0x000BBA        BF233922                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I2,1], r0 = M[I4,2];
0x000BBB        BF233A22                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I2,2], r0 = M[I4,2];
0x000BBC        BF233921                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I2,1], r0 = M[I4,1];
0x000BBD        93133920                 rMAC = rMAC ASHIFT r1 (56bit), r1 = M[I2,1], r0 = M[I4,0];
0x000BBE        8C41000F                 r2 = rMAC LSHIFT Null;
0x000BBF        8D610018                 r4 = rMAC LSHIFT 24;
0x000BC0        C76339E2                 rMAC = r4 * r1 (US), r1 = M[I2,1], M[I4,2] = r4;
0x000BC1        B7233922                 rMAC = rMAC - r0 * r1 (US), r1 = M[I2,1], r0 = M[I4,2];
0x000BC2        B7233922                 rMAC = rMAC - r0 * r1 (US), r1 = M[I2,1], r0 = M[I4,2];
0x000BC3        B7233821                 rMAC = rMAC - r0 * r1 (US), r1 = M[I2,0], r0 = M[I4,1];
0x000BC4        B6230022                 rMAC = rMAC - r0 * r1 (US), r0 = M[I4,M2];
0x000BC5        79220004                 I2 = I2 - 4;
0x000BC6        91110068                 rMAC = rMAC ASHIFT -24 (56bit);
0x000BC7        BF233920                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I2,1], r0 = M[I4,0];
0x000BC8        AF4339C2                 rMAC = rMAC + r2 * r1 (SS), r1 = M[I2,1], M[I4,2] = r2;
0x000BC9        BF233922                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I2,1], r0 = M[I4,2];
0x000BCA        BF233A22                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I2,2], r0 = M[I4,2];
0x000BCB        BF233921                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I2,1], r0 = M[I4,1];
0x000BCC        93133920                 rMAC = rMAC ASHIFT r1 (56bit), r1 = M[I2,1], r0 = M[I4,0];
0x000BCD        8C41000F                 r2 = rMAC LSHIFT Null;
0x000BCE        8D610018                 r4 = rMAC LSHIFT 24;
0x000BCF        C76339E2                 rMAC = r4 * r1 (US), r1 = M[I2,1], M[I4,2] = r4;
0x000BD0        B7233922                 rMAC = rMAC - r0 * r1 (US), r1 = M[I2,1], r0 = M[I4,2];
0x000BD1        51A0FFFC                 M2 = Null + -4;
0x000BD2        B7233821                 rMAC = rMAC - r0 * r1 (US), r1 = M[I2,0], r0 = M[I4,1];
0x000BD3        B6230022                 rMAC = rMAC - r0 * r1 (US), r0 = M[I4,M2];
0x000BD4        79220003                 I2 = I2 - 3;
0x000BD5        91110068                 rMAC = rMAC ASHIFT -24 (56bit);
0x000BD6        BF233920                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I2,1], r0 = M[I4,0];
0x000BD7        AF4339C2                 rMAC = rMAC + r2 * r1 (SS), r1 = M[I2,1], M[I4,2] = r2;
0x000BD8        BF233A22                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I2,2], r0 = M[I4,2];
0x000BD9        BF233921                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I2,1], r0 = M[I4,1];
0x000BDA        93130000                 rMAC = rMAC ASHIFT r1 (56bit);
0x000BDB        8D210018                 r0 = rMAC LSHIFT 24;
0x000BDC        8C31000F                 r1 = rMAC LSHIFT Null;
0x000BDD        020000A0                 Null = Null + Null, M[I4,M0] = r0;
0x000BDE        DC0D000F                 rts;

 <$iir_2ndStage_upsample>
0x000BDF        F3D00000                 push rLink;
0x000BE0        5F380000                 I3 = I3 + M0;
0x000BE1        22993C00                 r7 = r7 - r7, r1 = M[I3,M0];
0x000BE2        000B000F                 Null = r9 + Null;
0x000BE3        00330031                 if NE r1 = r1 + r1;
0x000BE4        F3E20000                 push FP;
0x000BE5        F3A60000                 pop B0;
0x000BE6        F107000A                 FP = FP + 10;
0x000BE7        F3E20000                 push FP;
0x000BE8        F3C60000                 pop B4;
0x000BE9        F007003F                 FP = FP + r1;
0x000BEA        50E06C3F                 L4 = Null + r1, r4 = M[I3,M0];
0x000BEB        50903C6F                 M1 = Null + r4, r1 = M[I3,M0];
0x000BEC        00833C4F                 r6 = r1 + r2, r1 = M[I3,M0];
0x000BED        00A33C7F                 r8 = r1 + r5, r1 = M[I3,M0];
0x000BEE        50607C3F                 I6 = Null + r1, r5 = M[I3,M0];
0x000BEF        70A0286F                 M2 = Null - r4, r0 = M[I2,M0];
0x000BF0        9946000A                 r2 = r4 * 10 (int);
0x000BF1        F3210000                 push I2;
0x000BF2        74B4588F                 M3 = r2 - M0, r3 = M[I2,M0];
0x000BF3        5EB63800                 M3 = M3 + I6, r1 = M[I2,M0];
0x000BF4        5EB64800                 M3 = M3 + I6, r2 = M[I2,M0];
0x000BF5        50002C3F                 I0 = Null + r1, r0 = M[I3,M0];
0x000BF6        50402C4F                 I4 = Null + r2, r0 = M[I3,M0];
0x000BF7        51C0000A                 L0 = Null + 10;
0x000BF8        01320007                 r1 = r0 + 7;
0x000BF9        000B000F                 Null = r9 + Null;
0x000BFA        00230001                 if NE r0 = r1 + Null;
0x000BFB        D12291C0                 r0 = M[r0 + -28224];
0x000BFC        F3200000                 push r0;
0x000BFD        FD00007F 01F0FFFF        rMACB = Null + 8388607;
0x000BFF        E4B0002F                 r9 = Null + 1;
0x000C00        9845007F                 r2 = r3 * r5 (int);
0x000C01        004400F4                 if NEG r2 = r2 + rMACB;
0x000C02        9434006F                 r1 = r2 * r4 (frac);
0x000C03        E5F0001F                 do $M.iir_2ndStage_upsample.loop;
0x000C04        02001400                 Null = Null + Null, rMAC = M[I1,M0];
0x000C05        02009000                 Null = Null + Null, M[I0,M0] = rMAC;

 <$M.iir_2ndStage_upsample.loop_rpt>
0x000C06        5876003F                 I7 = I6 + r1;
0x000C07        025B403D                 r3 = r3 + r9, r2 = M[I0,M0], r1 = M[I7,M1];
0x000C08        CE34403D                 rMAC = r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M1];
0x000C09        AE34403D                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M1];
0x000C0A        AE34403D                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M1];
0x000C0B        AE34403D                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M1];
0x000C0C        7C7B007F                 I7 = M3 - I7;
0x000C0D        AE34403E                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M2];
0x000C0E        AE34403E                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M2];
0x000C0F        AE34403E                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M2];
0x000C10        AE34403E                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M2];
0x000C11        AE34403E                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M2];
0x000C12        AC13004F                 rMAC = rMAC + r1 * r2 (SS);
0x000C13        5823000F                 I2 = I3 + Null;
0x000C14        F128FFFF                 r0 = M[SP + -0x1];
0x000C15        E002000F                 call r0;
0x000C16        74A0009F                 M2 = Null - M1;
0x000C17        4460009F                 r4 = Null + M1;
0x000C18        92EA00B0                 rMAC = rMAC ASHIFT r8, M[I4,M0] = r1;
0x000C19        029B0094                 r7 = r7 + r9, M[I5,M0] = rMAC;
0x000C1A        2005006F                 Null = r3 - r4;
0x000C1B        2055005A                 if GE r3 = r3 - r3;
0x000C1C        9845007F                 r2 = r3 * r5 (int);
0x000C1D        004400F4                 if NEG r2 = r2 + rMACB;
0x000C1E        9434006F                 r1 = r2 * r4 (frac);
0x000C1F        2007004F                 Null = r5 - r2;
0x000C20        DDD0FFE6                 if LE jump $M.iir_2ndStage_upsample.loop_rpt;
0x000C21        03000000                 Null = Null + Null;

 <$M.iir_2ndStage_upsample.loop>
0x000C22        F103FFFF                 SP = SP + -1;
0x000C23        5832000F                 I3 = I2 + Null;
0x000C24        F3250000                 pop I2;
0x000C25        4420D80F                 r0 = Null + I0, M[I2,M0] = r3;
0x000C26        4420A84F                 r0 = Null + I4, M[I2,M0] = r0;
0x000C27        50C0A80F                 L0 = Null + Null, M[I2,M0] = r0;
0x000C28        50E0000F                 L4 = Null + Null;
0x000C29        DDF00AA0                 jump $pop_rLink_and_rts;

 <$cmpd100.applygain>
0x000C2A        D12A0000                 r0 = M[r8 + 0];
0x000C2B        D13A0001                 r1 = M[r8 + 1];
0x000C2C        83320000                 r1 = r1 AND r0;
0x000C2D        DC0D0001                 if NE rts;
0x000C2E        F3D00000                 push rLink;
0x000C2F        D12A0002                 r0 = M[r8 + 2];
0x000C30        E1F00A6B                 call $frmbuffer.get_buffer;
0x000C31        5000002F                 I0 = Null + r0;
0x000C32        50C0003F                 L0 = Null + r1;
0x000C33        D12A0003                 r0 = M[r8 + 3];
0x000C34        E1F00A67                 call $frmbuffer.get_buffer;
0x000C35        5040002F                 I4 = Null + r0;
0x000C36        50E0003F                 L4 = Null + r1;
0x000C37        00C5000F                 r10 = r3 + Null;
0x000C38        D12A0004                 r0 = M[r8 + 4];
0x000C39        E1F00A8E                 call $frmbuffer.set_frame_size;
0x000C3A        E1F00A61                 call $frmbuffer.get_buffer;
0x000C3B        5010002F                 I1 = Null + r0;
0x000C3C        50D0003F                 L1 = Null + r1;
0x000C3D        D12A0005                 r0 = M[r8 + 5];
0x000C3E        005C000F                 r3 = r10 + Null;
0x000C3F        E1F00A88                 call $frmbuffer.set_frame_size;
0x000C40        E1F00A5B                 call $frmbuffer.get_buffer;
0x000C41        5050002F                 I5 = Null + r0;
0x000C42        50F0003F                 L5 = Null + r1;
0x000C43        D14A0006                 r2 = M[r8 + 6];
0x000C44        D15A0007                 r3 = M[r8 + 7];
0x000C45        D025000F                 r0 = M[r3 + Null];
0x000C46        91220004                 r0 = r0 ASHIFT 4;
0x000C47        FD000003 21220000        r0 = r0 - 196608;
0x000C49        E1F0095C                 call $math.pow2_table;
0x000C4A        192094E8                 M[$M.cmpd100.applygain.lin_gain] = r0 + Null;
0x000C4B        095064E9                 r3 = Null + M[$M.cmpd100.applygain.old_lin_gain];
0x000C4C        2052005F                 r3 = r0 - r3;
0x000C4D        9155007C                 r3 = r3 ASHIFT -4;
0x000C4E        21CC0010                 r10 = r10 - 16;
0x000C4F        19C094E9                 M[$M.cmpd100.applygain.remaninder_samples] = r10 + Null;
0x000C50        01C00010                 r10 = Null + 16;
0x000C51        00B5000F                 r9 = r3 + Null;
0x000C52        E5F0000B                 do $M.cmpd100.applygain.loop_ramped_gain_copy_data;
0x000C53        092064E9                 r0 = Null + M[$M.cmpd100.applygain.old_lin_gain];
0x000C54        032B0000                 r0 = r0 + r9;
0x000C55        9462004F                 r4 = r0 * r2 (frac);
0x000C56        03B50000                 r9 = r9 + r3;
0x000C57        03002131                 Null = Null + Null, r0 = M[I0,1], r1 = M[I4,1];
0x000C58        CC12006F                 rMAC = r0 * r4 (SS);
0x000C59        91210007                 r0 = rMAC ASHIFT 7;
0x000C5A        9413006F                 rMAC = r1 * r4 (frac);
0x000C5B        91310007                 r1 = rMAC ASHIFT 7;
0x000C5C        0300A5B5                 Null = Null + Null, M[I1,1] = r0, M[I5,1] = r1;

 <$M.cmpd100.applygain.loop_ramped_gain_copy_data>
0x000C5D        09C094E9                 r10 = Null + M[$M.cmpd100.applygain.remaninder_samples];
0x000C5E        092094E8                 r0 = Null + M[$M.cmpd100.applygain.lin_gain];
0x000C5F        192064E9                 M[$M.cmpd100.applygain.old_lin_gain] = r0 + Null;
0x000C60        9462004F                 r4 = r0 * r2 (frac);
0x000C61        E5F00007                 do $M.cmpd100.applygain.loop_copy_data;
0x000C62        03002131                 Null = Null + Null, r0 = M[I0,1], r1 = M[I4,1];
0x000C63        CC12006F                 rMAC = r0 * r4 (SS);
0x000C64        91210007                 r0 = rMAC ASHIFT 7;
0x000C65        9413006F                 rMAC = r1 * r4 (frac);
0x000C66        91310007                 r1 = rMAC ASHIFT 7;
0x000C67        0300A5B5                 Null = Null + Null, M[I1,1] = r0, M[I5,1] = r1;

 <$M.cmpd100.applygain.loop_copy_data>
0x000C68        51C00000                 L0 = Null + 0;
0x000C69        51D00000                 L1 = Null + 0;
0x000C6A        51E00000                 L4 = Null + 0;
0x000C6B        51F00000                 L5 = Null + 0;
0x000C6C        DDF00A5D                 jump $pop_rLink_and_rts;

 <$iir_resamplerv2.iir_19_s4_diir>
0x000C6D        93183900                 rMAC = rMAC ASHIFT r6 (56bit), r1 = M[I2,1];
0x000C6E        8D210018                 r0 = rMAC LSHIFT 24;
0x000C6F        8C41000F                 r2 = rMAC LSHIFT Null;
0x000C70        C7233922                 rMAC = r0 * r1 (US), r1 = M[I2,1], r0 = M[I4,2];
0x000C71        B7233922                 rMAC = rMAC - r0 * r1 (US), r1 = M[I2,1], r0 = M[I4,2];
0x000C72        B7233922                 rMAC = rMAC - r0 * r1 (US), r1 = M[I2,1], r0 = M[I4,2];
0x000C73        B7233922                 rMAC = rMAC - r0 * r1 (US), r1 = M[I2,1], r0 = M[I4,2];
0x000C74        B7233922                 rMAC = rMAC - r0 * r1 (US), r1 = M[I2,1], r0 = M[I4,2];
0x000C75        51A0FFF6                 M2 = Null + -10;
0x000C76        B7233821                 rMAC = rMAC - r0 * r1 (US), r1 = M[I2,0], r0 = M[I4,1];
0x000C77        B6230022                 rMAC = rMAC - r0 * r1 (US), r0 = M[I4,M2];
0x000C78        79220006                 I2 = I2 - 6;
0x000C79        91110068                 rMAC = rMAC ASHIFT -24 (56bit);
0x000C7A        BF233900                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I2,1];
0x000C7B        AF433922                 rMAC = rMAC + r2 * r1 (SS), r1 = M[I2,1], r0 = M[I4,2];
0x000C7C        BF233922                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I2,1], r0 = M[I4,2];
0x000C7D        BF233922                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I2,1], r0 = M[I4,2];
0x000C7E        BF233922                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I2,1], r0 = M[I4,2];
0x000C7F        BF233A22                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I2,2], r0 = M[I4,2];
0x000C80        BF233921                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I2,1], r0 = M[I4,1];
0x000C81        93133920                 rMAC = rMAC ASHIFT r1 (56bit), r1 = M[I2,1], r0 = M[I4,0];
0x000C82        8C41000F                 r2 = rMAC LSHIFT Null;
0x000C83        8D610018                 r4 = rMAC LSHIFT 24;
0x000C84        C76339E2                 rMAC = r4 * r1 (US), r1 = M[I2,1], M[I4,2] = r4;
0x000C85        B7233922                 rMAC = rMAC - r0 * r1 (US), r1 = M[I2,1], r0 = M[I4,2];
0x000C86        B7233922                 rMAC = rMAC - r0 * r1 (US), r1 = M[I2,1], r0 = M[I4,2];
0x000C87        B7233922                 rMAC = rMAC - r0 * r1 (US), r1 = M[I2,1], r0 = M[I4,2];
0x000C88        51A0FFF8                 M2 = Null + -8;
0x000C89        B7233821                 rMAC = rMAC - r0 * r1 (US), r1 = M[I2,0], r0 = M[I4,1];
0x000C8A        B6230022                 rMAC = rMAC - r0 * r1 (US), r0 = M[I4,M2];
0x000C8B        79220005                 I2 = I2 - 5;
0x000C8C        91110068                 rMAC = rMAC ASHIFT -24 (56bit);
0x000C8D        BF233920                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I2,1], r0 = M[I4,0];
0x000C8E        AF4339C2                 rMAC = rMAC + r2 * r1 (SS), r1 = M[I2,1], M[I4,2] = r2;
0x000C8F        BF233922                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I2,1], r0 = M[I4,2];
0x000C90        BF233922                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I2,1], r0 = M[I4,2];
0x000C91        BF233A22                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I2,2], r0 = M[I4,2];
0x000C92        BF233921                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I2,1], r0 = M[I4,1];
0x000C93        93133920                 rMAC = rMAC ASHIFT r1 (56bit), r1 = M[I2,1], r0 = M[I4,0];
0x000C94        8C41000F                 r2 = rMAC LSHIFT Null;
0x000C95        8D610018                 r4 = rMAC LSHIFT 24;
0x000C96        C76339E2                 rMAC = r4 * r1 (US), r1 = M[I2,1], M[I4,2] = r4;
0x000C97        B7233922                 rMAC = rMAC - r0 * r1 (US), r1 = M[I2,1], r0 = M[I4,2];
0x000C98        B7233922                 rMAC = rMAC - r0 * r1 (US), r1 = M[I2,1], r0 = M[I4,2];
0x000C99        51A0FFFA                 M2 = Null + -6;
0x000C9A        B7233821                 rMAC = rMAC - r0 * r1 (US), r1 = M[I2,0], r0 = M[I4,1];
0x000C9B        B6230022                 rMAC = rMAC - r0 * r1 (US), r0 = M[I4,M2];
0x000C9C        79220004                 I2 = I2 - 4;
0x000C9D        91110068                 rMAC = rMAC ASHIFT -24 (56bit);
0x000C9E        BF233920                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I2,1], r0 = M[I4,0];
0x000C9F        AF4339C2                 rMAC = rMAC + r2 * r1 (SS), r1 = M[I2,1], M[I4,2] = r2;
0x000CA0        BF233922                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I2,1], r0 = M[I4,2];
0x000CA1        BF233A22                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I2,2], r0 = M[I4,2];
0x000CA2        BF233921                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I2,1], r0 = M[I4,1];
0x000CA3        93133920                 rMAC = rMAC ASHIFT r1 (56bit), r1 = M[I2,1], r0 = M[I4,0];
0x000CA4        8C41000F                 r2 = rMAC LSHIFT Null;
0x000CA5        8D610018                 r4 = rMAC LSHIFT 24;
0x000CA6        C76339E2                 rMAC = r4 * r1 (US), r1 = M[I2,1], M[I4,2] = r4;
0x000CA7        B7233922                 rMAC = rMAC - r0 * r1 (US), r1 = M[I2,1], r0 = M[I4,2];
0x000CA8        B7233922                 rMAC = rMAC - r0 * r1 (US), r1 = M[I2,1], r0 = M[I4,2];
0x000CA9        B7233821                 rMAC = rMAC - r0 * r1 (US), r1 = M[I2,0], r0 = M[I4,1];
0x000CAA        B6230022                 rMAC = rMAC - r0 * r1 (US), r0 = M[I4,M2];
0x000CAB        79220004                 I2 = I2 - 4;
0x000CAC        91110068                 rMAC = rMAC ASHIFT -24 (56bit);
0x000CAD        BF233920                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I2,1], r0 = M[I4,0];
0x000CAE        AF4339C2                 rMAC = rMAC + r2 * r1 (SS), r1 = M[I2,1], M[I4,2] = r2;
0x000CAF        BF233922                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I2,1], r0 = M[I4,2];
0x000CB0        BF233A22                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I2,2], r0 = M[I4,2];
0x000CB1        BF233921                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I2,1], r0 = M[I4,1];
0x000CB2        93130000                 rMAC = rMAC ASHIFT r1 (56bit);
0x000CB3        8D210018                 r0 = rMAC LSHIFT 24;
0x000CB4        8C31000F                 r1 = rMAC LSHIFT Null;
0x000CB5        020000A0                 Null = Null + Null, M[I4,M0] = r0;
0x000CB6        DC0D000F                 rts;

 <$message.received_service_routine>
0x000CB7        F3D00000                 push rLink;
0x000CB8        51800000                 M0 = Null + 0;
0x000CB9        0920FE1D                 r0 = Null + M[0xfffe1d];
0x000CBA        8132FFF0                 r1 = r0 AND 0xfff0;
0x000CBB        8903FFF0                 Null = r1 XOR 0xfff0;
0x000CBC        DD10001B                 if NE jump $M.message.received_service_routine.non_long_message;
0x000CBD        81020001                 Null = r0 AND 0x1;
0x000CBE        DD000002                 if EQ jump $M.message.received_service_routine.not_initial_packet;
0x000CBF        190064DA                 M[$message.long_message_size] = Null + Null;

 <$M.message.received_service_routine.not_initial_packet>
0x000CC0        093064DA                 r1 = Null + M[$message.long_message_size];
0x000CC1        21030052                 Null = r1 - 82;
0x000CC2        DD400002                 if NEG jump $M.message.received_service_routine.message_not_too_long;
0x000CC3        21330004                 r1 = r1 - 4;

 <$M.message.received_service_routine.message_not_too_long>
0x000CC4        0940E006                 r2 = Null + M[0xffe006];
0x000CC5        D5438DDE                 M[r1 + -29218] = r2;
0x000CC6        0940E007                 r2 = Null + M[0xffe007];
0x000CC7        D5438DDF                 M[r1 + -29217] = r2;
0x000CC8        0940E008                 r2 = Null + M[0xffe008];
0x000CC9        D5438DE0                 M[r1 + -29216] = r2;
0x000CCA        0940E009                 r2 = Null + M[0xffe009];
0x000CCB        D5438DE1                 M[r1 + -29215] = r2;
0x000CCC        01330004                 r1 = r1 + 4;
0x000CCD        193064DA                 M[$message.long_message_size] = r1 + Null;
0x000CCE        81020002                 Null = r0 AND 0x2;
0x000CCF        DD100005                 if NE jump $M.message.received_service_routine.final_packet;

 <$M.message.received_service_routine.not_final_packet>
0x000CD0        0970E001                 r5 = Null + M[0xffe001];
0x000CD1        E477002F                 r5 = r5 + 1;
0x000CD2        1970E001                 M[0xffe001] = r5 + Null;
0x000CD3        DDF009F6                 jump $pop_rLink_and_rts;

 <$M.message.received_service_routine.final_packet>
0x000CD4        09208DDE                 r0 = Null + M[$message.long_message_data];
0x000CD5        8122FFFF                 r0 = r0 AND 0xffff;
0x000CD6        51800001                 M0 = Null + 1;

 <$M.message.received_service_routine.non_long_message>
0x000CD7        01C00032                 r10 = Null + 50;
0x000CD8        093064D8                 r1 = Null + M[$message.last_addr];
0x000CD9        E5F00009                 do $M.message.received_service_routine.loop;
0x000CDA        E403002F                 Null = r1 + 1;
0x000CDB        DD000008                 if EQ jump $M.message.received_service_routine.no_handler;
0x000CDC        D1430003                 r2 = M[r1 + 3];
0x000CDD        8052004F                 r3 = r0 AND r2;
0x000CDE        D1430001                 r2 = M[r1 + 1];
0x000CDF        2005004F                 Null = r3 - r2;
0x000CE0        DD000007                 if EQ jump $M.message.received_service_routine.found;
0x000CE1        D1330000                 r1 = M[r1 + 0];

 <$M.message.received_service_routine.loop>
0x000CE2        E1F030A9                 call $error;

 <$M.message.received_service_routine.no_handler>
0x000CE3        0970E001                 r5 = Null + M[0xffe001];
0x000CE4        E477002F                 r5 = r5 + 1;
0x000CE5        1970E001                 M[0xffe001] = r5 + Null;
0x000CE6        DDF009E3                 jump $pop_rLink_and_rts;

 <$M.message.received_service_routine.found>
0x000CE7        D1730002                 r5 = M[r1 + 2];
0x000CE8        F3700000                 push r5;
0x000CE9        47080000                 Null = Null + M0;
0x000CEA        DD000006                 if EQ jump $M.message.received_service_routine.short_message_mode;
0x000CEB        0032000F                 r1 = r0 + Null;
0x000CEC        09408DDF                 r2 = Null + M[0xff8ddf];
0x000CED        01508DE0                 r3 = Null + -29216;
0x000CEE        0120FFFE                 r0 = Null + -2;
0x000CEF        DDF00005                 jump $M.message.received_service_routine.message_mode_done;

 <$M.message.received_service_routine.short_message_mode>
0x000CF0        0930E006                 r1 = Null + M[0xffe006];
0x000CF1        0940E007                 r2 = Null + M[0xffe007];
0x000CF2        0950E008                 r3 = Null + M[0xffe008];
0x000CF3        0960E009                 r4 = Null + M[0xffe009];

 <$M.message.received_service_routine.message_mode_done>
0x000CF4        0970E001                 r5 = Null + M[0xffe001];
0x000CF5        E477002F                 r5 = r5 + 1;
0x000CF6        1970E001                 M[0xffe001] = r5 + Null;
0x000CF7        F3740000                 pop r5;
0x000CF8        E007000F                 call r5;
0x000CF9        DDF009D0                 jump $pop_rLink_and_rts;

 <$audio_proc.hq_peq.process>
0x000CFA        F3D00000                 push rLink;
0x000CFB        D1290000                 r0 = M[r7 + 0];
0x000CFC        E1F0099F                 call $frmbuffer.get_buffer;
0x000CFD        5040002F                 I4 = Null + r0;
0x000CFE        50E0003F                 L4 = Null + r1;
0x000CFF        0065000F                 r4 = r3 + Null;
0x000D00        D1290001                 r0 = M[r7 + 1];
0x000D01        E1F009C6                 call $frmbuffer.set_frame_size;
0x000D02        E1F00999                 call $frmbuffer.get_buffer;
0x000D03        5000002F                 I0 = Null + r0;
0x000D04        50C0003F                 L0 = Null + r1;
0x000D05        F3D40000                 pop rLink;

 <$audio_proc.hq_peq.process_op>
0x000D06        51900001                 M1 = Null + 1;
0x000D07        51390003                 I3 = r7 + 3;
0x000D08        5180FFFF                 M0 = Null + -1;
0x000D09        00C02D0F                 r10 = Null + Null, r0 = M[I3,M1];
0x000D0A        54222D9F                 I2 = r0 + M1, r0 = M[I3,M1];
0x000D0B        F3200000                 push r0;
0x000D0C        F3D60000                 pop B5;
0x000D0D        50502D2F                 I5 = Null + r0, r0 = M[I3,M1];
0x000D0E        F3200000                 push r0;
0x000D0F        F3B60000                 pop B1;
0x000D10        50103D2F                 I1 = Null + r0, r1 = M[I3,M1];
0x000D11        50A03D3F                 M2 = Null + r1, r1 = M[I3,M1];
0x000D12        50F03D3F                 L5 = Null + r1, r1 = M[I3,M1];
0x000D13        50D0393F                 L1 = Null + r1, r1 = M[I2,M1];
0x000D14        02007900                 Null = Null + Null, r5 = M[I2,M1];
0x000D15        E483003F                 r6 = r1 - 1;
0x000D16        D1490002                 r2 = M[r7 + 2];
0x000D17        99440005                 r2 = r2 * 5 (int);
0x000D18        5B240000                 I2 = I2 + r2;
0x000D19        5F2A0000                 I2 = I2 + M2;
0x000D1A        74A000AF                 M2 = Null - M2;

 <$M.audio_proc.hq_peq.process.hq_peq_block_loop>
0x000D1B        F3600000                 push r4;
0x000D1C        66CA0021                 r10 = r10 - M2, r0 = M[I4,M1];
0x000D1D        CC122A7F                 rMAC = r0 * r5 (SS), r0 = M[I2,M2];
0x000D1E        9021008F                 r0 = rMAC ASHIFT r6;
0x000D1F        51B00003                 M3 = Null + 3;
0x000D20        03000045                 Null = Null + Null, r2 = M[I5,1];
0x000D21        03000035                 Null = Null + Null, r1 = M[I5,1];
0x000D22        E5F0000C                 do $M.audio_proc.hq_peq.process.hq_biquad_loop;
0x000D23        23116557                 rMAC = rMAC - rMAC, r4 = M[I1,1], r3 = M[I5,-1];
0x000D24        8DE50280                 rMAC0 = r3 LSHIFT 0;
0x000D25        AF4665A7                 rMAC = rMAC + r2 * r4 (SS), r4 = M[I1,1], M[I5,-1] = r0;
0x000D26        AE3665B7                 rMAC = rMAC + r1 * r4 (SS), r4 = M[I1,M1], M[I5,M3] = r1;
0x000D27        AF266545                 rMAC = rMAC + r0 * r4 (SS), r4 = M[I1,1], r2 = M[I5,1];
0x000D28        BF466537                 rMAC = rMAC - r2 * r4 (SS), r4 = M[I1,1], r1 = M[I5,-1];
0x000D29        BF366947                 rMAC = rMAC - r1 * r4 (SS), r4 = M[I2,1], r2 = M[I5,-1];
0x000D2A        8D510018                 r3 = rMAC LSHIFT 24;
0x000D2B        8DE00280                 rMAC0 = Null LSHIFT 0;
0x000D2C        9021006F                 r0 = rMAC ASHIFT r4;
0x000D2D        020000D7                 Null = Null + Null, M[I5,M3] = r3;

 <$M.audio_proc.hq_peq.process.hq_biquad_loop>
0x000D2E        03000057                 Null = Null + Null, r3 = M[I5,-1];
0x000D2F        03000057                 Null = Null + Null, r3 = M[I5,-1];
0x000D30        030000B5                 Null = Null + Null, M[I5,1] = r1;
0x000D31        030000A5                 Null = Null + Null, M[I5,1] = r0;
0x000D32        91220001                 r0 = r0 ASHIFT 1;
0x000D33        F3640000                 pop r4;
0x000D34        6669A100                 r4 = r4 - M1, M[I0,M1] = r0;
0x000D35        DD10FFE6                 if NE jump $M.audio_proc.hq_peq.process.hq_peq_block_loop;
0x000D36        50C0000F                 L0 = Null + Null;
0x000D37        50E0000F                 L4 = Null + Null;
0x000D38        50D0000F                 L1 = Null + Null;
0x000D39        50F0000F                 L5 = Null + Null;
0x000D3A        F3000000                 push Null;
0x000D3B        F1BAFFFF                 B1 = M[SP + -0x1];
0x000D3C        F3D60000                 pop B5;
0x000D3D        DC0D000F                 rts;

 <$iir_resamplerv2.iir_19_s3_diir>
0x000D3E        93183900                 rMAC = rMAC ASHIFT r6 (56bit), r1 = M[I2,1];
0x000D3F        8D210018                 r0 = rMAC LSHIFT 24;
0x000D40        8C41000F                 r2 = rMAC LSHIFT Null;
0x000D41        C7233922                 rMAC = r0 * r1 (US), r1 = M[I2,1], r0 = M[I4,2];
0x000D42        B7233922                 rMAC = rMAC - r0 * r1 (US), r1 = M[I2,1], r0 = M[I4,2];
0x000D43        B7233922                 rMAC = rMAC - r0 * r1 (US), r1 = M[I2,1], r0 = M[I4,2];
0x000D44        B7233922                 rMAC = rMAC - r0 * r1 (US), r1 = M[I2,1], r0 = M[I4,2];
0x000D45        B7233922                 rMAC = rMAC - r0 * r1 (US), r1 = M[I2,1], r0 = M[I4,2];
0x000D46        B7233922                 rMAC = rMAC - r0 * r1 (US), r1 = M[I2,1], r0 = M[I4,2];
0x000D47        51A0FFF4                 M2 = Null + -12;
0x000D48        B7233821                 rMAC = rMAC - r0 * r1 (US), r1 = M[I2,0], r0 = M[I4,1];
0x000D49        B6230022                 rMAC = rMAC - r0 * r1 (US), r0 = M[I4,M2];
0x000D4A        79220007                 I2 = I2 - 7;
0x000D4B        91110068                 rMAC = rMAC ASHIFT -24 (56bit);
0x000D4C        BF233900                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I2,1];
0x000D4D        AF433922                 rMAC = rMAC + r2 * r1 (SS), r1 = M[I2,1], r0 = M[I4,2];
0x000D4E        BF233922                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I2,1], r0 = M[I4,2];
0x000D4F        BF233922                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I2,1], r0 = M[I4,2];
0x000D50        BF233922                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I2,1], r0 = M[I4,2];
0x000D51        BF233922                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I2,1], r0 = M[I4,2];
0x000D52        BF233A22                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I2,2], r0 = M[I4,2];
0x000D53        BF233921                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I2,1], r0 = M[I4,1];
0x000D54        93133920                 rMAC = rMAC ASHIFT r1 (56bit), r1 = M[I2,1], r0 = M[I4,0];
0x000D55        8C41000F                 r2 = rMAC LSHIFT Null;
0x000D56        8D610018                 r4 = rMAC LSHIFT 24;
0x000D57        C76339E2                 rMAC = r4 * r1 (US), r1 = M[I2,1], M[I4,2] = r4;
0x000D58        B7233922                 rMAC = rMAC - r0 * r1 (US), r1 = M[I2,1], r0 = M[I4,2];
0x000D59        B7233922                 rMAC = rMAC - r0 * r1 (US), r1 = M[I2,1], r0 = M[I4,2];
0x000D5A        B7233922                 rMAC = rMAC - r0 * r1 (US), r1 = M[I2,1], r0 = M[I4,2];
0x000D5B        B7233922                 rMAC = rMAC - r0 * r1 (US), r1 = M[I2,1], r0 = M[I4,2];
0x000D5C        51A0FFF6                 M2 = Null + -10;
0x000D5D        B7233821                 rMAC = rMAC - r0 * r1 (US), r1 = M[I2,0], r0 = M[I4,1];
0x000D5E        B6230022                 rMAC = rMAC - r0 * r1 (US), r0 = M[I4,M2];
0x000D5F        79220006                 I2 = I2 - 6;
0x000D60        91110068                 rMAC = rMAC ASHIFT -24 (56bit);
0x000D61        BF233920                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I2,1], r0 = M[I4,0];
0x000D62        AF4339C2                 rMAC = rMAC + r2 * r1 (SS), r1 = M[I2,1], M[I4,2] = r2;
0x000D63        BF233922                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I2,1], r0 = M[I4,2];
0x000D64        BF233922                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I2,1], r0 = M[I4,2];
0x000D65        BF233922                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I2,1], r0 = M[I4,2];
0x000D66        BF233A22                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I2,2], r0 = M[I4,2];
0x000D67        BF233921                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I2,1], r0 = M[I4,1];
0x000D68        93133920                 rMAC = rMAC ASHIFT r1 (56bit), r1 = M[I2,1], r0 = M[I4,0];
0x000D69        8C41000F                 r2 = rMAC LSHIFT Null;
0x000D6A        8D610018                 r4 = rMAC LSHIFT 24;
0x000D6B        C76339E2                 rMAC = r4 * r1 (US), r1 = M[I2,1], M[I4,2] = r4;
0x000D6C        B7233922                 rMAC = rMAC - r0 * r1 (US), r1 = M[I2,1], r0 = M[I4,2];
0x000D6D        B7233922                 rMAC = rMAC - r0 * r1 (US), r1 = M[I2,1], r0 = M[I4,2];
0x000D6E        B7233922                 rMAC = rMAC - r0 * r1 (US), r1 = M[I2,1], r0 = M[I4,2];
0x000D6F        B7233922                 rMAC = rMAC - r0 * r1 (US), r1 = M[I2,1], r0 = M[I4,2];
0x000D70        B7233821                 rMAC = rMAC - r0 * r1 (US), r1 = M[I2,0], r0 = M[I4,1];
0x000D71        B6230022                 rMAC = rMAC - r0 * r1 (US), r0 = M[I4,M2];
0x000D72        79220006                 I2 = I2 - 6;
0x000D73        91110068                 rMAC = rMAC ASHIFT -24 (56bit);
0x000D74        BF233920                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I2,1], r0 = M[I4,0];
0x000D75        AF4339C2                 rMAC = rMAC + r2 * r1 (SS), r1 = M[I2,1], M[I4,2] = r2;
0x000D76        BF233922                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I2,1], r0 = M[I4,2];
0x000D77        BF233922                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I2,1], r0 = M[I4,2];
0x000D78        BF233922                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I2,1], r0 = M[I4,2];
0x000D79        BF233A22                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I2,2], r0 = M[I4,2];
0x000D7A        BF233921                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I2,1], r0 = M[I4,1];
0x000D7B        93130000                 rMAC = rMAC ASHIFT r1 (56bit);
0x000D7C        8D210018                 r0 = rMAC LSHIFT 24;
0x000D7D        8C31000F                 r1 = rMAC LSHIFT Null;
0x000D7E        020000A0                 Null = Null + Null, M[I4,M0] = r0;
0x000D7F        DC0D000F                 rts;

 <$cbuffer.configure_port_message_handler>
0x000D80        F3D00000                 push rLink;
0x000D81        2103000C                 Null = r1 - 12;
0x000D82        E150001D                 if POS call $M.cbuffer.configure_port_message_handler.write_port;

 <$M.cbuffer.configure_port_message_handler.read_port>
0x000D83        D5534FE6                 M[r1 + 20454] = r3;
0x000D84        D5439099                 M[r1 + -28519] = r2;
0x000D85        DD100004                 if NE jump $M.cbuffer.configure_port_message_handler.read_port_connect;
0x000D86        092064D5                 r0 = Null + M[$cbuffer.read_port_disconnect_address];
0x000D87        E0020001                 if NE call r0;
0x000D88        DDF00941                 jump $pop_rLink_and_rts;

 <$M.cbuffer.configure_port_message_handler.read_port_connect>
0x000D89        0023000F                 r0 = r1 + Null;
0x000D8A        D144FFFF                 r2 = M[r2 + -1];
0x000D8B        01300040                 r1 = Null + 64;
0x000D8C        8D440078                 r2 = r2 LSHIFT -8;
0x000D8D        8C43004F                 r2 = r1 LSHIFT r2;
0x000D8E        D5429081                 M[r0 + -28543] = r2;
0x000D8F        E430002F                 r1 = Null + 1;
0x000D90        0140000D                 r2 = Null + 13;
0x000D91        2105F000                 Null = r3 - -4096;
0x000D92        00340004                 if NEG r1 = r2 + Null;
0x000D93        F3200000                 push r0;
0x000D94        F3400000                 push r2;
0x000D95        01400062                 r2 = Null + 98;
0x000D96        65020007                 Null = 7 - r0;
0x000D97        00220044                 if NEG r0 = r0 + r2;
0x000D98        D532FE7B                 M[r0 + -389] = r1;
0x000D99        F3440000                 pop r2;
0x000D9A        F3240000                 pop r0;
0x000D9B        0032000F                 r1 = r0 + Null;
0x000D9C        092094D4                 r0 = Null + M[$cbuffer.read_port_connect_address];
0x000D9D        E0020001                 if NE call r0;
0x000D9E        DDF0092B                 jump $pop_rLink_and_rts;

 <$M.cbuffer.configure_port_message_handler.write_port>
0x000D9F        D5534FE6                 M[r1 + 20454] = r3;
0x000DA0        D5439099                 M[r1 + -28519] = r2;
0x000DA1        DD100004                 if NE jump $M.cbuffer.configure_port_message_handler.write_port_connect;
0x000DA2        092064D4                 r0 = Null + M[$cbuffer.write_port_disconnect_address];
0x000DA3        E0020001                 if NE call r0;
0x000DA4        DDF00925                 jump $pop_rLink_and_rts;

 <$M.cbuffer.configure_port_message_handler.write_port_connect>
0x000DA5        0023000F                 r0 = r1 + Null;
0x000DA6        D144FFFF                 r2 = M[r2 + -1];
0x000DA7        01300040                 r1 = Null + 64;
0x000DA8        8D440078                 r2 = r2 LSHIFT -8;
0x000DA9        8C43004F                 r2 = r1 LSHIFT r2;
0x000DAA        D5429081                 M[r0 + -28543] = r2;
0x000DAB        01300009                 r1 = Null + 9;
0x000DAC        01400005                 r2 = Null + 5;
0x000DAD        2105F000                 Null = r3 - -4096;
0x000DAE        00340004                 if NEG r1 = r2 + Null;
0x000DAF        F3200000                 push r0;
0x000DB0        F3400000                 push r2;
0x000DB1        2122000C                 r0 = r0 - 12;
0x000DB2        01400066                 r2 = Null + 102;
0x000DB3        65020007                 Null = 7 - r0;
0x000DB4        00220044                 if NEG r0 = r0 + r2;
0x000DB5        D532FE73                 M[r0 + -397] = r1;
0x000DB6        F3440000                 pop r2;
0x000DB7        F3240000                 pop r0;
0x000DB8        0032000F                 r1 = r0 + Null;
0x000DB9        092094D3                 r0 = Null + M[$cbuffer.write_port_connect_address];
0x000DBA        E0020001                 if NE call r0;
0x000DBB        DDF0090E                 jump $pop_rLink_and_rts;

 <$reset_iir_resampler>
0x000DBC        D5220005                 M[r0 + 5] = r0;
0x000DBD        D1520000                 r3 = M[r0 + 0];
0x000DBE        DC0D0000                 if EQ rts;
0x000DBF        F3D00000                 push rLink;
0x000DC0        F3700000                 push r5;
0x000DC1        E470002F                 r5 = Null + 1;
0x000DC2        D1020006                 Null = M[r0 + 6];
0x000DC3        00700000                 if EQ r5 = Null + Null;
0x000DC4        51800001                 M0 = Null + 1;
0x000DC5        8B440000                 r2 = r2 XOR r2;
0x000DC6        512A0004                 I2 = r8 + 4;
0x000DC7        51350005                 I3 = r3 + 5;
0x000DC8        D1050004                 Null = M[r3 + 4];
0x000DC9        DD000003                 if EQ jump $M.reset_iir_resampler.Reset2ndStage;
0x000DCA        512A0000                 I2 = r8 + 0;
0x000DCB        E1F00005                 call $M.reset_iir_resampler.reset_iir_stage;

 <$M.reset_iir_resampler.Reset2ndStage>
0x000DCC        5F380000                 I3 = I3 + M0;
0x000DCD        E1F00003                 call $M.reset_iir_resampler.reset_iir_stage;
0x000DCE        F3740000                 pop r5;
0x000DCF        DDF008FA                 jump $pop_rLink_and_rts;

 <$M.reset_iir_resampler.reset_iir_stage>
0x000DD0        0200C800                 Null = Null + Null, M[I2,M0] = r2;
0x000DD1        02005C00                 Null = Null + Null, r3 = M[I3,M0];
0x000DD2        02002C00                 Null = Null + Null, r0 = M[I3,M0];
0x000DD3        93270000                 r0 = r0 ASHIFT r5;
0x000DD4        0200C800                 Null = Null + Null, M[I2,M0] = r2;
0x000DD5        0200E800                 Null = Null + Null, M[I2,M0] = r4;
0x000DD6        03650000                 r4 = r4 + r3;
0x000DD7        0036E80F                 r1 = r4 + Null, M[I2,M0] = r4;
0x000DD8        59330004                 I3 = I3 + 4;
0x000DD9        00C2000F                 r10 = r0 + Null;
0x000DDA        DC0D0000                 if EQ rts;
0x000DDB        03620000                 r4 = r4 + r0;
0x000DDC        5000003F                 I0 = Null + r1;
0x000DDD        59330002                 I3 = I3 + 2;
0x000DDE        02003C00                 Null = Null + Null, r1 = M[I3,M0];
0x000DDF        D13392D4                 r1 = M[r1 + -27948];
0x000DE0        5B330000                 I3 = I3 + r1;
0x000DE1        E5F00002                 do $M.reset_iir_resampler.clr_loop;
0x000DE2        0300C100                 Null = Null + Null, M[I0,1] = r2;

 <$M.reset_iir_resampler.clr_loop>
0x000DE3        DC0D000F                 rts;

 <$estimate_iir_resampler_consumed>
0x000DE4        51800001                 M0 = Null + 1;
0x000DE5        D1420000                 r2 = M[r0 + 0];
0x000DE6        5020004F                 I2 = Null + r2;
0x000DE7        02004800                 Null = Null + Null, r2 = M[I2,M0];
0x000DE8        9814483F                 rMAC = r2 * r1 (int), r2 = M[I2,M0];
0x000DE9        AC14003F                 rMAC = rMAC + r2 * r1 (SS);
0x000DEA        E411003F                 rMAC = rMAC - 1;
0x000DEB        00100004                 if NEG rMAC = Null + Null;
0x000DEC        D1420004                 r2 = M[r0 + 4];
0x000DED        0031000F                 r1 = rMAC + Null;
0x000DEE        02002800                 Null = Null + Null, r0 = M[I2,M0];
0x000DEF        9812284F                 rMAC = r0 * r2 (int), r0 = M[I2,M0];
0x000DF0        AC12004F                 rMAC = rMAC + r0 * r2 (SS);
0x000DF1        DC0D0000                 if EQ rts;
0x000DF2        E411003F                 rMAC = rMAC - 1;
0x000DF3        00100004                 if NEG rMAC = Null + Null;
0x000DF4        2003001F                 Null = r1 - rMAC;
0x000DF5        00310005                 if POS r1 = rMAC + Null;
0x000DF6        DC0D000F                 rts;

 <$spkr_ctrl_system.initialize>
0x000DF7        F3D00000                 push rLink;
0x000DF8        F3900000                 push r7;
0x000DF9        D1490000                 r2 = M[r7 + 0];
0x000DFA        D144000B                 r2 = M[r2 + 11];
0x000DFB        D1440000                 r2 = M[r2 + 0];
0x000DFC        D1A90002                 r8 = M[r7 + 2];
0x000DFD        DD000007                 if EQ jump $M.spkr_ctrl_system.initialisation.dontCalcPriEqCoefs;
0x000DFE        D1990001                 r7 = M[r7 + 1];
0x000DFF        D1290004                 r0 = M[r7 + 4];
0x000E00        D1390005                 r1 = M[r7 + 5];
0x000E01        03A40000                 r8 = r8 + r2;
0x000E02        D3A00000                 r8 = M[r8 + Null];
0x000E03        E1F02230                 call $user_eq.calcBankCoefs.call_entry;

 <$M.spkr_ctrl_system.initialisation.dontCalcPriEqCoefs>
0x000E04        F198FFFF                 r7 = M[SP + -0x1];
0x000E05        D1490000                 r2 = M[r7 + 0];
0x000E06        D144000B                 r2 = M[r2 + 11];
0x000E07        D1440000                 r2 = M[r2 + 0];
0x000E08        D1A90004                 r8 = M[r7 + 4];
0x000E09        DD000007                 if EQ jump $M.spkr_ctrl_system.initialisation.dontCalcSecEqCoefs;
0x000E0A        D1990003                 r7 = M[r7 + 3];
0x000E0B        D1290004                 r0 = M[r7 + 4];
0x000E0C        D1390005                 r1 = M[r7 + 5];
0x000E0D        03A40000                 r8 = r8 + r2;
0x000E0E        D3A00000                 r8 = M[r8 + Null];
0x000E0F        E1F02224                 call $user_eq.calcBankCoefs.call_entry;

 <$M.spkr_ctrl_system.initialisation.dontCalcSecEqCoefs>
0x000E10        F198FFFF                 r7 = M[SP + -0x1];
0x000E11        D1490000                 r2 = M[r7 + 0];
0x000E12        D144000B                 r2 = M[r2 + 11];
0x000E13        D1440000                 r2 = M[r2 + 0];
0x000E14        D1A90006                 r8 = M[r7 + 6];
0x000E15        DD000007                 if EQ jump $M.spkr_ctrl_system.initialisation.dontCalcBassEqCoefs;
0x000E16        D1990005                 r7 = M[r7 + 5];
0x000E17        D1290004                 r0 = M[r7 + 4];
0x000E18        D1390005                 r1 = M[r7 + 5];
0x000E19        03A40000                 r8 = r8 + r2;
0x000E1A        D3A00000                 r8 = M[r8 + Null];
0x000E1B        E1F02218                 call $user_eq.calcBankCoefs.call_entry;

 <$M.spkr_ctrl_system.initialisation.dontCalcBassEqCoefs>
0x000E1C        F198FFFF                 r7 = M[SP + -0x1];
0x000E1D        D1490000                 r2 = M[r7 + 0];
0x000E1E        D144000B                 r2 = M[r2 + 11];
0x000E1F        D1340000                 r1 = M[r2 + 0];
0x000E20        0054003F                 r3 = r2 + r1;
0x000E21        D1250006                 r0 = M[r3 + 6];
0x000E22        D5240006                 M[r2 + 6] = r0;
0x000E23        F3940000                 pop r7;
0x000E24        F3D40000                 pop rLink;
0x000E25        DC0D000F                 rts;

 <$spkr_ctrl_system.zero_data>
0x000E26        F3D00000                 push rLink;
0x000E27        0009000F                 Null = r7 + Null;
0x000E28        DD000006                 if EQ jump $M.spkr_ctrl_system.initialisation.clear_buffer;
0x000E29        00CA000F                 r10 = r8 + Null;
0x000E2A        5000009F                 I0 = Null + r7;
0x000E2B        01200000                 r0 = Null + 0;
0x000E2C        E5F00002                 do $M.spkr_ctrl_system.initialisation.clear_buffer;
0x000E2D        0300A100                 Null = Null + Null, M[I0,1] = r0;

 <$M.spkr_ctrl_system.initialisation.clear_buffer>
0x000E2E        F3D40000                 pop rLink;
0x000E2F        DC0D000F                 rts;

 <$iir_resamplerv2.iir_19_s2_diir>
0x000E30        93183900                 rMAC = rMAC ASHIFT r6 (56bit), r1 = M[I2,1];
0x000E31        8D210018                 r0 = rMAC LSHIFT 24;
0x000E32        8C41000F                 r2 = rMAC LSHIFT Null;
0x000E33        C7233922                 rMAC = r0 * r1 (US), r1 = M[I2,1], r0 = M[I4,2];
0x000E34        B7233922                 rMAC = rMAC - r0 * r1 (US), r1 = M[I2,1], r0 = M[I4,2];
0x000E35        B7233922                 rMAC = rMAC - r0 * r1 (US), r1 = M[I2,1], r0 = M[I4,2];
0x000E36        B7233922                 rMAC = rMAC - r0 * r1 (US), r1 = M[I2,1], r0 = M[I4,2];
0x000E37        B7233922                 rMAC = rMAC - r0 * r1 (US), r1 = M[I2,1], r0 = M[I4,2];
0x000E38        B7233922                 rMAC = rMAC - r0 * r1 (US), r1 = M[I2,1], r0 = M[I4,2];
0x000E39        B7233922                 rMAC = rMAC - r0 * r1 (US), r1 = M[I2,1], r0 = M[I4,2];
0x000E3A        B7233922                 rMAC = rMAC - r0 * r1 (US), r1 = M[I2,1], r0 = M[I4,2];
0x000E3B        B7233922                 rMAC = rMAC - r0 * r1 (US), r1 = M[I2,1], r0 = M[I4,2];
0x000E3C        51A0FFEE                 M2 = Null + -18;
0x000E3D        B7233821                 rMAC = rMAC - r0 * r1 (US), r1 = M[I2,0], r0 = M[I4,1];
0x000E3E        B6230022                 rMAC = rMAC - r0 * r1 (US), r0 = M[I4,M2];
0x000E3F        7922000A                 I2 = I2 - 10;
0x000E40        91110068                 rMAC = rMAC ASHIFT -24 (56bit);
0x000E41        BF233900                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I2,1];
0x000E42        AF433922                 rMAC = rMAC + r2 * r1 (SS), r1 = M[I2,1], r0 = M[I4,2];
0x000E43        BF233922                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I2,1], r0 = M[I4,2];
0x000E44        BF233922                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I2,1], r0 = M[I4,2];
0x000E45        BF233922                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I2,1], r0 = M[I4,2];
0x000E46        BF233922                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I2,1], r0 = M[I4,2];
0x000E47        BF233922                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I2,1], r0 = M[I4,2];
0x000E48        BF233922                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I2,1], r0 = M[I4,2];
0x000E49        BF233922                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I2,1], r0 = M[I4,2];
0x000E4A        BF233A22                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I2,2], r0 = M[I4,2];
0x000E4B        BF233921                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I2,1], r0 = M[I4,1];
0x000E4C        93133920                 rMAC = rMAC ASHIFT r1 (56bit), r1 = M[I2,1], r0 = M[I4,0];
0x000E4D        8C41000F                 r2 = rMAC LSHIFT Null;
0x000E4E        8D610018                 r4 = rMAC LSHIFT 24;
0x000E4F        C76339E2                 rMAC = r4 * r1 (US), r1 = M[I2,1], M[I4,2] = r4;
0x000E50        B7233922                 rMAC = rMAC - r0 * r1 (US), r1 = M[I2,1], r0 = M[I4,2];
0x000E51        B7233922                 rMAC = rMAC - r0 * r1 (US), r1 = M[I2,1], r0 = M[I4,2];
0x000E52        B7233922                 rMAC = rMAC - r0 * r1 (US), r1 = M[I2,1], r0 = M[I4,2];
0x000E53        B7233922                 rMAC = rMAC - r0 * r1 (US), r1 = M[I2,1], r0 = M[I4,2];
0x000E54        B7233922                 rMAC = rMAC - r0 * r1 (US), r1 = M[I2,1], r0 = M[I4,2];
0x000E55        B7233922                 rMAC = rMAC - r0 * r1 (US), r1 = M[I2,1], r0 = M[I4,2];
0x000E56        B7233922                 rMAC = rMAC - r0 * r1 (US), r1 = M[I2,1], r0 = M[I4,2];
0x000E57        51A0FFF0                 M2 = Null + -16;
0x000E58        B7233821                 rMAC = rMAC - r0 * r1 (US), r1 = M[I2,0], r0 = M[I4,1];
0x000E59        B6230022                 rMAC = rMAC - r0 * r1 (US), r0 = M[I4,M2];
0x000E5A        79220009                 I2 = I2 - 9;
0x000E5B        91110068                 rMAC = rMAC ASHIFT -24 (56bit);
0x000E5C        BF233920                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I2,1], r0 = M[I4,0];
0x000E5D        AF4339C2                 rMAC = rMAC + r2 * r1 (SS), r1 = M[I2,1], M[I4,2] = r2;
0x000E5E        BF233922                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I2,1], r0 = M[I4,2];
0x000E5F        BF233922                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I2,1], r0 = M[I4,2];
0x000E60        BF233922                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I2,1], r0 = M[I4,2];
0x000E61        BF233922                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I2,1], r0 = M[I4,2];
0x000E62        BF233922                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I2,1], r0 = M[I4,2];
0x000E63        BF233922                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I2,1], r0 = M[I4,2];
0x000E64        BF233A22                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I2,2], r0 = M[I4,2];
0x000E65        BF233921                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I2,1], r0 = M[I4,1];
0x000E66        93130000                 rMAC = rMAC ASHIFT r1 (56bit);
0x000E67        8D210018                 r0 = rMAC LSHIFT 24;
0x000E68        8C31000F                 r1 = rMAC LSHIFT Null;
0x000E69        020000A0                 Null = Null + Null, M[I4,M0] = r0;
0x000E6A        DC0D000F                 rts;

 <$iir_resamplerv2.iir_15_s3_diir>
0x000E6B        93183900                 rMAC = rMAC ASHIFT r6 (56bit), r1 = M[I2,1];
0x000E6C        8D210018                 r0 = rMAC LSHIFT 24;
0x000E6D        8C41000F                 r2 = rMAC LSHIFT Null;
0x000E6E        C7233922                 rMAC = r0 * r1 (US), r1 = M[I2,1], r0 = M[I4,2];
0x000E6F        B7233922                 rMAC = rMAC - r0 * r1 (US), r1 = M[I2,1], r0 = M[I4,2];
0x000E70        B7233922                 rMAC = rMAC - r0 * r1 (US), r1 = M[I2,1], r0 = M[I4,2];
0x000E71        B7233922                 rMAC = rMAC - r0 * r1 (US), r1 = M[I2,1], r0 = M[I4,2];
0x000E72        B7233922                 rMAC = rMAC - r0 * r1 (US), r1 = M[I2,1], r0 = M[I4,2];
0x000E73        51A0FFF6                 M2 = Null + -10;
0x000E74        B7233821                 rMAC = rMAC - r0 * r1 (US), r1 = M[I2,0], r0 = M[I4,1];
0x000E75        B6230022                 rMAC = rMAC - r0 * r1 (US), r0 = M[I4,M2];
0x000E76        79220006                 I2 = I2 - 6;
0x000E77        91110068                 rMAC = rMAC ASHIFT -24 (56bit);
0x000E78        BF233900                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I2,1];
0x000E79        AF433922                 rMAC = rMAC + r2 * r1 (SS), r1 = M[I2,1], r0 = M[I4,2];
0x000E7A        BF233922                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I2,1], r0 = M[I4,2];
0x000E7B        BF233922                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I2,1], r0 = M[I4,2];
0x000E7C        BF233922                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I2,1], r0 = M[I4,2];
0x000E7D        BF233A22                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I2,2], r0 = M[I4,2];
0x000E7E        BF233921                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I2,1], r0 = M[I4,1];
0x000E7F        93133920                 rMAC = rMAC ASHIFT r1 (56bit), r1 = M[I2,1], r0 = M[I4,0];
0x000E80        8C41000F                 r2 = rMAC LSHIFT Null;
0x000E81        8D610018                 r4 = rMAC LSHIFT 24;
0x000E82        C76339E2                 rMAC = r4 * r1 (US), r1 = M[I2,1], M[I4,2] = r4;
0x000E83        B7233922                 rMAC = rMAC - r0 * r1 (US), r1 = M[I2,1], r0 = M[I4,2];
0x000E84        B7233922                 rMAC = rMAC - r0 * r1 (US), r1 = M[I2,1], r0 = M[I4,2];
0x000E85        B7233922                 rMAC = rMAC - r0 * r1 (US), r1 = M[I2,1], r0 = M[I4,2];
0x000E86        51A0FFF8                 M2 = Null + -8;
0x000E87        B7233821                 rMAC = rMAC - r0 * r1 (US), r1 = M[I2,0], r0 = M[I4,1];
0x000E88        B6230022                 rMAC = rMAC - r0 * r1 (US), r0 = M[I4,M2];
0x000E89        79220005                 I2 = I2 - 5;
0x000E8A        91110068                 rMAC = rMAC ASHIFT -24 (56bit);
0x000E8B        BF233920                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I2,1], r0 = M[I4,0];
0x000E8C        AF4339C2                 rMAC = rMAC + r2 * r1 (SS), r1 = M[I2,1], M[I4,2] = r2;
0x000E8D        BF233922                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I2,1], r0 = M[I4,2];
0x000E8E        BF233922                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I2,1], r0 = M[I4,2];
0x000E8F        BF233A22                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I2,2], r0 = M[I4,2];
0x000E90        BF233921                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I2,1], r0 = M[I4,1];
0x000E91        93133920                 rMAC = rMAC ASHIFT r1 (56bit), r1 = M[I2,1], r0 = M[I4,0];
0x000E92        8C41000F                 r2 = rMAC LSHIFT Null;
0x000E93        8D610018                 r4 = rMAC LSHIFT 24;
0x000E94        C76339E2                 rMAC = r4 * r1 (US), r1 = M[I2,1], M[I4,2] = r4;
0x000E95        B7233922                 rMAC = rMAC - r0 * r1 (US), r1 = M[I2,1], r0 = M[I4,2];
0x000E96        B7233922                 rMAC = rMAC - r0 * r1 (US), r1 = M[I2,1], r0 = M[I4,2];
0x000E97        51A0FFFA                 M2 = Null + -6;
0x000E98        B7233821                 rMAC = rMAC - r0 * r1 (US), r1 = M[I2,0], r0 = M[I4,1];
0x000E99        B6230022                 rMAC = rMAC - r0 * r1 (US), r0 = M[I4,M2];
0x000E9A        79220004                 I2 = I2 - 4;
0x000E9B        91110068                 rMAC = rMAC ASHIFT -24 (56bit);
0x000E9C        BF233920                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I2,1], r0 = M[I4,0];
0x000E9D        AF4339C2                 rMAC = rMAC + r2 * r1 (SS), r1 = M[I2,1], M[I4,2] = r2;
0x000E9E        BF233922                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I2,1], r0 = M[I4,2];
0x000E9F        BF233A22                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I2,2], r0 = M[I4,2];
0x000EA0        BF233921                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I2,1], r0 = M[I4,1];
0x000EA1        93130000                 rMAC = rMAC ASHIFT r1 (56bit);
0x000EA2        8D210018                 r0 = rMAC LSHIFT 24;
0x000EA3        8C31000F                 r1 = rMAC LSHIFT Null;
0x000EA4        020000A0                 Null = Null + Null, M[I4,M0] = r0;
0x000EA5        DC0D000F                 rts;

 <$iir_perform_resample>
0x000EA6        F3D00000                 push rLink;
0x000EA7        51800001                 M0 = Null + 1;
0x000EA8        D1420001                 r2 = M[r0 + 1];
0x000EA9        D1720002                 r5 = M[r0 + 2];
0x000EAA        D1520000                 r3 = M[r0 + 0];
0x000EAB        DD00002A                 if EQ jump $M.iir_perform_resample.jp_passthrough;
0x000EAC        F3E20000                 push FP;
0x000EAD        D1B20006                 r9 = M[r0 + 6];
0x000EAE        F3600000                 push r4;
0x000EAF        F3E60000                 pop FP;
0x000EB0        512A0004                 I2 = r8 + 4;
0x000EB1        51350005                 I3 = r3 + 5;
0x000EB2        D1950004                 r7 = M[r3 + 4];
0x000EB3        DD000014                 if EQ jump $M.iir_perform_resample.Perform2ndStage;
0x000EB4        D1220003                 r0 = M[r0 + 3];
0x000EB5        F3D20000                 push B5;
0x000EB6        F1000084                 pushm <r0, r5>;
0x000EB7        F1018020                 pushm <I5, L5>;
0x000EB8        5050002F                 I5 = Null + r0;
0x000EB9        50F0000F                 L5 = Null + Null;
0x000EBA        0070000F                 r5 = Null + Null;
0x000EBB        512A0000                 I2 = r8 + 0;
0x000EBC        F3B00000                 push r9;
0x000EBD        D1996433                 r7 = M[r7 + 25651];
0x000EBE        E009000F                 call r7;
0x000EBF        F3B40000                 pop r9;
0x000EC0        50D0000F                 L1 = Null + Null;
0x000EC1        00C9000F                 r10 = r7 + Null;
0x000EC2        0040000F                 r2 = Null + Null;
0x000EC3        F1058020                 popm <I5, L5>;
0x000EC4        F1040084                 popm <r0, r5>;
0x000EC5        5010002F                 I1 = Null + r0;
0x000EC6        F3D60000                 pop B5;

 <$M.iir_perform_resample.Perform2ndStage>
0x000EC7        02002C00                 Null = Null + Null, r0 = M[I3,M0];
0x000EC8        03000000                 Null = Null + Null;
0x000EC9        D1226433                 r0 = M[r0 + 25651];
0x000ECA        E002000F                 call r0;
0x000ECB        F067000F                 r4 = FP + Null;
0x000ECC        F3E60000                 pop FP;

 <$M.iir_perform_resample.jp_done>
0x000ECD        50D0000F                 L1 = Null + Null;
0x000ECE        50F0000F                 L5 = Null + Null;
0x000ECF        F3000000                 push Null;
0x000ED0        F1AAFFFF                 B0 = M[SP + -0x1];
0x000ED1        F1BAFFFF                 B1 = M[SP + -0x1];
0x000ED2        F1CAFFFF                 B4 = M[SP + -0x1];
0x000ED3        F3D60000                 pop B5;
0x000ED4        DDF007F5                 jump $pop_rLink_and_rts;

 <$M.iir_perform_resample.jp_passthrough>
0x000ED5        009C000F                 r7 = r10 + Null;
0x000ED6        03470000                 r2 = r2 + r5;
0x000ED7        E4CC143F                 r10 = r10 - 1, rMAC = M[I1,M0];
0x000ED8        93E40000                 rMAC = rMAC ASHIFT r2;
0x000ED9        E5F00003                 do $M.iir_perform_resample.lp_copy;
0x000EDA        02001494                 Null = Null + Null, rMAC = M[I1,M0], M[I5,M0] = rMAC;
0x000EDB        93E40000                 rMAC = rMAC ASHIFT r2;

 <$M.iir_perform_resample.lp_copy>
0x000EDC        02000094                 Null = Null + Null, M[I5,M0] = rMAC;
0x000EDD        DDF0FFF0                 jump $M.iir_perform_resample.jp_done;

 <$M.audio_proc.stream_gain.Process.func>
0x000EDE        F3D00000                 push rLink;
0x000EDF        D1290000                 r0 = M[r7 + 0];
0x000EE0        E1F007BB                 call $frmbuffer.get_buffer;
0x000EE1        5000002F                 I0 = Null + r0;
0x000EE2        50C0003F                 L0 = Null + r1;
0x000EE3        00C5000F                 r10 = r3 + Null;
0x000EE4        D1290001                 r0 = M[r7 + 1];
0x000EE5        E1F007E2                 call $frmbuffer.set_frame_size;
0x000EE6        E1F007B5                 call $frmbuffer.get_buffer;
0x000EE7        5040002F                 I4 = Null + r0;
0x000EE8        50E0003F                 L4 = Null + r1;
0x000EE9        F3D40000                 pop rLink;
0x000EEA        D1390002                 r1 = M[r7 + 2];
0x000EEB        D1490003                 r2 = M[r7 + 3];
0x000EEC        D3300000                 r1 = M[r1 + Null];
0x000EED        D3400000                 r2 = M[r2 + Null];
0x000EEE        03002100                 Null = Null + Null, r0 = M[I0,1];
0x000EEF        210A0000                 Null = r8 - 0;
0x000EF0        DD00001D                 if EQ jump $M.audio_proc.stream_gain.Process.adjust_gain;
0x000EF1        D15A0002                 r3 = M[r8 + 2];
0x000EF2        D16A0003                 r4 = M[r8 + 3];
0x000EF3        2003005F                 Null = r1 - r3;
0x000EF4        DD100003                 if NE jump $M.audio_proc.stream_gain.Process.apply_ramp;
0x000EF5        2004006F                 Null = r2 - r4;
0x000EF6        DD000017                 if EQ jump $M.audio_proc.stream_gain.Process.adjust_gain;

 <$M.audio_proc.stream_gain.Process.apply_ramp>
0x000EF7        D17A0001                 r5 = M[r8 + 1];
0x000EF8        E5F00010                 do $M.audio_proc.stream_gain.Process.lp_ramp_copy;
0x000EF9        D18A0000                 r6 = M[r8 + 0];
0x000EFA        03780000                 r5 = r5 + r6;
0x000EFB        FD00007F 2107FFFF        Null = r5 - 8388607;
0x000EFD        DD50000D                 if POS jump $M.audio_proc.stream_gain.Process.complete;
0x000EFE        CC12003F                 rMAC = r0 * r1 (SS);
0x000EFF        9081004F                 r6 = rMAC ASHIFT r2;
0x000F00        97870000                 r6 = r6 * r5 (frac);
0x000F01        FD00007F 6597FFFF        r7 = 8388607 - r5;
0x000F03        CC12005F                 rMAC = r0 * r3 (SS);
0x000F04        9021006F                 r0 = rMAC ASHIFT r4;
0x000F05        97290000                 r0 = r0 * r7 (frac);
0x000F06        03280000                 r0 = r0 + r6;
0x000F07        030021A1                 Null = Null + Null, r0 = M[I0,1], M[I4,1] = r0;

 <$M.audio_proc.stream_gain.Process.lp_ramp_copy>
0x000F08        D57A0001                 M[r8 + 1] = r5;
0x000F09        DDF00008                 jump $M.audio_proc.stream_gain.Process.exit;

 <$M.audio_proc.stream_gain.Process.complete>
0x000F0A        D53A0002                 M[r8 + 2] = r1;
0x000F0B        D54A0003                 M[r8 + 3] = r2;
0x000F0C        D50A0001                 M[r8 + 1] = Null;

 <$M.audio_proc.stream_gain.Process.adjust_gain>
0x000F0D        E5F00004                 do $M.audio_proc.stream_gain.Process.exit;
0x000F0E        CC12003F                 rMAC = r0 * r1 (SS);
0x000F0F        93140000                 rMAC = rMAC ASHIFT r2 (56bit);
0x000F10        03002191                 Null = Null + Null, r0 = M[I0,1], M[I4,1] = rMAC;

 <$M.audio_proc.stream_gain.Process.exit>
0x000F11        50C0000F                 L0 = Null + Null;
0x000F12        50E0000F                 L4 = Null + Null;
0x000F13        DC0D000F                 rts;

 <$con_in_copy_handler>
0x000F14        F3D00000                 push rLink;
0x000F15        FD0000FF 09204BFF        r0 = Null + M[0xff4bff];
0x000F17        192064BE                 M[$codec_packets_info_last_write_address] = r0 + Null;
0x000F18        E1F0F4EA                 call $sra_tagtimes;
0x000F19        0920006F                 r0 = Null + M[$app_config.io];
0x000F1A        21020005                 Null = r0 - 5;
0x000F1B        DD100005                 if NE jump $M.con_in_copy_handler.skip_usb_copy;
0x000F1C        01A003D5                 r8 = Null + 981;
0x000F1D        01900768                 r7 = Null + 1896;
0x000F1E        E1F0164A                 call $run_usb_state_mc;
0x000F1F        DDF00015                 jump $M.con_in_copy_handler.copy_done;

 <$M.con_in_copy_handler.skip_usb_copy>
0x000F20        21020008                 Null = r0 - 8;
0x000F21        DD000004                 if EQ jump $M.con_in_copy_handler.analogue_copy;
0x000F22        2102000A                 Null = r0 - 10;
0x000F23        DD000002                 if EQ jump $M.con_in_copy_handler.analogue_copy;
0x000F24        DDF00009                 jump $M.con_in_copy_handler.codec_copy;

 <$M.con_in_copy_handler.analogue_copy>
0x000F25        01A003DF                 r8 = Null + 991;
0x000F26        0190004A                 r7 = Null + 74;
0x000F27        FD000080 01200001        r0 = Null + -8388607;
0x000F29        E1F0076D                 call $cbuffer.is_it_enabled;
0x000F2A        00A90000                 if EQ r8 = r7 + Null;
0x000F2B        E1F0FB0D                 call $cbops.copy;
0x000F2C        DDF00008                 jump $M.con_in_copy_handler.copy_done;

 <$M.con_in_copy_handler.codec_copy>
0x000F2D        FD0000FF 01A05BFB        r8 = Null + -41989;
0x000F2F        E1F0FB09                 call $cbops.copy;

 <$M.con_in_copy_handler.input_read_done>
0x000F30        FD0000FF 01204BFD        r0 = Null + -46083;
0x000F32        E1F00735                 call $cbuffer.calc_amount_data;
0x000F33        1920648C                 M[$debug_codec_in_level] = r0 + Null;

 <$M.con_in_copy_handler.copy_done>
0x000F34        092094CF                 r0 = Null + M[$chain0_hw_warp_enable];
0x000F35        092264D0                 r0 = r0 + M[$chain1_hw_warp_enable];
0x000F36        E1100039                 if NE call $apply_hardware_warp_rate;
0x000F37        090094C2                 Null = Null + M[$M.configure_latency_reporting.enabled];
0x000F38        DD000002                 if EQ jump $M.con_in_copy_handler.skip_packet_detection;
0x000F39        E1F0017E                 call $media_packet_boundary_detection;

 <$M.con_in_copy_handler.skip_packet_detection>
0x000F3A        FD0000FF 01304FFC        r1 = Null + -45060;
0x000F3C        09409487                 r2 = Null + M[$tmr_period_con_copy];
0x000F3D        01500F14                 r3 = Null + 3860;
0x000F3E        E1F0077B                 call $timer.schedule_event_in_period;
0x000F3F        DDF0078A                 jump $pop_rLink_and_rts;

 <$latency.calc_pcm_latency>
0x000F40        F3D00000                 push rLink;
0x000F41        E1F0073E                 call $block_interrupts;
0x000F42        D1A90000                 r8 = M[r7 + 0];
0x000F43        01800000                 r6 = Null + 0;

 <$M.latency_measure.calc_pcm_latency.proc_loop_buffers>
0x000F44        D02A000F                 r0 = M[r8 + Null];
0x000F45        DD000011                 if EQ jump $M.latency_measure.calc_pcm_latency.done_with_proc_loop;
0x000F46        D802000F                 Null = SIGNDET r0;
0x000F47        DD10000B                 if NE jump $M.latency_measure.calc_pcm_latency.is_buf;
0x000F48        0900FE33                 Null = Null + M[0xfffe33];
0x000F49        8132001F                 r1 = r0 AND 0x1f;
0x000F4A        2103000C                 Null = r1 - 12;
0x000F4B        DD400007                 if NEG jump $M.latency_measure.calc_pcm_latency.is_buf;
0x000F4C        0052000F                 r3 = r0 + Null;
0x000F4D        E1F0070A                 call $cbuffer.calc_amount_space;
0x000F4E        E422002F                 r0 = r0 + 1;
0x000F4F        E1F006D0                 call $cbuffer.mmu_octets_to_samples;
0x000F50        2024002F                 r0 = r2 - r0;
0x000F51        DDF00002                 jump $M.latency_measure.calc_pcm_latency.calculate_latency;

 <$M.latency_measure.calc_pcm_latency.is_buf>
0x000F52        E1F00715                 call $cbuffer.calc_amount_data;

 <$M.latency_measure.calc_pcm_latency.calculate_latency>
0x000F53        E1F0000C                 call $M.latency_measure.calc_pcm_latency.calc_and_accum_latency;
0x000F54        01AA0003                 r8 = r8 + 3;
0x000F55        DDF0FFEF                 jump $M.latency_measure.calc_pcm_latency.proc_loop_buffers;

 <$M.latency_measure.calc_pcm_latency.done_with_proc_loop>
0x000F56        D1A90001                 r8 = M[r7 + 1];
0x000F57        DD000006                 if EQ jump $M.latency_measure.calc_pcm_latency.done;

 <$M.latency_measure.calc_pcm_latency.proc_loop_samples>
0x000F58        D02A000F                 r0 = M[r8 + Null];
0x000F59        DD000004                 if EQ jump $M.latency_measure.calc_pcm_latency.done;
0x000F5A        E1F00005                 call $M.latency_measure.calc_pcm_latency.calc_and_accum_latency;
0x000F5B        01AA0003                 r8 = r8 + 3;
0x000F5C        DDF0FFFC                 jump $M.latency_measure.calc_pcm_latency.proc_loop_samples;

 <$M.latency_measure.calc_pcm_latency.done>
0x000F5D        E1F00712                 call $interrupt.unblock;
0x000F5E        DDF0076B                 jump $pop_rLink_and_rts;

 <$M.latency_measure.calc_pcm_latency.calc_and_accum_latency>
0x000F5F        D13A0001                 r1 = M[r8 + 1];
0x000F60        D3300000                 r1 = M[r1 + Null];
0x000F61        D14A0002                 r2 = M[r8 + 2];
0x000F62        DD000004                 if EQ jump $M.latency_measure.calc_pcm_latency.no_warp;
0x000F63        D3400000                 r2 = M[r2 + Null];
0x000F64        DD000002                 if EQ jump $M.latency_measure.calc_pcm_latency.no_warp;
0x000F65        D3400000                 r2 = M[r2 + Null];

 <$M.latency_measure.calc_pcm_latency.no_warp>
0x000F66        9453004F                 r3 = r1 * r2 (frac);
0x000F67        9445004F                 r2 = r3 * r2 (frac);
0x000F68        0053005F                 r3 = r1 + r3;
0x000F69        0035004F                 r1 = r3 + r2;
0x000F6A        CC12003F                 rMAC = r0 * r1 (SS);
0x000F6B        91E10007                 rMAC = rMAC ASHIFT 7 (MI);
0x000F6C        8D310000                 r1 = rMAC LSHIFT 0;
0x000F6D        03830000                 r6 = r6 + r1;
0x000F6E        DC0D000F                 rts;

 <$apply_hardware_warp_rate>
0x000F6F        F3D00000                 push rLink;
0x000F70        0920FE71                 r0 = Null + M[0xfffe71];
0x000F71        093063D1                 r1 = Null + M[0x63d1];
0x000F72        2042003F                 r2 = r0 - r1;
0x000F73        20400044                 if NEG r2 = Null - r2;
0x000F74        095063CE                 r3 = Null + M[$hw_warp_struct];
0x000F75        2004005F                 Null = r2 - r3;
0x000F76        DD400753                 if NEG jump $pop_rLink_and_rts;
0x000F77        03350000                 r1 = r1 + r3;
0x000F78        2043002F                 r2 = r1 - r0;
0x000F79        20400044                 if NEG r2 = Null - r2;
0x000F7A        210407D0                 Null = r2 - 2000;
0x000F7B        00320005                 if POS r1 = r0 + Null;
0x000F7C        193063D1                 M[0x63d1] = r1 + Null;
0x000F7D        096063CF                 r4 = Null + M[0x63cf];
0x000F7E        097063D2                 r5 = Null + M[0x63d2];
0x000F7F        D3600000                 r4 = M[r4 + Null];
0x000F80        2027006F                 r0 = r5 - r4;
0x000F81        DD000748                 if EQ jump $pop_rLink_and_rts;
0x000F82        20200024                 if NEG r0 = Null - r0;
0x000F83        093063D0                 r1 = Null + M[0x63d0];
0x000F84        FD000004 CD1531BE        rMAC = r3 * 0.032768011093139648 (SS);
0x000F86        91510008                 r3 = rMAC ASHIFT 8;
0x000F87        9442005F                 r2 = r0 * r3 (frac);
0x000F88        21023127                 Null = r0 - 12583;
0x000F89        00430004                 if NEG r2 = r1 + Null;
0x000F8A        99530014                 r3 = r1 * 20 (int);
0x000F8B        2034005F                 r1 = r2 - r3;
0x000F8C        20440035                 if POS r2 = r2 - r1;
0x000F8D        2037006F                 r1 = r5 - r4;
0x000F8E        2023004F                 r0 = r1 - r2;
0x000F8F        20330025                 if POS r1 = r1 - r0;
0x000F90        0023004F                 r0 = r1 + r2;
0x000F91        20330024                 if NEG r1 = r1 - r0;
0x000F92        23730000                 r5 = r5 - r1;
0x000F93        9167007A                 r4 = r5 ASHIFT -6;
0x000F94        91760006                 r5 = r4 ASHIFT 6;
0x000F95        092063D2                 r0 = Null + M[0x63d2];
0x000F96        2037002F                 r1 = r5 - r0;
0x000F97        DD000007                 if EQ jump $M.apply_hardware_warp_rate.end_hw_rate_apply;
0x000F98        197063D2                 M[0x63d2] = r5 + Null;
0x000F99        2060006F                 r4 = Null - r4;
0x000F9A        FD000000 01408004        r2 = Null + 32772;
0x000F9C        01500003                 r3 = Null + 3;
0x000F9D        E1F00531                 call $message.send_short;

 <$M.apply_hardware_warp_rate.end_hw_rate_apply>
0x000F9E        DDF0072B                 jump $pop_rLink_and_rts;

 <$M.report_latency_to_vm.init>
0x000F9F        F3D00000                 push rLink;
0x000FA0        190064C4                 M[$M.configure_latency_reporting.average_latency] = Null + Null;
0x000FA1        190064C2                 M[$M.report_latency_to_vm.latency_max_counter] = Null + Null;
0x000FA2        094064C3                 r2 = Null + M[$M.configure_latency_reporting.report_period];
0x000FA3        01500FA6                 r3 = Null + 4006;
0x000FA4        E1F00718                 call $timer.schedule_event_in;
0x000FA5        DDF00724                 jump $pop_rLink_and_rts;

 <$report_latency_to_vm>
0x000FA6        F3D00000                 push rLink;
0x000FA7        01209193                 r0 = Null + -28269;
0x000FA8        D1520009                 r3 = M[r0 + 9];
0x000FA9        DD000020                 if EQ jump $M.report_latency_to_vm.do_not_send_msg;
0x000FAA        093094C1                 r1 = Null + M[$M.report_latency_to_vm.latency_max];
0x000FAB        E453006F                 r3 = MAX r1;
0x000FAC        195094C1                 M[$M.report_latency_to_vm.latency_max] = r3 + Null;
0x000FAD        092064C2                 r0 = Null + M[$M.report_latency_to_vm.latency_max_counter];
0x000FAE        E422002F                 r0 = r0 + 1;
0x000FAF        21020040                 Null = r0 - 64;
0x000FB0        00200005                 if POS r0 = Null + Null;
0x000FB1        192064C2                 M[$M.report_latency_to_vm.latency_max_counter] = r0 + Null;
0x000FB2        DD100017                 if NE jump $M.report_latency_to_vm.do_not_send_msg;
0x000FB3        190094C1                 M[$M.report_latency_to_vm.latency_max] = Null + Null;
0x000FB4        092064C4                 r0 = Null + M[$M.configure_latency_reporting.average_latency];
0x000FB5        0025000D                 if LE r0 = r3 + Null;
0x000FB6        09A064C0                 r8 = Null + M[$M.report_latency_to_vm.smoothing_factor_low];
0x000FB7        099094C0                 r7 = Null + M[$M.report_latency_to_vm.smoothing_factor_high];
0x000FB8        2035002F                 r1 = r3 - r0;
0x000FB9        00A90005                 if POS r8 = r7 + Null;
0x000FBA        973A0000                 r1 = r1 * r8 (frac);
0x000FBB        0052003F                 r3 = r0 + r1;
0x000FBC        195064C4                 M[$M.configure_latency_reporting.average_latency] = r3 + Null;
0x000FBD        096064C1                 r4 = Null + M[$M.report_latency_to_vm.reported_latency];
0x000FBE        2065006F                 r4 = r3 - r4;
0x000FBF        20600064                 if NEG r4 = Null - r4;
0x000FC0        290694C3                 Null = r4 - M[$M.configure_latency_reporting.min_change];
0x000FC1        DD400008                 if NEG jump $M.report_latency_to_vm.do_not_send_msg;
0x000FC2        195064C1                 M[$M.report_latency_to_vm.reported_latency] = r3 + Null;
0x000FC3        FD000001 955547AE        r3 = r3 * 0.0099999904632568359 (frac);
0x000FC5        21257FFF                 r0 = r3 - 32767;
0x000FC6        20550025                 if POS r3 = r3 - r0;
0x000FC7        01401023                 r2 = Null + 4131;
0x000FC8        E1F00506                 call $message.send_short;

 <$M.report_latency_to_vm.do_not_send_msg>
0x000FC9        013093F6                 r1 = Null + -27658;
0x000FCA        094064C3                 r2 = Null + M[$M.configure_latency_reporting.report_period];
0x000FCB        01500FA6                 r3 = Null + 4006;
0x000FCC        E1F006ED                 call $timer.schedule_event_in_period;
0x000FCD        DDF006FC                 jump $pop_rLink_and_rts;

 <$tone_copy_handler>
0x000FCE        F3D00000                 push rLink;
0x000FCF        090064D2                 Null = Null + M[$stereo_tone];
0x000FD0        DD000006                 if EQ jump $M.tone_copy_handler.mono_tone;
0x000FD1        01A0937D                 r8 = Null + -27779;
0x000FD2        E1F0FA66                 call $cbops.copy;
0x000FD3        01A06326                 r8 = Null + 25382;
0x000FD4        E1F0FA64                 call $cbops.copy;
0x000FD5        DDF00005                 jump $M.tone_copy_handler.resample_done;

 <$M.tone_copy_handler.mono_tone>
0x000FD6        01A09392                 r8 = Null + -27758;
0x000FD7        E1F0FA61                 call $cbops.copy;
0x000FD8        01A063BD                 r8 = Null + 25533;
0x000FD9        E1F0FA5F                 call $cbops.copy;

 <$M.tone_copy_handler.resample_done>
0x000FDA        E1F0023F                 call $detect_end_of_aux_stream;
0x000FDB        0130641F                 r1 = Null + 25631;
0x000FDC        094094D2                 r2 = Null + M[$tmr_period_tone_copy];
0x000FDD        01500FCE                 r3 = Null + 4046;
0x000FDE        E1F006DB                 call $timer.schedule_event_in_period;
0x000FDF        DDF006EA                 jump $pop_rLink_and_rts;

 <$tone_copy_extra>
0x000FE0        F3D00000                 push rLink;
0x000FE1        E1F026F5                 call $multi_chan_tones_active;
0x000FE2        0002000F                 Null = r0 + Null;
0x000FE3        DD0006E6                 if EQ jump $pop_rLink_and_rts;
0x000FE4        0120644D                 r0 = Null + 25677;
0x000FE5        E1F00682                 call $cbuffer.calc_amount_data;
0x000FE6        094094D1                 r2 = Null + M[$current_tone_sampling_rate];
0x000FE7        09306488                 r1 = Null + M[$tmr_period_audio_copy];
0x000FE8        CC14003F                 rMAC = r2 * r1 (SS);
0x000FE9        9141000D                 r2 = rMAC ASHIFT 13;
0x000FEA        FD000000 95443255        r2 = r2 * 0.0015360116958618164 (frac);
0x000FEC        2002004F                 Null = r0 - r2;
0x000FED        DD5006DC                 if POS jump $pop_rLink_and_rts;
0x000FEE        01A09392                 r8 = Null + -27758;
0x000FEF        0190937D                 r7 = Null + -27779;
0x000FF0        090064D2                 Null = Null + M[$stereo_tone];
0x000FF1        00A90001                 if NE r8 = r7 + Null;
0x000FF2        E1F0FA46                 call $cbops.copy;
0x000FF3        DDF006D6                 jump $pop_rLink_and_rts;

 <$flash.copy_to_dm_24>
0x000FF4        F3D00000                 push rLink;
0x000FF5        0082000F                 r6 = r0 + Null;
0x000FF6        81730001                 r5 = r1 AND 0x1;
0x000FF7        9163007F                 r4 = r1 ASHIFT -1;

 <$M.flash.copy_to_dm_24.page_loop>
0x000FF8        0028000F                 r0 = r6 + Null;
0x000FF9        99360003                 r1 = r4 * 3 (int);
0x000FFA        F3300000                 push r1;
0x000FFB        E1F0067C                 call $flash.map_page_into_dm;
0x000FFC        5010002F                 I1 = Null + r0;
0x000FFD        00C6000F                 r10 = r4 + Null;
0x000FFE        F3240000                 pop r0;
0x000FFF        2002003F                 Null = r0 - r1;
0x001000        DD000005                 if EQ jump $M.flash.copy_to_dm_24.read_values;
0x001001        99330002                 r1 = r1 * 2 (int);
0x001002        FD00002A 9533AAAB        r1 = r1 * 0.33333337306976318 (frac);
0x001004        91C3007F                 r10 = r1 ASHIFT -1;

 <$M.flash.copy_to_dm_24.read_values>
0x001005        236C0000                 r4 = r4 - r10;
0x001006        992C0003                 r0 = r10 * 3 (int);
0x001007        03820000                 r6 = r6 + r0;
0x001008        E5F0000B                 do $M.flash.copy_to_dm_24.loop;
0x001009        03002500                 Null = Null + Null, r0 = M[I1,1];
0x00100A        03003500                 Null = Null + Null, r1 = M[I1,1];
0x00100B        8D220008                 r0 = r0 LSHIFT 8;
0x00100C        8D530078                 r3 = r1 LSHIFT -8;
0x00100D        815500FF                 r3 = r3 AND 0xff;
0x00100E        87522500                 r3 = r3 OR r0, r0 = M[I1,1];
0x00100F        8122FFFF                 r0 = r0 AND 0xffff;
0x001010        8D330010                 r1 = r1 LSHIFT 16;
0x001011        0323D100                 r0 = r0 + r1, M[I0,1] = r3;
0x001012        0300A100                 Null = Null + Null, M[I0,1] = r0;

 <$M.flash.copy_to_dm_24.loop>
0x001013        0006000F                 Null = r4 + Null;
0x001014        DD10FFE4                 if NE jump $M.flash.copy_to_dm_24.page_loop;
0x001015        0007000F                 Null = r5 + Null;
0x001016        DD0006B3                 if EQ jump $pop_rLink_and_rts;
0x001017        0028000F                 r0 = r6 + Null;
0x001018        01300002                 r1 = Null + 2;
0x001019        E1F0065E                 call $flash.map_page_into_dm;
0x00101A        5010002F                 I1 = Null + r0;
0x00101B        03002500                 Null = Null + Null, r0 = M[I1,1];
0x00101C        03003500                 Null = Null + Null, r1 = M[I1,1];
0x00101D        8D220008                 r0 = r0 LSHIFT 8;
0x00101E        8D330078                 r1 = r1 LSHIFT -8;
0x00101F        813300FF                 r1 = r1 AND 0xff;
0x001020        8423002F                 r0 = r1 OR r0;
0x001021        0300A100                 Null = Null + Null, M[I0,1] = r0;
0x001022        DDF006A7                 jump $pop_rLink_and_rts;

 <$iir_resamplerv2.iir_15_s2_diir>
0x001023        93183900                 rMAC = rMAC ASHIFT r6 (56bit), r1 = M[I2,1];
0x001024        8D210018                 r0 = rMAC LSHIFT 24;
0x001025        8C41000F                 r2 = rMAC LSHIFT Null;
0x001026        C7233922                 rMAC = r0 * r1 (US), r1 = M[I2,1], r0 = M[I4,2];
0x001027        B7233922                 rMAC = rMAC - r0 * r1 (US), r1 = M[I2,1], r0 = M[I4,2];
0x001028        B7233922                 rMAC = rMAC - r0 * r1 (US), r1 = M[I2,1], r0 = M[I4,2];
0x001029        B7233922                 rMAC = rMAC - r0 * r1 (US), r1 = M[I2,1], r0 = M[I4,2];
0x00102A        B7233922                 rMAC = rMAC - r0 * r1 (US), r1 = M[I2,1], r0 = M[I4,2];
0x00102B        B7233922                 rMAC = rMAC - r0 * r1 (US), r1 = M[I2,1], r0 = M[I4,2];
0x00102C        B7233922                 rMAC = rMAC - r0 * r1 (US), r1 = M[I2,1], r0 = M[I4,2];
0x00102D        51A0FFF2                 M2 = Null + -14;
0x00102E        B7233821                 rMAC = rMAC - r0 * r1 (US), r1 = M[I2,0], r0 = M[I4,1];
0x00102F        B6230022                 rMAC = rMAC - r0 * r1 (US), r0 = M[I4,M2];
0x001030        79220008                 I2 = I2 - 8;
0x001031        91110068                 rMAC = rMAC ASHIFT -24 (56bit);
0x001032        BF233900                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I2,1];
0x001033        AF433922                 rMAC = rMAC + r2 * r1 (SS), r1 = M[I2,1], r0 = M[I4,2];
0x001034        BF233922                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I2,1], r0 = M[I4,2];
0x001035        BF233922                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I2,1], r0 = M[I4,2];
0x001036        BF233922                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I2,1], r0 = M[I4,2];
0x001037        BF233922                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I2,1], r0 = M[I4,2];
0x001038        BF233922                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I2,1], r0 = M[I4,2];
0x001039        BF233A22                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I2,2], r0 = M[I4,2];
0x00103A        BF233921                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I2,1], r0 = M[I4,1];
0x00103B        93133920                 rMAC = rMAC ASHIFT r1 (56bit), r1 = M[I2,1], r0 = M[I4,0];
0x00103C        8C41000F                 r2 = rMAC LSHIFT Null;
0x00103D        8D610018                 r4 = rMAC LSHIFT 24;
0x00103E        C76339E2                 rMAC = r4 * r1 (US), r1 = M[I2,1], M[I4,2] = r4;
0x00103F        B7233922                 rMAC = rMAC - r0 * r1 (US), r1 = M[I2,1], r0 = M[I4,2];
0x001040        B7233922                 rMAC = rMAC - r0 * r1 (US), r1 = M[I2,1], r0 = M[I4,2];
0x001041        B7233922                 rMAC = rMAC - r0 * r1 (US), r1 = M[I2,1], r0 = M[I4,2];
0x001042        B7233922                 rMAC = rMAC - r0 * r1 (US), r1 = M[I2,1], r0 = M[I4,2];
0x001043        B7233922                 rMAC = rMAC - r0 * r1 (US), r1 = M[I2,1], r0 = M[I4,2];
0x001044        51A0FFF4                 M2 = Null + -12;
0x001045        B7233821                 rMAC = rMAC - r0 * r1 (US), r1 = M[I2,0], r0 = M[I4,1];
0x001046        B6230022                 rMAC = rMAC - r0 * r1 (US), r0 = M[I4,M2];
0x001047        79220007                 I2 = I2 - 7;
0x001048        91110068                 rMAC = rMAC ASHIFT -24 (56bit);
0x001049        BF233920                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I2,1], r0 = M[I4,0];
0x00104A        AF4339C2                 rMAC = rMAC + r2 * r1 (SS), r1 = M[I2,1], M[I4,2] = r2;
0x00104B        BF233922                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I2,1], r0 = M[I4,2];
0x00104C        BF233922                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I2,1], r0 = M[I4,2];
0x00104D        BF233922                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I2,1], r0 = M[I4,2];
0x00104E        BF233922                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I2,1], r0 = M[I4,2];
0x00104F        BF233A22                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I2,2], r0 = M[I4,2];
0x001050        BF233921                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I2,1], r0 = M[I4,1];
0x001051        93130000                 rMAC = rMAC ASHIFT r1 (56bit);
0x001052        8D210018                 r0 = rMAC LSHIFT 24;
0x001053        8C31000F                 r1 = rMAC LSHIFT Null;
0x001054        020000A0                 Null = Null + Null, M[I4,M0] = r0;
0x001055        DC0D000F                 rts;

 <$M.mips_profile.mainstart>
0x001056        0920FE6C                 r0 = Null + M[0xfffe6c];
0x001057        D52A0001                 M[r8 + 1] = r0;
0x001058        D50A0005                 M[r8 + 5] = Null;
0x001059        D12A0000                 r0 = M[r8 + 0];
0x00105A        DD000002                 if EQ jump $M.mips_profile.init;
0x00105B        DC0D000F                 rts;

 <$M.mips_profile.init>
0x00105C        0920FE71                 r0 = Null + M[0xfffe71];
0x00105D        D52A0009                 M[r8 + 9] = r0;
0x00105E        E420002F                 r0 = Null + 1;
0x00105F        D52A0000                 M[r8 + 0] = r0;
0x001060        D50A0002                 M[r8 + 2] = Null;
0x001061        D50A0004                 M[r8 + 4] = Null;
0x001062        DC0D000F                 rts;

 <$M.mips_profile.mainend>
0x001063        D12A0000                 r0 = M[r8 + 0];
0x001064        DC0D0000                 if EQ rts;
0x001065        0920FE6C                 r0 = Null + M[0xfffe6c];
0x001066        D13A0001                 r1 = M[r8 + 1];
0x001067        23230000                 r0 = r0 - r1;
0x001068        D13A0005                 r1 = M[r8 + 5];
0x001069        23230000                 r0 = r0 - r1;
0x00106A        D13A0002                 r1 = M[r8 + 2];
0x00106B        03230000                 r0 = r0 + r1;
0x00106C        D52A0002                 M[r8 + 2] = r0;
0x00106D        0920FE71                 r0 = Null + M[0xfffe71];
0x00106E        D13A0009                 r1 = M[r8 + 9];
0x00106F        23230000                 r0 = r0 - r1;
0x001070        0930649A                 r1 = Null + M[$M.mips_profile.evalinterval_us];
0x001071        2002003F                 Null = r0 - r1;
0x001072        DC0D0004                 if NEG rts;
0x001073        D12A0002                 r0 = M[r8 + 2];
0x001074        D52A0006                 M[r8 + 6] = r0;
0x001075        D13A0004                 r1 = M[r8 + 4];
0x001076        D53A0007                 M[r8 + 7] = r1;
0x001077        03230000                 r0 = r0 + r1;
0x001078        D52A0008                 M[r8 + 8] = r0;
0x001079        D50A0000                 M[r8 + 0] = Null;
0x00107A        DC0D000F                 rts;

 <$M.mips_profile.intstart>
0x00107B        0920FE6C                 r0 = Null + M[0xfffe6c];
0x00107C        D52A0003                 M[r8 + 3] = r0;
0x00107D        DC0D000F                 rts;

 <$M.mips_profile.intend>
0x00107E        0920FE6C                 r0 = Null + M[0xfffe6c];
0x00107F        D13A0003                 r1 = M[r8 + 3];
0x001080        23230000                 r0 = r0 - r1;
0x001081        D13A0004                 r1 = M[r8 + 4];
0x001082        0032003F                 r1 = r0 + r1;
0x001083        D53A0004                 M[r8 + 4] = r1;
0x001084        D13A0005                 r1 = M[r8 + 5];
0x001085        0032003F                 r1 = r0 + r1;
0x001086        D53A0005                 M[r8 + 5] = r1;
0x001087        DC0D000F                 rts;

 <$wall_clock.message_handler>
0x001088        F3D00000                 push rLink;
0x001089        E455002F                 r3 = r3 + 1;
0x00108A        01C00007                 r10 = Null + 7;
0x00108B        098064DD                 r6 = Null + M[$wall_clock.last_addr];
0x00108C        E5F00014                 do $M.wall_clock.message_handler.loop;
0x00108D        E408002F                 Null = r6 + 1;
0x00108E        DD000013                 if EQ jump $M.wall_clock.message_handler.no_handler;
0x00108F        D1280001                 r0 = M[r6 + 1];
0x001090        D135FFFF                 r1 = M[r3 + -1];
0x001091        813300FF                 r1 = r1 AND 0xff;
0x001092        2002003F                 Null = r0 - r1;
0x001093        DD10000C                 if NE jump $M.wall_clock.message_handler.no_match;
0x001094        D1280002                 r0 = M[r6 + 2];
0x001095        2802005F                 Null = r0 - M[r3];
0x001096        DD100009                 if NE jump $M.wall_clock.message_handler.no_match;
0x001097        D1280003                 r0 = M[r6 + 3];
0x001098        D1350001                 r1 = M[r3 + 1];
0x001099        2002003F                 Null = r0 - r1;
0x00109A        DD100005                 if NE jump $M.wall_clock.message_handler.no_match;
0x00109B        D1280004                 r0 = M[r6 + 4];
0x00109C        D1350002                 r1 = M[r3 + 2];
0x00109D        2002003F                 Null = r0 - r1;
0x00109E        DD000004                 if EQ jump $M.wall_clock.message_handler.found;

 <$M.wall_clock.message_handler.no_match>
0x00109F        D1880000                 r6 = M[r6 + 0];

 <$M.wall_clock.message_handler.loop>
0x0010A0        E1F02CEB                 call $error;

 <$M.wall_clock.message_handler.no_handler>
0x0010A1        DDF00628                 jump $pop_rLink_and_rts;

 <$M.wall_clock.message_handler.found>
0x0010A2        D1350003                 r1 = M[r3 + 3];
0x0010A3        D1450004                 r2 = M[r3 + 4];
0x0010A4        8DE30078                 rMAC = r1 LSHIFT -8 (MI);
0x0010A5        811100FF                 rMAC = rMAC AND 0xff;
0x0010A6        991104E2                 rMAC = rMAC * 1250 (int);
0x0010A7        8D330010                 r1 = r1 LSHIFT 16;
0x0010A8        8144FFFF                 r2 = r2 AND 0xffff;
0x0010A9        03430000                 r2 = r2 + r1;
0x0010AA        FD000000 A1140271        rMAC = rMAC + r2 * 3.7252902984619141e-005 (UU);
0x0010AC        8D410016                 r2 = rMAC LSHIFT 22;
0x0010AD        D1650006                 r4 = M[r3 + 6];
0x0010AE        D1550005                 r3 = M[r3 + 5];
0x0010AF        8D550010                 r3 = r3 LSHIFT 16;
0x0010B0        8166FFFF                 r4 = r4 AND 0xffff;
0x0010B1        03650000                 r4 = r4 + r3;
0x0010B2        23460000                 r2 = r2 - r4;
0x0010B3        D5480005                 M[r6 + 5] = r2;
0x0010B4        D1280006                 r0 = M[r6 + 6];
0x0010B5        E0020001                 if NE call r0;
0x0010B6        DDF00613                 jump $pop_rLink_and_rts;

 <$media_packet_boundary_detection>
0x0010B7        F3D00000                 push rLink;
0x0010B8        01206441                 r0 = Null + 25665;
0x0010B9        E1F005AE                 call $cbuffer.calc_amount_data;
0x0010BA        21020030                 Null = r0 - 48;
0x0010BB        DD000025                 if EQ jump $M.media_packet_boundary_detection.done_with_latency_reporting;
0x0010BC        FD0000FF 01204BFD        r0 = Null + -46083;
0x0010BE        E1F00599                 call $cbuffer.calc_amount_space;
0x0010BF        0002000F                 Null = r0 + Null;
0x0010C0        DD000020                 if EQ jump $M.media_packet_boundary_detection.done_with_latency_reporting;
0x0010C1        FD0000FF 01204BFD        r0 = Null + -46083;
0x0010C3        E1F005C8                 call $cbuffer.get_write_address_and_size;
0x0010C4        096064BE                 r4 = Null + M[$codec_packets_info_last_write_address];
0x0010C5        23260000                 r0 = r0 - r4;
0x0010C6        00220034                 if NEG r0 = r0 + r1;
0x0010C7        21020004                 Null = r0 - 4;
0x0010C8        DD400018                 if NEG jump $M.media_packet_boundary_detection.done_with_latency_reporting;
0x0010C9        0940FE71                 r2 = Null + M[0xfffe71];
0x0010CA        295494BE                 r3 = r2 - M[$codec_packets_info_last_timer_time];
0x0010CB        20500054                 if NEG r3 = Null - r3;
0x0010CC        194094BE                 M[$codec_packets_info_last_timer_time] = r2 + Null;
0x0010CD        290564BF                 Null = r3 - M[$codec_packets_info_timer_gap];
0x0010CE        DD900012                 if LS jump $M.media_packet_boundary_detection.done_with_latency_reporting;
0x0010CF        FD0000FF 01204BFD        r0 = Null + -46083;
0x0010D1        E1F005BA                 call $cbuffer.get_write_address_and_size;
0x0010D2        5000006F                 I0 = Null + r4;
0x0010D3        50C0003F                 L0 = Null + r1;
0x0010D4        03006100                 Null = Null + Null, r4 = M[I0,1];
0x0010D5        4460000F                 r4 = Null + I0;
0x0010D6        01206441                 r0 = Null + 25665;
0x0010D7        E1F005B4                 call $cbuffer.get_write_address_and_size;
0x0010D8        5000002F                 I0 = Null + r0;
0x0010D9        50C0003F                 L0 = Null + r1;
0x0010DA        0300E100                 Null = Null + Null, M[I0,1] = r4;
0x0010DB        0300C100                 Null = Null + Null, M[I0,1] = r2;
0x0010DC        51C00000                 L0 = Null + 0;
0x0010DD        01206441                 r0 = Null + 25665;
0x0010DE        4430000F                 r1 = Null + I0;
0x0010DF        E1F005C5                 call $cbuffer.set_write_address;

 <$M.media_packet_boundary_detection.done_with_latency_reporting>
0x0010E0        DDF005E9                 jump $pop_rLink_and_rts;

 <$iir_1stStage_upsample>
0x0010E1        59330002                 I3 = I3 + 2;
0x0010E2        22996C00                 r7 = r7 - r7, r4 = M[I3,M0];
0x0010E3        50903C6F                 M1 = Null + r4, r1 = M[I3,M0];
0x0010E4        00A33C4F                 r8 = r1 + r2, r1 = M[I3,M0];
0x0010E5        50607C3F                 I6 = Null + r1, r5 = M[I3,M0];
0x0010E6        70A0006F                 M2 = Null - r4;
0x0010E7        99460006                 r2 = r4 * 6 (int);
0x0010E8        74B4288F                 M3 = r2 - M0, r0 = M[I2,M0];
0x0010E9        5EB65800                 M3 = M3 + I6, r3 = M[I2,M0];
0x0010EA        5FB62B00                 M3 = M3 + I6, r0 = M[I2,-1];
0x0010EB        5000002F                 I0 = Null + r0;
0x0010EC        51C00006                 L0 = Null + 6;
0x0010ED        F3E20000                 push FP;
0x0010EE        F3A60000                 pop B0;
0x0010EF        F1070006                 FP = FP + 6;
0x0010F0        FD00007F 01F0FFFF        rMACB = Null + 8388607;
0x0010F2        E4B0002F                 r9 = Null + 1;
0x0010F3        9845007F                 r2 = r3 * r5 (int);
0x0010F4        004400F4                 if NEG r2 = r2 + rMACB;
0x0010F5        9434006F                 r1 = r2 * r4 (frac);
0x0010F6        E5F00016                 do $M.iir_1stStage_upsample.loop;
0x0010F7        02001400                 Null = Null + Null, rMAC = M[I1,M0];
0x0010F8        02009000                 Null = Null + Null, M[I0,M0] = rMAC;

 <$M.iir_1stStage_upsample.loop_rpt>
0x0010F9        5876003F                 I7 = I6 + r1;
0x0010FA        025B403D                 r3 = r3 + r9, r2 = M[I0,M0], r1 = M[I7,M1];
0x0010FB        CE34403D                 rMAC = r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M1];
0x0010FC        AE34403D                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M1];
0x0010FD        7C7B007F                 I7 = M3 - I7;
0x0010FE        AE34403E                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M2];
0x0010FF        AE34403E                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M2];
0x001100        AE34403E                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M2];
0x001101        AC13004F                 rMAC = rMAC + r1 * r2 (SS);
0x001102        903100AF                 r1 = rMAC ASHIFT r8;
0x001103        029B00B4                 r7 = r7 + r9, M[I5,M0] = r1;
0x001104        2005006F                 Null = r3 - r4;
0x001105        2055005A                 if GE r3 = r3 - r3;
0x001106        9845007F                 r2 = r3 * r5 (int);
0x001107        004400F4                 if NEG r2 = r2 + rMACB;
0x001108        9434006F                 r1 = r2 * r4 (frac);
0x001109        2007004F                 Null = r5 - r2;
0x00110A        DDD0FFEF                 if LE jump $M.iir_1stStage_upsample.loop_rpt;
0x00110B        03000000                 Null = Null + Null;

 <$M.iir_1stStage_upsample.loop>
0x00110C        4420D80F                 r0 = Null + I0, M[I2,M0] = r3;
0x00110D        50C0A80F                 L0 = Null + Null, M[I2,M0] = r0;
0x00110E        5F280000                 I2 = I2 + M0;
0x00110F        DC0D000F                 rts;

 <$audio_out_copy_handler>
0x001110        F3D00000                 push rLink;
0x001111        190094E5                 M[$frame_sync.sync_flag] = Null + Null;
0x001112        E1F00B1D                 call $M.Subwoofer.validate_time_to_play;
0x001113        01A06274                 r8 = Null + 25204;
0x001114        E1F0129A                 call $calc_actual_port_rate;
0x001115        0920627C                 r0 = Null + M[0x627c];
0x001116        E1102611                 if NE call $apply_sra_resampling_adjustment;
0x001117        FD0000FF 01A07FF5        r8 = Null + -32779;
0x001119        090064C5                 Null = Null + M[$M.multi_chan_output.num_chain1_channels];
0x00111A        E1101294                 if NE call $calc_actual_port_rate;
0x00111B        01A09139                 r8 = Null + -28359;
0x00111C        019063D2                 r7 = Null + 25554;
0x00111D        090094CF                 Null = Null + M[$chain0_hw_warp_enable];
0x00111E        00A90001                 if NE r8 = r7 + Null;
0x00111F        19A09485                 M[$latency_calc_current_warp] = r8 + Null;
0x001120        E1F0FEC0                 call $tone_copy_extra;
0x001121        E1F024CE                 call $multi_chan_clone_tone_cbuffers;
0x001122        01A06110                 r8 = Null + 24848;
0x001123        090094C4                 Null = Null + M[$M.multi_chan_output.num_chain0_channels];
0x001124        E1100EA2                 if NE call $cbops.dac_av_copy_m;
0x001125        01A09229                 r8 = Null + -28119;
0x001126        090064C5                 Null = Null + M[$M.multi_chan_output.num_chain1_channels];
0x001127        E1100E9F                 if NE call $cbops.dac_av_copy_m;
0x001128        E1F022C0                 call $multi_chan_adjust_tone_cbuffers;
0x001129        E1F00B11                 call $M.Subwoofer.compute_time_to_play;
0x00112A        013000A4                 r1 = Null + 164;
0x00112B        09406488                 r2 = Null + M[$tmr_period_audio_copy];
0x00112C        01501110                 r3 = Null + 4368;
0x00112D        E1F0058C                 call $timer.schedule_event_in_period;
0x00112E        DDF0059B                 jump $pop_rLink_and_rts;

 <$cbuffer.get_write_address_and_size.its_a_port>
0x00112F        8132001F                 r1 = r0 AND 0x1f;
0x001130        2133000C                 r1 = r1 - 12;
0x001131        1940947F                 M[$cbuffer.tmp] = r2 + Null;
0x001132        FD000033 8102FC00        Null = r0 AND 0x33fc00;
0x001134        DD00001C                 if EQ jump $M.cbuffer.get_write_address_and_size.its_a_port.no_forcing;
0x001135        19509480                 M[0xff9480] = r3 + Null;
0x001136        01400066                 r2 = Null + 102;
0x001137        65030007                 Null = 7 - r1;
0x001138        00330044                 if NEG r1 = r1 + r2;
0x001139        D153FE73                 r3 = M[r1 + -397];
0x00113A        FD000030 81420000        r2 = r0 AND 0x300000;
0x00113C        DD000005                 if EQ jump $M.cbuffer.get_write_address_and_size.its_a_port.no_forcing_endian;
0x00113D        8155FFFB                 r3 = r3 AND 0xfffb;
0x00113E        8D44006B                 r2 = r2 LSHIFT -21;
0x00113F        8D440002                 r2 = r2 LSHIFT 2;
0x001140        87540000                 r3 = r3 OR r2;

 <$M.cbuffer.get_write_address_and_size.its_a_port.no_forcing_endian>
0x001141        FD000003 81428000        r2 = r0 AND 0x38000;
0x001143        DD000005                 if EQ jump $M.cbuffer.get_write_address_and_size.its_a_port.no_forcing_bitwidth;
0x001144        8155FFFC                 r3 = r3 AND 0xfffc;
0x001145        8D440070                 r2 = r2 LSHIFT -16;
0x001146        8D440000                 r2 = r2 LSHIFT 0;
0x001147        87540000                 r3 = r3 OR r2;

 <$M.cbuffer.get_write_address_and_size.its_a_port.no_forcing_bitwidth>
0x001148        81426000                 r2 = r0 AND 0x6000;
0x001149        DD000005                 if EQ jump $M.cbuffer.get_write_address_and_size.its_a_port.no_forcing_saturate;
0x00114A        8155FFF7                 r3 = r3 AND 0xfff7;
0x00114B        8D440072                 r2 = r2 LSHIFT -14;
0x00114C        8D440003                 r2 = r2 LSHIFT 3;
0x00114D        87540000                 r3 = r3 OR r2;

 <$M.cbuffer.get_write_address_and_size.its_a_port.no_forcing_saturate>
0x00114E        D553FE73                 M[r1 + -397] = r3;
0x00114F        09509480                 r3 = Null + M[0xff9480];

 <$M.cbuffer.get_write_address_and_size.its_a_port.no_forcing>
0x001150        8132001F                 r1 = r0 AND 0x1f;
0x001151        2133000C                 r1 = r1 - 12;
0x001152        01400009                 r2 = Null + 9;
0x001153        65030007                 Null = 7 - r1;
0x001154        00330044                 if NEG r1 = r1 + r2;
0x001155        0940947F                 r2 = Null + M[$cbuffer.tmp];
0x001156        0123FE23                 r0 = r1 + -477;
0x001157        E430002F                 r1 = Null + 1;
0x001158        DC0D000F                 rts;

 <$message.send_long>
0x001159        F3D00000                 push rLink;
0x00115A        E1F00525                 call $block_interrupts;
0x00115B        0140FFFE                 r2 = Null + -2;
0x00115C        01C60005                 r10 = r4 + 5;
0x00115D        8DCC007E                 r10 = r10 LSHIFT -2;
0x00115E        093064D9                 r1 = Null + M[$message.queue_write_ptr];
0x00115F        8580FFF1                 r6 = Null OR 0xfff1;
0x001160        E5F0001B                 do $M.message.send_long.long_message_loop;
0x001161        01230005                 r0 = r1 + 5;
0x001162        2102006E                 Null = r0 - 110;
0x001163        00200000                 if EQ r0 = Null + Null;
0x001164        290294D8                 Null = r0 - M[$message.queue_read_ptr];
0x001165        DD000018                 if EQ jump $M.message.send_long.all_done;
0x001166        E40C003F                 Null = r10 - 1;
0x001167        DD100002                 if NE jump $M.message.send_long.not_last_packet;
0x001168        85880002                 r6 = r6 OR 0x2;

 <$M.message.send_long.not_last_packet>
0x001169        D5838D70                 M[r1 + -29328] = r6;
0x00116A        81080001                 Null = r6 AND 0x1;
0x00116B        DD000006                 if EQ jump $M.message.send_long.not_first_message;
0x00116C        E488003F                 r6 = r6 - 1;
0x00116D        D5538D71                 M[r1 + -29327] = r3;
0x00116E        D5638D72                 M[r1 + -29326] = r4;
0x00116F        21770002                 r5 = r5 - 2;
0x001170        DDF00005                 jump $M.message.send_long.last_two_words;

 <$M.message.send_long.not_first_message>
0x001171        D047000F                 r2 = M[r5 + Null];
0x001172        D5438D71                 M[r1 + -29327] = r2;
0x001173        D1470001                 r2 = M[r5 + 1];
0x001174        D5438D72                 M[r1 + -29326] = r2;

 <$M.message.send_long.last_two_words>
0x001175        D1470002                 r2 = M[r5 + 2];
0x001176        D5438D73                 M[r1 + -29325] = r2;
0x001177        D1470003                 r2 = M[r5 + 3];
0x001178        D5438D74                 M[r1 + -29324] = r2;
0x001179        01770004                 r5 = r5 + 4;
0x00117A        0032000F                 r1 = r0 + Null;

 <$M.message.send_long.long_message_loop>
0x00117B        192064D9                 M[$message.queue_write_ptr] = r0 + Null;
0x00117C        E1F00054                 call $message.private.try_to_send_message;

 <$M.message.send_long.all_done>
0x00117D        E1F004F2                 call $interrupt.unblock;
0x00117E        DDF0054B                 jump $pop_rLink_and_rts;

 <$cbuffer.get_read_address_and_size.its_a_port>
0x00117F        8132001F                 r1 = r0 AND 0x1f;
0x001180        FD00003F 81029C00        Null = r0 AND 0x3f9c00;
0x001182        DD00001F                 if EQ jump $M.cbuffer.get_read_address_and_size.its_a_port.no_forcing;
0x001183        1940947F                 M[$cbuffer.tmp] = r2 + Null;
0x001184        19509480                 M[0xff9480] = r3 + Null;
0x001185        01400062                 r2 = Null + 98;
0x001186        65030007                 Null = 7 - r1;
0x001187        00330044                 if NEG r1 = r1 + r2;
0x001188        D153FE7B                 r3 = M[r1 + -389];
0x001189        FD000030 81420000        r2 = r0 AND 0x300000;
0x00118B        DD000005                 if EQ jump $M.cbuffer.get_read_address_and_size.its_a_port.no_forcing_endian;
0x00118C        8155FFFB                 r3 = r3 AND 0xfffb;
0x00118D        8D44006B                 r2 = r2 LSHIFT -21;
0x00118E        8D440002                 r2 = r2 LSHIFT 2;
0x00118F        87540000                 r3 = r3 OR r2;

 <$M.cbuffer.get_read_address_and_size.its_a_port.no_forcing_endian>
0x001190        FD00000C 81420000        r2 = r0 AND 0xc0000;
0x001192        DD000005                 if EQ jump $M.cbuffer.get_read_address_and_size.its_a_port.no_forcing_sign_extend;
0x001193        8155FFF7                 r3 = r3 AND 0xfff7;
0x001194        8D44006D                 r2 = r2 LSHIFT -19;
0x001195        8D440003                 r2 = r2 LSHIFT 3;
0x001196        87540000                 r3 = r3 OR r2;

 <$M.cbuffer.get_read_address_and_size.its_a_port.no_forcing_sign_extend>
0x001197        FD000003 81428000        r2 = r0 AND 0x38000;
0x001199        DD000005                 if EQ jump $M.cbuffer.get_read_address_and_size.its_a_port.no_forcing_bitwidth;
0x00119A        8155FFFC                 r3 = r3 AND 0xfffc;
0x00119B        8D440070                 r2 = r2 LSHIFT -16;
0x00119C        8D440000                 r2 = r2 LSHIFT 0;
0x00119D        87540000                 r3 = r3 OR r2;

 <$M.cbuffer.get_read_address_and_size.its_a_port.no_forcing_bitwidth>
0x00119E        D553FE7B                 M[r1 + -389] = r3;
0x00119F        0940947F                 r2 = Null + M[$cbuffer.tmp];
0x0011A0        09509480                 r3 = Null + M[0xff9480];

 <$M.cbuffer.get_read_address_and_size.its_a_port.no_forcing>
0x0011A1        8122001F                 r0 = r0 AND 0x1f;
0x0011A2        01300005                 r1 = Null + 5;
0x0011A3        65020007                 Null = 7 - r0;
0x0011A4        00220034                 if NEG r0 = r0 + r1;
0x0011A5        0122FE2B                 r0 = r0 + -469;
0x0011A6        E430002F                 r1 = Null + 1;
0x0011A7        DC0D000F                 rts;

 <$cbops.fir_resample.amount_to_use>
0x0011A8        190064E4                 M[$M.cbops.fir_resample.amount_used] = Null + Null;
0x0011A9        FD000000 0150BB80        r3 = Null + 48000;
0x0011AB        01601F40                 r4 = Null + 8000;
0x0011AC        D13A0003                 r1 = M[r8 + 3];
0x0011AD        D0330001                 if NE r1 = M[r1 + Null];
0x0011AE        00360000                 if EQ r1 = r4 + Null;
0x0011AF        D14A0004                 r2 = M[r8 + 4];
0x0011B0        D0440001                 if NE r2 = M[r2 + Null];
0x0011B1        00450000                 if EQ r2 = r3 + Null;
0x0011B2        D12A0007                 r0 = M[r8 + 7];
0x0011B3        2002003F                 Null = r0 - r1;
0x0011B4        DD100004                 if NE jump $M.cbops.fir_resample.amount_to_use.do_set_up;
0x0011B5        D12A0006                 r0 = M[r8 + 6];
0x0011B6        2002004F                 Null = r0 - r2;
0x0011B7        DD000010                 if EQ jump $M.cbops.fir_resample.amount_to_use.set_up_done;

 <$M.cbops.fir_resample.amount_to_use.do_set_up>
0x0011B8        D53A0007                 M[r8 + 7] = r1;
0x0011B9        D54A0006                 M[r8 + 6] = r2;
0x0011BA        01100000                 rMAC = Null + 0;
0x0011BB        8DE30280                 rMAC0 = r1 LSHIFT 0;
0x0011BC        D9040000                 Div = rMAC / r2;
0x0011BD        D9200001                 r0 = DivResult;
0x0011BE        D52A0008                 M[r8 + 8] = r0;
0x0011BF        9B240000                 r0 = r0 * r2 (int);
0x0011C0        8DE40280                 rMAC0 = r2 LSHIFT 0;
0x0011C1        23320000                 r1 = r1 - r0;
0x0011C2        8DE30200                 rMAC12 = r1 LSHIFT 0;
0x0011C3        91440001                 r2 = r2 ASHIFT 1;
0x0011C4        D9040000                 Div = rMAC / r2;
0x0011C5        D9200001                 r0 = DivResult;
0x0011C6        D52A0009                 M[r8 + 9] = r0;

 <$M.cbops.fir_resample.amount_to_use.set_up_done>
0x0011C7        D16A0009                 r4 = M[r8 + 9];
0x0011C8        D15A0008                 r3 = M[r8 + 8];
0x0011C9        9B590000                 r3 = r3 * r7 (int);
0x0011CA        9439006F                 r1 = r7 * r4 (frac);
0x0011CB        03350000                 r1 = r1 + r3;
0x0011CC        21330002                 r1 = r1 - 2;
0x0011CD        00300004                 if NEG r1 = Null + Null;
0x0011CE        E473005F                 r5 = MIN r1;
0x0011CF        DC0D000F                 rts;

 <$message.private.try_to_send_message>
0x0011D0        F3D00000                 push rLink;
0x0011D1        E1F004AE                 call $block_interrupts;
0x0011D2        0920E000                 r0 = Null + M[0xffe000];
0x0011D3        292294D9                 r0 = r0 - M[$message.last_seq_sent];
0x0011D4        8102FFFF                 Null = r0 AND 0xffff;
0x0011D5        DD100015                 if NE jump $M.message.private.try_to_send_message.queue_not_empty;
0x0011D6        093094D8                 r1 = Null + M[$message.queue_read_ptr];
0x0011D7        D1238D71                 r0 = M[r1 + -29327];
0x0011D8        1920E002                 M[0xffe002] = r0 + Null;
0x0011D9        D1238D72                 r0 = M[r1 + -29326];
0x0011DA        1920E003                 M[0xffe003] = r0 + Null;
0x0011DB        D1238D73                 r0 = M[r1 + -29325];
0x0011DC        1920E004                 M[0xffe004] = r0 + Null;
0x0011DD        D1238D74                 r0 = M[r1 + -29324];
0x0011DE        1920E005                 M[0xffe005] = r0 + Null;
0x0011DF        092094D9                 r0 = Null + M[$message.last_seq_sent];
0x0011E0        E422002F                 r0 = r0 + 1;
0x0011E1        192094D9                 M[$message.last_seq_sent] = r0 + Null;
0x0011E2        D1238D70                 r0 = M[r1 + -29328];
0x0011E3        1920FE1B                 M[0xfffe1b] = r0 + Null;
0x0011E4        01330005                 r1 = r1 + 5;
0x0011E5        2103006E                 Null = r1 - 110;
0x0011E6        00300000                 if EQ r1 = Null + Null;
0x0011E7        193094D8                 M[$message.queue_read_ptr] = r1 + Null;
0x0011E8        290364D9                 Null = r1 - M[$message.queue_write_ptr];
0x0011E9        DD000007                 if EQ jump $M.message.private.try_to_send_message.all_done;

 <$M.message.private.try_to_send_message.queue_not_empty>
0x0011EA        09409409                 r2 = Null + M[0xff9409];
0x0011EB        E1F002AA                 call $timer.cancel_event;
0x0011EC        01309406                 r1 = Null + -27642;
0x0011ED        014003E8                 r2 = Null + 1000;
0x0011EE        015011D0                 r3 = Null + 4560;
0x0011EF        E1F004CD                 call $timer.schedule_event_in;

 <$M.message.private.try_to_send_message.all_done>
0x0011F0        E1F0047F                 call $interrupt.unblock;
0x0011F1        DDF004D8                 jump $pop_rLink_and_rts;

 <$iir_resamplerv2.iir_9_s2_diir>
0x0011F2        93183900                 rMAC = rMAC ASHIFT r6 (56bit), r1 = M[I2,1];
0x0011F3        8D210018                 r0 = rMAC LSHIFT 24;
0x0011F4        8C41000F                 r2 = rMAC LSHIFT Null;
0x0011F5        C7233922                 rMAC = r0 * r1 (US), r1 = M[I2,1], r0 = M[I4,2];
0x0011F6        B7233922                 rMAC = rMAC - r0 * r1 (US), r1 = M[I2,1], r0 = M[I4,2];
0x0011F7        B7233922                 rMAC = rMAC - r0 * r1 (US), r1 = M[I2,1], r0 = M[I4,2];
0x0011F8        B7233922                 rMAC = rMAC - r0 * r1 (US), r1 = M[I2,1], r0 = M[I4,2];
0x0011F9        51A0FFF8                 M2 = Null + -8;
0x0011FA        B7233821                 rMAC = rMAC - r0 * r1 (US), r1 = M[I2,0], r0 = M[I4,1];
0x0011FB        B6230022                 rMAC = rMAC - r0 * r1 (US), r0 = M[I4,M2];
0x0011FC        79220005                 I2 = I2 - 5;
0x0011FD        91110068                 rMAC = rMAC ASHIFT -24 (56bit);
0x0011FE        BF233900                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I2,1];
0x0011FF        AF433922                 rMAC = rMAC + r2 * r1 (SS), r1 = M[I2,1], r0 = M[I4,2];
0x001200        BF233922                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I2,1], r0 = M[I4,2];
0x001201        BF233922                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I2,1], r0 = M[I4,2];
0x001202        BF233A22                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I2,2], r0 = M[I4,2];
0x001203        BF233921                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I2,1], r0 = M[I4,1];
0x001204        93133920                 rMAC = rMAC ASHIFT r1 (56bit), r1 = M[I2,1], r0 = M[I4,0];
0x001205        8C41000F                 r2 = rMAC LSHIFT Null;
0x001206        8D610018                 r4 = rMAC LSHIFT 24;
0x001207        C76339E2                 rMAC = r4 * r1 (US), r1 = M[I2,1], M[I4,2] = r4;
0x001208        B7233922                 rMAC = rMAC - r0 * r1 (US), r1 = M[I2,1], r0 = M[I4,2];
0x001209        B7233922                 rMAC = rMAC - r0 * r1 (US), r1 = M[I2,1], r0 = M[I4,2];
0x00120A        51A0FFFA                 M2 = Null + -6;
0x00120B        B7233821                 rMAC = rMAC - r0 * r1 (US), r1 = M[I2,0], r0 = M[I4,1];
0x00120C        B6230022                 rMAC = rMAC - r0 * r1 (US), r0 = M[I4,M2];
0x00120D        79220004                 I2 = I2 - 4;
0x00120E        91110068                 rMAC = rMAC ASHIFT -24 (56bit);
0x00120F        BF233920                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I2,1], r0 = M[I4,0];
0x001210        AF4339C2                 rMAC = rMAC + r2 * r1 (SS), r1 = M[I2,1], M[I4,2] = r2;
0x001211        BF233922                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I2,1], r0 = M[I4,2];
0x001212        BF233A22                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I2,2], r0 = M[I4,2];
0x001213        BF233921                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I2,1], r0 = M[I4,1];
0x001214        93130000                 rMAC = rMAC ASHIFT r1 (56bit);
0x001215        8D210018                 r0 = rMAC LSHIFT 24;
0x001216        8C31000F                 r1 = rMAC LSHIFT Null;
0x001217        020000A0                 Null = Null + Null, M[I4,M0] = r0;
0x001218        DC0D000F                 rts;

 <$detect_end_of_aux_stream>
0x001219        F3D00000                 push rLink;
0x00121A        09509482                 r3 = Null + M[$aux_input_stream_available];
0x00121B        DD0004AE                 if EQ jump $pop_rLink_and_rts;
0x00121C        01206450                 r0 = Null + 25680;
0x00121D        E1F0044A                 call $cbuffer.calc_amount_data;
0x00121E        81050002                 Null = r3 AND 0x2;
0x00121F        DD100007                 if NE jump $M.detect_end_of_aux_stream.input_has_received;
0x001220        0002000F                 Null = r0 + Null;
0x001221        DD0004A8                 if EQ jump $pop_rLink_and_rts;
0x001222        85550002                 r3 = r3 OR 0x2;
0x001223        19509482                 M[$aux_input_stream_available] = r3 + Null;
0x001224        190064D3                 M[$no_tone_timer] = Null + Null;
0x001225        DDF004A4                 jump $pop_rLink_and_rts;

 <$M.detect_end_of_aux_stream.input_has_received>
0x001226        093064D3                 r1 = Null + M[$no_tone_timer];
0x001227        093394D2                 r1 = r1 + M[$tmr_period_tone_copy];
0x001228        0002000F                 Null = r0 + Null;
0x001229        00300001                 if NE r1 = Null + Null;
0x00122A        193064D3                 M[$no_tone_timer] = r1 + Null;
0x00122B        21037530                 Null = r1 - 30000;
0x00122C        DD40049D                 if NEG jump $pop_rLink_and_rts;
0x00122D        01401080                 r2 = Null + 4224;
0x00122E        01500000                 r3 = Null + 0;
0x00122F        01600000                 r4 = Null + 0;
0x001230        01700000                 r5 = Null + 0;
0x001231        01800000                 r6 = Null + 0;
0x001232        E1F0029C                 call $message.send_short;
0x001233        19009482                 M[$aux_input_stream_available] = Null + Null;
0x001234        190064D3                 M[$no_tone_timer] = Null + Null;
0x001235        DDF00494                 jump $pop_rLink_and_rts;

 <$timer.schedule_event_at>
0x001236        F3D00000                 push rLink;
0x001237        E1F00448                 call $block_interrupts;
0x001238        01C00032                 r10 = Null + 50;
0x001239        016094DC                 r4 = Null + -27428;
0x00123A        092094DC                 r0 = Null + M[$timer.last_addr];
0x00123B        E5F00008                 do $M.timer.schedule_event_at.loop;
0x00123C        E402002F                 Null = r0 + 1;
0x00123D        DD000007                 if EQ jump $M.timer.schedule_event_at.insert_here;
0x00123E        D1720001                 r5 = M[r0 + 1];
0x00123F        2004007F                 Null = r2 - r5;
0x001240        DD400004                 if NEG jump $M.timer.schedule_event_at.insert_here;
0x001241        0062000F                 r4 = r0 + Null;
0x001242        D1220000                 r0 = M[r0 + 0];

 <$M.timer.schedule_event_at.loop>
0x001243        E1F02B48                 call $error;

 <$M.timer.schedule_event_at.insert_here>
0x001244        D5360000                 M[r4 + 0] = r1;
0x001245        D5230000                 M[r1 + 0] = r0;
0x001246        D5430001                 M[r1 + 1] = r2;
0x001247        D5530002                 M[r1 + 2] = r3;
0x001248        095064DC                 r3 = Null + M[$timer.id];
0x001249        D5530003                 M[r1 + 3] = r3;
0x00124A        E425002F                 r0 = r3 + 1;
0x00124B        20200050                 if EQ r0 = Null - r3;
0x00124C        192064DC                 M[$timer.id] = r0 + Null;
0x00124D        0900FE1F                 Null = Null + M[0xfffe1f];
0x00124E        DD000003                 if EQ jump $M.timer.schedule_event_at.no_current_timer_set;
0x00124F        2904FE21                 Null = r2 - M[0xfffe21];
0x001250        DD500004                 if POS jump $M.timer.schedule_event_at.done;

 <$M.timer.schedule_event_at.no_current_timer_set>
0x001251        1940FE21                 M[0xfffe21] = r2 + Null;
0x001252        E420002F                 r0 = Null + 1;
0x001253        1920FE1F                 M[0xfffe1f] = r0 + Null;

 <$M.timer.schedule_event_at.done>
0x001254        E1F0041B                 call $interrupt.unblock;
0x001255        DDF00474                 jump $pop_rLink_and_rts;

 <$M.audio_proc.stereo_copy.Process.func>
0x001256        F3D00000                 push rLink;
0x001257        D1290000                 r0 = M[r7 + 0];
0x001258        E1F00443                 call $frmbuffer.get_buffer;
0x001259        5000002F                 I0 = Null + r0;
0x00125A        50C0003F                 L0 = Null + r1;
0x00125B        D1290001                 r0 = M[r7 + 1];
0x00125C        E1F0043F                 call $frmbuffer.get_buffer;
0x00125D        5040002F                 I4 = Null + r0;
0x00125E        50E0003F                 L4 = Null + r1;
0x00125F        00C5000F                 r10 = r3 + Null;
0x001260        D1290002                 r0 = M[r7 + 2];
0x001261        E1F00466                 call $frmbuffer.set_frame_size;
0x001262        E1F00439                 call $frmbuffer.get_buffer;
0x001263        5010002F                 I1 = Null + r0;
0x001264        50D0003F                 L1 = Null + r1;
0x001265        005C000F                 r3 = r10 + Null;
0x001266        D1290003                 r0 = M[r7 + 3];
0x001267        E1F00460                 call $frmbuffer.set_frame_size;
0x001268        E1F00433                 call $frmbuffer.get_buffer;
0x001269        5050002F                 I5 = Null + r0;
0x00126A        50F0003F                 L5 = Null + r1;
0x00126B        F3D40000                 pop rLink;
0x00126C        E5F00003                 do $M.audio_proc.stereo_copy.Process.loop_copy_data;
0x00126D        03002141                 Null = Null + Null, r0 = M[I0,1], r2 = M[I4,1];
0x00126E        0300A5C5                 Null = Null + Null, M[I1,1] = r0, M[I5,1] = r2;

 <$M.audio_proc.stereo_copy.Process.loop_copy_data>
0x00126F        50C0000F                 L0 = Null + Null;
0x001270        50D0000F                 L1 = Null + Null;
0x001271        50E0000F                 L4 = Null + Null;
0x001272        50F0000F                 L5 = Null + Null;
0x001273        DC0D000F                 rts;

 <$cbuffer.calc_amount_space.its_a_port>
0x001274        8132001F                 r1 = r0 AND 0x1f;
0x001275        2133000C                 r1 = r1 - 12;
0x001276        D1434FF2                 r2 = M[r1 + 20466];
0x001277        00200000                 if EQ r0 = Null + Null;
0x001278        DC0D0000                 if EQ rts;
0x001279        1950947F                 M[$cbuffer.tmp] = r3 + Null;
0x00127A        D054000F                 r3 = M[r2 + Null];
0x00127B        D14390A5                 r2 = M[r1 + -28507];
0x00127C        D3400000                 r2 = M[r2 + Null];
0x00127D        23540000                 r3 = r3 - r2;
0x00127E        D143908D                 r2 = M[r1 + -28531];
0x00127F        E434003F                 r1 = r2 - 1;
0x001280        8035003F                 r1 = r3 AND r1;
0x001281        00340000                 if EQ r1 = r2 + Null;
0x001282        E433003F                 r1 = r1 - 1;
0x001283        0950947F                 r3 = Null + M[$cbuffer.tmp];
0x001284        FD000003 81228000        r0 = r0 AND 0x38000;
0x001286        DD00000F                 if EQ jump $M.cbuffer.calc_amount_space.its_a_port.port_width_16bit;
0x001287        FD000001 21028000        Null = r0 - 98304;
0x001289        DD00000C                 if EQ jump $M.cbuffer.calc_amount_space.its_a_port.port_width_16bit;
0x00128A        DD400009                 if NEG jump $M.cbuffer.calc_amount_space.its_a_port.port_width_8bit;
0x00128B        FD000002 21028000        Null = r0 - 163840;
0x00128D        DD000003                 if EQ jump $M.cbuffer.calc_amount_space.its_a_port.port_width_24bit;

 <$M.cbuffer.calc_amount_space.its_a_port.port_width_32bit>
0x00128E        9123007E                 r0 = r1 ASHIFT -2;
0x00128F        DC0D000F                 rts;

 <$M.cbuffer.calc_amount_space.its_a_port.port_width_24bit>
0x001290        E423003F                 r0 = r1 - 1;
0x001291        95222AAB                 r0 = r0 * 0.333343505859375 (frac);
0x001292        DC0D000F                 rts;

 <$M.cbuffer.calc_amount_space.its_a_port.port_width_8bit>
0x001293        0023000F                 r0 = r1 + Null;
0x001294        DC0D000F                 rts;

 <$M.cbuffer.calc_amount_space.its_a_port.port_width_16bit>
0x001295        9123007F                 r0 = r1 ASHIFT -1;
0x001296        DC0D000F                 rts;

 <$cbuffer.calc_amount_data.its_a_port>
0x001297        8132001F                 r1 = r0 AND 0x1f;
0x001298        D1434FE6                 r2 = M[r1 + 20454];
0x001299        00200000                 if EQ r0 = Null + Null;
0x00129A        DC0D0000                 if EQ rts;
0x00129B        D3400000                 r2 = M[r2 + Null];
0x00129C        1950947F                 M[$cbuffer.tmp] = r3 + Null;
0x00129D        D1539099                 r3 = M[r1 + -28519];
0x00129E        D3500000                 r3 = M[r3 + Null];
0x00129F        2054005F                 r3 = r2 - r3;
0x0012A0        D1439081                 r2 = M[r1 + -28543];
0x0012A1        E434003F                 r1 = r2 - 1;
0x0012A2        8035003F                 r1 = r3 AND r1;
0x0012A3        0950947F                 r3 = Null + M[$cbuffer.tmp];

 <$M.cbuffer.calc_amount_data.its_a_port.convert>
0x0012A4        FD000003 81228000        r0 = r0 AND 0x38000;
0x0012A6        DD00000F                 if EQ jump $M.cbuffer.calc_amount_data.its_a_port.port_width_16bit;
0x0012A7        FD000001 21028000        Null = r0 - 98304;
0x0012A9        DD00000C                 if EQ jump $M.cbuffer.calc_amount_data.its_a_port.port_width_16bit;
0x0012AA        DD400009                 if NEG jump $M.cbuffer.calc_amount_data.its_a_port.port_width_8bit;
0x0012AB        FD000002 21028000        Null = r0 - 163840;
0x0012AD        DD000003                 if EQ jump $M.cbuffer.calc_amount_data.its_a_port.port_width_24bit;

 <$M.cbuffer.calc_amount_data.its_a_port.port_width_32bit>
0x0012AE        9123007E                 r0 = r1 ASHIFT -2;
0x0012AF        DC0D000F                 rts;

 <$M.cbuffer.calc_amount_data.its_a_port.port_width_24bit>
0x0012B0        E423003F                 r0 = r1 - 1;
0x0012B1        95222AAB                 r0 = r0 * 0.333343505859375 (frac);
0x0012B2        DC0D000F                 rts;

 <$M.cbuffer.calc_amount_data.its_a_port.port_width_8bit>
0x0012B3        0023000F                 r0 = r1 + Null;
0x0012B4        DC0D000F                 rts;

 <$M.cbuffer.calc_amount_data.its_a_port.port_width_16bit>
0x0012B5        9123007F                 r0 = r1 ASHIFT -1;
0x0012B6        DC0D000F                 rts;

 <$iir_resamplerv2.iir_19_s5>
0x0012B7        9041388F                 r2 = rMAC ASHIFT r6, r1 = M[I2,M0];
0x0012B8        CF433941                 rMAC = r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x0012B9        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x0012BA        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x0012BB        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x0012BC        BF433940                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,0];
0x0012BD        92E33800                 rMAC = rMAC ASHIFT r1, r1 = M[I2,M0];
0x0012BE        CF133991                 rMAC = rMAC * r1 (SS), r1 = M[I2,1], M[I4,1] = rMAC;
0x0012BF        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x0012C0        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x0012C1        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x0012C2        BF433940                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,0];
0x0012C3        92E33800                 rMAC = rMAC ASHIFT r1, r1 = M[I2,M0];
0x0012C4        CF133991                 rMAC = rMAC * r1 (SS), r1 = M[I2,1], M[I4,1] = rMAC;
0x0012C5        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x0012C6        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x0012C7        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x0012C8        BF433940                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,0];
0x0012C9        92E33800                 rMAC = rMAC ASHIFT r1, r1 = M[I2,M0];
0x0012CA        CF133991                 rMAC = rMAC * r1 (SS), r1 = M[I2,1], M[I4,1] = rMAC;
0x0012CB        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x0012CC        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x0012CD        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x0012CE        BF433940                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,0];
0x0012CF        92E33800                 rMAC = rMAC ASHIFT r1, r1 = M[I2,M0];
0x0012D0        CF133991                 rMAC = rMAC * r1 (SS), r1 = M[I2,1], M[I4,1] = rMAC;
0x0012D1        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x0012D2        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x0012D3        BF433900                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1];
0x0012D4        93E30000                 rMAC = rMAC ASHIFT r1;
0x0012D5        0031000F                 r1 = rMAC + Null;
0x0012D6        DC0D000F                 rts;

 <$M.audio_proc.stream_mixer.Process.func>
0x0012D7        5020009F                 I2 = Null + r7;
0x0012D8        51900001                 M1 = Null + 1;
0x0012D9        F3D00000                 push rLink;
0x0012DA        02002900                 Null = Null + Null, r0 = M[I2,M1];
0x0012DB        E1F003C0                 call $frmbuffer.get_buffer;
0x0012DC        5000002F                 I0 = Null + r0;
0x0012DD        50C0293F                 L0 = Null + r1, r0 = M[I2,M1];
0x0012DE        E1F003BD                 call $frmbuffer.get_buffer;
0x0012DF        5010002F                 I1 = Null + r0;
0x0012E0        50D0003F                 L1 = Null + r1;
0x0012E1        00C5290F                 r10 = r3 + Null, r0 = M[I2,M1];
0x0012E2        E1F003E5                 call $frmbuffer.set_frame_size;
0x0012E3        E1F003B8                 call $frmbuffer.get_buffer;
0x0012E4        5040292F                 I4 = Null + r0, r0 = M[I2,M1];
0x0012E5        50E0793F                 L4 = Null + r1, r5 = M[I2,M1];
0x0012E6        F3D40000                 pop rLink;
0x0012E7        D062490F                 r4 = M[r0 + Null], r2 = M[I2,M1];
0x0012E8        D2702100                 r5 = M[r5 + Null], r0 = M[I0,M1];
0x0012E9        D084350F                 r6 = M[r2 + Null], r1 = M[I1,M1];
0x0012EA        E5F00005                 do $M.audio_proc.stream_mixer.Process.lp_stream_copy;
0x0012EB        CC12216F                 rMAC = r0 * r4 (SS), r0 = M[I0,M1];
0x0012EC        AC13357F                 rMAC = rMAC + r1 * r5 (SS), r1 = M[I1,M1];
0x0012ED        9041008F                 r2 = rMAC ASHIFT r6;
0x0012EE        030000C1                 Null = Null + Null, M[I4,1] = r2;

 <$M.audio_proc.stream_mixer.Process.lp_stream_copy>
0x0012EF        51C00000                 L0 = Null + 0;
0x0012F0        51D00000                 L1 = Null + 0;
0x0012F1        51E00000                 L4 = Null + 0;
0x0012F2        DC0D000F                 rts;

 <$cbops.dc_remove.main>
0x0012F3        D12A0000                 r0 = M[r8 + 0];
0x0012F4        D038002F                 r1 = M[r6 + r0];
0x0012F5        5000003F                 I0 = Null + r1;
0x0012F6        D039002F                 r1 = M[r7 + r0];
0x0012F7        50C0003F                 L0 = Null + r1;
0x0012F8        D12A0001                 r0 = M[r8 + 1];
0x0012F9        D038002F                 r1 = M[r6 + r0];
0x0012FA        5040003F                 I4 = Null + r1;
0x0012FB        D039002F                 r1 = M[r7 + r0];
0x0012FC        50E0003F                 L4 = Null + r1;
0x0012FD        013009D5                 r1 = Null + 2517;
0x0012FE        FD000080 01500000        r3 = Null + -8388608;
0x001300        2045003F                 r2 = r3 - r1;
0x001301        D16A0002                 r4 = M[r8 + 2];
0x001302        D17A0003                 r5 = M[r8 + 3];
0x001303        C814007F                 rMAC = r2 * r5 (SU);
0x001304        E5F00008                 do $M.cbops.dc_remove.main.loop;
0x001305        91110068                 rMAC = rMAC ASHIFT -24 (56bit);
0x001306        AF462100                 rMAC = rMAC + r2 * r4 (SS), r0 = M[I0,1];
0x001307        BC12003F                 rMAC = rMAC - r0 * r1 (SS);
0x001308        8D610000                 r4 = rMAC LSHIFT 0;
0x001309        8D710018                 r5 = rMAC LSHIFT 24;
0x00130A        BC12005F                 rMAC = rMAC - r0 * r3 (SS);
0x00130B        CB470091                 rMAC = r2 * r5 (SU), M[I4,1] = rMAC;

 <$M.cbops.dc_remove.main.loop>
0x00130C        51C00000                 L0 = Null + 0;
0x00130D        51E00000                 L4 = Null + 0;
0x00130E        D56A0002                 M[r8 + 2] = r4;
0x00130F        D57A0003                 M[r8 + 3] = r5;
0x001310        DC0D000F                 rts;

 <$iir_resamplerv2.iir_19_s4>
0x001311        9041388F                 r2 = rMAC ASHIFT r6, r1 = M[I2,M0];
0x001312        CF433941                 rMAC = r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x001313        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x001314        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x001315        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x001316        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x001317        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x001318        BF433940                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,0];
0x001319        92E33800                 rMAC = rMAC ASHIFT r1, r1 = M[I2,M0];
0x00131A        CF133991                 rMAC = rMAC * r1 (SS), r1 = M[I2,1], M[I4,1] = rMAC;
0x00131B        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x00131C        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x00131D        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x00131E        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x00131F        BF433940                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,0];
0x001320        92E33800                 rMAC = rMAC ASHIFT r1, r1 = M[I2,M0];
0x001321        CF133991                 rMAC = rMAC * r1 (SS), r1 = M[I2,1], M[I4,1] = rMAC;
0x001322        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x001323        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x001324        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x001325        BF433940                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,0];
0x001326        92E33800                 rMAC = rMAC ASHIFT r1, r1 = M[I2,M0];
0x001327        CF133991                 rMAC = rMAC * r1 (SS), r1 = M[I2,1], M[I4,1] = rMAC;
0x001328        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x001329        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x00132A        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x00132B        BF433900                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1];
0x00132C        93E30000                 rMAC = rMAC ASHIFT r1;
0x00132D        0031000F                 r1 = rMAC + Null;
0x00132E        DC0D000F                 rts;

 <$cbops.iir_resamplev2.main>
0x00132F        F3D00000                 push rLink;
0x001330        51800001                 M0 = Null + 1;
0x001331        500000AF                 I0 = Null + r8;
0x001332        F2A02000                 push r8, r0 = M[I0,M0];
0x001333        D038002F                 r1 = M[r6 + r0];
0x001334        5010603F                 I1 = Null + r1, r4 = M[I0,M0];
0x001335        D039002F                 r1 = M[r7 + r0];
0x001336        50D0003F                 L1 = Null + r1;
0x001337        D038006F                 r1 = M[r6 + r4];
0x001338        5050003F                 I5 = Null + r1;
0x001339        D039006F                 r1 = M[r7 + r4];
0x00133A        50F0003F                 L5 = Null + r1;
0x00133B        093064E3                 r1 = Null + M[$M.cbops.iir_resamplev2.amount_used];
0x00133C        00C30001                 if NE r10 = r1 + Null;
0x00133D        19C064E3                 M[$M.cbops.iir_resamplev2.amount_used] = r10 + Null;
0x00133E        012A0002                 r0 = r8 + 2;
0x00133F        016A0011                 r4 = r8 + 17;
0x001340        01AA0009                 r8 = r8 + 9;
0x001341        E1F0FB65                 call $iir_perform_resample;
0x001342        F3A40000                 pop r8;
0x001343        199094DE                 M[$cbops.amount_written] = r7 + Null;
0x001344        093064E3                 r1 = Null + M[$M.cbops.iir_resamplev2.amount_used];
0x001345        D12AFFFE                 r0 = M[r8 + -2];
0x001346        E402002F                 Null = r0 + 1;
0x001347        00930000                 if EQ r7 = r1 + Null;
0x001348        199064DE                 M[$cbops.amount_to_use] = r7 + Null;
0x001349        DDF00380                 jump $pop_rLink_and_rts;

 <$cbops.deinterleave.main>
0x00134A        D12A0000                 r0 = M[r8 + 0];
0x00134B        D038002F                 r1 = M[r6 + r0];
0x00134C        5000003F                 I0 = Null + r1;
0x00134D        D039002F                 r1 = M[r7 + r0];
0x00134E        50C0003F                 L0 = Null + r1;
0x00134F        D12A0001                 r0 = M[r8 + 1];
0x001350        D038002F                 r1 = M[r6 + r0];
0x001351        5040003F                 I4 = Null + r1;
0x001352        D039002F                 r1 = M[r7 + r0];
0x001353        50E0003F                 L4 = Null + r1;
0x001354        D12A0002                 r0 = M[r8 + 2];
0x001355        D038002F                 r1 = M[r6 + r0];
0x001356        5050003F                 I5 = Null + r1;
0x001357        D039002F                 r1 = M[r7 + r0];
0x001358        50F0003F                 L5 = Null + r1;
0x001359        D14A0003                 r2 = M[r8 + 3];
0x00135A        8DCC007F                 r10 = r10 LSHIFT -1;
0x00135B        19C094DE                 M[$cbops.amount_written] = r10 + Null;
0x00135C        E4CC003F                 r10 = r10 - 1;
0x00135D        03002100                 Null = Null + Null, r0 = M[I0,1];
0x00135E        E5F00004                 do $M.cbops.deinterleave.main.interleave_loop;
0x00135F        93243100                 r0 = r0 ASHIFT r2, r1 = M[I0,1];
0x001360        933400A1                 r1 = r1 ASHIFT r2, M[I4,1] = r0;
0x001361        030021B5                 Null = Null + Null, r0 = M[I0,1], M[I5,1] = r1;

 <$M.cbops.deinterleave.main.interleave_loop>
0x001362        93243100                 r0 = r0 ASHIFT r2, r1 = M[I0,1];
0x001363        933400A1                 r1 = r1 ASHIFT r2, M[I4,1] = r0;
0x001364        7FEE00B5                 L4 = L4 - L4, M[I5,1] = r1;
0x001365        51F00000                 L5 = Null + 0;
0x001366        DC0D000F                 rts;

 <$set_tone_rate_from_vm>
0x001367        F3D00000                 push rLink;
0x001368        8133FFFF                 r1 = r1 AND 0xffff;
0x001369        011007D0                 rMAC = Null + 2000;
0x00136A        FD000000 CD111F40        rMAC = rMAC * 0.00095367431640625 (SS);
0x00136C        D9030000                 Div = rMAC / r1;
0x00136D        193094D1                 M[$current_tone_sampling_rate] = r1 + Null;
0x00136E        01200003                 r0 = Null + 3;
0x00136F        81040002                 Null = r2 AND 0x2;
0x001370        00200001                 if NE r0 = Null + Null;
0x001371        01220008                 r0 = r0 + 8;
0x001372        192063D7                 M[0x63d7] = r0 + Null;
0x001373        192063C8                 M[0x63c8] = r0 + Null;
0x001374        D9500001                 r3 = DivResult;
0x001375        81240001                 r0 = r2 AND 0x1;
0x001376        00550050                 if EQ r3 = r3 + r3;
0x001377        195094D2                 M[$tmr_period_tone_copy] = r3 + Null;
0x001378        192064D2                 M[$stereo_tone] = r0 + Null;
0x001379        E1F02261                 call $multi_chan_config_tone_mixing;
0x00137A        0920644F                 r0 = Null + M[0x644f];
0x00137B        1920644E                 M[0x644e] = r0 + Null;
0x00137C        0920944C                 r0 = Null + M[0xff944c];
0x00137D        1920944B                 M[0xff944b] = r0 + Null;
0x00137E        E420002F                 r0 = Null + 1;
0x00137F        19209482                 M[$aux_input_stream_available] = r0 + Null;
0x001380        DDF00349                 jump $pop_rLink_and_rts;

 <$pskey.result_message_handler>
0x001381        FD000000 21028008        Null = r0 - 32776;
0x001383        DD000003                 if EQ jump $M.pskey.result_message_handler.failure;
0x001384        D035000F                 r1 = M[r3 + Null];
0x001385        DDF00002                 jump $M.pskey.result_message_handler.ready;

 <$M.pskey.result_message_handler.failure>
0x001386        E440003F                 r2 = Null - 1;

 <$M.pskey.result_message_handler.ready>
0x001387        190064DB                 M[$pskey.request_in_progress] = Null + Null;
0x001388        017094DB                 r5 = Null + -27429;
0x001389        092094DB                 r0 = Null + M[$pskey.last_addr];

 <$M.pskey.result_message_handler.find_structure_loop>
0x00138A        D1620001                 r4 = M[r0 + 1];
0x00138B        2003006F                 Null = r1 - r4;
0x00138C        DD000006                 if EQ jump $M.pskey.result_message_handler.structure_found;
0x00138D        0072000F                 r5 = r0 + Null;
0x00138E        D1220000                 r0 = M[r0 + 0];
0x00138F        E402002F                 Null = r0 + 1;
0x001390        DD10FFFA                 if NE jump $M.pskey.result_message_handler.find_structure_loop;
0x001391        DC0D000F                 rts;

 <$M.pskey.result_message_handler.structure_found>
0x001392        F3D00000                 push rLink;
0x001393        D1620000                 r4 = M[r0 + 0];
0x001394        D5670000                 M[r5 + 0] = r4;
0x001395        D1220002                 r0 = M[r0 + 2];
0x001396        E002000F                 call r0;
0x001397        093094DB                 r1 = Null + M[$pskey.last_addr];
0x001398        E403002F                 Null = r1 + 1;
0x001399        E110001E                 if NE call $pskey.private.send_request;
0x00139A        DDF0032F                 jump $pop_rLink_and_rts;

 <$iir_resamplerv2.iir_19_s3>
0x00139B        9041388F                 r2 = rMAC ASHIFT r6, r1 = M[I2,M0];
0x00139C        CF433941                 rMAC = r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x00139D        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x00139E        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x00139F        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x0013A0        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x0013A1        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x0013A2        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x0013A3        BF433940                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,0];
0x0013A4        92E33800                 rMAC = rMAC ASHIFT r1, r1 = M[I2,M0];
0x0013A5        CF133991                 rMAC = rMAC * r1 (SS), r1 = M[I2,1], M[I4,1] = rMAC;
0x0013A6        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x0013A7        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x0013A8        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x0013A9        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x0013AA        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x0013AB        BF433940                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,0];
0x0013AC        92E33800                 rMAC = rMAC ASHIFT r1, r1 = M[I2,M0];
0x0013AD        CF133991                 rMAC = rMAC * r1 (SS), r1 = M[I2,1], M[I4,1] = rMAC;
0x0013AE        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x0013AF        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x0013B0        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x0013B1        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x0013B2        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x0013B3        BF433900                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1];
0x0013B4        93E30000                 rMAC = rMAC ASHIFT r1;
0x0013B5        0031000F                 r1 = rMAC + Null;
0x0013B6        DC0D000F                 rts;

 <$pskey.private.send_request>
0x0013B7        090064DB                 Null = Null + M[$pskey.request_in_progress];
0x0013B8        DC0D0001                 if NE rts;
0x0013B9        F3D00000                 push rLink;
0x0013BA        09409411                 r2 = Null + M[0xff9411];
0x0013BB        E1F000DA                 call $timer.cancel_event;
0x0013BC        E1F002D4                 call $message.send_queue_space;
0x0013BD        21020005                 Null = r0 - 5;
0x0013BE        DD400008                 if NEG jump $M.pskey.private.send_request.try_to_send_later;
0x0013BF        093094DB                 r1 = Null + M[$pskey.last_addr];
0x0013C0        85408006                 r2 = Null OR 0x8006;
0x0013C1        D1530001                 r3 = M[r1 + 1];
0x0013C2        E1F0010C                 call $message.send_short;
0x0013C3        E420002F                 r0 = Null + 1;
0x0013C4        192064DB                 M[$pskey.request_in_progress] = r0 + Null;
0x0013C5        DDF00304                 jump $pop_rLink_and_rts;

 <$M.pskey.private.send_request.try_to_send_later>
0x0013C6        0130940E                 r1 = Null + -27634;
0x0013C7        01402710                 r2 = Null + 10000;
0x0013C8        015013B7                 r3 = Null + 5047;
0x0013C9        E1F002F3                 call $timer.schedule_event_in;
0x0013CA        DDF002FF                 jump $pop_rLink_and_rts;

 <$iir_resamplerv2.iir_19_s2>
0x0013CB        9041388F                 r2 = rMAC ASHIFT r6, r1 = M[I2,M0];
0x0013CC        CF433941                 rMAC = r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x0013CD        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x0013CE        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x0013CF        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x0013D0        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x0013D1        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x0013D2        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x0013D3        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x0013D4        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x0013D5        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x0013D6        BF433940                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,0];
0x0013D7        92E33800                 rMAC = rMAC ASHIFT r1, r1 = M[I2,M0];
0x0013D8        CF133991                 rMAC = rMAC * r1 (SS), r1 = M[I2,1], M[I4,1] = rMAC;
0x0013D9        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x0013DA        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x0013DB        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x0013DC        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x0013DD        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x0013DE        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x0013DF        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x0013E0        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x0013E1        BF433900                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1];
0x0013E2        93E30000                 rMAC = rMAC ASHIFT r1;
0x0013E3        0031000F                 r1 = rMAC + Null;
0x0013E4        DC0D000F                 rts;

 <$cbops.one_to_two_chan_copy.main>
0x0013E5        F3D00000                 push rLink;
0x0013E6        D12A0000                 r0 = M[r8 + 0];
0x0013E7        D038002F                 r1 = M[r6 + r0];
0x0013E8        5000003F                 I0 = Null + r1;
0x0013E9        D039002F                 r1 = M[r7 + r0];
0x0013EA        50C0003F                 L0 = Null + r1;
0x0013EB        D12A0001                 r0 = M[r8 + 1];
0x0013EC        D038002F                 r1 = M[r6 + r0];
0x0013ED        5040003F                 I4 = Null + r1;
0x0013EE        D039002F                 r1 = M[r7 + r0];
0x0013EF        50E0003F                 L4 = Null + r1;
0x0013F0        D12A0002                 r0 = M[r8 + 2];
0x0013F1        D038002F                 r1 = M[r6 + r0];
0x0013F2        5010003F                 I1 = Null + r1;
0x0013F3        D039002F                 r1 = M[r7 + r0];
0x0013F4        50D0003F                 L1 = Null + r1;
0x0013F5        51900001                 M1 = Null + 1;
0x0013F6        E5F00003                 do $M_cbops.one_to_two_chan_copy.main.read_loop;
0x0013F7        02002100                 Null = Null + Null, r0 = M[I0,M1];
0x0013F8        0200A5A1                 Null = Null + Null, M[I1,M1] = r0, M[I4,M1] = r0;

 <$M_cbops.one_to_two_chan_copy.main.read_loop>
0x0013F9        51C00000                 L0 = Null + 0;
0x0013FA        51E00000                 L4 = Null + 0;
0x0013FB        51D00000                 L1 = Null + 0;
0x0013FC        DDF002CD                 jump $pop_rLink_and_rts;

 <$frame_sync.update_streams_ind>
0x0013FD        F3D00000                 push rLink;
0x0013FE        51900001                 M1 = Null + 1;
0x0013FF        E1F00280                 call $block_interrupts;

 <$M.frame_sync.update_streams_ind.jp_next_stream>
0x001400        D0B9000F                 r9 = M[r7 + Null];
0x001401        DD00000F                 if EQ jump $M.frame_sync.update_streams_ind.jp_stream_done;
0x001402        D14B0006                 r2 = M[r9 + 6];
0x001403        D12B0000                 r0 = M[r9 + 0];
0x001404        D1320000                 r1 = M[r0 + 0];
0x001405        D16B0003                 r4 = M[r9 + 3];
0x001406        50D0003F                 L1 = Null + r1;
0x001407        E004000F                 call r2;
0x001408        5080006F                 M0 = Null + r4;
0x001409        D042000F                 r2 = M[r0 + Null];
0x00140A        5010004F                 I1 = Null + r2;
0x00140B        02003400                 Null = Null + Null, r1 = M[I1,M0];
0x00140C        4440001F                 r2 = Null + I1;
0x00140D        1824000F                 M[r0] = r2 + Null;
0x00140E        E499002F                 r7 = r7 + 1;
0x00140F        DDF0FFF1                 jump $M.frame_sync.update_streams_ind.jp_next_stream;

 <$M.frame_sync.update_streams_ind.jp_stream_done>
0x001410        E1F0025F                 call $interrupt.unblock;
0x001411        50D0000F                 L1 = Null + Null;
0x001412        DDF002B7                 jump $pop_rLink_and_rts;

 <$timer.service_routine>
0x001413        F3D00000                 push rLink;

 <$M.timer.service_routine.search_again>
0x001414        093094DC                 r1 = Null + M[$timer.last_addr];
0x001415        E403002F                 Null = r1 + 1;
0x001416        DD000011                 if EQ jump $M.timer.service_routine.no_more_timers;
0x001417        D1230001                 r0 = M[r1 + 1];
0x001418        2942FE71                 r2 = r0 - M[0xfffe71];
0x001419        21040000                 Null = r2 - 0;
0x00141A        DDC00008                 if GT jump $M.timer.service_routine.setup_a_new_hardware_timer;
0x00141B        D1D30002                 rLink = M[r1 + 2];
0x00141C        D1230003                 r0 = M[r1 + 3];
0x00141D        D5030003                 M[r1 + 3] = Null;
0x00141E        D1430000                 r2 = M[r1 + 0];
0x00141F        194094DC                 M[$timer.last_addr] = r2 + Null;
0x001420        E00D000F                 call rLink;
0x001421        DDF0FFF3                 jump $M.timer.service_routine.search_again;

 <$M.timer.service_routine.setup_a_new_hardware_timer>
0x001422        1900FE1F                 M[0xfffe1f] = Null + Null;
0x001423        1920FE21                 M[0xfffe21] = r0 + Null;
0x001424        E450002F                 r3 = Null + 1;
0x001425        1950FE1F                 M[0xfffe1f] = r3 + Null;
0x001426        DDF002A3                 jump $pop_rLink_and_rts;

 <$M.timer.service_routine.no_more_timers>
0x001427        1900FE1F                 M[0xfffe1f] = Null + Null;
0x001428        DDF002A1                 jump $pop_rLink_and_rts;

 <$iir_resamplerv2.iir_15_s3>
0x001429        9041388F                 r2 = rMAC ASHIFT r6, r1 = M[I2,M0];
0x00142A        CF433941                 rMAC = r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x00142B        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x00142C        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x00142D        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x00142E        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x00142F        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x001430        BF433940                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,0];
0x001431        92E33800                 rMAC = rMAC ASHIFT r1, r1 = M[I2,M0];
0x001432        CF133991                 rMAC = rMAC * r1 (SS), r1 = M[I2,1], M[I4,1] = rMAC;
0x001433        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x001434        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x001435        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x001436        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x001437        BF433940                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,0];
0x001438        92E33800                 rMAC = rMAC ASHIFT r1, r1 = M[I2,M0];
0x001439        CF133991                 rMAC = rMAC * r1 (SS), r1 = M[I2,1], M[I4,1] = rMAC;
0x00143A        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x00143B        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x00143C        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x00143D        BF433900                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1];
0x00143E        93E30000                 rMAC = rMAC ASHIFT r1;
0x00143F        0031000F                 r1 = rMAC + Null;
0x001440        DC0D000F                 rts;

 <$frame_sync.analyze_stream_ind>
0x001441        D5CB0008                 M[r9 + 8] = r10;
0x001442        D14B000A                 r2 = M[r9 + 10];
0x001443        200400CF                 Null = r2 - r10;
0x001444        004C0005                 if POS r2 = r10 + Null;
0x001445        D15B000B                 r3 = M[r9 + 11];
0x001446        200500CF                 Null = r3 - r10;
0x001447        005C0004                 if NEG r3 = r10 + Null;
0x001448        D1CB0007                 r10 = M[r9 + 7];
0x001449        67C90000                 r10 = r10 - M1;
0x00144A        DDD00005                 if LE jump $M.frame_sync.analyze_stream_ind.jp_threshold_reset;
0x00144B        D54B000A                 M[r9 + 10] = r2;
0x00144C        D55B000B                 M[r9 + 11] = r3;
0x00144D        D5CB0007                 M[r9 + 7] = r10;
0x00144E        DC0D000F                 rts;

 <$M.frame_sync.analyze_stream_ind.jp_threshold_reset>
0x00144F        D50B000B                 M[r9 + 11] = Null;
0x001450        D56B000A                 M[r9 + 10] = r4;
0x001451        D1CB0004                 r10 = M[r9 + 4];
0x001452        23540000                 r3 = r3 - r2;
0x001453        035C0000                 r3 = r3 + r10;
0x001454        00500004                 if NEG r3 = Null + Null;
0x001455        D55B0009                 M[r9 + 9] = r3;
0x001456        01C00078                 r10 = Null + 120;
0x001457        D5CB0007                 M[r9 + 7] = r10;
0x001458        DC0D000F                 rts;

 <$cbops.iir_resamplev2.amount_to_use>
0x001459        190064E3                 M[$M.cbops.iir_resamplev2.amount_used] = Null + Null;

 <$iir_resamplev2.amount_to_use>
0x00145A        D14A0002                 r2 = M[r8 + 2];
0x00145B        DC0D0000                 if EQ rts;
0x00145C        F3D00000                 push rLink;
0x00145D        012A0002                 r0 = r8 + 2;
0x00145E        0039000F                 r1 = r7 + Null;
0x00145F        E1F0F985                 call $estimate_iir_resampler_consumed;
0x001460        0078000F                 r5 = r6 + Null;
0x001461        2007003F                 Null = r5 - r1;
0x001462        00730005                 if POS r5 = r1 + Null;
0x001463        D10A0007                 Null = M[r8 + 7];
0x001464        DD100265                 if NE jump $pop_rLink_and_rts;
0x001465        F3A00000                 push r8;
0x001466        016A0011                 r4 = r8 + 17;
0x001467        012A0002                 r0 = r8 + 2;
0x001468        01AA0009                 r8 = r8 + 9;
0x001469        E1F0F953                 call $reset_iir_resampler;
0x00146A        F3A40000                 pop r8;
0x00146B        DDF0025E                 jump $pop_rLink_and_rts;

 <$frame_sync.distribute_streams_ind>
0x00146C        F3D00000                 push rLink;
0x00146D        E1F00212                 call $block_interrupts;
0x00146E        51900001                 M1 = Null + 1;

 <$M.frame_sync.distribute_streams_ind.jp_next_stream>
0x00146F        D0B9000F                 r9 = M[r7 + Null];
0x001470        DD00000D                 if EQ jump $M.frame_sync.distribute_streams_ind.jp_stream_done;
0x001471        D15B0005                 r3 = M[r9 + 5];
0x001472        D12B0000                 r0 = M[r9 + 0];
0x001473        D1320000                 r1 = M[r0 + 0];
0x001474        D1820001                 r6 = M[r0 + 1];
0x001475        D1A20002                 r8 = M[r0 + 2];
0x001476        50D0003F                 L1 = Null + r1;
0x001477        D16B0003                 r4 = M[r9 + 3];
0x001478        D56B0002                 M[r9 + 2] = r4;
0x001479        E005000F                 call r3;
0x00147A        D58B0001                 M[r9 + 1] = r6;
0x00147B        E499002F                 r7 = r7 + 1;
0x00147C        DDF0FFF3                 jump $M.frame_sync.distribute_streams_ind.jp_next_stream;

 <$M.frame_sync.distribute_streams_ind.jp_stream_done>
0x00147D        E1F001F2                 call $interrupt.unblock;
0x00147E        50D0000F                 L1 = Null + Null;
0x00147F        DDF0024A                 jump $pop_rLink_and_rts;

 <$frame_sync.update_output_streams_ind>
0x001480        F3D00000                 push rLink;
0x001481        D1820002                 r6 = M[r0 + 2];
0x001482        D1A20001                 r8 = M[r0 + 1];
0x001483        20C800AF                 r10 = r6 - r8;
0x001484        00CC0034                 if NEG r10 = r10 + r1;
0x001485        E1F0FFBC                 call $frame_sync.analyze_stream_ind;
0x001486        D15B0008                 r3 = M[r9 + 8];
0x001487        D14B0009                 r2 = M[r9 + 9];
0x001488        23540000                 r3 = r3 - r2;
0x001489        DD40000A                 if NEG jump $M.frame_sync.update_output_streams_ind.done;
0x00148A        D14B0004                 r2 = M[r9 + 4];
0x00148B        9144007F                 r2 = r2 ASHIFT -1;
0x00148C        03540000                 r3 = r3 + r2;
0x00148D        2006005F                 Null = r4 - r3;
0x00148E        00560004                 if NEG r3 = r4 + Null;
0x00148F        D14B000C                 r2 = M[r9 + 12];
0x001490        23450000                 r2 = r2 - r3;
0x001491        D54B000C                 M[r9 + 12] = r2;
0x001492        23650000                 r4 = r4 - r3;

 <$M.frame_sync.update_output_streams_ind.done>
0x001493        01220002                 r0 = r0 + 2;
0x001494        DDF00235                 jump $pop_rLink_and_rts;

 <$timer.cancel_event>
0x001495        F3D00000                 push rLink;
0x001496        E1F001E9                 call $block_interrupts;
0x001497        01C00032                 r10 = Null + 50;
0x001498        016094DC                 r4 = Null + -27428;
0x001499        092094DC                 r0 = Null + M[$timer.last_addr];
0x00149A        E5F00008                 do $M.timer.cancel_event.loop;
0x00149B        E402002F                 Null = r0 + 1;
0x00149C        DD000006                 if EQ jump $M.timer.cancel_event.loop;
0x00149D        D1720003                 r5 = M[r0 + 3];
0x00149E        2004007F                 Null = r2 - r5;
0x00149F        DD000004                 if EQ jump $M.timer.cancel_event.delete_this_entry;
0x0014A0        0062000F                 r4 = r0 + Null;
0x0014A1        D1220000                 r0 = M[r0 + 0];

 <$M.timer.cancel_event.loop>
0x0014A2        DDF00004                 jump $M.timer.cancel_event.done;

 <$M.timer.cancel_event.delete_this_entry>
0x0014A3        D1320000                 r1 = M[r0 + 0];
0x0014A4        D5360000                 M[r4 + 0] = r1;
0x0014A5        D5020003                 M[r0 + 3] = Null;

 <$M.timer.cancel_event.done>
0x0014A6        E1F001C9                 call $interrupt.unblock;
0x0014A7        DDF00222                 jump $pop_rLink_and_rts;

 <$iir_resamplerv2.iir_15_s2>
0x0014A8        9041388F                 r2 = rMAC ASHIFT r6, r1 = M[I2,M0];
0x0014A9        CF433941                 rMAC = r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x0014AA        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x0014AB        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x0014AC        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x0014AD        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x0014AE        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x0014AF        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x0014B0        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x0014B1        BF433940                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,0];
0x0014B2        92E33800                 rMAC = rMAC ASHIFT r1, r1 = M[I2,M0];
0x0014B3        CF133991                 rMAC = rMAC * r1 (SS), r1 = M[I2,1], M[I4,1] = rMAC;
0x0014B4        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x0014B5        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x0014B6        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x0014B7        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x0014B8        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x0014B9        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x0014BA        BF433900                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1];
0x0014BB        93E30000                 rMAC = rMAC ASHIFT r1;
0x0014BC        0031000F                 r1 = rMAC + Null;
0x0014BD        DC0D000F                 rts;

 <$cbuffer.empty_buffer>
0x0014BE        F3D00000                 push rLink;
0x0014BF        0052000F                 r3 = r0 + Null;
0x0014C0        D802000F                 Null = SIGNDET r0;
0x0014C1        DD000004                 if EQ jump $M.cbuffer.empty_buffer.its_a_port;
0x0014C2        E1F001C9                 call $cbuffer.get_write_address_and_size;
0x0014C3        0032000F                 r1 = r0 + Null;
0x0014C4        DDF00007                 jump $M.cbuffer.empty_buffer.empty_port_loop;

 <$M.cbuffer.empty_buffer.its_a_port>
0x0014C5        E1F001A2                 call $cbuffer.calc_amount_data;
0x0014C6        00C2000F                 r10 = r0 + Null;
0x0014C7        0025000F                 r0 = r3 + Null;
0x0014C8        E1F001BE                 call $cbuffer.get_read_address_and_size;
0x0014C9        E5F00002                 do $M.cbuffer.empty_buffer.empty_port_loop;
0x0014CA        D002000F                 Null = M[r0 + Null];

 <$M.cbuffer.empty_buffer.empty_port_loop>
0x0014CB        0025000F                 r0 = r3 + Null;
0x0014CC        E1F001D4                 call $cbuffer.set_read_address;
0x0014CD        DDF001FC                 jump $pop_rLink_and_rts;

 <$message.send_short>
0x0014CE        F3D00000                 push rLink;
0x0014CF        E1F001B0                 call $block_interrupts;
0x0014D0        093064D9                 r1 = Null + M[$message.queue_write_ptr];
0x0014D1        01230005                 r0 = r1 + 5;
0x0014D2        2102006E                 Null = r0 - 110;
0x0014D3        00200000                 if EQ r0 = Null + Null;
0x0014D4        290294D8                 Null = r0 - M[$message.queue_read_ptr];
0x0014D5        DD000008                 if EQ jump $M.message.send_short.all_done;
0x0014D6        192064D9                 M[$message.queue_write_ptr] = r0 + Null;
0x0014D7        D5438D70                 M[r1 + -29328] = r2;
0x0014D8        D5538D71                 M[r1 + -29327] = r3;
0x0014D9        D5638D72                 M[r1 + -29326] = r4;
0x0014DA        D5738D73                 M[r1 + -29325] = r5;
0x0014DB        D5838D74                 M[r1 + -29324] = r6;
0x0014DC        E1F0FCF4                 call $message.private.try_to_send_message;

 <$M.message.send_short.all_done>
0x0014DD        E1F00192                 call $interrupt.unblock;
0x0014DE        DDF001EB                 jump $pop_rLink_and_rts;

 <$math.log2_taylor>
0x0014DF        F3010000                 push I0;
0x0014E0        F3910000                 push M1;
0x0014E1        510003E6                 I0 = Null + 998;
0x0014E2        51900001                 M1 = Null + 1;
0x0014E3        D881000F                 r6 = SIGNDET rMAC;
0x0014E4        93E82100                 rMAC = rMAC ASHIFT r6, r0 = M[I0,1];
0x0014E5        8D310002                 r1 = rMAC LSHIFT 2;
0x0014E6        8DE3007F                 rMAC = r1 LSHIFT -1 (MI);
0x0014E7        46893100                 r6 = r6 + M1, r1 = M[I0,M1];
0x0014E8        91880010                 r6 = r6 ASHIFT 16;
0x0014E9        AC32211F                 r1 = r1 + r0 * rMAC (SS), r0 = M[I0,M1];
0x0014EA        AC23311F                 r0 = r0 + r1 * rMAC (SS), r1 = M[I0,M1];
0x0014EB        AC32211F                 r1 = r1 + r0 * rMAC (SS), r0 = M[I0,M1];
0x0014EC        AC23311F                 r0 = r0 + r1 * rMAC (SS), r1 = M[I0,M1];
0x0014ED        AC32211F                 r1 = r1 + r0 * rMAC (SS), r0 = M[I0,M1];
0x0014EE        AC23001F                 r0 = r0 + r1 * rMAC (SS);
0x0014EF        9132007A                 r1 = r0 ASHIFT -6;
0x0014F0        2023008F                 r0 = r1 - r6;
0x0014F1        F3950000                 pop M1;
0x0014F2        F3050000                 pop I0;
0x0014F3        DC0D000F                 rts;

 <$pskey.read_key>
0x0014F4        F3D00000                 push rLink;
0x0014F5        E1F0018A                 call $block_interrupts;
0x0014F6        D5430001                 M[r1 + 1] = r2;
0x0014F7        D5530002                 M[r1 + 2] = r3;
0x0014F8        E450003F                 r3 = Null - 1;
0x0014F9        D5530000                 M[r1 + 0] = r3;
0x0014FA        012094DB                 r0 = Null + -27429;

 <$M.pskey.read_key.find_end_of_list>
0x0014FB        0042000F                 r2 = r0 + Null;
0x0014FC        D1240000                 r0 = M[r2 + 0];
0x0014FD        E402002F                 Null = r0 + 1;
0x0014FE        DD10FFFD                 if NE jump $M.pskey.read_key.find_end_of_list;
0x0014FF        D5340000                 M[r2 + 0] = r1;
0x001500        210494DB                 Null = r2 - -27429;
0x001501        E100FEB6                 if EQ call $pskey.private.send_request;
0x001502        E1F0016D                 call $interrupt.unblock;
0x001503        DDF001C6                 jump $pop_rLink_and_rts;

 <$cbops.shift.main>
0x001504        D12A0000                 r0 = M[r8 + 0];
0x001505        D038002F                 r1 = M[r6 + r0];
0x001506        5000003F                 I0 = Null + r1;
0x001507        D039002F                 r1 = M[r7 + r0];
0x001508        50C0003F                 L0 = Null + r1;
0x001509        D12A0001                 r0 = M[r8 + 1];
0x00150A        D038002F                 r1 = M[r6 + r0];
0x00150B        5040003F                 I4 = Null + r1;
0x00150C        D039002F                 r1 = M[r7 + r0];
0x00150D        50E0003F                 L4 = Null + r1;
0x00150E        D14A0002                 r2 = M[r8 + 2];
0x00150F        E4CC003F                 r10 = r10 - 1;
0x001510        03002100                 Null = Null + Null, r0 = M[I0,1];
0x001511        93240000                 r0 = r0 ASHIFT r2;
0x001512        E5F00003                 do $M.cbops.shift.main.loop;
0x001513        030021A1                 Null = Null + Null, r0 = M[I0,1], M[I4,1] = r0;
0x001514        93240000                 r0 = r0 ASHIFT r2;

 <$M.cbops.shift.main.loop>
0x001515        7FCC00A1                 L0 = L0 - L0, M[I4,1] = r0;
0x001516        51E00000                 L4 = Null + 0;
0x001517        DC0D000F                 rts;

 <$latency.reset_encoded_latency>
0x001518        F3D00000                 push rLink;
0x001519        D1290001                 r0 = M[r7 + 1];
0x00151A        DD00000E                 if EQ jump $M.latency_measure.reset.encoded_reset_done;
0x00151B        E1F0FFA3                 call $cbuffer.empty_buffer;
0x00151C        D1290002                 r0 = M[r7 + 2];
0x00151D        D1220001                 r0 = M[r0 + 1];
0x00151E        D5290007                 M[r7 + 7] = r0;
0x00151F        D1290003                 r0 = M[r7 + 3];
0x001520        D1220002                 r0 = M[r0 + 2];
0x001521        D5290008                 M[r7 + 8] = r0;
0x001522        FD00007F 0120FFFF        r0 = Null + 8388607;
0x001524        D529000B                 M[r7 + 11] = r0;
0x001525        D529000C                 M[r7 + 12] = r0;
0x001526        D529000D                 M[r7 + 13] = r0;
0x001527        D529000E                 M[r7 + 14] = r0;

 <$M.latency_measure.reset.encoded_reset_done>
0x001528        DDF001A1                 jump $pop_rLink_and_rts;

 <$math.sin>
0x001529        510003F4                 I0 = Null + 1012;
0x00152A        F3910000                 push M1;
0x00152B        51900001                 M1 = Null + 1;
0x00152C        0032110F                 r1 = r0 + Null, rMAC = M[I0,M1];
0x00152D        8D030001                 Null = r1 LSHIFT 1;
0x00152E        20304134                 if NEG r1 = Null - r1, r2 = M[I0,M1];
0x00152F        FD00007F 8133FFFF        r1 = r1 AND 0x7fffff;
0x001531        AC43111F                 r2 = r2 + r1 * rMAC (SS), rMAC = M[I0,M1];
0x001532        AC13414F                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M1];
0x001533        AC43111F                 r2 = r2 + r1 * rMAC (SS), rMAC = M[I0,M1];
0x001534        AC13414F                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M1];
0x001535        AC43001F                 r2 = r2 + r1 * rMAC (SS);
0x001536        9413004F                 rMAC = r1 * r2 (frac);
0x001537        F3950000                 pop M1;
0x001538        91310003                 r1 = rMAC ASHIFT 3;
0x001539        0002000F                 Null = r0 + Null;
0x00153A        20300034                 if NEG r1 = Null - r1;
0x00153B        DC0D000F                 rts;

 <$cbops.switch_op.helper>
0x00153C        E440002F                 r2 = Null + 1;
0x00153D        D12A0000                 r0 = M[r8 + 0];
0x00153E        D13A0002                 r1 = M[r8 + 2];
0x00153F        00340000                 if EQ r1 = r2 + Null;
0x001540        D3200000                 r0 = M[r0 + Null];
0x001541        D14A0003                 r2 = M[r8 + 3];
0x001542        88220031                 if NE r0 = r0 XOR r1;
0x001543        83230000                 r0 = r0 AND r1;
0x001544        DD100009                 if NE jump $M.cbops.switch_op.helper.exit;
0x001545        D12A0001                 r0 = M[r8 + 1];
0x001546        DD000003                 if EQ jump $M.cbops.switch_op.helper.bypass;
0x001547        21AAFFFD                 r8 = r8 - -3;
0x001548        DDF00005                 jump $M.cbops.switch_op.helper.exit;

 <$M.cbops.switch_op.helper.bypass>
0x001549        D12AFFFE                 r0 = M[r8 + -2];
0x00154A        E402002F                 Null = r0 + 1;
0x00154B        DD000002                 if EQ jump $M.cbops.switch_op.helper.exit;
0x00154C        01A20002                 r8 = r0 + 2;

 <$M.cbops.switch_op.helper.exit>
0x00154D        DC0D000F                 rts;

 <$math.log2_abs_table>
0x00154E        D881000F                 r6 = SIGNDET rMAC;
0x00154F        93E80000                 rMAC = rMAC ASHIFT r6;
0x001550        20100014                 if NEG rMAC = Null - rMAC;
0x001551        DDF00003                 jump $M.math.log2_table.continue_jp;

 <$math.log2_table>
0x001552        D881000F                 r6 = SIGNDET rMAC;
0x001553        93E80000                 rMAC = rMAC ASHIFT r6;

 <$M.math.log2_table.continue_jp>
0x001554        E488002F                 r6 = r6 + 1;
0x001555        91880010                 r6 = r6 ASHIFT 16;
0x001556        8D310002                 r1 = rMAC LSHIFT 2;
0x001557        8D33006D                 r1 = r1 LSHIFT -19;
0x001558        8D210007                 r0 = rMAC LSHIFT 7;
0x001559        8D22007F                 r0 = r0 LSHIFT -1;
0x00155A        D113033D                 rMAC = M[r1 + 829];
0x00155B        D133033E                 r1 = M[r1 + 830];
0x00155C        23310000                 r1 = r1 - rMAC;
0x00155D        AC12003F                 rMAC = rMAC + r0 * r1 (SS);
0x00155E        2021008F                 r0 = rMAC - r6;
0x00155F        DC0D000F                 rts;

 <$math.pow2_taylor>
0x001560        F3010000                 push I0;
0x001561        510003ED                 I0 = Null + 1005;
0x001562        91920070                 r7 = r0 ASHIFT -16;
0x001563        8D820008                 r6 = r0 LSHIFT 8;
0x001564        8D88007F                 r6 = r6 LSHIFT -1;
0x001565        F3913100                 push M1, r1 = M[I0,1];
0x001566        51900001                 M1 = Null + 1;
0x001567        46992100                 r7 = r7 + M1, r0 = M[I0,M1];
0x001568        AC23318F                 r0 = r0 + r1 * r6 (SS), r1 = M[I0,M1];
0x001569        AC32218F                 r1 = r1 + r0 * r6 (SS), r0 = M[I0,M1];
0x00156A        AC23318F                 r0 = r0 + r1 * r6 (SS), r1 = M[I0,M1];
0x00156B        AC32218F                 r1 = r1 + r0 * r6 (SS), r0 = M[I0,M1];
0x00156C        AC23318F                 r0 = r0 + r1 * r6 (SS), r1 = M[I0,M1];
0x00156D        AC32008F                 r1 = r1 + r0 * r6 (SS);
0x00156E        9023009F                 r0 = r1 ASHIFT r7;
0x00156F        F3950000                 pop M1;
0x001570        F3050000                 pop I0;
0x001571        DC0D000F                 rts;

 <$M.configure_latency_reporting.func>
0x001572        F3D00000                 push rLink;
0x001573        995503E8                 r3 = r3 * 1000 (int);
0x001574        195094C3                 M[$M.configure_latency_reporting.min_change] = r3 + Null;
0x001575        193094C2                 M[$M.configure_latency_reporting.enabled] = r1 + Null;
0x001576        DD100007                 if NE jump $M.configure_latency_reporting.no_cancel_needed;
0x001577        E420003F                 r0 = Null - 1;
0x001578        192064C4                 M[$M.configure_latency_reporting.average_latency] = r0 + Null;
0x001579        013093F6                 r1 = Null + -27658;
0x00157A        D1430003                 r2 = M[r1 + 3];
0x00157B        E110FF1A                 if NE call $timer.cancel_event;
0x00157C        DDF00003                 jump $M.configure_latency_reporting.done;

 <$M.configure_latency_reporting.no_cancel_needed>
0x00157D        013093F6                 r1 = Null + -27658;
0x00157E        E1F0FA21                 call $M.report_latency_to_vm.init;

 <$M.configure_latency_reporting.done>
0x00157F        DDF0014A                 jump $pop_rLink_and_rts;

 <$flash.copy_to_dm>
0x001580        F3D00000                 push rLink;
0x001581        0062000F                 r4 = r0 + Null;
0x001582        0073000F                 r5 = r1 + Null;

 <$M.flash.copy_to_dm.page_loop>
0x001583        0026000F                 r0 = r4 + Null;
0x001584        0037000F                 r1 = r5 + Null;
0x001585        E1F000F2                 call $flash.map_page_into_dm;
0x001586        00C3000F                 r10 = r1 + Null;
0x001587        5010002F                 I1 = Null + r0;
0x001588        E5F00003                 do $M.flash.copy_to_dm.loop;
0x001589        03002500                 Null = Null + Null, r0 = M[I1,1];
0x00158A        0300A100                 Null = Null + Null, M[I0,1] = r0;

 <$M.flash.copy_to_dm.loop>
0x00158B        03630000                 r4 = r4 + r1;
0x00158C        23730000                 r5 = r5 - r1;
0x00158D        DD10FFF6                 if NE jump $M.flash.copy_to_dm.page_loop;
0x00158E        DDF0013B                 jump $pop_rLink_and_rts;

 <$cbops.copy_op.main>
0x00158F        D12A0000                 r0 = M[r8 + 0];
0x001590        D038002F                 r1 = M[r6 + r0];
0x001591        5000003F                 I0 = Null + r1;
0x001592        D039002F                 r1 = M[r7 + r0];
0x001593        50C0003F                 L0 = Null + r1;
0x001594        D12A0001                 r0 = M[r8 + 1];
0x001595        D038002F                 r1 = M[r6 + r0];
0x001596        5040003F                 I4 = Null + r1;
0x001597        D039002F                 r1 = M[r7 + r0];
0x001598        50E0003F                 L4 = Null + r1;
0x001599        E4CC003F                 r10 = r10 - 1;
0x00159A        03002100                 Null = Null + Null, r0 = M[I0,1];
0x00159B        E5F00002                 do $M.cbops.copy_op.main.loop;
0x00159C        030021A1                 Null = Null + Null, r0 = M[I0,1], M[I4,1] = r0;

 <$M.cbops.copy_op.main.loop>
0x00159D        7FCC00A1                 L0 = L0 - L0, M[I4,1] = r0;
0x00159E        51E00000                 L4 = Null + 0;
0x00159F        DC0D000F                 rts;

 <$math.pow2_sat_table>
0x0015A0        91820070                 r6 = r0 ASHIFT -16;
0x0015A1        DD400005                 if NEG jump $M.math.pow2_table.continue_jp;
0x0015A2        FD00007F 0120FFFE        r0 = Null + 8388606;
0x0015A4        DC0D000F                 rts;

 <$math.pow2_table>
0x0015A5        91820070                 r6 = r0 ASHIFT -16;

 <$M.math.pow2_table.continue_jp>
0x0015A6        8D920008                 r7 = r0 LSHIFT 8;
0x0015A7        8D99006D                 r7 = r7 LSHIFT -19;
0x0015A8        E488002F                 r6 = r6 + 1;
0x0015A9        D139035E                 r1 = M[r7 + 862];
0x0015AA        D199035F                 r7 = M[r7 + 863];
0x0015AB        23930000                 r7 = r7 - r1;
0x0015AC        8D22000D                 r0 = r0 LSHIFT 13;
0x0015AD        8D22007F                 r0 = r0 LSHIFT -1;
0x0015AE        AC39002F                 r1 = r1 + r7 * r0 (SS);
0x0015AF        9023008F                 r0 = r1 ASHIFT r6;
0x0015B0        DC0D000F                 rts;

 <$iir_resamplerv2.iir_9_s2>
0x0015B1        9041388F                 r2 = rMAC ASHIFT r6, r1 = M[I2,M0];
0x0015B2        CF433941                 rMAC = r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x0015B3        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x0015B4        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x0015B5        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x0015B6        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x0015B7        BF433940                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,0];
0x0015B8        92E33800                 rMAC = rMAC ASHIFT r1, r1 = M[I2,M0];
0x0015B9        CF133991                 rMAC = rMAC * r1 (SS), r1 = M[I2,1], M[I4,1] = rMAC;
0x0015BA        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x0015BB        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x0015BC        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x0015BD        BF433900                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1];
0x0015BE        93E30000                 rMAC = rMAC ASHIFT r1;
0x0015BF        0031000F                 r1 = rMAC + Null;
0x0015C0        DC0D000F                 rts;

 <$M.audio_proc.peak_monitor.Process.func>
0x0015C1        F3D00000                 push rLink;
0x0015C2        D1290000                 r0 = M[r7 + 0];
0x0015C3        E1F000D8                 call $frmbuffer.get_buffer;
0x0015C4        5000002F                 I0 = Null + r0;
0x0015C5        50C0003F                 L0 = Null + r1;
0x0015C6        F3D40000                 pop rLink;
0x0015C7        51900001                 M1 = Null + 1;
0x0015C8        00C5610F                 r10 = r3 + Null, r4 = M[I0,M1];
0x0015C9        D1590001                 r3 = M[r7 + 1];
0x0015CA        E5F00003                 do $M.audio_proc.peak_monitor.Process.lp_calc_peak;
0x0015CB        E466004F                 r4 = ABS r4;
0x0015CC        E456616F                 r3 = MAX r4, r4 = M[I0,M1];

 <$M.audio_proc.peak_monitor.Process.lp_calc_peak>
0x0015CD        50C0000F                 L0 = Null + Null;
0x0015CE        D5590001                 M[r7 + 1] = r3;
0x0015CF        DC0D000F                 rts;

 <$cbuffer.set_write_address.its_a_port>
0x0015D0        F3D00000                 push rLink;
0x0015D1        8122001F                 r0 = r0 AND 0x1f;
0x0015D2        2122000C                 r0 = r0 - 12;
0x0015D3        0900FE33                 Null = Null + M[0xfffe33];
0x0015D4        090094D5                 Null = Null + M[$cbuffer.auto_mcu_message];
0x0015D5        DD000007                 if EQ jump $M.cbuffer.set_write_address.its_a_port.dont_message_send;
0x0015D6        D1324FF2                 r1 = M[r0 + 20466];
0x0015D7        2103F000                 Null = r1 - -4096;
0x0015D8        DD500004                 if POS jump $M.cbuffer.set_write_address.its_a_port.dont_message_send;
0x0015D9        85408003                 r2 = Null OR 0x8003;
0x0015DA        ED520001                 r3 = 0x1 ASHIFT r0;
0x0015DB        E1F0FEF3                 call $message.send_short;

 <$M.cbuffer.set_write_address.its_a_port.dont_message_send>
0x0015DC        DDF000ED                 jump $pop_rLink_and_rts;

 <$cbuffer.advance_read_ptr>
0x0015DD        F3D00000                 push rLink;
0x0015DE        F3200000                 push r0;
0x0015DF        E1F000A7                 call $cbuffer.get_read_address_and_size;
0x0015E0        5000002F                 I0 = Null + r0;
0x0015E1        50C0003F                 L0 = Null + r1;
0x0015E2        50B000CF                 M3 = Null + r10;
0x0015E3        02002300                 Null = Null + Null, r0 = M[I0,M3];
0x0015E4        F3240000                 pop r0;
0x0015E5        4430000F                 r1 = Null + I0;
0x0015E6        E1F000BA                 call $cbuffer.set_read_address;
0x0015E7        51C00000                 L0 = Null + 0;
0x0015E8        DDF000E1                 jump $pop_rLink_and_rts;

 <$frame_sync.distribute_read_insert_ind>
0x0015E9        20C000CF                 r10 = Null - r10;
0x0015EA        D14B0004                 r2 = M[r9 + 4];
0x0015EB        9144007F                 r2 = r2 ASHIFT -1;
0x0015EC        03C40000                 r10 = r10 + r2;
0x0015ED        D14B000C                 r2 = M[r9 + 12];
0x0015EE        034C0000                 r2 = r2 + r10;
0x0015EF        D54B000C                 M[r9 + 12] = r2;
0x0015F0        5010008F                 I1 = Null + r6;
0x0015F1        03004700                 Null = Null + Null, r2 = M[I1,-1];
0x0015F2        E5F00002                 do $M.frame_sync.distribute_read_insert_ind.lp_repeat;
0x0015F3        0300C700                 Null = Null + Null, M[I1,-1] = r2;

 <$M.frame_sync.distribute_read_insert_ind.lp_repeat>
0x0015F4        03004500                 Null = Null + Null, r2 = M[I1,1];
0x0015F5        4480001F                 r6 = Null + I1;
0x0015F6        D5820001                 M[r0 + 1] = r6;
0x0015F7        DC0D000F                 rts;

 <$cbuffer.set_read_address.its_a_port>
0x0015F8        F3D00000                 push rLink;
0x0015F9        8122001F                 r0 = r0 AND 0x1f;
0x0015FA        0900FE33                 Null = Null + M[0xfffe33];
0x0015FB        090094D5                 Null = Null + M[$cbuffer.auto_mcu_message];
0x0015FC        DD000007                 if EQ jump $M.cbuffer.set_read_address.its_a_port.dont_message_send;
0x0015FD        D1324FE6                 r1 = M[r0 + 20454];
0x0015FE        2103F000                 Null = r1 - -4096;
0x0015FF        DD500004                 if POS jump $M.cbuffer.set_read_address.its_a_port.dont_message_send;
0x001600        85408002                 r2 = Null OR 0x8002;
0x001601        ED520001                 r3 = 0x1 ASHIFT r0;
0x001602        E1F0FECC                 call $message.send_short;

 <$M.cbuffer.set_read_address.its_a_port.dont_message_send>
0x001603        DDF000C6                 jump $pop_rLink_and_rts;

 <$volume_and_limit.initialize>
0x001604        D1C90002                 r10 = M[r7 + 2];
0x001605        0189000B                 r6 = r7 + 11;
0x001606        D1590004                 r3 = M[r7 + 4];
0x001607        E5F00009                 do $M.audio_proc.volume_and_limit.reset.volume_reset_loop;
0x001608        D1280002                 r0 = M[r6 + 2];
0x001609        CC15002F                 rMAC = r3 * r0 (SS);
0x00160A        91110004                 rMAC = rMAC ASHIFT 4 (56bit);
0x00160B        D5180003                 M[r6 + 3] = rMAC;
0x00160C        000A000F                 Null = r8 + Null;
0x00160D        00100000                 if EQ rMAC = Null + Null;
0x00160E        D5180004                 M[r6 + 4] = rMAC;
0x00160F        01880005                 r6 = r6 + 5;

 <$M.audio_proc.volume_and_limit.reset.volume_reset_loop>
0x001610        D5090009                 M[r7 + 9] = Null;
0x001611        DC0D000F                 rts;

 <$frame_sync.update_input_streams_ind>
0x001612        D15B0008                 r3 = M[r9 + 8];
0x001613        D14B0009                 r2 = M[r9 + 9];
0x001614        23540000                 r3 = r3 - r2;
0x001615        DD400008                 if NEG jump $M.frame_sync.update_input_streams_ind.done;
0x001616        D14B0004                 r2 = M[r9 + 4];
0x001617        9144007F                 r2 = r2 ASHIFT -1;
0x001618        03540000                 r3 = r3 + r2;
0x001619        D14B000C                 r2 = M[r9 + 12];
0x00161A        23450000                 r2 = r2 - r3;
0x00161B        D54B000C                 M[r9 + 12] = r2;
0x00161C        03650000                 r4 = r4 + r3;

 <$M.frame_sync.update_input_streams_ind.done>
0x00161D        E422002F                 r0 = r0 + 1;
0x00161E        DC0D000F                 rts;

 <$cbuffer.mmu_octets_to_samples>
0x00161F        D805000F                 Null = SIGNDET r3;
0x001620        DD100009                 if NE jump $M.cbuffer.mmu_octets_to_samples.skip_conversion;
0x001621        F3D00000                 push rLink;
0x001622        F100000C                 pushm <r0, r1>;
0x001623        0025000F                 r0 = r3 + Null;
0x001624        0034000F                 r1 = r2 + Null;
0x001625        E1F0FC7F                 call $M.cbuffer.calc_amount_data.its_a_port.convert;
0x001626        0042000F                 r2 = r0 + Null;
0x001627        F104000C                 popm <r0, r1>;
0x001628        F3D40000                 pop rLink;

 <$M.cbuffer.mmu_octets_to_samples.skip_conversion>
0x001629        DC0D000F                 rts;

 <$cbops.rate_adjustment_and_shift.amount_to_use>
0x00162A        D12A000C                 r0 = M[r8 + 12];
0x00162B        9462009F                 r4 = r0 * r7 (frac);
0x00162C        2069006F                 r4 = r7 - r4;
0x00162D        D10A0009                 Null = M[r8 + 9];
0x00162E        DD000003                 if EQ jump $M.cbops.rate_adjustment_and_shift.amount_to_use.no_limit;
0x00162F        2126005F                 r0 = r4 - 95;
0x001630        20660025                 if POS r4 = r4 - r0;

 <$M.cbops.rate_adjustment_and_shift.amount_to_use.no_limit>
0x001631        21660002                 r4 = r4 - 2;
0x001632        00600004                 if NEG r4 = Null + Null;
0x001633        2006007F                 Null = r4 - r5;
0x001634        00760004                 if NEG r5 = r4 + Null;
0x001635        DC0D000F                 rts;

 <$frame_sync.register_handlers>
0x001636        F3D00000                 push rLink;

 <$M.frame_sync.handlers.lp_proc_loop>
0x001637        D036000F                 r1 = M[r4 + Null];
0x001638        DD000091                 if EQ jump $pop_rLink_and_rts;
0x001639        D1460001                 r2 = M[r4 + 1];
0x00163A        D1560002                 r3 = M[r4 + 2];
0x00163B        D1260003                 r0 = M[r4 + 3];
0x00163C        01660004                 r4 = r4 + 4;
0x00163D        196064E6                 M[$M.frame_sync.handlers.LOOP_COUNT] = r4 + Null;
0x00163E        E002000F                 call r0;
0x00163F        096064E6                 r4 = Null + M[$M.frame_sync.handlers.LOOP_COUNT];
0x001640        DDF0FFF7                 jump $M.frame_sync.handlers.lp_proc_loop;

 <$frame_sync.distribute_output_stream_ind>
0x001641        501000AF                 I1 = Null + r8;
0x001642        238A0000                 r6 = r6 - r8;
0x001643        0088003D                 if LE r6 = r6 + r1;
0x001644        67890000                 r6 = r6 - M1;
0x001645        70A8006F                 M2 = r6 - r4;
0x001646        DD500004                 if POS jump $M.frame_sync.distribute_output_stream_ind.done;
0x001647        444000AF                 r2 = Null + M2;
0x001648        D54B000C                 M[r9 + 12] = r2;
0x001649        02004600                 Null = Null + Null, r2 = M[I1,M2];

 <$M.frame_sync.distribute_output_stream_ind.done>
0x00164A        4480001F                 r6 = Null + I1;
0x00164B        D5820002                 M[r0 + 2] = r6;
0x00164C        DC0D000F                 rts;

 <$frame_sync.run_function_table>
0x00164D        F3D00000                 push rLink;

 <$M.frame_sync.run_function_table.lp_proc_loop>
0x00164E        D076000F                 r5 = M[r4 + Null];
0x00164F        DD00007A                 if EQ jump $pop_rLink_and_rts;
0x001650        D1960001                 r7 = M[r4 + 1];
0x001651        D1A60002                 r8 = M[r4 + 2];
0x001652        01660003                 r4 = r4 + 3;
0x001653        F3600000                 push r4;
0x001654        E007000F                 call r5;
0x001655        F3640000                 pop r4;
0x001656        DDF0FFF8                 jump $M.frame_sync.run_function_table.lp_proc_loop;

 <$cbuffer.calc_amount_space>
0x001657        D802000F                 Null = SIGNDET r0;
0x001658        DD00FC1C                 if EQ jump $cbuffer.calc_amount_space.its_a_port;

 <$M.cbuffer.calc_amount_space.its_a_cbuffer>
0x001659        D1420000                 r2 = M[r0 + 0];
0x00165A        D1320002                 r1 = M[r0 + 2];
0x00165B        D1220001                 r0 = M[r0 + 1];
0x00165C        23230000                 r0 = r0 - r1;
0x00165D        0022004D                 if LE r0 = r0 + r2;
0x00165E        E422003F                 r0 = r0 - 1;
0x00165F        DC0D000F                 rts;

 <$frame_sync.distribute_input_stream_ind>
0x001660        F3D00000                 push rLink;
0x001661        23A80000                 r8 = r8 - r6;
0x001662        00AA0034                 if NEG r8 = r8 + r1;
0x001663        20CA006F                 r10 = r8 - r4;
0x001664        E140FF85                 if NEG call $frame_sync.distribute_read_insert_ind;
0x001665        E1F0FDDC                 call $frame_sync.analyze_stream_ind;
0x001666        DDF00063                 jump $pop_rLink_and_rts;

 <$cbuffer.calc_amount_data>
0x001667        D802000F                 Null = SIGNDET r0;
0x001668        DD00FC2F                 if EQ jump $cbuffer.calc_amount_data.its_a_port;

 <$M.cbuffer.calc_amount_data.its_a_cbuffer>
0x001669        D1420000                 r2 = M[r0 + 0];
0x00166A        D1320002                 r1 = M[r0 + 2];
0x00166B        D1220001                 r0 = M[r0 + 1];
0x00166C        2023002F                 r0 = r1 - r0;
0x00166D        00220044                 if NEG r0 = r0 + r2;
0x00166E        DC0D000F                 rts;

 <$interrupt.unblock>
0x00166F        092064D7                 r0 = Null + M[$interrupt.block_count];
0x001670        E100271B                 if EQ call $error;
0x001671        E422003F                 r0 = r0 - 1;
0x001672        192064D7                 M[$interrupt.block_count] = r0 + Null;
0x001673        DC0D0001                 if NE rts;
0x001674        E420002F                 r0 = Null + 1;
0x001675        1920FE12                 M[0xfffe12] = r0 + Null;
0x001676        DC0D000F                 rts;

 <$flash.map_page_into_dm>
0x001677        9152007F                 r3 = r0 ASHIFT -1;
0x001678        1945FE5D                 M[0xfffe5d] = r2 + r3;
0x001679        81520001                 r3 = r0 AND 0x1;
0x00167A        65251000                 r0 = 4096 - r3;
0x00167B        2023002F                 r0 = r1 - r0;
0x00167C        20330025                 if POS r1 = r1 - r0;
0x00167D        0125D000                 r0 = r3 + -12288;
0x00167E        DC0D000F                 rts;

 <$block_interrupts>
0x00167F        092064D7                 r0 = Null + M[$interrupt.block_count];
0x001680        E422002F                 r0 = r0 + 1;
0x001681        192064D7                 M[$interrupt.block_count] = r0 + Null;
0x001682        1900FE12                 M[0xfffe12] = Null + Null;
0x001683        03000000                 Null = Null + Null;
0x001684        03000000                 Null = Null + Null;
0x001685        DC0D000F                 rts;

 <$cbuffer.get_read_address_and_size>
0x001686        D802000F                 Null = SIGNDET r0;
0x001687        DD00FAF8                 if EQ jump $cbuffer.get_read_address_and_size.its_a_port;

 <$M.cbuffer.get_read_address_and_size.its_a_cbuffer>
0x001688        D1320000                 r1 = M[r0 + 0];
0x001689        D1220001                 r0 = M[r0 + 1];
0x00168A        DC0D000F                 rts;

 <$cbuffer.get_write_address_and_size>
0x00168B        D802000F                 Null = SIGNDET r0;
0x00168C        DD00FAA3                 if EQ jump $cbuffer.get_write_address_and_size.its_a_port;

 <$M.cbuffer.get_write_address_and_size.its_a_cbuffer>
0x00168D        D1320000                 r1 = M[r0 + 0];
0x00168E        D1220002                 r0 = M[r0 + 2];
0x00168F        DC0D000F                 rts;

 <$message.send_queue_space>
0x001690        092094D8                 r0 = Null + M[$message.queue_read_ptr];
0x001691        292264D9                 r0 = r0 - M[$message.queue_write_ptr];
0x001692        E422003F                 r0 = r0 - 1;
0x001693        DC0D0005                 if POS rts;
0x001694        0122006E                 r0 = r0 + 110;
0x001695        DC0D000F                 rts;

 <$cbuffer.is_it_enabled>
0x001696        D802000F                 Null = SIGNDET r0;
0x001697        DC0D0001                 if NE rts;
0x001698        8122001F                 r0 = r0 AND 0x1f;
0x001699        D1029099                 Null = M[r0 + -28519];
0x00169A        DC0D000F                 rts;

 <$frmbuffer.get_buffer>
0x00169B        D1520002                 r3 = M[r0 + 2];
0x00169C        D1420000                 r2 = M[r0 + 0];
0x00169D        D1220001                 r0 = M[r0 + 1];
0x00169E        D1340000                 r1 = M[r2 + 0];
0x00169F        DC0D000F                 rts;

 <$cbuffer.set_read_address>
0x0016A0        D802000F                 Null = SIGNDET r0;
0x0016A1        DD00FF57                 if EQ jump $cbuffer.set_read_address.its_a_port;

 <$M.cbuffer.set_read_address.its_a_cbuffer>
0x0016A2        D5320001                 M[r0 + 1] = r1;
0x0016A3        DC0D000F                 rts;

 <$cbuffer.set_write_address>
0x0016A4        D802000F                 Null = SIGNDET r0;
0x0016A5        DD00FF2B                 if EQ jump $cbuffer.set_write_address.its_a_port;

 <$M.cbuffer.set_write_address.its_a_cbuffer>
0x0016A6        D5320002                 M[r0 + 2] = r1;
0x0016A7        DC0D000F                 rts;

 <$message.send>
0x0016A8        2104FFFE                 Null = r2 - -2;
0x0016A9        DD00FAB0                 if EQ jump $message.send_long;
0x0016AA        DDF0FE24                 jump $message.send_short;

 <$cbops.deinterleave.amount_to_use>
0x0016AB        8D77007F                 r5 = r5 LSHIFT -1;
0x0016AC        2007009F                 Null = r5 - r7;
0x0016AD        00790005                 if POS r5 = r7 + Null;
0x0016AE        8D770001                 r5 = r5 LSHIFT 1;
0x0016AF        DC0D000F                 rts;

 <$latency.calc_inv_fs>
0x0016B0        8D220002                 r0 = r0 LSHIFT 2;
0x0016B1        01103D09                 rMAC = Null + 15625;
0x0016B2        D9020000                 Div = rMAC / r0;
0x0016B3        D9200001                 r0 = DivResult;
0x0016B4        DC0D000F                 rts;

 <$cbuffer.buffer_configure>
0x0016B5        D5320002                 M[r0 + 2] = r1;
0x0016B6        D5320001                 M[r0 + 1] = r1;
0x0016B7        D5420000                 M[r0 + 0] = r2;
0x0016B8        DC0D000F                 rts;

 <$timer.schedule_event_in_period>
0x0016B9        D1230001                 r0 = M[r1 + 1];
0x0016BA        03420000                 r2 = r2 + r0;
0x0016BB        DDF0FB7B                 jump $timer.schedule_event_at;

 <$timer.schedule_event_in>
0x0016BC        0944FE71                 r2 = r2 + M[0xfffe71];
0x0016BD        DDF0FB79                 jump $timer.schedule_event_at;

 <$cbops.switch_op.reset>
0x0016BE        01500000                 r3 = Null + 0;
0x0016BF        DDF0FE7D                 jump $cbops.switch_op.helper;

 <$cbops.switch_op.amount_to_use>
0x0016C0        E450002F                 r3 = Null + 1;
0x0016C1        DDF0FE7B                 jump $cbops.switch_op.helper;

 <$cbops.switch_op.main>
0x0016C2        01500002                 r3 = Null + 2;
0x0016C3        DDF0FE79                 jump $cbops.switch_op.helper;

 <$cbops.fir_resample.complete>
0x0016C4        096064E4                 r4 = Null + M[$M.cbops.fir_resample.amount_used];
0x0016C5        196064DE                 M[$cbops.amount_to_use] = r4 + Null;
0x0016C6        DC0D000F                 rts;

 <$frmbuffer.set_frame_size>
0x0016C7        D5520002                 M[r0 + 2] = r3;
0x0016C8        DC0D000F                 rts;

 <$pop_rLink_and_rts>
0x0016C9        F3D40000                 pop rLink;
0x0016CA        DC0D000F                 rts;

 <$cbops.dc_remove.reset>
0x0016CB        D50A0002                 M[r8 + 2] = Null;
0x0016CC        DC0D000F                 rts;

 <$wall_clock.message_handler_failed>
0x0016CD        DC0D000F                 rts;

 <$kal_filter_coef_lib.__warp>
0x0016CE        F3D00000                 push rLink;

 <$kal_filter_coef_lib.__warp.jump_entry>
0x0016CF        F10013F0                 pushm <r2, r3, r4, r5, r6, r7, r10>;
0x0016D0        F3010000                 push I0;
0x0016D1        51006200                 I0 = Null + 25088;
0x0016D2        E1F00743                 call $kal_float_lib.div;
0x0016D3        03004100                 Null = Null + Null, r2 = M[I0,1];
0x0016D4        03005100                 Null = Null + Null, r3 = M[I0,1];
0x0016D5        E1F0070E                 call $kal_float_lib.mul;
0x0016D6        0042000F                 r2 = r0 + Null;
0x0016D7        0053000F                 r3 = r1 + Null;
0x0016D8        0062000F                 r4 = r0 + Null;
0x0016D9        0073000F                 r5 = r1 + Null;
0x0016DA        E1F00709                 call $kal_float_lib.mul;
0x0016DB        0082000F                 r6 = r0 + Null;
0x0016DC        0093000F                 r7 = r1 + Null;
0x0016DD        03002100                 Null = Null + Null, r0 = M[I0,1];
0x0016DE        03003100                 Null = Null + Null, r1 = M[I0,1];
0x0016DF        01C00005                 r10 = Null + 5;
0x0016E0        E5F00007                 do $kal_filter_coef_lib.__warp.tangent_loop;
0x0016E1        0048000F                 r2 = r6 + Null;
0x0016E2        0059000F                 r3 = r7 + Null;
0x0016E3        E1F00700                 call $kal_float_lib.mul;
0x0016E4        03004100                 Null = Null + Null, r2 = M[I0,1];
0x0016E5        03005100                 Null = Null + Null, r3 = M[I0,1];
0x0016E6        E1F006EB                 call $kal_float_lib.add;

 <$kal_filter_coef_lib.__warp.tangent_loop>
0x0016E7        0046000F                 r2 = r4 + Null;
0x0016E8        0057000F                 r3 = r5 + Null;
0x0016E9        E1F006FA                 call $kal_float_lib.mul;
0x0016EA        F3050000                 pop I0;
0x0016EB        F10413F0                 popm <r2, r3, r4, r5, r6, r7, r10>;
0x0016EC        F3D40000                 pop rLink;
0x0016ED        DC0D000F                 rts;

 <$kal_filter_coef_lib.__db2lin>
0x0016EE        F3D00000                 push rLink;

 <$kal_filter_coef_lib.__db2lin.jump_entry>
0x0016EF        F10011F0                 pushm <r2, r3, r4, r5, r6, r10>;
0x0016F0        F3010000                 push I0;
0x0016F1        510062BB                 I0 = Null + 25275;
0x0016F2        0062000F                 r4 = r0 + Null;
0x0016F3        0073000F                 r5 = r1 + Null;
0x0016F4        03004100                 Null = Null + Null, r2 = M[I0,1];
0x0016F5        03005300                 Null = Null + Null, r3 = M[I0,-1];
0x0016F6        E1F0071F                 call $kal_float_lib.div;
0x0016F7        0042000F                 r2 = r0 + Null;
0x0016F8        0053000F                 r3 = r1 + Null;
0x0016F9        E1F006CB                 call $kal_float_lib.float_to_int;
0x0016FA        0082000F                 r6 = r0 + Null;
0x0016FB        E1F006C3                 call $kal_float_lib.int_to_float;
0x0016FC        03004100                 Null = Null + Null, r2 = M[I0,1];
0x0016FD        03005100                 Null = Null + Null, r3 = M[I0,1];
0x0016FE        E1F006E5                 call $kal_float_lib.mul;
0x0016FF        0042000F                 r2 = r0 + Null;
0x001700        0053000F                 r3 = r1 + Null;
0x001701        0026000F                 r0 = r4 + Null;
0x001702        0037000F                 r1 = r5 + Null;
0x001703        E1F006D7                 call $kal_float_lib.sub;
0x001704        0062000F                 r4 = r0 + Null;
0x001705        0073000F                 r5 = r1 + Null;
0x001706        03002100                 Null = Null + Null, r0 = M[I0,1];
0x001707        03003100                 Null = Null + Null, r1 = M[I0,1];
0x001708        01C00003                 r10 = Null + 3;
0x001709        E5F00007                 do $kal_filter_coef_lib.__db2lin.power_series_loop;
0x00170A        0046000F                 r2 = r4 + Null;
0x00170B        0057000F                 r3 = r5 + Null;
0x00170C        E1F006D7                 call $kal_float_lib.mul;
0x00170D        03004100                 Null = Null + Null, r2 = M[I0,1];
0x00170E        03005100                 Null = Null + Null, r3 = M[I0,1];
0x00170F        E1F006C2                 call $kal_float_lib.add;

 <$kal_filter_coef_lib.__db2lin.power_series_loop>
0x001710        03280000                 r0 = r0 + r6;
0x001711        F3050000                 pop I0;
0x001712        F10411F0                 popm <r2, r3, r4, r5, r6, r10>;
0x001713        F3D40000                 pop rLink;
0x001714        DC0D000F                 rts;

 <$kal_filter_coef_lib.__scale_coefficients>
0x001715        F1002001                 pushm <FP(=SP), rLink>;
0x001716        012000FF                 r0 = Null + 255;
0x001717        F1387FF6                 r1 = M[FP + -0xa];
0x001718        83320000                 r1 = r1 AND r0;
0x001719        F1487FF8                 r2 = M[FP + -0x8];
0x00171A        83420000                 r2 = r2 AND r0;
0x00171B        E434006F                 r1 = MAX r2;
0x00171C        F1487FFA                 r2 = M[FP + -0x6];
0x00171D        83420000                 r2 = r2 AND r0;
0x00171E        E434006F                 r1 = MAX r2;
0x00171F        F1487FFC                 r2 = M[FP + -0x4];
0x001720        83420000                 r2 = r2 AND r0;
0x001721        E434006F                 r1 = MAX r2;
0x001722        F1487FFE                 r2 = M[FP + -0x2];
0x001723        83420000                 r2 = r2 AND r0;
0x001724        E434006F                 r1 = MAX r2;
0x001725        2143007F                 r2 = r1 - 127;
0x001726        F1287FF6                 r0 = M[FP + -0xa];
0x001727        F1387FF7                 r1 = M[FP + -0x9];
0x001728        23240000                 r0 = r0 - r2;
0x001729        E1F006A0                 call $kal_float_lib.float_to_frac;
0x00172A        F12C7FF0                 M[FP + -0x10] = r0;
0x00172B        F1287FF8                 r0 = M[FP + -0x8];
0x00172C        F1387FF9                 r1 = M[FP + -0x7];
0x00172D        23240000                 r0 = r0 - r2;
0x00172E        E1F0069B                 call $kal_float_lib.float_to_frac;
0x00172F        F12C7FF1                 M[FP + -0xf] = r0;
0x001730        F1287FFA                 r0 = M[FP + -0x6];
0x001731        F1387FFB                 r1 = M[FP + -0x5];
0x001732        23240000                 r0 = r0 - r2;
0x001733        E1F00696                 call $kal_float_lib.float_to_frac;
0x001734        F12C7FF2                 M[FP + -0xe] = r0;
0x001735        F1287FFC                 r0 = M[FP + -0x4];
0x001736        F1387FFD                 r1 = M[FP + -0x3];
0x001737        23240000                 r0 = r0 - r2;
0x001738        E1F00691                 call $kal_float_lib.float_to_frac;
0x001739        F12C7FF3                 M[FP + -0xd] = r0;
0x00173A        F1287FFE                 r0 = M[FP + -0x2];
0x00173B        F1387FFF                 r1 = M[FP + -0x1];
0x00173C        23240000                 r0 = r0 - r2;
0x00173D        E1F0068C                 call $kal_float_lib.float_to_frac;
0x00173E        F12C7FF4                 M[FP + -0xc] = r0;
0x00173F        F14C7FF5                 M[FP + -0xb] = r2;
0x001740        F1042001                 popm <FP, rLink>;
0x001741        F103FFF6                 SP = SP + -10;
0x001742        DC0D000F                 rts;

 <$kal_filter_coef_lib.calc_bypass>
0x001743        F1002005                 pushm <FP(=SP), r0, rLink>;
0x001744        E420002F                 r0 = Null + 1;
0x001745        F12C7FFA                 M[FP + -0x6] = r0;
0x001746        01200000                 r0 = Null + 0;
0x001747        F12C7FFC                 M[FP + -0x4] = r0;
0x001748        F12C7FFB                 M[FP + -0x5] = r0;
0x001749        F12C7FFF                 M[FP + -0x1] = r0;
0x00174A        F12C7FFE                 M[FP + -0x2] = r0;
0x00174B        FD000040 01200000        r0 = Null + 4194304;
0x00174D        F12C7FFD                 M[FP + -0x3] = r0;
0x00174E        F1042005                 popm <FP, r0, rLink>;
0x00174F        DC0D000F                 rts;

 <$kal_filter_coef_lib.calc_low_pass_1st>
0x001750        F10023FD                 pushm <FP(=SP), r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x001751        F1287FFC                 r0 = M[FP + -0x4];
0x001752        F1387FFD                 r1 = M[FP + -0x3];
0x001753        F1487FFE                 r2 = M[FP + -0x2];
0x001754        F1587FFF                 r3 = M[FP + -0x1];
0x001755        E1F0FF79                 call $kal_filter_coef_lib.__warp;
0x001756        0062000F                 r4 = r0 + Null;
0x001757        0073000F                 r5 = r1 + Null;
0x001758        01400080                 r2 = Null + 128;
0x001759        FD000080 01500000        r3 = Null + -8388608;
0x00175B        E1F00676                 call $kal_float_lib.add;
0x00175C        E1F0069C                 call $kal_float_lib.recip;
0x00175D        0082000F                 r6 = r0 + Null;
0x00175E        0093000F                 r7 = r1 + Null;
0x00175F        0046000F                 r2 = r4 + Null;
0x001760        0057000F                 r3 = r5 + Null;
0x001761        E1F00682                 call $kal_float_lib.mul;
0x001762        F1030006                 SP = SP + 6;
0x001763        F100000C                 pushm <r0, r1>;
0x001764        F100000C                 pushm <r0, r1>;
0x001765        01200000                 r0 = Null + 0;
0x001766        01300000                 r1 = Null + 0;
0x001767        F100000C                 pushm <r0, r1>;
0x001768        0026000F                 r0 = r4 + Null;
0x001769        0037000F                 r1 = r5 + Null;
0x00176A        01400080                 r2 = Null + 128;
0x00176B        FD000080 01500000        r3 = Null + -8388608;
0x00176D        E1F0066D                 call $kal_float_lib.sub;
0x00176E        0048000F                 r2 = r6 + Null;
0x00176F        0059000F                 r3 = r7 + Null;
0x001770        E1F00673                 call $kal_float_lib.mul;
0x001771        F100000C                 pushm <r0, r1>;
0x001772        01200000                 r0 = Null + 0;
0x001773        01300000                 r1 = Null + 0;
0x001774        F100000C                 pushm <r0, r1>;
0x001775        E1F0FFA0                 call $kal_filter_coef_lib.__scale_coefficients;
0x001776        F3240000                 pop r0;
0x001777        F12C7FF6                 M[FP + -0xa] = r0;
0x001778        F3240000                 pop r0;
0x001779        F12C7FF8                 M[FP + -0x8] = r0;
0x00177A        F3240000                 pop r0;
0x00177B        F12C7FF7                 M[FP + -0x9] = r0;
0x00177C        F3240000                 pop r0;
0x00177D        F12C7FFB                 M[FP + -0x5] = r0;
0x00177E        F3240000                 pop r0;
0x00177F        F12C7FFA                 M[FP + -0x6] = r0;
0x001780        F3240000                 pop r0;
0x001781        F12C7FF9                 M[FP + -0x7] = r0;
0x001782        F10423FD                 popm <FP, r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x001783        F103FFFC                 SP = SP + -4;
0x001784        DC0D000F                 rts;

 <$kal_filter_coef_lib.calc_high_pass_1st>
0x001785        F10023FD                 pushm <FP(=SP), r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x001786        F1287FFC                 r0 = M[FP + -0x4];
0x001787        F1387FFD                 r1 = M[FP + -0x3];
0x001788        F1487FFE                 r2 = M[FP + -0x2];
0x001789        F1587FFF                 r3 = M[FP + -0x1];
0x00178A        E1F0FF44                 call $kal_filter_coef_lib.__warp;
0x00178B        0062000F                 r4 = r0 + Null;
0x00178C        0073000F                 r5 = r1 + Null;
0x00178D        01400080                 r2 = Null + 128;
0x00178E        FD000080 01500000        r3 = Null + -8388608;
0x001790        E1F00641                 call $kal_float_lib.add;
0x001791        E1F00667                 call $kal_float_lib.recip;
0x001792        0082000F                 r6 = r0 + Null;
0x001793        0093000F                 r7 = r1 + Null;
0x001794        F1030006                 SP = SP + 6;
0x001795        F100000C                 pushm <r0, r1>;
0x001796        FD000080 89220000        r0 = r0 XOR 0x800000;
0x001798        F100000C                 pushm <r0, r1>;
0x001799        01200000                 r0 = Null + 0;
0x00179A        01300000                 r1 = Null + 0;
0x00179B        F100000C                 pushm <r0, r1>;
0x00179C        0026000F                 r0 = r4 + Null;
0x00179D        0037000F                 r1 = r5 + Null;
0x00179E        01400080                 r2 = Null + 128;
0x00179F        FD000080 01500000        r3 = Null + -8388608;
0x0017A1        E1F00639                 call $kal_float_lib.sub;
0x0017A2        0048000F                 r2 = r6 + Null;
0x0017A3        0059000F                 r3 = r7 + Null;
0x0017A4        E1F0063F                 call $kal_float_lib.mul;
0x0017A5        F100000C                 pushm <r0, r1>;
0x0017A6        01200000                 r0 = Null + 0;
0x0017A7        01300000                 r1 = Null + 0;
0x0017A8        F100000C                 pushm <r0, r1>;
0x0017A9        E1F0FF6C                 call $kal_filter_coef_lib.__scale_coefficients;
0x0017AA        F3240000                 pop r0;
0x0017AB        F12C7FF6                 M[FP + -0xa] = r0;
0x0017AC        F3240000                 pop r0;
0x0017AD        F12C7FF8                 M[FP + -0x8] = r0;
0x0017AE        F3240000                 pop r0;
0x0017AF        F12C7FF7                 M[FP + -0x9] = r0;
0x0017B0        F3240000                 pop r0;
0x0017B1        F12C7FFB                 M[FP + -0x5] = r0;
0x0017B2        F3240000                 pop r0;
0x0017B3        F12C7FFA                 M[FP + -0x6] = r0;
0x0017B4        F3240000                 pop r0;
0x0017B5        F12C7FF9                 M[FP + -0x7] = r0;
0x0017B6        F10423FD                 popm <FP, r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x0017B7        F103FFFC                 SP = SP + -4;
0x0017B8        DC0D000F                 rts;

 <$kal_filter_coef_lib.calc_all_pass_1st>
0x0017B9        F10023FD                 pushm <FP(=SP), r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x0017BA        F1287FFC                 r0 = M[FP + -0x4];
0x0017BB        F1387FFD                 r1 = M[FP + -0x3];
0x0017BC        F1487FFE                 r2 = M[FP + -0x2];
0x0017BD        F1587FFF                 r3 = M[FP + -0x1];
0x0017BE        E1F0FF10                 call $kal_filter_coef_lib.__warp;
0x0017BF        0062000F                 r4 = r0 + Null;
0x0017C0        0073000F                 r5 = r1 + Null;
0x0017C1        01400080                 r2 = Null + 128;
0x0017C2        FD000080 01500000        r3 = Null + -8388608;
0x0017C4        E1F0060D                 call $kal_float_lib.add;
0x0017C5        E1F00633                 call $kal_float_lib.recip;
0x0017C6        0082000F                 r6 = r0 + Null;
0x0017C7        0093000F                 r7 = r1 + Null;
0x0017C8        F1030006                 SP = SP + 6;
0x0017C9        01200080                 r0 = Null + 128;
0x0017CA        FD000080 01300000        r1 = Null + -8388608;
0x0017CC        0046000F                 r2 = r4 + Null;
0x0017CD        0057000F                 r3 = r5 + Null;
0x0017CE        E1F0060C                 call $kal_float_lib.sub;
0x0017CF        0048000F                 r2 = r6 + Null;
0x0017D0        0059000F                 r3 = r7 + Null;
0x0017D1        E1F00612                 call $kal_float_lib.mul;
0x0017D2        F100000C                 pushm <r0, r1>;
0x0017D3        0042000F                 r2 = r0 + Null;
0x0017D4        0053000F                 r3 = r1 + Null;
0x0017D5        01200080                 r0 = Null + 128;
0x0017D6        FD000080 01300000        r1 = Null + -8388608;
0x0017D8        FD000080 89220000        r0 = r0 XOR 0x800000;
0x0017DA        F100000C                 pushm <r0, r1>;
0x0017DB        01200000                 r0 = Null + 0;
0x0017DC        01300000                 r1 = Null + 0;
0x0017DD        F100000C                 pushm <r0, r1>;
0x0017DE        0024000F                 r0 = r2 + Null;
0x0017DF        0035000F                 r1 = r3 + Null;
0x0017E0        FD000080 89220000        r0 = r0 XOR 0x800000;
0x0017E2        F100000C                 pushm <r0, r1>;
0x0017E3        01200000                 r0 = Null + 0;
0x0017E4        01300000                 r1 = Null + 0;
0x0017E5        F100000C                 pushm <r0, r1>;
0x0017E6        E1F0FF2F                 call $kal_filter_coef_lib.__scale_coefficients;
0x0017E7        F3240000                 pop r0;
0x0017E8        F12C7FF6                 M[FP + -0xa] = r0;
0x0017E9        F3240000                 pop r0;
0x0017EA        F12C7FF8                 M[FP + -0x8] = r0;
0x0017EB        F3240000                 pop r0;
0x0017EC        F12C7FF7                 M[FP + -0x9] = r0;
0x0017ED        F3240000                 pop r0;
0x0017EE        F12C7FFB                 M[FP + -0x5] = r0;
0x0017EF        F3240000                 pop r0;
0x0017F0        F12C7FFA                 M[FP + -0x6] = r0;
0x0017F1        F3240000                 pop r0;
0x0017F2        F12C7FF9                 M[FP + -0x7] = r0;
0x0017F3        F10423FD                 popm <FP, r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x0017F4        F103FFFC                 SP = SP + -4;
0x0017F5        DC0D000F                 rts;

 <$kal_filter_coef_lib.calc_shelf_1st>
0x0017F6        F10023FD                 pushm <FP(=SP), r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x0017F7        F1030004                 SP = SP + 4;
0x0017F8        F1287FF8                 r0 = M[FP + -0x8];
0x0017F9        F1387FF9                 r1 = M[FP + -0x7];
0x0017FA        F1487FFE                 r2 = M[FP + -0x2];
0x0017FB        F1587FFF                 r3 = M[FP + -0x1];
0x0017FC        E1F0FED2                 call $kal_filter_coef_lib.__warp;
0x0017FD        0062000F                 r4 = r0 + Null;
0x0017FE        0073000F                 r5 = r1 + Null;
0x0017FF        F1287FFC                 r0 = M[FP + -0x4];
0x001800        F1387FFD                 r1 = M[FP + -0x3];
0x001801        E1F0FEED                 call $kal_filter_coef_lib.__db2lin;
0x001802        F12C000C                 M[FP + 0xc] = r0;
0x001803        F13C000D                 M[FP + 0xd] = r1;
0x001804        F1287FFA                 r0 = M[FP + -0x6];
0x001805        F1387FFB                 r1 = M[FP + -0x5];
0x001806        E422003F                 r0 = r0 - 1;
0x001807        E1F0FEE7                 call $kal_filter_coef_lib.__db2lin;
0x001808        0042000F                 r2 = r0 + Null;
0x001809        0053000F                 r3 = r1 + Null;
0x00180A        0026000F                 r0 = r4 + Null;
0x00180B        0037000F                 r1 = r5 + Null;
0x00180C        E1F00609                 call $kal_float_lib.div;
0x00180D        0082000F                 r6 = r0 + Null;
0x00180E        0093000F                 r7 = r1 + Null;
0x00180F        0026000F                 r0 = r4 + Null;
0x001810        0037000F                 r1 = r5 + Null;
0x001811        E1F005D2                 call $kal_float_lib.mul;
0x001812        0062000F                 r4 = r0 + Null;
0x001813        0073000F                 r5 = r1 + Null;
0x001814        0028000F                 r0 = r6 + Null;
0x001815        0039000F                 r1 = r7 + Null;
0x001816        01400080                 r2 = Null + 128;
0x001817        FD000080 01500000        r3 = Null + -8388608;
0x001819        E1F005B8                 call $kal_float_lib.add;
0x00181A        E1F005DE                 call $kal_float_lib.recip;
0x00181B        F12C000A                 M[FP + 0xa] = r0;
0x00181C        F13C000B                 M[FP + 0xb] = r1;
0x00181D        F1030006                 SP = SP + 6;
0x00181E        0026000F                 r0 = r4 + Null;
0x00181F        0037000F                 r1 = r5 + Null;
0x001820        01400080                 r2 = Null + 128;
0x001821        FD000080 01500000        r3 = Null + -8388608;
0x001823        E1F005AE                 call $kal_float_lib.add;
0x001824        F148000A                 r2 = M[FP + 0xa];
0x001825        F158000B                 r3 = M[FP + 0xb];
0x001826        E1F005BD                 call $kal_float_lib.mul;
0x001827        F148000C                 r2 = M[FP + 0xc];
0x001828        F158000D                 r3 = M[FP + 0xd];
0x001829        E1F005BA                 call $kal_float_lib.mul;
0x00182A        F100000C                 pushm <r0, r1>;
0x00182B        0026000F                 r0 = r4 + Null;
0x00182C        0037000F                 r1 = r5 + Null;
0x00182D        01400080                 r2 = Null + 128;
0x00182E        FD000080 01500000        r3 = Null + -8388608;
0x001830        E1F005AA                 call $kal_float_lib.sub;
0x001831        F148000A                 r2 = M[FP + 0xa];
0x001832        F158000B                 r3 = M[FP + 0xb];
0x001833        E1F005B0                 call $kal_float_lib.mul;
0x001834        F148000C                 r2 = M[FP + 0xc];
0x001835        F158000D                 r3 = M[FP + 0xd];
0x001836        E1F005AD                 call $kal_float_lib.mul;
0x001837        F100000C                 pushm <r0, r1>;
0x001838        01200000                 r0 = Null + 0;
0x001839        01300000                 r1 = Null + 0;
0x00183A        F100000C                 pushm <r0, r1>;
0x00183B        0028000F                 r0 = r6 + Null;
0x00183C        0039000F                 r1 = r7 + Null;
0x00183D        01400080                 r2 = Null + 128;
0x00183E        FD000080 01500000        r3 = Null + -8388608;
0x001840        E1F0059A                 call $kal_float_lib.sub;
0x001841        F148000A                 r2 = M[FP + 0xa];
0x001842        F158000B                 r3 = M[FP + 0xb];
0x001843        E1F005A0                 call $kal_float_lib.mul;
0x001844        F100000C                 pushm <r0, r1>;
0x001845        01200000                 r0 = Null + 0;
0x001846        01300000                 r1 = Null + 0;
0x001847        F100000C                 pushm <r0, r1>;
0x001848        E1F0FECD                 call $kal_filter_coef_lib.__scale_coefficients;
0x001849        F3240000                 pop r0;
0x00184A        F12C7FF7                 M[FP + -0x9] = r0;
0x00184B        F3240000                 pop r0;
0x00184C        F12C7FF6                 M[FP + -0xa] = r0;
0x00184D        F3240000                 pop r0;
0x00184E        F12C7FF5                 M[FP + -0xb] = r0;
0x00184F        F3240000                 pop r0;
0x001850        F12C7FF4                 M[FP + -0xc] = r0;
0x001851        F3240000                 pop r0;
0x001852        F12C7FF3                 M[FP + -0xd] = r0;
0x001853        F3240000                 pop r0;
0x001854        F12C7FF2                 M[FP + -0xe] = r0;
0x001855        F103FFFC                 SP = SP + -4;
0x001856        F10423FD                 popm <FP, r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x001857        F103FFF8                 SP = SP + -8;
0x001858        DC0D000F                 rts;

 <$kal_filter_coef_lib.calc_low_shelf_1st>
0x001859        F100200D                 pushm <FP(=SP), r0, r1, rLink>;
0x00185A        F1030006                 SP = SP + 6;
0x00185B        F1287FFA                 r0 = M[FP + -0x6];
0x00185C        F1387FFB                 r1 = M[FP + -0x5];
0x00185D        F100000C                 pushm <r0, r1>;
0x00185E        F1287FFC                 r0 = M[FP + -0x4];
0x00185F        F1387FFD                 r1 = M[FP + -0x3];
0x001860        F100000C                 pushm <r0, r1>;
0x001861        01200000                 r0 = Null + 0;
0x001862        01300000                 r1 = Null + 0;
0x001863        F100000C                 pushm <r0, r1>;
0x001864        F1287FFE                 r0 = M[FP + -0x2];
0x001865        F1387FFF                 r1 = M[FP + -0x1];
0x001866        F100000C                 pushm <r0, r1>;
0x001867        E1F0FF8F                 call $kal_filter_coef_lib.calc_shelf_1st;
0x001868        F3240000                 pop r0;
0x001869        F12C7FF4                 M[FP + -0xc] = r0;
0x00186A        F3240000                 pop r0;
0x00186B        F12C7FF6                 M[FP + -0xa] = r0;
0x00186C        F3240000                 pop r0;
0x00186D        F12C7FF5                 M[FP + -0xb] = r0;
0x00186E        F3240000                 pop r0;
0x00186F        F12C7FF9                 M[FP + -0x7] = r0;
0x001870        F3240000                 pop r0;
0x001871        F12C7FF8                 M[FP + -0x8] = r0;
0x001872        F3240000                 pop r0;
0x001873        F12C7FF7                 M[FP + -0x9] = r0;
0x001874        F104200D                 popm <FP, r0, r1, rLink>;
0x001875        F103FFFA                 SP = SP + -6;
0x001876        DC0D000F                 rts;

 <$kal_filter_coef_lib.calc_high_shelf_1st>
0x001877        F100200D                 pushm <FP(=SP), r0, r1, rLink>;
0x001878        F1030006                 SP = SP + 6;
0x001879        F1287FFA                 r0 = M[FP + -0x6];
0x00187A        F1387FFB                 r1 = M[FP + -0x5];
0x00187B        F100000C                 pushm <r0, r1>;
0x00187C        F1287FFC                 r0 = M[FP + -0x4];
0x00187D        FD000080 89220000        r0 = r0 XOR 0x800000;
0x00187F        F1387FFD                 r1 = M[FP + -0x3];
0x001880        F100000C                 pushm <r0, r1>;
0x001881        FD000080 89220000        r0 = r0 XOR 0x800000;
0x001883        F100000C                 pushm <r0, r1>;
0x001884        F1287FFE                 r0 = M[FP + -0x2];
0x001885        F1387FFF                 r1 = M[FP + -0x1];
0x001886        F100000C                 pushm <r0, r1>;
0x001887        E1F0FF6F                 call $kal_filter_coef_lib.calc_shelf_1st;
0x001888        F3240000                 pop r0;
0x001889        F12C7FF4                 M[FP + -0xc] = r0;
0x00188A        F3240000                 pop r0;
0x00188B        F12C7FF6                 M[FP + -0xa] = r0;
0x00188C        F3240000                 pop r0;
0x00188D        F12C7FF5                 M[FP + -0xb] = r0;
0x00188E        F3240000                 pop r0;
0x00188F        F12C7FF9                 M[FP + -0x7] = r0;
0x001890        F3240000                 pop r0;
0x001891        F12C7FF8                 M[FP + -0x8] = r0;
0x001892        F3240000                 pop r0;
0x001893        F12C7FF7                 M[FP + -0x9] = r0;
0x001894        F104200D                 popm <FP, r0, r1, rLink>;
0x001895        F103FFFA                 SP = SP + -6;
0x001896        DC0D000F                 rts;

 <$kal_filter_coef_lib.calc_tilt_1st>
0x001897        F100200D                 pushm <FP(=SP), r0, r1, rLink>;
0x001898        F1030006                 SP = SP + 6;
0x001899        F1287FFA                 r0 = M[FP + -0x6];
0x00189A        F1387FFB                 r1 = M[FP + -0x5];
0x00189B        F100000C                 pushm <r0, r1>;
0x00189C        F1287FFC                 r0 = M[FP + -0x4];
0x00189D        FD000080 89220000        r0 = r0 XOR 0x800000;
0x00189F        F1387FFD                 r1 = M[FP + -0x3];
0x0018A0        F100000C                 pushm <r0, r1>;
0x0018A1        FD000080 89220000        r0 = r0 XOR 0x800000;
0x0018A3        E422003F                 r0 = r0 - 1;
0x0018A4        F100000C                 pushm <r0, r1>;
0x0018A5        F1287FFE                 r0 = M[FP + -0x2];
0x0018A6        F1387FFF                 r1 = M[FP + -0x1];
0x0018A7        F100000C                 pushm <r0, r1>;
0x0018A8        E1F0FF4E                 call $kal_filter_coef_lib.calc_shelf_1st;
0x0018A9        F3240000                 pop r0;
0x0018AA        F12C7FF4                 M[FP + -0xc] = r0;
0x0018AB        F3240000                 pop r0;
0x0018AC        F12C7FF6                 M[FP + -0xa] = r0;
0x0018AD        F3240000                 pop r0;
0x0018AE        F12C7FF5                 M[FP + -0xb] = r0;
0x0018AF        F3240000                 pop r0;
0x0018B0        F12C7FF9                 M[FP + -0x7] = r0;
0x0018B1        F3240000                 pop r0;
0x0018B2        F12C7FF8                 M[FP + -0x8] = r0;
0x0018B3        F3240000                 pop r0;
0x0018B4        F12C7FF7                 M[FP + -0x9] = r0;
0x0018B5        F104200D                 popm <FP, r0, r1, rLink>;
0x0018B6        F103FFFA                 SP = SP + -6;
0x0018B7        DC0D000F                 rts;

 <$kal_filter_coef_lib.calc_low_pass_2nd>
0x0018B8        F10023FD                 pushm <FP(=SP), r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x0018B9        F1030002                 SP = SP + 2;
0x0018BA        F1287FFA                 r0 = M[FP + -0x6];
0x0018BB        F1387FFB                 r1 = M[FP + -0x5];
0x0018BC        F1487FFE                 r2 = M[FP + -0x2];
0x0018BD        F1587FFF                 r3 = M[FP + -0x1];
0x0018BE        E1F0FE10                 call $kal_filter_coef_lib.__warp;
0x0018BF        0042000F                 r2 = r0 + Null;
0x0018C0        0053000F                 r3 = r1 + Null;
0x0018C1        E1F00522                 call $kal_float_lib.mul;
0x0018C2        0082000F                 r6 = r0 + Null;
0x0018C3        0093000F                 r7 = r1 + Null;
0x0018C4        0024000F                 r0 = r2 + Null;
0x0018C5        0035000F                 r1 = r3 + Null;
0x0018C6        F1487FFC                 r2 = M[FP + -0x4];
0x0018C7        F1587FFD                 r3 = M[FP + -0x3];
0x0018C8        E1F0054D                 call $kal_float_lib.div;
0x0018C9        0062000F                 r4 = r0 + Null;
0x0018CA        0073000F                 r5 = r1 + Null;
0x0018CB        0048000F                 r2 = r6 + Null;
0x0018CC        0059000F                 r3 = r7 + Null;
0x0018CD        E1F00504                 call $kal_float_lib.add;
0x0018CE        01400080                 r2 = Null + 128;
0x0018CF        FD000080 01500000        r3 = Null + -8388608;
0x0018D1        E1F00500                 call $kal_float_lib.add;
0x0018D2        E1F00526                 call $kal_float_lib.recip;
0x0018D3        F12C000A                 M[FP + 0xa] = r0;
0x0018D4        F13C000B                 M[FP + 0xb] = r1;
0x0018D5        F1030006                 SP = SP + 6;
0x0018D6        0028000F                 r0 = r6 + Null;
0x0018D7        0039000F                 r1 = r7 + Null;
0x0018D8        F148000A                 r2 = M[FP + 0xa];
0x0018D9        F158000B                 r3 = M[FP + 0xb];
0x0018DA        E1F00509                 call $kal_float_lib.mul;
0x0018DB        F100000C                 pushm <r0, r1>;
0x0018DC        E422002F                 r0 = r0 + 1;
0x0018DD        F100000C                 pushm <r0, r1>;
0x0018DE        E422003F                 r0 = r0 - 1;
0x0018DF        F100000C                 pushm <r0, r1>;
0x0018E0        0028000F                 r0 = r6 + Null;
0x0018E1        0039000F                 r1 = r7 + Null;
0x0018E2        01400081                 r2 = Null + 129;
0x0018E3        FD000080 01500000        r3 = Null + -8388608;
0x0018E5        E1F004FE                 call $kal_float_lib.mul;
0x0018E6        E1F004F4                 call $kal_float_lib.sub;
0x0018E7        F148000A                 r2 = M[FP + 0xa];
0x0018E8        F158000B                 r3 = M[FP + 0xb];
0x0018E9        E1F004FA                 call $kal_float_lib.mul;
0x0018EA        F100000C                 pushm <r0, r1>;
0x0018EB        0028000F                 r0 = r6 + Null;
0x0018EC        0039000F                 r1 = r7 + Null;
0x0018ED        0046000F                 r2 = r4 + Null;
0x0018EE        0057000F                 r3 = r5 + Null;
0x0018EF        E1F004EB                 call $kal_float_lib.sub;
0x0018F0        01400080                 r2 = Null + 128;
0x0018F1        FD000080 01500000        r3 = Null + -8388608;
0x0018F3        E1F004DE                 call $kal_float_lib.add;
0x0018F4        F148000A                 r2 = M[FP + 0xa];
0x0018F5        F158000B                 r3 = M[FP + 0xb];
0x0018F6        E1F004ED                 call $kal_float_lib.mul;
0x0018F7        F100000C                 pushm <r0, r1>;
0x0018F8        E1F0FE1D                 call $kal_filter_coef_lib.__scale_coefficients;
0x0018F9        F3240000                 pop r0;
0x0018FA        F12C7FF4                 M[FP + -0xc] = r0;
0x0018FB        F3240000                 pop r0;
0x0018FC        F12C7FF6                 M[FP + -0xa] = r0;
0x0018FD        F3240000                 pop r0;
0x0018FE        F12C7FF5                 M[FP + -0xb] = r0;
0x0018FF        F3240000                 pop r0;
0x001900        F12C7FF9                 M[FP + -0x7] = r0;
0x001901        F3240000                 pop r0;
0x001902        F12C7FF8                 M[FP + -0x8] = r0;
0x001903        F3240000                 pop r0;
0x001904        F12C7FF7                 M[FP + -0x9] = r0;
0x001905        F103FFFE                 SP = SP + -2;
0x001906        F10423FD                 popm <FP, r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x001907        F103FFFA                 SP = SP + -6;
0x001908        DC0D000F                 rts;

 <$kal_filter_coef_lib.calc_high_pass_2nd>
0x001909        F10023FD                 pushm <FP(=SP), r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x00190A        F1030002                 SP = SP + 2;
0x00190B        F1287FFA                 r0 = M[FP + -0x6];
0x00190C        F1387FFB                 r1 = M[FP + -0x5];
0x00190D        F1487FFE                 r2 = M[FP + -0x2];
0x00190E        F1587FFF                 r3 = M[FP + -0x1];
0x00190F        E1F0FDBF                 call $kal_filter_coef_lib.__warp;
0x001910        0042000F                 r2 = r0 + Null;
0x001911        0053000F                 r3 = r1 + Null;
0x001912        E1F004D1                 call $kal_float_lib.mul;
0x001913        0082000F                 r6 = r0 + Null;
0x001914        0093000F                 r7 = r1 + Null;
0x001915        0024000F                 r0 = r2 + Null;
0x001916        0035000F                 r1 = r3 + Null;
0x001917        F1487FFC                 r2 = M[FP + -0x4];
0x001918        F1587FFD                 r3 = M[FP + -0x3];
0x001919        E1F004FC                 call $kal_float_lib.div;
0x00191A        0062000F                 r4 = r0 + Null;
0x00191B        0073000F                 r5 = r1 + Null;
0x00191C        0048000F                 r2 = r6 + Null;
0x00191D        0059000F                 r3 = r7 + Null;
0x00191E        E1F004B3                 call $kal_float_lib.add;
0x00191F        01400080                 r2 = Null + 128;
0x001920        FD000080 01500000        r3 = Null + -8388608;
0x001922        E1F004AF                 call $kal_float_lib.add;
0x001923        E1F004D5                 call $kal_float_lib.recip;
0x001924        F12C000A                 M[FP + 0xa] = r0;
0x001925        F13C000B                 M[FP + 0xb] = r1;
0x001926        F1030006                 SP = SP + 6;
0x001927        F100000C                 pushm <r0, r1>;
0x001928        FD000080 89220000        r0 = r0 XOR 0x800000;
0x00192A        E422002F                 r0 = r0 + 1;
0x00192B        F100000C                 pushm <r0, r1>;
0x00192C        FD000080 89220000        r0 = r0 XOR 0x800000;
0x00192E        E422003F                 r0 = r0 - 1;
0x00192F        F100000C                 pushm <r0, r1>;
0x001930        0028000F                 r0 = r6 + Null;
0x001931        0039000F                 r1 = r7 + Null;
0x001932        01400081                 r2 = Null + 129;
0x001933        FD000080 01500000        r3 = Null + -8388608;
0x001935        E1F004AE                 call $kal_float_lib.mul;
0x001936        E1F004A4                 call $kal_float_lib.sub;
0x001937        F148000A                 r2 = M[FP + 0xa];
0x001938        F158000B                 r3 = M[FP + 0xb];
0x001939        E1F004AA                 call $kal_float_lib.mul;
0x00193A        F100000C                 pushm <r0, r1>;
0x00193B        0028000F                 r0 = r6 + Null;
0x00193C        0039000F                 r1 = r7 + Null;
0x00193D        0046000F                 r2 = r4 + Null;
0x00193E        0057000F                 r3 = r5 + Null;
0x00193F        E1F0049B                 call $kal_float_lib.sub;
0x001940        01400080                 r2 = Null + 128;
0x001941        FD000080 01500000        r3 = Null + -8388608;
0x001943        E1F0048E                 call $kal_float_lib.add;
0x001944        F148000A                 r2 = M[FP + 0xa];
0x001945        F158000B                 r3 = M[FP + 0xb];
0x001946        E1F0049D                 call $kal_float_lib.mul;
0x001947        F100000C                 pushm <r0, r1>;
0x001948        E1F0FDCD                 call $kal_filter_coef_lib.__scale_coefficients;
0x001949        F3240000                 pop r0;
0x00194A        F12C7FF4                 M[FP + -0xc] = r0;
0x00194B        F3240000                 pop r0;
0x00194C        F12C7FF6                 M[FP + -0xa] = r0;
0x00194D        F3240000                 pop r0;
0x00194E        F12C7FF5                 M[FP + -0xb] = r0;
0x00194F        F3240000                 pop r0;
0x001950        F12C7FF9                 M[FP + -0x7] = r0;
0x001951        F3240000                 pop r0;
0x001952        F12C7FF8                 M[FP + -0x8] = r0;
0x001953        F3240000                 pop r0;
0x001954        F12C7FF7                 M[FP + -0x9] = r0;
0x001955        F103FFFE                 SP = SP + -2;
0x001956        F10423FD                 popm <FP, r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x001957        F103FFFA                 SP = SP + -6;
0x001958        DC0D000F                 rts;

 <$kal_filter_coef_lib.calc_all_pass_2nd>
0x001959        F10023FD                 pushm <FP(=SP), r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x00195A        F1030002                 SP = SP + 2;
0x00195B        F1287FFA                 r0 = M[FP + -0x6];
0x00195C        F1387FFB                 r1 = M[FP + -0x5];
0x00195D        F1487FFE                 r2 = M[FP + -0x2];
0x00195E        F1587FFF                 r3 = M[FP + -0x1];
0x00195F        E1F0FD6F                 call $kal_filter_coef_lib.__warp;
0x001960        0042000F                 r2 = r0 + Null;
0x001961        0053000F                 r3 = r1 + Null;
0x001962        E1F00481                 call $kal_float_lib.mul;
0x001963        0082000F                 r6 = r0 + Null;
0x001964        0093000F                 r7 = r1 + Null;
0x001965        0024000F                 r0 = r2 + Null;
0x001966        0035000F                 r1 = r3 + Null;
0x001967        F1487FFC                 r2 = M[FP + -0x4];
0x001968        F1587FFD                 r3 = M[FP + -0x3];
0x001969        E1F004AC                 call $kal_float_lib.div;
0x00196A        0062000F                 r4 = r0 + Null;
0x00196B        0073000F                 r5 = r1 + Null;
0x00196C        0048000F                 r2 = r6 + Null;
0x00196D        0059000F                 r3 = r7 + Null;
0x00196E        E1F00463                 call $kal_float_lib.add;
0x00196F        01400080                 r2 = Null + 128;
0x001970        FD000080 01500000        r3 = Null + -8388608;
0x001972        E1F0045F                 call $kal_float_lib.add;
0x001973        E1F00485                 call $kal_float_lib.recip;
0x001974        F12C000A                 M[FP + 0xa] = r0;
0x001975        F13C000B                 M[FP + 0xb] = r1;
0x001976        F1030006                 SP = SP + 6;
0x001977        0028000F                 r0 = r6 + Null;
0x001978        0039000F                 r1 = r7 + Null;
0x001979        0046000F                 r2 = r4 + Null;
0x00197A        0057000F                 r3 = r5 + Null;
0x00197B        E1F0045F                 call $kal_float_lib.sub;
0x00197C        01400080                 r2 = Null + 128;
0x00197D        FD000080 01500000        r3 = Null + -8388608;
0x00197F        E1F00452                 call $kal_float_lib.add;
0x001980        F148000A                 r2 = M[FP + 0xa];
0x001981        F158000B                 r3 = M[FP + 0xb];
0x001982        E1F00461                 call $kal_float_lib.mul;
0x001983        F100000C                 pushm <r0, r1>;
0x001984        0062000F                 r4 = r0 + Null;
0x001985        0073000F                 r5 = r1 + Null;
0x001986        0028000F                 r0 = r6 + Null;
0x001987        0039000F                 r1 = r7 + Null;
0x001988        01400081                 r2 = Null + 129;
0x001989        FD000080 01500000        r3 = Null + -8388608;
0x00198B        E1F00458                 call $kal_float_lib.mul;
0x00198C        E1F0044E                 call $kal_float_lib.sub;
0x00198D        F148000A                 r2 = M[FP + 0xa];
0x00198E        F158000B                 r3 = M[FP + 0xb];
0x00198F        E1F00454                 call $kal_float_lib.mul;
0x001990        F100000C                 pushm <r0, r1>;
0x001991        0082000F                 r6 = r0 + Null;
0x001992        0093000F                 r7 = r1 + Null;
0x001993        01200080                 r0 = Null + 128;
0x001994        FD000080 01300000        r1 = Null + -8388608;
0x001996        F100000C                 pushm <r0, r1>;
0x001997        F1000300                 pushm <r6, r7>;
0x001998        F10000C0                 pushm <r4, r5>;
0x001999        E1F0FD7C                 call $kal_filter_coef_lib.__scale_coefficients;
0x00199A        F3240000                 pop r0;
0x00199B        F12C7FF4                 M[FP + -0xc] = r0;
0x00199C        F3240000                 pop r0;
0x00199D        F12C7FF6                 M[FP + -0xa] = r0;
0x00199E        F3240000                 pop r0;
0x00199F        F12C7FF5                 M[FP + -0xb] = r0;
0x0019A0        F3240000                 pop r0;
0x0019A1        F12C7FF9                 M[FP + -0x7] = r0;
0x0019A2        F3240000                 pop r0;
0x0019A3        F12C7FF8                 M[FP + -0x8] = r0;
0x0019A4        F3240000                 pop r0;
0x0019A5        F12C7FF7                 M[FP + -0x9] = r0;
0x0019A6        F103FFFE                 SP = SP + -2;
0x0019A7        F10423FD                 popm <FP, r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x0019A8        F103FFFA                 SP = SP + -6;
0x0019A9        DC0D000F                 rts;

 <$kal_filter_coef_lib.calc_shelf_2nd>
0x0019AA        F10023FD                 pushm <FP(=SP), r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x0019AB        F1030008                 SP = SP + 8;
0x0019AC        F1287FF6                 r0 = M[FP + -0xa];
0x0019AD        F1387FF7                 r1 = M[FP + -0x9];
0x0019AE        F1487FFE                 r2 = M[FP + -0x2];
0x0019AF        F1587FFF                 r3 = M[FP + -0x1];
0x0019B0        E1F0FD1E                 call $kal_filter_coef_lib.__warp;
0x0019B1        0062000F                 r4 = r0 + Null;
0x0019B2        0073000F                 r5 = r1 + Null;
0x0019B3        F1287FFC                 r0 = M[FP + -0x4];
0x0019B4        F1387FFD                 r1 = M[FP + -0x3];
0x0019B5        E1F0FD39                 call $kal_filter_coef_lib.__db2lin;
0x0019B6        F12C000C                 M[FP + 0xc] = r0;
0x0019B7        F13C000D                 M[FP + 0xd] = r1;
0x0019B8        F1287FF8                 r0 = M[FP + -0x8];
0x0019B9        F1387FF9                 r1 = M[FP + -0x7];
0x0019BA        21220002                 r0 = r0 - 2;
0x0019BB        E1F0FD33                 call $kal_filter_coef_lib.__db2lin;
0x0019BC        0042000F                 r2 = r0 + Null;
0x0019BD        0053000F                 r3 = r1 + Null;
0x0019BE        0026000F                 r0 = r4 + Null;
0x0019BF        0037000F                 r1 = r5 + Null;
0x0019C0        E1F00455                 call $kal_float_lib.div;
0x0019C1        0082000F                 r6 = r0 + Null;
0x0019C2        0093000F                 r7 = r1 + Null;
0x0019C3        0026000F                 r0 = r4 + Null;
0x0019C4        0037000F                 r1 = r5 + Null;
0x0019C5        E1F0041E                 call $kal_float_lib.mul;
0x0019C6        0062000F                 r4 = r0 + Null;
0x0019C7        0073000F                 r5 = r1 + Null;
0x0019C8        F1487FFA                 r2 = M[FP + -0x6];
0x0019C9        F1587FFB                 r3 = M[FP + -0x5];
0x0019CA        E1F0044B                 call $kal_float_lib.div;
0x0019CB        F12C000E                 M[FP + 0xe] = r0;
0x0019CC        F13C000F                 M[FP + 0xf] = r1;
0x0019CD        0028000F                 r0 = r6 + Null;
0x0019CE        0039000F                 r1 = r7 + Null;
0x0019CF        E1F00446                 call $kal_float_lib.div;
0x0019D0        F12C0010                 M[FP + 0x10] = r0;
0x0019D1        F13C0011                 M[FP + 0x11] = r1;
0x0019D2        0028000F                 r0 = r6 + Null;
0x0019D3        0039000F                 r1 = r7 + Null;
0x0019D4        0048000F                 r2 = r6 + Null;
0x0019D5        0059000F                 r3 = r7 + Null;
0x0019D6        E1F0040D                 call $kal_float_lib.mul;
0x0019D7        0082000F                 r6 = r0 + Null;
0x0019D8        0093000F                 r7 = r1 + Null;
0x0019D9        F1480010                 r2 = M[FP + 0x10];
0x0019DA        F1580011                 r3 = M[FP + 0x11];
0x0019DB        E1F003F6                 call $kal_float_lib.add;
0x0019DC        01400080                 r2 = Null + 128;
0x0019DD        FD000080 01500000        r3 = Null + -8388608;
0x0019DF        E1F003F2                 call $kal_float_lib.add;
0x0019E0        E1F00418                 call $kal_float_lib.recip;
0x0019E1        F12C000A                 M[FP + 0xa] = r0;
0x0019E2        F13C000B                 M[FP + 0xb] = r1;
0x0019E3        F1030006                 SP = SP + 6;
0x0019E4        0026000F                 r0 = r4 + Null;
0x0019E5        0037000F                 r1 = r5 + Null;
0x0019E6        0046000F                 r2 = r4 + Null;
0x0019E7        0057000F                 r3 = r5 + Null;
0x0019E8        E1F003FB                 call $kal_float_lib.mul;
0x0019E9        0062000F                 r4 = r0 + Null;
0x0019EA        0073000F                 r5 = r1 + Null;
0x0019EB        F148000E                 r2 = M[FP + 0xe];
0x0019EC        F158000F                 r3 = M[FP + 0xf];
0x0019ED        E1F003E4                 call $kal_float_lib.add;
0x0019EE        01400080                 r2 = Null + 128;
0x0019EF        FD000080 01500000        r3 = Null + -8388608;
0x0019F1        E1F003E0                 call $kal_float_lib.add;
0x0019F2        F148000A                 r2 = M[FP + 0xa];
0x0019F3        F158000B                 r3 = M[FP + 0xb];
0x0019F4        E1F003EF                 call $kal_float_lib.mul;
0x0019F5        F148000C                 r2 = M[FP + 0xc];
0x0019F6        F158000D                 r3 = M[FP + 0xd];
0x0019F7        E1F003EC                 call $kal_float_lib.mul;
0x0019F8        F100000C                 pushm <r0, r1>;
0x0019F9        0026000F                 r0 = r4 + Null;
0x0019FA        0037000F                 r1 = r5 + Null;
0x0019FB        01400081                 r2 = Null + 129;
0x0019FC        FD000080 01500000        r3 = Null + -8388608;
0x0019FE        E1F003E5                 call $kal_float_lib.mul;
0x0019FF        E1F003DB                 call $kal_float_lib.sub;
0x001A00        F148000A                 r2 = M[FP + 0xa];
0x001A01        F158000B                 r3 = M[FP + 0xb];
0x001A02        E1F003E1                 call $kal_float_lib.mul;
0x001A03        F148000C                 r2 = M[FP + 0xc];
0x001A04        F158000D                 r3 = M[FP + 0xd];
0x001A05        E1F003DE                 call $kal_float_lib.mul;
0x001A06        F100000C                 pushm <r0, r1>;
0x001A07        0026000F                 r0 = r4 + Null;
0x001A08        0037000F                 r1 = r5 + Null;
0x001A09        F148000E                 r2 = M[FP + 0xe];
0x001A0A        F158000F                 r3 = M[FP + 0xf];
0x001A0B        E1F003CF                 call $kal_float_lib.sub;
0x001A0C        01400080                 r2 = Null + 128;
0x001A0D        FD000080 01500000        r3 = Null + -8388608;
0x001A0F        E1F003C2                 call $kal_float_lib.add;
0x001A10        F148000A                 r2 = M[FP + 0xa];
0x001A11        F158000B                 r3 = M[FP + 0xb];
0x001A12        E1F003D1                 call $kal_float_lib.mul;
0x001A13        F148000C                 r2 = M[FP + 0xc];
0x001A14        F158000D                 r3 = M[FP + 0xd];
0x001A15        E1F003CE                 call $kal_float_lib.mul;
0x001A16        F100000C                 pushm <r0, r1>;
0x001A17        0028000F                 r0 = r6 + Null;
0x001A18        0039000F                 r1 = r7 + Null;
0x001A19        01400081                 r2 = Null + 129;
0x001A1A        FD000080 01500000        r3 = Null + -8388608;
0x001A1C        E1F003C7                 call $kal_float_lib.mul;
0x001A1D        E1F003BD                 call $kal_float_lib.sub;
0x001A1E        F148000A                 r2 = M[FP + 0xa];
0x001A1F        F158000B                 r3 = M[FP + 0xb];
0x001A20        E1F003C3                 call $kal_float_lib.mul;
0x001A21        F100000C                 pushm <r0, r1>;
0x001A22        0028000F                 r0 = r6 + Null;
0x001A23        0039000F                 r1 = r7 + Null;
0x001A24        F1480010                 r2 = M[FP + 0x10];
0x001A25        F1580011                 r3 = M[FP + 0x11];
0x001A26        E1F003B4                 call $kal_float_lib.sub;
0x001A27        01400080                 r2 = Null + 128;
0x001A28        FD000080 01500000        r3 = Null + -8388608;
0x001A2A        E1F003A7                 call $kal_float_lib.add;
0x001A2B        F148000A                 r2 = M[FP + 0xa];
0x001A2C        F158000B                 r3 = M[FP + 0xb];
0x001A2D        E1F003B6                 call $kal_float_lib.mul;
0x001A2E        F100000C                 pushm <r0, r1>;
0x001A2F        E1F0FCE6                 call $kal_filter_coef_lib.__scale_coefficients;
0x001A30        F3240000                 pop r0;
0x001A31        F12C7FF5                 M[FP + -0xb] = r0;
0x001A32        F3240000                 pop r0;
0x001A33        F12C7FF4                 M[FP + -0xc] = r0;
0x001A34        F3240000                 pop r0;
0x001A35        F12C7FF3                 M[FP + -0xd] = r0;
0x001A36        F3240000                 pop r0;
0x001A37        F12C7FF2                 M[FP + -0xe] = r0;
0x001A38        F3240000                 pop r0;
0x001A39        F12C7FF1                 M[FP + -0xf] = r0;
0x001A3A        F3240000                 pop r0;
0x001A3B        F12C7FF0                 M[FP + -0x10] = r0;
0x001A3C        F103FFF8                 SP = SP + -8;
0x001A3D        F10423FD                 popm <FP, r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x001A3E        F103FFF6                 SP = SP + -10;
0x001A3F        DC0D000F                 rts;

 <$kal_filter_coef_lib.calc_low_shelf_2nd>
0x001A40        F100200D                 pushm <FP(=SP), r0, r1, rLink>;
0x001A41        F1030006                 SP = SP + 6;
0x001A42        F1287FF8                 r0 = M[FP + -0x8];
0x001A43        F1387FF9                 r1 = M[FP + -0x7];
0x001A44        F100000C                 pushm <r0, r1>;
0x001A45        F1287FFA                 r0 = M[FP + -0x6];
0x001A46        F1387FFB                 r1 = M[FP + -0x5];
0x001A47        F100000C                 pushm <r0, r1>;
0x001A48        F1287FFC                 r0 = M[FP + -0x4];
0x001A49        F1387FFD                 r1 = M[FP + -0x3];
0x001A4A        F100000C                 pushm <r0, r1>;
0x001A4B        01200000                 r0 = Null + 0;
0x001A4C        01300000                 r1 = Null + 0;
0x001A4D        F100000C                 pushm <r0, r1>;
0x001A4E        F1287FFE                 r0 = M[FP + -0x2];
0x001A4F        F1387FFF                 r1 = M[FP + -0x1];
0x001A50        F100000C                 pushm <r0, r1>;
0x001A51        E1F0FF59                 call $kal_filter_coef_lib.calc_shelf_2nd;
0x001A52        F3240000                 pop r0;
0x001A53        F12C7FF2                 M[FP + -0xe] = r0;
0x001A54        F3240000                 pop r0;
0x001A55        F12C7FF4                 M[FP + -0xc] = r0;
0x001A56        F3240000                 pop r0;
0x001A57        F12C7FF3                 M[FP + -0xd] = r0;
0x001A58        F3240000                 pop r0;
0x001A59        F12C7FF7                 M[FP + -0x9] = r0;
0x001A5A        F3240000                 pop r0;
0x001A5B        F12C7FF6                 M[FP + -0xa] = r0;
0x001A5C        F3240000                 pop r0;
0x001A5D        F12C7FF5                 M[FP + -0xb] = r0;
0x001A5E        F104200D                 popm <FP, r0, r1, rLink>;
0x001A5F        F103FFF8                 SP = SP + -8;
0x001A60        DC0D000F                 rts;

 <$kal_filter_coef_lib.calc_high_shelf_2nd>
0x001A61        F100200D                 pushm <FP(=SP), r0, r1, rLink>;
0x001A62        F1030006                 SP = SP + 6;
0x001A63        F1287FF8                 r0 = M[FP + -0x8];
0x001A64        F1387FF9                 r1 = M[FP + -0x7];
0x001A65        F100000C                 pushm <r0, r1>;
0x001A66        F1287FFA                 r0 = M[FP + -0x6];
0x001A67        FD000080 89220000        r0 = r0 XOR 0x800000;
0x001A69        F1387FFB                 r1 = M[FP + -0x5];
0x001A6A        F100000C                 pushm <r0, r1>;
0x001A6B        F1287FFC                 r0 = M[FP + -0x4];
0x001A6C        F1387FFD                 r1 = M[FP + -0x3];
0x001A6D        F100000C                 pushm <r0, r1>;
0x001A6E        F1287FFA                 r0 = M[FP + -0x6];
0x001A6F        F1387FFB                 r1 = M[FP + -0x5];
0x001A70        F100000C                 pushm <r0, r1>;
0x001A71        F1287FFE                 r0 = M[FP + -0x2];
0x001A72        F1387FFF                 r1 = M[FP + -0x1];
0x001A73        F100000C                 pushm <r0, r1>;
0x001A74        E1F0FF36                 call $kal_filter_coef_lib.calc_shelf_2nd;
0x001A75        F3240000                 pop r0;
0x001A76        F12C7FF2                 M[FP + -0xe] = r0;
0x001A77        F3240000                 pop r0;
0x001A78        F12C7FF4                 M[FP + -0xc] = r0;
0x001A79        F3240000                 pop r0;
0x001A7A        F12C7FF3                 M[FP + -0xd] = r0;
0x001A7B        F3240000                 pop r0;
0x001A7C        F12C7FF7                 M[FP + -0x9] = r0;
0x001A7D        F3240000                 pop r0;
0x001A7E        F12C7FF6                 M[FP + -0xa] = r0;
0x001A7F        F3240000                 pop r0;
0x001A80        F12C7FF5                 M[FP + -0xb] = r0;
0x001A81        F104200D                 popm <FP, r0, r1, rLink>;
0x001A82        F103FFF8                 SP = SP + -8;
0x001A83        DC0D000F                 rts;

 <$kal_filter_coef_lib.calc_tilt_2nd>
0x001A84        F100200D                 pushm <FP(=SP), r0, r1, rLink>;
0x001A85        F1030006                 SP = SP + 6;
0x001A86        F1287FF8                 r0 = M[FP + -0x8];
0x001A87        F1387FF9                 r1 = M[FP + -0x7];
0x001A88        F100000C                 pushm <r0, r1>;
0x001A89        F1287FFA                 r0 = M[FP + -0x6];
0x001A8A        FD000080 89220000        r0 = r0 XOR 0x800000;
0x001A8C        F1387FFB                 r1 = M[FP + -0x5];
0x001A8D        F100000C                 pushm <r0, r1>;
0x001A8E        F1287FFC                 r0 = M[FP + -0x4];
0x001A8F        F1387FFD                 r1 = M[FP + -0x3];
0x001A90        F100000C                 pushm <r0, r1>;
0x001A91        F1287FFA                 r0 = M[FP + -0x6];
0x001A92        E422003F                 r0 = r0 - 1;
0x001A93        F1387FFB                 r1 = M[FP + -0x5];
0x001A94        F100000C                 pushm <r0, r1>;
0x001A95        F1287FFE                 r0 = M[FP + -0x2];
0x001A96        F1387FFF                 r1 = M[FP + -0x1];
0x001A97        F100000C                 pushm <r0, r1>;
0x001A98        E1F0FF12                 call $kal_filter_coef_lib.calc_shelf_2nd;
0x001A99        F3240000                 pop r0;
0x001A9A        F12C7FF2                 M[FP + -0xe] = r0;
0x001A9B        F3240000                 pop r0;
0x001A9C        F12C7FF4                 M[FP + -0xc] = r0;
0x001A9D        F3240000                 pop r0;
0x001A9E        F12C7FF3                 M[FP + -0xd] = r0;
0x001A9F        F3240000                 pop r0;
0x001AA0        F12C7FF7                 M[FP + -0x9] = r0;
0x001AA1        F3240000                 pop r0;
0x001AA2        F12C7FF6                 M[FP + -0xa] = r0;
0x001AA3        F3240000                 pop r0;
0x001AA4        F12C7FF5                 M[FP + -0xb] = r0;
0x001AA5        F104200D                 popm <FP, r0, r1, rLink>;
0x001AA6        F103FFF8                 SP = SP + -8;
0x001AA7        DC0D000F                 rts;

 <$kal_filter_coef_lib.calc_peq>
0x001AA8        F10023FD                 pushm <FP(=SP), r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x001AA9        F1030004                 SP = SP + 4;
0x001AAA        F1287FFC                 r0 = M[FP + -0x4];
0x001AAB        E422002F                 r0 = r0 + 1;
0x001AAC        F1387FFD                 r1 = M[FP + -0x3];
0x001AAD        E1F0034B                 call $kal_float_lib.recip;
0x001AAE        FD000080 85220000        r0 = r0 OR 0x800000;
0x001AB0        0042000F                 r2 = r0 + Null;
0x001AB1        0053000F                 r3 = r1 + Null;
0x001AB2        0062000F                 r4 = r0 + Null;
0x001AB3        0073000F                 r5 = r1 + Null;
0x001AB4        E1F0032F                 call $kal_float_lib.mul;
0x001AB5        01400080                 r2 = Null + 128;
0x001AB6        FD000080 01500000        r3 = Null + -8388608;
0x001AB8        E1F00319                 call $kal_float_lib.add;
0x001AB9        E1F00368                 call $kal_float_lib.sqrt;
0x001ABA        0046000F                 r2 = r4 + Null;
0x001ABB        0057000F                 r3 = r5 + Null;
0x001ABC        E1F00315                 call $kal_float_lib.add;
0x001ABD        F1487FF8                 r2 = M[FP + -0x8];
0x001ABE        F1587FF9                 r3 = M[FP + -0x7];
0x001ABF        E1F00324                 call $kal_float_lib.mul;
0x001AC0        F1487FFE                 r2 = M[FP + -0x2];
0x001AC1        F1587FFF                 r3 = M[FP + -0x1];
0x001AC2        E1F0FC0C                 call $kal_filter_coef_lib.__warp;
0x001AC3        0062000F                 r4 = r0 + Null;
0x001AC4        0073000F                 r5 = r1 + Null;
0x001AC5        F1287FF8                 r0 = M[FP + -0x8];
0x001AC6        F1387FF9                 r1 = M[FP + -0x7];
0x001AC7        E1F0FC07                 call $kal_filter_coef_lib.__warp;
0x001AC8        F12C000A                 M[FP + 0xa] = r0;
0x001AC9        F13C000B                 M[FP + 0xb] = r1;
0x001ACA        0042000F                 r2 = r0 + Null;
0x001ACB        0053000F                 r3 = r1 + Null;
0x001ACC        E1F00317                 call $kal_float_lib.mul;
0x001ACD        F1000030                 pushm <r2, r3>;
0x001ACE        F100000C                 pushm <r0, r1>;
0x001ACF        0026000F                 r0 = r4 + Null;
0x001AD0        0037000F                 r1 = r5 + Null;
0x001AD1        0046000F                 r2 = r4 + Null;
0x001AD2        0057000F                 r3 = r5 + Null;
0x001AD3        E1F00310                 call $kal_float_lib.mul;
0x001AD4        F1040030                 popm <r2, r3>;
0x001AD5        E1F00305                 call $kal_float_lib.sub;
0x001AD6        FD000080 89220000        r0 = r0 XOR 0x800000;
0x001AD8        E1F00320                 call $kal_float_lib.recip;
0x001AD9        F1040030                 popm <r2, r3>;
0x001ADA        E1F00309                 call $kal_float_lib.mul;
0x001ADB        0046000F                 r2 = r4 + Null;
0x001ADC        0057000F                 r3 = r5 + Null;
0x001ADD        E1F00306                 call $kal_float_lib.mul;
0x001ADE        0062000F                 r4 = r0 + Null;
0x001ADF        0073000F                 r5 = r1 + Null;
0x001AE0        F1287FFA                 r0 = M[FP + -0x6];
0x001AE1        F1387FFB                 r1 = M[FP + -0x5];
0x001AE2        0140007F                 r2 = Null + 127;
0x001AE3        FD000080 01500000        r3 = Null + -8388608;
0x001AE5        E1F002FE                 call $kal_float_lib.mul;
0x001AE6        E1F0FC08                 call $kal_filter_coef_lib.__db2lin;
0x001AE7        0042000F                 r2 = r0 + Null;
0x001AE8        0053000F                 r3 = r1 + Null;
0x001AE9        0026000F                 r0 = r4 + Null;
0x001AEA        0037000F                 r1 = r5 + Null;
0x001AEB        E1F002F8                 call $kal_float_lib.mul;
0x001AEC        0082000F                 r6 = r0 + Null;
0x001AED        0093000F                 r7 = r1 + Null;
0x001AEE        0026000F                 r0 = r4 + Null;
0x001AEF        0037000F                 r1 = r5 + Null;
0x001AF0        E1F00325                 call $kal_float_lib.div;
0x001AF1        0042000F                 r2 = r0 + Null;
0x001AF2        0053000F                 r3 = r1 + Null;
0x001AF3        F128000A                 r0 = M[FP + 0xa];
0x001AF4        F138000B                 r1 = M[FP + 0xb];
0x001AF5        E1F00320                 call $kal_float_lib.div;
0x001AF6        0062000F                 r4 = r0 + Null;
0x001AF7        0073000F                 r5 = r1 + Null;
0x001AF8        F128000A                 r0 = M[FP + 0xa];
0x001AF9        F138000B                 r1 = M[FP + 0xb];
0x001AFA        0048000F                 r2 = r6 + Null;
0x001AFB        0059000F                 r3 = r7 + Null;
0x001AFC        E1F00319                 call $kal_float_lib.div;
0x001AFD        0082000F                 r6 = r0 + Null;
0x001AFE        0093000F                 r7 = r1 + Null;
0x001AFF        F128000A                 r0 = M[FP + 0xa];
0x001B00        F138000B                 r1 = M[FP + 0xb];
0x001B01        0042000F                 r2 = r0 + Null;
0x001B02        0053000F                 r3 = r1 + Null;
0x001B03        E1F002E0                 call $kal_float_lib.mul;
0x001B04        F12C000A                 M[FP + 0xa] = r0;
0x001B05        F13C000B                 M[FP + 0xb] = r1;
0x001B06        0048000F                 r2 = r6 + Null;
0x001B07        0059000F                 r3 = r7 + Null;
0x001B08        E1F002C9                 call $kal_float_lib.add;
0x001B09        01400080                 r2 = Null + 128;
0x001B0A        FD000080 01500000        r3 = Null + -8388608;
0x001B0C        E1F002C5                 call $kal_float_lib.add;
0x001B0D        E1F002EB                 call $kal_float_lib.recip;
0x001B0E        F12C000C                 M[FP + 0xc] = r0;
0x001B0F        F13C000D                 M[FP + 0xd] = r1;
0x001B10        F1030006                 SP = SP + 6;
0x001B11        F128000A                 r0 = M[FP + 0xa];
0x001B12        F138000B                 r1 = M[FP + 0xb];
0x001B13        0046000F                 r2 = r4 + Null;
0x001B14        0057000F                 r3 = r5 + Null;
0x001B15        E1F002BC                 call $kal_float_lib.add;
0x001B16        01400080                 r2 = Null + 128;
0x001B17        FD000080 01500000        r3 = Null + -8388608;
0x001B19        E1F002B8                 call $kal_float_lib.add;
0x001B1A        F148000C                 r2 = M[FP + 0xc];
0x001B1B        F158000D                 r3 = M[FP + 0xd];
0x001B1C        E1F002C7                 call $kal_float_lib.mul;
0x001B1D        F100000C                 pushm <r0, r1>;
0x001B1E        F128000A                 r0 = M[FP + 0xa];
0x001B1F        F138000B                 r1 = M[FP + 0xb];
0x001B20        01400081                 r2 = Null + 129;
0x001B21        FD000080 01500000        r3 = Null + -8388608;
0x001B23        E1F002C0                 call $kal_float_lib.mul;
0x001B24        E1F002B6                 call $kal_float_lib.sub;
0x001B25        F148000C                 r2 = M[FP + 0xc];
0x001B26        F158000D                 r3 = M[FP + 0xd];
0x001B27        E1F002BC                 call $kal_float_lib.mul;
0x001B28        F100000C                 pushm <r0, r1>;
0x001B29        F128000A                 r0 = M[FP + 0xa];
0x001B2A        F138000B                 r1 = M[FP + 0xb];
0x001B2B        0046000F                 r2 = r4 + Null;
0x001B2C        0057000F                 r3 = r5 + Null;
0x001B2D        E1F002AD                 call $kal_float_lib.sub;
0x001B2E        01400080                 r2 = Null + 128;
0x001B2F        FD000080 01500000        r3 = Null + -8388608;
0x001B31        E1F002A0                 call $kal_float_lib.add;
0x001B32        F148000C                 r2 = M[FP + 0xc];
0x001B33        F158000D                 r3 = M[FP + 0xd];
0x001B34        E1F002AF                 call $kal_float_lib.mul;
0x001B35        F100000C                 pushm <r0, r1>;
0x001B36        F128000A                 r0 = M[FP + 0xa];
0x001B37        F138000B                 r1 = M[FP + 0xb];
0x001B38        01400081                 r2 = Null + 129;
0x001B39        FD000080 01500000        r3 = Null + -8388608;
0x001B3B        E1F002A8                 call $kal_float_lib.mul;
0x001B3C        E1F0029E                 call $kal_float_lib.sub;
0x001B3D        F148000C                 r2 = M[FP + 0xc];
0x001B3E        F158000D                 r3 = M[FP + 0xd];
0x001B3F        E1F002A4                 call $kal_float_lib.mul;
0x001B40        F100000C                 pushm <r0, r1>;
0x001B41        F128000A                 r0 = M[FP + 0xa];
0x001B42        F138000B                 r1 = M[FP + 0xb];
0x001B43        0048000F                 r2 = r6 + Null;
0x001B44        0059000F                 r3 = r7 + Null;
0x001B45        E1F00295                 call $kal_float_lib.sub;
0x001B46        01400080                 r2 = Null + 128;
0x001B47        FD000080 01500000        r3 = Null + -8388608;
0x001B49        E1F00288                 call $kal_float_lib.add;
0x001B4A        F148000C                 r2 = M[FP + 0xc];
0x001B4B        F158000D                 r3 = M[FP + 0xd];
0x001B4C        E1F00297                 call $kal_float_lib.mul;
0x001B4D        F100000C                 pushm <r0, r1>;
0x001B4E        E1F0FBC7                 call $kal_filter_coef_lib.__scale_coefficients;
0x001B4F        F3240000                 pop r0;
0x001B50        F12C7FF2                 M[FP + -0xe] = r0;
0x001B51        F3240000                 pop r0;
0x001B52        F12C7FF4                 M[FP + -0xc] = r0;
0x001B53        F3240000                 pop r0;
0x001B54        F12C7FF3                 M[FP + -0xd] = r0;
0x001B55        F3240000                 pop r0;
0x001B56        F12C7FF7                 M[FP + -0x9] = r0;
0x001B57        F3240000                 pop r0;
0x001B58        F12C7FF6                 M[FP + -0xa] = r0;
0x001B59        F3240000                 pop r0;
0x001B5A        F12C7FF5                 M[FP + -0xb] = r0;
0x001B5B        F103FFFC                 SP = SP + -4;
0x001B5C        F10423FD                 popm <FP, r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x001B5D        F103FFF8                 SP = SP + -8;
0x001B5E        DC0D000F                 rts;

 <$M.Subwoofer.l2cap_handler>
0x001B5F        F3D00000                 push rLink;
0x001B60        E1F00981                 call $downsample_sub_to_1k2;
0x001B61        E1F005DD                 call $create_sub_packet;
0x001B62        E1F0FB1D                 call $block_interrupts;
0x001B63        01A09388                 r8 = Null + -27768;
0x001B64        E1F0EED4                 call $cbops.copy;
0x001B65        E1F0FB0A                 call $interrupt.unblock;
0x001B66        DDF0FB63                 jump $pop_rLink_and_rts;

 <$M.Subwoofer.esco_post_process>
0x001B67        F3D00000                 push rLink;
0x001B68        E1F00979                 call $downsample_sub_to_1k2;
0x001B69        0140000A                 r2 = Null + 10;
0x001B6A        093094AF                 r1 = Null + M[$sco_param_tesco];
0x001B6B        21030006                 Null = r1 - 6;
0x001B6C        DD100003                 if NE jump $M.Subwoofer.do_not_send_duplicates;
0x001B6D        E430002F                 r1 = Null + 1;
0x001B6E        193064B6                 M[$queue_another_bass_packet] = r1 + Null;

 <$M.Subwoofer.do_not_send_duplicates>
0x001B6F        01306413                 r1 = Null + 25619;
0x001B70        D1530003                 r3 = M[r1 + 3];
0x001B71        DD100004                 if NE jump $M.Subwoofer.bass_packet_already_scheduled;
0x001B72        01501B77                 r3 = Null + 7031;
0x001B73        E1F0FB49                 call $timer.schedule_event_in;
0x001B74        DDF00001                 jump $M.Subwoofer.bass_packet_already_scheduled;

 <$M.Subwoofer.bass_packet_already_scheduled>
0x001B75        195094B3                 M[$bass_timer_id] = r3 + Null;
0x001B76        DDF0FB53                 jump $pop_rLink_and_rts;

 <$M.Subwoofer.send_bass_packet>
0x001B77        F3D00000                 push rLink;
0x001B78        E1F005C6                 call $create_sub_packet;
0x001B79        092064AD                 r0 = Null + M[$sub_link_port];
0x001B7A        E1F0FADD                 call $cbuffer.calc_amount_space;
0x001B7B        096094B6                 r4 = Null + M[$min_port_space];
0x001B7C        2002006F                 Null = r0 - r4;
0x001B7D        00620004                 if NEG r4 = r0 + Null;
0x001B7E        196094B6                 M[$min_port_space] = r4 + Null;
0x001B7F        01A047FB                 r8 = Null + 18427;
0x001B80        E1F0EEB8                 call $cbops.copy;
0x001B81        0930FE71                 r1 = Null + M[0xfffe71];
0x001B82        094094BB                 r2 = Null + M[$esco_write_deadline];
0x001B83        2053004F                 r3 = r1 - r2;
0x001B84        DD400009                 if NEG jump $M.Subwoofer.early;
0x001B85        096064B7                 r4 = Null + M[$late_write_counter];
0x001B86        E466002F                 r4 = r4 + 1;
0x001B87        196064B7                 M[$late_write_counter] = r4 + Null;
0x001B88        096094B7                 r4 = Null + M[$max_late_write];
0x001B89        2005006F                 Null = r3 - r4;
0x001B8A        00650005                 if POS r4 = r3 + Null;
0x001B8B        196094B7                 M[$max_late_write] = r4 + Null;
0x001B8C        DDF0000C                 jump $M.Subwoofer.done_logging_debug_data;

 <$M.Subwoofer.early>
0x001B8D        096064B8                 r4 = Null + M[$early_write_counter];
0x001B8E        E466002F                 r4 = r4 + 1;
0x001B8F        196064B8                 M[$early_write_counter] = r4 + Null;
0x001B90        096094B8                 r4 = Null + M[$min_early_write];
0x001B91        2005006F                 Null = r3 - r4;
0x001B92        00650005                 if POS r4 = r3 + Null;
0x001B93        196094B8                 M[$min_early_write] = r4 + Null;
0x001B94        096064B9                 r4 = Null + M[$max_early_write];
0x001B95        2005006F                 Null = r3 - r4;
0x001B96        00650004                 if NEG r4 = r3 + Null;
0x001B97        196064B9                 M[$max_early_write] = r4 + Null;

 <$M.Subwoofer.done_logging_debug_data>
0x001B98        096094AF                 r4 = Null + M[$sco_param_tesco];
0x001B99        99660271                 r4 = r4 * 625 (int);
0x001B9A        03460000                 r2 = r2 + r4;
0x001B9B        194094BB                 M[$esco_write_deadline] = r2 + Null;
0x001B9C        090064B6                 Null = Null + M[$queue_another_bass_packet];
0x001B9D        DD000007                 if EQ jump $M.Subwoofer.done_sending_bass_packets;
0x001B9E        190064B6                 M[$queue_another_bass_packet] = Null + Null;
0x001B9F        01400EA6                 r2 = Null + 3750;
0x001BA0        01306413                 r1 = Null + 25619;
0x001BA1        01501B77                 r3 = Null + 7031;
0x001BA2        E1F0FB17                 call $timer.schedule_event_in_period;
0x001BA3        195094B3                 M[$bass_timer_id] = r3 + Null;

 <$M.Subwoofer.done_sending_bass_packets>
0x001BA4        DDF0FB25                 jump $pop_rLink_and_rts;

 <$M.Subwoofer.esco_port_connected>
0x001BA5        F3D00000                 push rLink;
0x001BA6        F3300000                 push r1;
0x001BA7        E1F00098                 call $M.Subwoofer.subwoofer_init;
0x001BA8        F3540000                 pop r3;
0x001BA9        FD000000 01408018        r2 = Null + 32792;
0x001BAB        E1F0FAFD                 call $message.send;
0x001BAC        FD000091 0120A00C        r0 = Null + -7233524;
0x001BAE        192064AD                 M[$sub_link_port] = r0 + Null;
0x001BAF        E420002F                 r0 = Null + 1;
0x001BB0        192094BC                 M[$M.create_sub_packet.packet_counter] = r0 + Null;
0x001BB1        1900649C                 M[$M.Sleep.sync_flag_esco] = Null + Null;
0x001BB2        01200168                 r0 = Null + 360;
0x001BB3        19209490                 M[$music_example.frame_processing_size] = r0 + Null;
0x001BB4        0120920F                 r0 = Null + -28145;
0x001BB5        1920626F                 M[0x626f] = r0 + Null;
0x001BB6        01200002                 r0 = Null + 2;
0x001BB7        192007F7                 M[$M.system_config.data.spkr_ctrl_coefs] = r0 + Null;
0x001BB8        01905B34                 r7 = Null + 23348;
0x001BB9        01A002D0                 r8 = Null + 720;
0x001BBA        E1F0F26C                 call $spkr_ctrl_system.zero_data;
0x001BBB        FD0000FF 01906BF9        r7 = Null + -37895;
0x001BBD        E1F0F23A                 call $spkr_ctrl_system.initialize;
0x001BBE        01200080                 r0 = Null + 128;
0x001BBF        19209499                 M[$music_example.OTA_IF_Connections] = r0 + Null;
0x001BC0        E420002F                 r0 = Null + 1;
0x001BC1        192094B4                 M[$subwoofer_trim_buffers_flag] = r0 + Null;
0x001BC2        DDF0FB07                 jump $pop_rLink_and_rts;

 <$M.Subwoofer.l2cap_port_connected>
0x001BC3        F3D00000                 push rLink;
0x001BC4        F3300000                 push r1;
0x001BC5        E1F0007A                 call $M.Subwoofer.subwoofer_init;
0x001BC6        F3540000                 pop r3;
0x001BC7        FD000000 01408018        r2 = Null + 32792;
0x001BC9        E1F0FADF                 call $message.send;
0x001BCA        01200BCC                 r0 = Null + 3020;
0x001BCB        192092F6                 M[0xff92f6] = r0 + Null;
0x001BCC        1920633C                 M[0x633c] = r0 + Null;
0x001BCD        192092FC                 M[0xff92fc] = r0 + Null;
0x001BCE        19206342                 M[0x6342] = r0 + Null;
0x001BCF        19209302                 M[0xff9302] = r0 + Null;
0x001BD0        19206348                 M[0x6348] = r0 + Null;
0x001BD1        192093AA                 M[$M.main.samples_latency_measure] = r0 + Null;
0x001BD2        01A092F3                 r8 = Null + -27917;
0x001BD3        E1F0217E                 call $audio_proc.delay.initialize;
0x001BD4        01A06339                 r8 = Null + 25401;
0x001BD5        E1F0217C                 call $audio_proc.delay.initialize;
0x001BD6        01A092F9                 r8 = Null + -27911;
0x001BD7        E1F0217A                 call $audio_proc.delay.initialize;
0x001BD8        01A0633F                 r8 = Null + 25407;
0x001BD9        E1F02178                 call $audio_proc.delay.initialize;
0x001BDA        01A092FF                 r8 = Null + -27905;
0x001BDB        E1F02176                 call $audio_proc.delay.initialize;
0x001BDC        01A06345                 r8 = Null + 25413;
0x001BDD        E1F02174                 call $audio_proc.delay.initialize;
0x001BDE        09206481                 r0 = Null + M[$current_dac_sampling_rate];
0x001BDF        E1F020CE                 call $calc_us_per_sample_addr;
0x001BE0        1950943C                 M[0xff943c] = r3 + Null;
0x001BE1        19509390                 M[0xff9390] = r3 + Null;
0x001BE2        1950938E                 M[0xff938e] = r3 + Null;
0x001BE3        FD00009D 0120800D        r0 = Null + -6455283;
0x001BE5        192064AD                 M[$sub_link_port] = r0 + Null;
0x001BE6        E420002F                 r0 = Null + 1;
0x001BE7        192094BC                 M[$M.create_sub_packet.packet_counter] = r0 + Null;
0x001BE8        01200168                 r0 = Null + 360;
0x001BE9        91220001                 r0 = r0 ASHIFT 1;
0x001BEA        19209490                 M[$music_example.frame_processing_size] = r0 + Null;
0x001BEB        0120920F                 r0 = Null + -28145;
0x001BEC        1920626F                 M[0x626f] = r0 + Null;
0x001BED        01200002                 r0 = Null + 2;
0x001BEE        192007F7                 M[$M.system_config.data.spkr_ctrl_coefs] = r0 + Null;
0x001BEF        01905B34                 r7 = Null + 23348;
0x001BF0        01A002D0                 r8 = Null + 720;
0x001BF1        E1F0F235                 call $spkr_ctrl_system.zero_data;
0x001BF2        FD0000FF 01906BF9        r7 = Null + -37895;
0x001BF4        E1F0F203                 call $spkr_ctrl_system.initialize;
0x001BF5        01200080                 r0 = Null + 128;
0x001BF6        19209499                 M[$music_example.OTA_IF_Connections] = r0 + Null;
0x001BF7        DDF0FAD2                 jump $pop_rLink_and_rts;

 <$M.Subwoofer.esco_port_disconnected>
0x001BF8        F3D00000                 push rLink;
0x001BF9        E1F00A44                 call $disable_subwoofer;
0x001BFA        DDF0FACF                 jump $pop_rLink_and_rts;

 <$M.Subwoofer.trim_buffers>
0x001BFB        F3D00000                 push rLink;
0x001BFC        092064AD                 r0 = Null + M[$sub_link_port];
0x001BFD        FD000091 2102A00C        Null = r0 - -7233524;
0x001BFF        DD100008                 if NE jump $M.Subwoofer.done_trimming;
0x001C00        090094B4                 Null = Null + M[$subwoofer_trim_buffers_flag];
0x001C01        DD000006                 if EQ jump $M.Subwoofer.done_trimming;
0x001C02        190094B4                 M[$subwoofer_trim_buffers_flag] = Null + Null;
0x001C03        E1F0FA7C                 call $block_interrupts;
0x001C04        E1F01A7B                 call $multi_chan_purge_buffers;
0x001C05        E1F01A5B                 call $purge_input_pcm_cbuffers;
0x001C06        E1F0FA69                 call $interrupt.unblock;

 <$M.Subwoofer.done_trimming>
0x001C07        DDF0FAC2                 jump $pop_rLink_and_rts;

 <$M.Subwoofer.schedule_and_sleep>
0x001C08        F3D00000                 push rLink;
0x001C09        092064AD                 r0 = Null + M[$sub_link_port];
0x001C0A        FD000091 2102A00C        Null = r0 - -7233524;
0x001C0C        DD100007                 if NE jump $M.Subwoofer.not_esco_sub;
0x001C0D        092094B5                 r0 = Null + M[$M.Subwoofer.sco_schedule_to_air_flag];
0x001C0E        E1100BD6                 if NE call $sco_schedule_to_air;
0x001C0F        092093F1                 r0 = Null + M[0xff93f1];
0x001C10        DD000003                 if EQ jump $M.Subwoofer.not_esco_sub;
0x001C11        E1F0FFEA                 call $M.Subwoofer.trim_buffers;
0x001C12        E1F01B1E                 call $SystemSleepEsco;

 <$M.Subwoofer.not_esco_sub>
0x001C13        DDF0FAB6                 jump $pop_rLink_and_rts;

 <$M.Subwoofer.set_frame_size>
0x001C14        195091DE                 M[0xff91de] = r3 + Null;
0x001C15        1950621E                 M[0x621e] = r3 + Null;
0x001C16        195091EB                 M[0xff91eb] = r3 + Null;
0x001C17        1950622B                 M[0x622b] = r3 + Null;
0x001C18        195091F8                 M[0xff91f8] = r3 + Null;
0x001C19        19506238                 M[0x6238] = r3 + Null;
0x001C1A        19509205                 M[0xff9205] = r3 + Null;
0x001C1B        19506245                 M[0x6245] = r3 + Null;
0x001C1C        19509212                 M[0xff9212] = r3 + Null;
0x001C1D        DC0D000F                 rts;

 <$M.Subwoofer.transmit_wireless_subwoofer_audio>
0x001C1E        F3D00000                 push rLink;
0x001C1F        092064AD                 r0 = Null + M[$sub_link_port];
0x001C20        FD000091 2102A00C        Null = r0 - -7233524;
0x001C22        DD100003                 if NE jump $M.Subwoofer.check_l2cap_sub;
0x001C23        090064B4                 Null = Null + M[$sub_app_esco_func];
0x001C24        E100FF43                 if EQ call $M.Subwoofer.esco_post_process;

 <$M.Subwoofer.check_l2cap_sub>
0x001C25        092064AD                 r0 = Null + M[$sub_link_port];
0x001C26        FD00009D 2102800D        Null = r0 - -6455283;
0x001C28        DD100006                 if NE jump $M.Subwoofer.done_with_transmission;
0x001C29        01209447                 r0 = Null + -27577;
0x001C2A        E1F0FA3D                 call $cbuffer.calc_amount_data;
0x001C2B        210202D0                 Null = r0 - 720;
0x001C2C        DD400002                 if NEG jump $M.Subwoofer.done_with_transmission;
0x001C2D        E1F0FF32                 call $M.Subwoofer.l2cap_handler;

 <$M.Subwoofer.done_with_transmission>
0x001C2E        DDF0FA9B                 jump $pop_rLink_and_rts;

 <$M.Subwoofer.validate_time_to_play>
0x001C2F        F3D00000                 push rLink;
0x001C30        095094AD                 r3 = Null + M[$M.Subwoofer.playback_time];
0x001C31        DD000007                 if EQ jump $M.Subwoofer.set_flag;
0x001C32        0050000F                 r3 = Null + Null;
0x001C33        0120943E                 r0 = Null + -27586;
0x001C34        E1F0FA33                 call $cbuffer.calc_amount_data;
0x001C35        0002000F                 Null = r0 + Null;
0x001C36        DD100002                 if NE jump $M.Subwoofer.set_flag;
0x001C37        E450002F                 r3 = Null + 1;

 <$M.Subwoofer.set_flag>
0x001C38        195064B5                 M[$M.Subwoofer.recompute_time_to_play_flag] = r3 + Null;
0x001C39        DDF0FA90                 jump $pop_rLink_and_rts;

 <$M.Subwoofer.compute_time_to_play>
0x001C3A        F3D00000                 push rLink;
0x001C3B        090064B5                 Null = Null + M[$M.Subwoofer.recompute_time_to_play_flag];
0x001C3C        DD000002                 if EQ jump $M.Subwoofer.done_with_compute_time_to_play;
0x001C3D        E1F00006                 call $M.Subwoofer.synchronise;

 <$M.Subwoofer.done_with_compute_time_to_play>
0x001C3E        DDF0FA8B                 jump $pop_rLink_and_rts;

 <$M.Subwoofer.subwoofer_init>
0x001C3F        F3D00000                 push rLink;
0x001C40        013001F4                 r1 = Null + 500;
0x001C41        E1F01D1A                 call $enable_esco_subwoofer;
0x001C42        DDF0FA87                 jump $pop_rLink_and_rts;

 <$M.Subwoofer.synchronise>
0x001C43        F3D00000                 push rLink;
0x001C44        092064AD                 r0 = Null + M[$sub_link_port];
0x001C45        FD00009D 2102800D        Null = r0 - -6455283;
0x001C47        DD100005                 if NE jump $M.Subwoofer.done_synchronise;
0x001C48        0190943B                 r7 = Null + -27589;
0x001C49        01A0938D                 r8 = Null + -27763;
0x001C4A        E1F00B19                 call $calc_time_to_play;
0x001C4B        198094AD                 M[$M.Subwoofer.playback_time] = r6 + Null;

 <$M.Subwoofer.done_synchronise>
0x001C4C        DDF0FA7D                 jump $pop_rLink_and_rts;

 <$sbc.calc_bit_allocation>
0x001C4D        F3D00000                 push rLink;
0x001C4E        51900001                 M1 = Null + 1;
0x001C4F        D12B001E                 r0 = M[r9 + 30];
0x001C50        81220002                 r0 = r0 AND 0x2;
0x001C51        DD10005E                 if NE jump $M.sbc.calc_bit_allocation.stereo_joint;
0x001C52        01200000                 r0 = Null + 0;

 <$M.sbc.calc_bit_allocation.md_chan_loop>
0x001C53        D13B0020                 r1 = M[r9 + 32];
0x001C54        DD00000C                 if EQ jump $M.sbc.calc_bit_allocation.md_loudness;
0x001C55        D1CB0021                 r10 = M[r9 + 33];
0x001C56        983200CF                 r1 = r0 * r10 (int);
0x001C57        D1CB0018                 r10 = M[r9 + 24];
0x001C58        501300CF                 I1 = r1 + r10;
0x001C59        D1CB001A                 r10 = M[r9 + 26];
0x001C5A        502300CF                 I2 = r1 + r10;
0x001C5B        D1CB0021                 r10 = M[r9 + 33];
0x001C5C        E5F00003                 do $M.sbc.calc_bit_allocation.md_snr_loop;
0x001C5D        03003500                 Null = Null + Null, r1 = M[I1,1];
0x001C5E        0300B900                 Null = Null + Null, M[I2,1] = r1;

 <$M.sbc.calc_bit_allocation.md_snr_loop>
0x001C5F        DDF00017                 jump $M.sbc.calc_bit_allocation.md_loudness_loop;

 <$M.sbc.calc_bit_allocation.md_loudness>
0x001C60        D1CB0021                 r10 = M[r9 + 33];
0x001C61        983200CF                 r1 = r0 * r10 (int);
0x001C62        D16B0018                 r4 = M[r9 + 24];
0x001C63        5013006F                 I1 = r1 + r4;
0x001C64        D16B001A                 r4 = M[r9 + 26];
0x001C65        5023006F                 I2 = r1 + r4;
0x001C66        E460003F                 r4 = Null - 1;
0x001C67        D13B001C                 r1 = M[r9 + 28];
0x001C68        9B3C0000                 r1 = r1 * r10 (int);
0x001C69        D14B0017                 r2 = M[r9 + 23];
0x001C6A        5033004F                 I3 = r1 + r2;
0x001C6B        51440010                 I4 = r2 + 16;
0x001C6C        210C0008                 Null = r10 - 8;
0x001C6D        54330040                 if EQ I3 = r1 + I4;
0x001C6E        E5F00008                 do $M.sbc.calc_bit_allocation.md_loudness_loop;
0x001C6F        0140FFFB                 r2 = Null + -5;
0x001C70        03003500                 Null = Null + Null, r1 = M[I1,1];
0x001C71        03035D00                 Null = Null + r1, r3 = M[I3,1];
0x001C72        DD000003                 if EQ jump $M.sbc.calc_bit_allocation.md_loudness_endif;
0x001C73        2043005F                 r2 = r1 - r3;
0x001C74        90440065                 if POS r2 = r2 ASHIFT r4;

 <$M.sbc.calc_bit_allocation.md_loudness_endif>
0x001C75        0300C900                 Null = Null + Null, M[I2,1] = r2;

 <$M.sbc.calc_bit_allocation.md_loudness_loop>
0x001C76        D1CB0021                 r10 = M[r9 + 33];
0x001C77        983200CF                 r1 = r0 * r10 (int);
0x001C78        D14B001A                 r2 = M[r9 + 26];
0x001C79        5023004F                 I2 = r1 + r2;
0x001C7A        E1F0009B                 call $M.sbc.calc_bit_allocation.share_code_1;

 <$M.sbc.calc_bit_allocation.md_findbitslice_loop1>
0x001C7B        D1CB0021                 r10 = M[r9 + 33];
0x001C7C        983200CF                 r1 = r0 * r10 (int);
0x001C7D        D17B001A                 r5 = M[r9 + 26];
0x001C7E        5023007F                 I2 = r1 + r5;
0x001C7F        E1F0009F                 call $M.sbc.calc_bit_allocation.share_code_2;
0x001C80        DD40FFFB                 if NEG jump $M.sbc.calc_bit_allocation.md_findbitslice_loop1;
0x001C81        D1CB0021                 r10 = M[r9 + 33];
0x001C82        983200CF                 r1 = r0 * r10 (int);
0x001C83        D1CB001B                 r10 = M[r9 + 27];
0x001C84        501300CF                 I1 = r1 + r10;
0x001C85        D1CB001A                 r10 = M[r9 + 26];
0x001C86        502300CF                 I2 = r1 + r10;
0x001C87        D1CB0021                 r10 = M[r9 + 33];
0x001C88        E1F000A9                 call $M.sbc.calc_bit_allocation.share_code_3;
0x001C89        D1CB0021                 r10 = M[r9 + 33];
0x001C8A        983200CF                 r1 = r0 * r10 (int);
0x001C8B        D16B001B                 r4 = M[r9 + 27];
0x001C8C        5013006F                 I1 = r1 + r4;
0x001C8D        D16B001A                 r4 = M[r9 + 26];
0x001C8E        5023006F                 I2 = r1 + r4;
0x001C8F        01600000                 r4 = Null + 0;

 <$M.sbc.calc_bit_allocation.md_remainingbits_loop>
0x001C90        D13B0022                 r1 = M[r9 + 34];
0x001C91        2005003F                 Null = r3 - r1;
0x001C92        DD500005                 if POS jump $M.sbc.calc_bit_allocation.md_remainingbits_end;
0x001C93        E1F000AE                 call $M.sbc.calc_bit_allocation.share_code_4;
0x001C94        E466002F                 r4 = r4 + 1;
0x001C95        200600CF                 Null = r4 - r10;
0x001C96        DD10FFFA                 if NE jump $M.sbc.calc_bit_allocation.md_remainingbits_loop;

 <$M.sbc.calc_bit_allocation.md_remainingbits_end>
0x001C97        983200CF                 r1 = r0 * r10 (int);
0x001C98        D16B001B                 r4 = M[r9 + 27];
0x001C99        5013006F                 I1 = r1 + r4;
0x001C9A        D16B001A                 r4 = M[r9 + 26];
0x001C9B        5023006F                 I2 = r1 + r4;
0x001C9C        01600000                 r4 = Null + 0;

 <$M.sbc.calc_bit_allocation.md_remainingbits_extra_loop>
0x001C9D        D13B0022                 r1 = M[r9 + 34];
0x001C9E        2005003F                 Null = r3 - r1;
0x001C9F        DD50000B                 if POS jump $M.sbc.calc_bit_allocation.md_remainingbits_extra_end;
0x001CA0        03003400                 Null = Null + Null, r1 = M[I1,0];
0x001CA1        03007900                 Null = Null + Null, r5 = M[I2,1];
0x001CA2        21030010                 Null = r1 - 16;
0x001CA3        DD500003                 if POS jump $M.sbc.calc_bit_allocation.md_remainingbits_extra_endif;
0x001CA4        E433002F                 r1 = r1 + 1;
0x001CA5        E455002F                 r3 = r3 + 1;

 <$M.sbc.calc_bit_allocation.md_remainingbits_extra_endif>
0x001CA6        0300B500                 Null = Null + Null, M[I1,1] = r1;
0x001CA7        E466002F                 r4 = r4 + 1;
0x001CA8        200600CF                 Null = r4 - r10;
0x001CA9        DD10FFF4                 if NE jump $M.sbc.calc_bit_allocation.md_remainingbits_extra_loop;

 <$M.sbc.calc_bit_allocation.md_remainingbits_extra_end>
0x001CAA        E422002F                 r0 = r0 + 1;
0x001CAB        D13B001F                 r1 = M[r9 + 31];
0x001CAC        2002003F                 Null = r0 - r1;
0x001CAD        DD10FFA6                 if NE jump $M.sbc.calc_bit_allocation.md_chan_loop;
0x001CAE        DDF0FA1B                 jump $pop_rLink_and_rts;

 <$M.sbc.calc_bit_allocation.stereo_joint>
0x001CAF        D13B0020                 r1 = M[r9 + 32];
0x001CB0        DD00000B                 if EQ jump $M.sbc.calc_bit_allocation.sj_loudness;
0x001CB1        D1CB0021                 r10 = M[r9 + 33];
0x001CB2        99CC0002                 r10 = r10 * 2 (int);
0x001CB3        D13B0018                 r1 = M[r9 + 24];
0x001CB4        5010003F                 I1 = Null + r1;
0x001CB5        D13B001A                 r1 = M[r9 + 26];
0x001CB6        5020003F                 I2 = Null + r1;
0x001CB7        E5F00003                 do $M.sbc.calc_bit_allocation.sj_snr_loop2;
0x001CB8        03003500                 Null = Null + Null, r1 = M[I1,1];
0x001CB9        0300B900                 Null = Null + Null, M[I2,1] = r1;

 <$M.sbc.calc_bit_allocation.sj_snr_loop2>
0x001CBA        DDF0001B                 jump $M.sbc.calc_bit_allocation.sj_maxbitneedindex;

 <$M.sbc.calc_bit_allocation.sj_loudness>
0x001CBB        D12B0021                 r0 = M[r9 + 33];
0x001CBC        E460003F                 r4 = Null - 1;
0x001CBD        D13B0018                 r1 = M[r9 + 24];
0x001CBE        5010003F                 I1 = Null + r1;
0x001CBF        D13B001A                 r1 = M[r9 + 26];
0x001CC0        5020003F                 I2 = Null + r1;
0x001CC1        D13B001C                 r1 = M[r9 + 28];
0x001CC2        9B320000                 r1 = r1 * r0 (int);
0x001CC3        D14B0017                 r2 = M[r9 + 23];
0x001CC4        5043004F                 I4 = r1 + r2;
0x001CC5        51340010                 I3 = r2 + 16;
0x001CC6        21020008                 Null = r0 - 8;
0x001CC7        54430030                 if EQ I4 = r1 + I3;
0x001CC8        01200002                 r0 = Null + 2;
0x001CC9        0170FFF6                 r5 = Null + -10;
0x001CCA        0047350F                 r2 = r5 + Null, r1 = M[I1,M1];

 <$M.sbc.calc_bit_allocation.sj_loudness_chan_loop>
0x001CCB        D1CB0021                 r10 = M[r9 + 33];
0x001CCC        59340001                 I3 = I4 + 1;
0x001CCD        03000050                 Null = Null + Null, r3 = M[I4,0];
0x001CCE        E5F00005                 do $M.sbc.calc_bit_allocation.sj_loudness_sb_loop;
0x001CCF        0003000F                 Null = r1 + Null;
0x001CD0        20433551                 if NE r2 = r1 - r3, r1 = M[I1,M1];
0x001CD1        90445D65                 if POS r2 = r2 ASHIFT r4, r3 = M[I3,M1];
0x001CD2        0047C90F                 r2 = r5 + Null, M[I2,M1] = r2;

 <$M.sbc.calc_bit_allocation.sj_loudness_sb_loop>
0x001CD3        E422003F                 r0 = r0 - 1;
0x001CD4        DD10FFF7                 if NE jump $M.sbc.calc_bit_allocation.sj_loudness_chan_loop;

 <$M.sbc.calc_bit_allocation.sj_maxbitneedindex>
0x001CD5        D1CB0021                 r10 = M[r9 + 33];
0x001CD6        99CC0002                 r10 = r10 * 2 (int);
0x001CD7        D14B001A                 r2 = M[r9 + 26];
0x001CD8        5020004F                 I2 = Null + r2;
0x001CD9        E1F0003C                 call $M.sbc.calc_bit_allocation.share_code_1;

 <$M.sbc.calc_bit_allocation.sj_findbitslice_loop1>
0x001CDA        D1CB0021                 r10 = M[r9 + 33];
0x001CDB        99CC0002                 r10 = r10 * 2 (int);
0x001CDC        D17B001A                 r5 = M[r9 + 26];
0x001CDD        5020007F                 I2 = Null + r5;
0x001CDE        E1F00040                 call $M.sbc.calc_bit_allocation.share_code_2;
0x001CDF        DD40FFFB                 if NEG jump $M.sbc.calc_bit_allocation.sj_findbitslice_loop1;
0x001CE0        D1CB001B                 r10 = M[r9 + 27];
0x001CE1        501000CF                 I1 = Null + r10;
0x001CE2        D1CB001A                 r10 = M[r9 + 26];
0x001CE3        502000CF                 I2 = Null + r10;
0x001CE4        D1CB0021                 r10 = M[r9 + 33];
0x001CE5        99CC0002                 r10 = r10 * 2 (int);
0x001CE6        E1F0004B                 call $M.sbc.calc_bit_allocation.share_code_3;
0x001CE7        D1CB0021                 r10 = M[r9 + 33];
0x001CE8        01600000                 r4 = Null + 0;
0x001CE9        01200000                 r0 = Null + 0;

 <$M.sbc.calc_bit_allocation.sj_remainingbits_loop>
0x001CEA        5022006F                 I2 = r0 + r4;
0x001CEB        D13B001B                 r1 = M[r9 + 27];
0x001CEC        5812003F                 I1 = I2 + r1;
0x001CED        D13B001A                 r1 = M[r9 + 26];
0x001CEE        5B230000                 I2 = I2 + r1;
0x001CEF        D13B0022                 r1 = M[r9 + 34];
0x001CF0        2005003F                 Null = r3 - r1;
0x001CF1        DD50000A                 if POS jump $M.sbc.calc_bit_allocation.sj_remainingbits_end;
0x001CF2        E1F0004F                 call $M.sbc.calc_bit_allocation.share_code_4;
0x001CF3        200200CF                 Null = r0 - r10;
0x001CF4        DD000003                 if EQ jump $M.sbc.calc_bit_allocation.sj_remainingbits_chanchange;
0x001CF5        002C000F                 r0 = r10 + Null;
0x001CF6        DDF0FFF4                 jump $M.sbc.calc_bit_allocation.sj_remainingbits_loop;

 <$M.sbc.calc_bit_allocation.sj_remainingbits_chanchange>
0x001CF7        01200000                 r0 = Null + 0;
0x001CF8        E466002F                 r4 = r4 + 1;
0x001CF9        200600CF                 Null = r4 - r10;
0x001CFA        DD10FFF0                 if NE jump $M.sbc.calc_bit_allocation.sj_remainingbits_loop;

 <$M.sbc.calc_bit_allocation.sj_remainingbits_end>
0x001CFB        01600000                 r4 = Null + 0;
0x001CFC        01200000                 r0 = Null + 0;

 <$M.sbc.calc_bit_allocation.sj_remainingbits_extra_loop>
0x001CFD        5022006F                 I2 = r0 + r4;
0x001CFE        D13B001B                 r1 = M[r9 + 27];
0x001CFF        5812003F                 I1 = I2 + r1;
0x001D00        D13B001A                 r1 = M[r9 + 26];
0x001D01        5B230000                 I2 = I2 + r1;
0x001D02        D13B0022                 r1 = M[r9 + 34];
0x001D03        2005003F                 Null = r3 - r1;
0x001D04        DD500010                 if POS jump $M.sbc.calc_bit_allocation.sj_remainingbits_extra_end;
0x001D05        03003400                 Null = Null + Null, r1 = M[I1,0];
0x001D06        03007800                 Null = Null + Null, r5 = M[I2,0];
0x001D07        21030010                 Null = r1 - 16;
0x001D08        DD500003                 if POS jump $M.sbc.calc_bit_allocation.sj_remainingbits_extra_endif;
0x001D09        E433002F                 r1 = r1 + 1;
0x001D0A        E455002F                 r3 = r3 + 1;

 <$M.sbc.calc_bit_allocation.sj_remainingbits_extra_endif>
0x001D0B        0300B500                 Null = Null + Null, M[I1,1] = r1;
0x001D0C        200200CF                 Null = r0 - r10;
0x001D0D        DD000003                 if EQ jump $M.sbc.calc_bit_allocation.sj_remainingbits_extra_chanchange;
0x001D0E        002C000F                 r0 = r10 + Null;
0x001D0F        DDF0FFEE                 jump $M.sbc.calc_bit_allocation.sj_remainingbits_extra_loop;

 <$M.sbc.calc_bit_allocation.sj_remainingbits_extra_chanchange>
0x001D10        01200000                 r0 = Null + 0;
0x001D11        E466002F                 r4 = r4 + 1;
0x001D12        200600CF                 Null = r4 - r10;
0x001D13        DD10FFEA                 if NE jump $M.sbc.calc_bit_allocation.sj_remainingbits_extra_loop;

 <$M.sbc.calc_bit_allocation.sj_remainingbits_extra_end>
0x001D14        DDF0F9B5                 jump $pop_rLink_and_rts;

 <$M.sbc.calc_bit_allocation.share_code_1>
0x001D15        01400000                 r2 = Null + 0;
0x001D16        E5F00004                 do $M.sbc.calc_bit_allocation.maxbitneed_loop;
0x001D17        03003900                 Null = Null + Null, r1 = M[I2,1];
0x001D18        2004003F                 Null = r2 - r1;
0x001D19        00430004                 if NEG r2 = r1 + Null;

 <$M.sbc.calc_bit_allocation.maxbitneed_loop>
0x001D1A        01500000                 r3 = Null + 0;
0x001D1B        01600000                 r4 = Null + 0;
0x001D1C        E444002F                 r2 = r2 + 1;
0x001D1D        DC0D000F                 rts;

 <$M.sbc.calc_bit_allocation.share_code_2>
0x001D1E        E444003F                 r2 = r2 - 1;
0x001D1F        03560000                 r3 = r3 + r4;
0x001D20        01600000                 r4 = Null + 0;
0x001D21        E5F0000C                 do $M.sbc.calc_bit_allocation.findbitslice_loop2;
0x001D22        03003900                 Null = Null + Null, r1 = M[I2,1];
0x001D23        2073004F                 r5 = r1 - r2;
0x001D24        21070002                 Null = r5 - 2;
0x001D25        DD400004                 if NEG jump $M.sbc.calc_bit_allocation.findbitslice_elseif1;
0x001D26        21070010                 Null = r5 - 16;
0x001D27        DD500002                 if POS jump $M.sbc.calc_bit_allocation.findbitslice_elseif1;
0x001D28        E466002F                 r4 = r4 + 1;

 <$M.sbc.calc_bit_allocation.findbitslice_elseif1>
0x001D29        E407003F                 Null = r5 - 1;
0x001D2A        DD100002                 if NE jump $M.sbc.calc_bit_allocation.findbitslice_endif1;
0x001D2B        01660002                 r4 = r4 + 2;

 <$M.sbc.calc_bit_allocation.findbitslice_endif1>
0x001D2C        03000000                 Null = Null + Null;

 <$M.sbc.calc_bit_allocation.findbitslice_loop2>
0x001D2D        0075006F                 r5 = r3 + r4;
0x001D2E        D1CB0022                 r10 = M[r9 + 34];
0x001D2F        200700CF                 Null = r5 - r10;
0x001D30        DC0D000F                 rts;

 <$M.sbc.calc_bit_allocation.share_code_3>
0x001D31        D13B0022                 r1 = M[r9 + 34];
0x001D32        2007003F                 Null = r5 - r1;
0x001D33        DD100003                 if NE jump $M.sbc.calc_bit_allocation.findbitslice_endif2;
0x001D34        03560000                 r3 = r3 + r4;
0x001D35        E444003F                 r2 = r2 - 1;

 <$M.sbc.calc_bit_allocation.findbitslice_endif2>
0x001D36        E5F0000A                 do $M.sbc.calc_bit_allocation.distbits_loop;
0x001D37        03003900                 Null = Null + Null, r1 = M[I2,1];
0x001D38        2073004F                 r5 = r1 - r2;
0x001D39        01300000                 r1 = Null + 0;
0x001D3A        21070002                 Null = r5 - 2;
0x001D3B        00370005                 if POS r1 = r5 + Null;
0x001D3C        01700010                 r5 = Null + 16;
0x001D3D        21030010                 Null = r1 - 16;
0x001D3E        00370005                 if POS r1 = r5 + Null;
0x001D3F        0300B500                 Null = Null + Null, M[I1,1] = r1;

 <$M.sbc.calc_bit_allocation.distbits_loop>
0x001D40        DC0D000F                 rts;

 <$M.sbc.calc_bit_allocation.share_code_4>
0x001D41        03003400                 Null = Null + Null, r1 = M[I1,0];
0x001D42        03007900                 Null = Null + Null, r5 = M[I2,1];
0x001D43        21030002                 Null = r1 - 2;
0x001D44        DD400006                 if NEG jump $M.sbc.calc_bit_allocation.remainingbits_elseif;
0x001D45        21030010                 Null = r1 - 16;
0x001D46        DD500004                 if POS jump $M.sbc.calc_bit_allocation.remainingbits_elseif;
0x001D47        E433002F                 r1 = r1 + 1;
0x001D48        E455002F                 r3 = r3 + 1;
0x001D49        DDF0000A                 jump $M.sbc.calc_bit_allocation.remainingbits_endif;

 <$M.sbc.calc_bit_allocation.remainingbits_elseif>
0x001D4A        23740000                 r5 = r5 - r2;
0x001D4B        E407003F                 Null = r5 - 1;
0x001D4C        DD100007                 if NE jump $M.sbc.calc_bit_allocation.remainingbits_endif;
0x001D4D        D17B0022                 r5 = M[r9 + 34];
0x001D4E        23750000                 r5 = r5 - r3;
0x001D4F        21070002                 Null = r5 - 2;
0x001D50        DD400003                 if NEG jump $M.sbc.calc_bit_allocation.remainingbits_endif;
0x001D51        01300002                 r1 = Null + 2;
0x001D52        01550002                 r3 = r3 + 2;

 <$M.sbc.calc_bit_allocation.remainingbits_endif>
0x001D53        0300B500                 Null = Null + Null, M[I1,1] = r1;
0x001D54        DC0D000F                 rts;

 <$M.sbc.calc_bit_allocation.corrupt_frame_error>
0x001D55        E420002F                 r0 = Null + 1;
0x001D56        D52B0036                 M[r9 + 54] = r0;
0x001D57        DDF0F972                 jump $pop_rLink_and_rts;

 <$kal_float_lib.__zero.call_entry>
0x001D58        F3D00000                 push rLink;

 <$kal_float_lib.__zero.jump_entry>
0x001D59        01200000                 r0 = Null + 0;
0x001D5A        01300000                 r1 = Null + 0;
0x001D5B        F3D40000                 pop rLink;
0x001D5C        DC0D000F                 rts;

 <$kal_float_lib.__renorm.call_entry>
0x001D5D        F3D00000                 push rLink;

 <$kal_float_lib.__renorm.jump_entry>
0x001D5E        0003000F                 Null = r1 + Null;
0x001D5F        DD00FFFA                 if EQ jump $kal_float_lib.__zero.jump_entry;
0x001D60        F3600000                 push r4;
0x001D61        816200FF                 r4 = r0 AND 0xff;
0x001D62        FD000080 81220000        r0 = r0 AND 0x800000;
0x001D64        0003000F                 Null = r1 + Null;
0x001D65        DD400004                 if NEG jump $kal_float_lib.__renorm_rebuild_and_exit;

 <$kal_float_lib.__renorm_loop>
0x001D66        E466003F                 r4 = r4 - 1;
0x001D67        8D330001                 r1 = r1 LSHIFT 1;
0x001D68        DD50FFFE                 if POS jump $kal_float_lib.__renorm_loop;

 <$kal_float_lib.__renorm_rebuild_and_exit>
0x001D69        816600FF                 r4 = r4 AND 0xff;
0x001D6A        87260000                 r0 = r0 OR r4;
0x001D6B        F3640000                 pop r4;
0x001D6C        F3D40000                 pop rLink;
0x001D6D        DC0D000F                 rts;

 <$kal_float_lib.__add.jump_entry>
0x001D6E        F1000330                 pushm <r2, r3, r6, r7>;
0x001D6F        0003000F                 Null = r1 + Null;
0x001D70        00240000                 if EQ r0 = r2 + Null;
0x001D71        0005000F                 Null = r3 + Null;
0x001D72        00420000                 if EQ r2 = r0 + Null;
0x001D73        817200FF                 r5 = r0 AND 0xff;
0x001D74        818400FF                 r6 = r2 AND 0xff;
0x001D75        2097008F                 r7 = r5 - r6;
0x001D76        DD400005                 if NEG jump $kal_float_lib.__add_shift_op1;
0x001D77        2090009F                 r7 = Null - r7;
0x001D78        8F590000                 r3 = r3 LSHIFT r7;
0x001D79        E427002F                 r0 = r5 + 1;
0x001D7A        DDF00003                 jump $kal_float_lib.__add_add_and_exit;

 <$kal_float_lib.__add_shift_op1>
0x001D7B        8F390000                 r1 = r1 LSHIFT r7;
0x001D7C        E428002F                 r0 = r6 + 1;

 <$kal_float_lib.__add_add_and_exit>
0x001D7D        8D33007F                 r1 = r1 LSHIFT -1;
0x001D7E        8D55007F                 r3 = r3 LSHIFT -1;
0x001D7F        03350000                 r1 = r1 + r3;
0x001D80        87260000                 r0 = r0 OR r4;
0x001D81        F1040330                 popm <r2, r3, r6, r7>;
0x001D82        F10400C0                 popm <r4, r5>;
0x001D83        DDF0FFDB                 jump $kal_float_lib.__renorm.jump_entry;

 <$kal_float_lib.__sub.jump_entry>
0x001D84        F1000330                 pushm <r2, r3, r6, r7>;
0x001D85        0003000F                 Null = r1 + Null;
0x001D86        00240000                 if EQ r0 = r2 + Null;
0x001D87        0005000F                 Null = r3 + Null;
0x001D88        00420000                 if EQ r2 = r0 + Null;
0x001D89        817200FF                 r5 = r0 AND 0xff;
0x001D8A        818400FF                 r6 = r2 AND 0xff;
0x001D8B        2097008F                 r7 = r5 - r6;
0x001D8C        DD400005                 if NEG jump $kal_float_lib.__sub_shift_op1;
0x001D8D        2090009F                 r7 = Null - r7;
0x001D8E        8F590000                 r3 = r3 LSHIFT r7;
0x001D8F        E427002F                 r0 = r5 + 1;
0x001D90        DDF00003                 jump $kal_float_lib.__sub_sub_and_exit;

 <$kal_float_lib.__sub_shift_op1>
0x001D91        8F390000                 r1 = r1 LSHIFT r7;
0x001D92        E428002F                 r0 = r6 + 1;

 <$kal_float_lib.__sub_sub_and_exit>
0x001D93        8D33007F                 r1 = r1 LSHIFT -1;
0x001D94        8D55007F                 r3 = r3 LSHIFT -1;
0x001D95        2003005F                 Null = r1 - r3;
0x001D96        DD400006                 if NEG jump $kal_float_lib.__sub_sub_a_from_b;
0x001D97        23350000                 r1 = r1 - r3;
0x001D98        87260000                 r0 = r0 OR r4;
0x001D99        F1040330                 popm <r2, r3, r6, r7>;
0x001D9A        F10400C0                 popm <r4, r5>;
0x001D9B        DDF0FFC3                 jump $kal_float_lib.__renorm.jump_entry;

 <$kal_float_lib.__sub_sub_a_from_b>
0x001D9C        2035003F                 r1 = r3 - r1;
0x001D9D        FD000080 89660000        r4 = r4 XOR 0x800000;
0x001D9F        87260000                 r0 = r0 OR r4;
0x001DA0        F1040330                 popm <r2, r3, r6, r7>;
0x001DA1        F10400C0                 popm <r4, r5>;
0x001DA2        DDF0FFBC                 jump $kal_float_lib.__renorm.jump_entry;

 <$kal_float_lib.q_to_float>
0x001DA3        F3D00000                 push rLink;

 <$kal_float_lib.q_to_float.jump_entry>
0x001DA4        0002000F                 Null = r0 + Null;
0x001DA5        DD00FFB4                 if EQ jump $kal_float_lib.__zero.jump_entry;
0x001DA6        F1000050                 pushm <r2, r4>;
0x001DA7        0042000F                 r2 = r0 + Null;
0x001DA8        FD000080 81620000        r4 = r0 AND 0x800000;
0x001DAA        20400041                 if NE r2 = Null - r2;
0x001DAB        0123007F                 r0 = r1 + 127;
0x001DAC        87260000                 r0 = r0 OR r4;
0x001DAD        0034000F                 r1 = r2 + Null;
0x001DAE        F1040050                 popm <r2, r4>;
0x001DAF        DDF0FFAF                 jump $kal_float_lib.__renorm.jump_entry;

 <$kal_float_lib.float_to_q>
0x001DB0        F3D00000                 push rLink;

 <$kal_float_lib.float_to_q.jump_entry>
0x001DB1        F1000060                 pushm <r3, r4>;
0x001DB2        8D33007F                 r1 = r1 LSHIFT -1;
0x001DB3        815200FF                 r3 = r0 AND 0xff;
0x001DB4        E455003F                 r3 = r3 - 1;
0x001DB5        FD000080 81620000        r4 = r0 AND 0x800000;
0x001DB7        20300031                 if NE r1 = Null - r1;
0x001DB8        21550097                 r3 = r3 - 151;
0x001DB9        03540000                 r3 = r3 + r2;
0x001DBA        9023005F                 r0 = r1 ASHIFT r3;
0x001DBB        F1040060                 popm <r3, r4>;
0x001DBC        F3D40000                 pop rLink;
0x001DBD        DC0D000F                 rts;

 <$kal_float_lib.int_to_float>
0x001DBE        F3D00000                 push rLink;
0x001DBF        01300018                 r1 = Null + 24;
0x001DC0        DDF0FFE4                 jump $kal_float_lib.q_to_float.jump_entry;

 <$kal_float_lib.frac_to_float>
0x001DC1        F3D00000                 push rLink;
0x001DC2        E430002F                 r1 = Null + 1;
0x001DC3        DDF0FFE1                 jump $kal_float_lib.q_to_float.jump_entry;

 <$kal_float_lib.float_to_int>
0x001DC4        F1002010                 pushm <r2, rLink>;
0x001DC5        01400002                 r2 = Null + 2;
0x001DC6        E1F0FFEA                 call $kal_float_lib.float_to_q;
0x001DC7        F1042010                 popm <r2, rLink>;
0x001DC8        DC0D000F                 rts;

 <$kal_float_lib.float_to_frac>
0x001DC9        F1002010                 pushm <r2, rLink>;
0x001DCA        01400019                 r2 = Null + 25;
0x001DCB        E1F0FFE5                 call $kal_float_lib.float_to_q;
0x001DCC        F1042010                 popm <r2, rLink>;
0x001DCD        DC0D000F                 rts;

 <$kal_float_lib.neg>
0x001DCE        FD000080 89220000        r0 = r0 XOR 0x800000;
0x001DD0        DC0D000F                 rts;

 <$kal_float_lib.add>
0x001DD1        F3D00000                 push rLink;
0x001DD2        F10000C0                 pushm <r4, r5>;
0x001DD3        FD000080 81620000        r4 = r0 AND 0x800000;
0x001DD5        FD000080 81740000        r5 = r2 AND 0x800000;
0x001DD7        2006007F                 Null = r4 - r5;
0x001DD8        DD00FF96                 if EQ jump $kal_float_lib.__add.jump_entry;
0x001DD9        DDF0FFAB                 jump $kal_float_lib.__sub.jump_entry;

 <$kal_float_lib.sub>
0x001DDA        F3D00000                 push rLink;
0x001DDB        F10000C0                 pushm <r4, r5>;
0x001DDC        FD000080 81620000        r4 = r0 AND 0x800000;
0x001DDE        FD000080 81740000        r5 = r2 AND 0x800000;
0x001DE0        2006007F                 Null = r4 - r5;
0x001DE1        DD00FFA3                 if EQ jump $kal_float_lib.__sub.jump_entry;
0x001DE2        DDF0FF8C                 jump $kal_float_lib.__add.jump_entry;

 <$kal_float_lib.mul>
0x001DE3        F3D00000                 push rLink;
0x001DE4        0003000F                 Null = r1 + Null;
0x001DE5        DD00FF74                 if EQ jump $kal_float_lib.__zero.jump_entry;
0x001DE6        0005000F                 Null = r3 + Null;
0x001DE7        DD00FF72                 if EQ jump $kal_float_lib.__zero.jump_entry;
0x001DE8        F10000E0                 pushm <r3, r4, r5>;
0x001DE9        816200FF                 r4 = r0 AND 0xff;
0x001DEA        817400FF                 r5 = r2 AND 0xff;
0x001DEB        03670000                 r4 = r4 + r5;
0x001DEC        2166007F                 r4 = r4 - 127;
0x001DED        8872004F                 r5 = r0 XOR r2;
0x001DEE        FD000080 81770000        r5 = r5 AND 0x800000;
0x001DF0        8426007F                 r0 = r4 OR r5;
0x001DF1        8D33007F                 r1 = r1 LSHIFT -1;
0x001DF2        8D55007F                 r3 = r3 LSHIFT -1;
0x001DF3        CC13005F                 rMAC = r1 * r3 (SS);
0x001DF4        0031000F                 r1 = rMAC + Null;
0x001DF5        8D330001                 r1 = r1 LSHIFT 1;
0x001DF6        F10400E0                 popm <r3, r4, r5>;
0x001DF7        DDF0FF67                 jump $kal_float_lib.__renorm.jump_entry;

 <$kal_float_lib.recip>
0x001DF8        F3D00000                 push rLink;
0x001DF9        F10010F0                 pushm <r2, r3, r4, r5, r10>;
0x001DFA        654200FF                 r2 = 255 - r0;
0x001DFB        91530017                 r3 = r1 ASHIFT 23;
0x001DFC        F100000C                 pushm <r0, r1>;
0x001DFD        01C00006                 r10 = Null + 6;
0x001DFE        E5F00012                 do $kal_float_lib._recip_iteration_loop;
0x001DFF        F104000C                 popm <r0, r1>;
0x001E00        F100000C                 pushm <r0, r1>;
0x001E01        E1F0FFE2                 call $kal_float_lib.mul;
0x001E02        F100003C                 pushm <r0, r1, r2, r3>;
0x001E03        F10400F0                 popm <r2, r3, r4, r5>;
0x001E04        01200080                 r0 = Null + 128;
0x001E05        FD000080 01300000        r1 = Null + -8388608;
0x001E07        E1F0FFD3                 call $kal_float_lib.sub;
0x001E08        0046000F                 r2 = r4 + Null;
0x001E09        0057000F                 r3 = r5 + Null;
0x001E0A        E1F0FFD9                 call $kal_float_lib.mul;
0x001E0B        0046000F                 r2 = r4 + Null;
0x001E0C        0057000F                 r3 = r5 + Null;
0x001E0D        E1F0FFC4                 call $kal_float_lib.add;
0x001E0E        0042000F                 r2 = r0 + Null;
0x001E0F        0053000F                 r3 = r1 + Null;

 <$kal_float_lib._recip_iteration_loop>
0x001E10        F104000C                 popm <r0, r1>;
0x001E11        0024000F                 r0 = r2 + Null;
0x001E12        0035000F                 r1 = r3 + Null;
0x001E13        F10410F0                 popm <r2, r3, r4, r5, r10>;
0x001E14        DDF0FF4A                 jump $kal_float_lib.__renorm.jump_entry;

 <$kal_float_lib.div>
0x001E15        F3D00000                 push rLink;
0x001E16        F1000030                 pushm <r2, r3>;
0x001E17        F100000C                 pushm <r0, r1>;
0x001E18        0024000F                 r0 = r2 + Null;
0x001E19        0035000F                 r1 = r3 + Null;
0x001E1A        E1F0FFDE                 call $kal_float_lib.recip;
0x001E1B        0042000F                 r2 = r0 + Null;
0x001E1C        0053000F                 r3 = r1 + Null;
0x001E1D        F104000C                 popm <r0, r1>;
0x001E1E        E1F0FFC5                 call $kal_float_lib.mul;
0x001E1F        F1040030                 popm <r2, r3>;
0x001E20        DDF0FF3E                 jump $kal_float_lib.__renorm.jump_entry;

 <$kal_float_lib.sqrt>
0x001E21        F3D00000                 push rLink;
0x001E22        F1000070                 pushm <r2, r3, r4>;
0x001E23        81420001                 r2 = r0 AND 0x1;
0x001E24        FD000080 81520000        r3 = r0 AND 0x800000;
0x001E26        812200FF                 r0 = r0 AND 0xff;
0x001E27        21220080                 r0 = r0 - 128;
0x001E28        8D22007F                 r0 = r0 LSHIFT -1;
0x001E29        87250000                 r0 = r0 OR r3;
0x001E2A        01220081                 r0 = r0 + 129;
0x001E2B        8D33007F                 r1 = r1 LSHIFT -1;
0x001E2C        FD000017 0110AA89        rMAC = Null + 1550985;
0x001E2E        FD000064 0160CE70        r4 = Null + 6606448;
0x001E30        AC13006F                 rMAC = rMAC + r1 * r4 (SS);
0x001E31        CC53003F                 r3 = r1 * r1 (SS);
0x001E32        FD0000D1 01606873        r4 = Null + -3053453;
0x001E34        AC15006F                 rMAC = rMAC + r3 * r4 (SS);
0x001E35        CC55003F                 r3 = r3 * r1 (SS);
0x001E36        FD00000C 0160A10F        r4 = Null + 827663;
0x001E38        AC15006F                 rMAC = rMAC + r3 * r4 (SS);
0x001E39        0031000F                 r1 = rMAC + Null;
0x001E3A        03400000                 r2 = r2 + Null;
0x001E3B        DD000005                 if EQ jump $kal_float_lib._sqrt_exit;
0x001E3C        FD00005A 0160827B        r4 = Null + 5931643;
0x001E3E        CC33006F                 r1 = r1 * r4 (SS);
0x001E3F        E422002F                 r0 = r0 + 1;

 <$kal_float_lib._sqrt_exit>
0x001E40        F1040070                 popm <r2, r3, r4>;
0x001E41        DDF0FF1D                 jump $kal_float_lib.__renorm.jump_entry;

 <$M.frame_proc_stream_configure.func>
0x001E42        F3D00000                 push rLink;
0x001E43        195094AC                 M[$M.frame_proc_stream_configure.if_struc_temp] = r3 + Null;
0x001E44        D1250000                 r0 = M[r3 + 0];
0x001E45        0070000F                 r5 = Null + Null;
0x001E46        01550001                 r3 = r3 + 1;
0x001E47        D035000F                 r1 = M[r3 + Null];
0x001E48        83320000                 r1 = r1 AND r0;
0x001E49        01400004                 r2 = Null + 4;
0x001E4A        01600004                 r4 = Null + 4;
0x001E4B        8004003F                 Null = r2 AND r1;
0x001E4C        00600000                 if EQ r4 = Null + Null;
0x001E4D        87760000                 r5 = r5 OR r4;
0x001E4E        01400001                 r2 = Null + 1;
0x001E4F        E460002F                 r4 = Null + 1;
0x001E50        8004003F                 Null = r2 AND r1;
0x001E51        00600000                 if EQ r4 = Null + Null;
0x001E52        87760000                 r5 = r5 OR r4;
0x001E53        01400040                 r2 = Null + 64;
0x001E54        01600040                 r4 = Null + 64;
0x001E55        8004003F                 Null = r2 AND r1;
0x001E56        00600000                 if EQ r4 = Null + Null;
0x001E57        87760000                 r5 = r5 OR r4;
0x001E58        01400008                 r2 = Null + 8;
0x001E59        01600008                 r4 = Null + 8;
0x001E5A        8004003F                 Null = r2 AND r1;
0x001E5B        00600000                 if EQ r4 = Null + Null;
0x001E5C        87760000                 r5 = r5 OR r4;
0x001E5D        01400002                 r2 = Null + 2;
0x001E5E        01600002                 r4 = Null + 2;
0x001E5F        8004003F                 Null = r2 AND r1;
0x001E60        00600000                 if EQ r4 = Null + Null;
0x001E61        87760000                 r5 = r5 OR r4;
0x001E62        19706498                 M[$music_example.DAC_IF_Connections] = r5 + Null;
0x001E63        0070000F                 r5 = Null + Null;
0x001E64        D035000F                 r1 = M[r3 + Null];
0x001E65        FD0000FF 8933FFFF        r1 = r1 XOR 0xffffff;
0x001E67        83320000                 r1 = r1 AND r0;
0x001E68        01400004                 r2 = Null + 4;
0x001E69        01600004                 r4 = Null + 4;
0x001E6A        8004003F                 Null = r2 AND r1;
0x001E6B        00600000                 if EQ r4 = Null + Null;
0x001E6C        87760000                 r5 = r5 OR r4;
0x001E6D        01400001                 r2 = Null + 1;
0x001E6E        E460002F                 r4 = Null + 1;
0x001E6F        8004003F                 Null = r2 AND r1;
0x001E70        00600000                 if EQ r4 = Null + Null;
0x001E71        87760000                 r5 = r5 OR r4;
0x001E72        01400010                 r2 = Null + 16;
0x001E73        01600010                 r4 = Null + 16;
0x001E74        8004003F                 Null = r2 AND r1;
0x001E75        00600000                 if EQ r4 = Null + Null;
0x001E76        87760000                 r5 = r5 OR r4;
0x001E77        01400040                 r2 = Null + 64;
0x001E78        01600040                 r4 = Null + 64;
0x001E79        8004003F                 Null = r2 AND r1;
0x001E7A        00600000                 if EQ r4 = Null + Null;
0x001E7B        87760000                 r5 = r5 OR r4;
0x001E7C        01400008                 r2 = Null + 8;
0x001E7D        01600008                 r4 = Null + 8;
0x001E7E        8004003F                 Null = r2 AND r1;
0x001E7F        00600000                 if EQ r4 = Null + Null;
0x001E80        87760000                 r5 = r5 OR r4;
0x001E81        01400002                 r2 = Null + 2;
0x001E82        01600002                 r4 = Null + 2;
0x001E83        8004003F                 Null = r2 AND r1;
0x001E84        00600000                 if EQ r4 = Null + Null;
0x001E85        87760000                 r5 = r5 OR r4;
0x001E86        01400020                 r2 = Null + 32;
0x001E87        01600020                 r4 = Null + 32;
0x001E88        8004003F                 Null = r2 AND r1;
0x001E89        00600000                 if EQ r4 = Null + Null;
0x001E8A        87760000                 r5 = r5 OR r4;
0x001E8B        19706499                 M[$music_example.I2S_IF_Connections] = r5 + Null;
0x001E8C        0070000F                 r5 = Null + Null;
0x001E8D        095094AC                 r3 = Null + M[$M.frame_proc_stream_configure.if_struc_temp];
0x001E8E        01550003                 r3 = r3 + 3;
0x001E8F        D035000F                 r1 = M[r3 + Null];
0x001E90        83320000                 r1 = r1 AND r0;
0x001E91        01400004                 r2 = Null + 4;
0x001E92        01600004                 r4 = Null + 4;
0x001E93        8004003F                 Null = r2 AND r1;
0x001E94        00600000                 if EQ r4 = Null + Null;
0x001E95        87760000                 r5 = r5 OR r4;
0x001E96        01400001                 r2 = Null + 1;
0x001E97        E460002F                 r4 = Null + 1;
0x001E98        8004003F                 Null = r2 AND r1;
0x001E99        00600000                 if EQ r4 = Null + Null;
0x001E9A        87760000                 r5 = r5 OR r4;
0x001E9B        01400040                 r2 = Null + 64;
0x001E9C        01600040                 r4 = Null + 64;
0x001E9D        8004003F                 Null = r2 AND r1;
0x001E9E        00600000                 if EQ r4 = Null + Null;
0x001E9F        87760000                 r5 = r5 OR r4;
0x001EA0        01400008                 r2 = Null + 8;
0x001EA1        01600008                 r4 = Null + 8;
0x001EA2        8004003F                 Null = r2 AND r1;
0x001EA3        00600000                 if EQ r4 = Null + Null;
0x001EA4        87760000                 r5 = r5 OR r4;
0x001EA5        01400002                 r2 = Null + 2;
0x001EA6        01600002                 r4 = Null + 2;
0x001EA7        8004003F                 Null = r2 AND r1;
0x001EA8        00600000                 if EQ r4 = Null + Null;
0x001EA9        87760000                 r5 = r5 OR r4;
0x001EAA        19709498                 M[$music_example.SPDIF_IF_Connections] = r5 + Null;
0x001EAB        095094AC                 r3 = Null + M[$M.frame_proc_stream_configure.if_struc_temp];
0x001EAC        01550001                 r3 = r3 + 1;
0x001EAD        D035000F                 r1 = M[r3 + Null];
0x001EAE        01400004                 r2 = Null + 4;
0x001EAF        85440008                 r2 = r2 OR 0x8;
0x001EB0        E460002F                 r4 = Null + 1;
0x001EB1        8004003F                 Null = r2 AND r1;
0x001EB2        00600000                 if EQ r4 = Null + Null;
0x001EB3        196064AC                 M[$DAC_conn_aux] = r4 + Null;
0x001EB4        01400001                 r2 = Null + 1;
0x001EB5        85440002                 r2 = r2 OR 0x2;
0x001EB6        85440040                 r2 = r2 OR 0x40;
0x001EB7        E460002F                 r4 = Null + 1;
0x001EB8        8004003F                 Null = r2 AND r1;
0x001EB9        00600000                 if EQ r4 = Null + Null;
0x001EBA        196094AB                 M[$DAC_conn_main] = r4 + Null;
0x001EBB        01400001                 r2 = Null + 1;
0x001EBC        8002004F                 Null = r0 AND r2;
0x001EBD        DD000004                 if EQ jump $M.frame_proc_stream_configure.no_pri_left;
0x001EBE        013091E8                 r1 = Null + -28184;
0x001EBF        1930626A                 M[0x626a] = r1 + Null;
0x001EC0        DDF00003                 jump $M.frame_proc_stream_configure.check_pri_right;

 <$M.frame_proc_stream_configure.no_pri_left>
0x001EC1        1900626A                 M[0x626a] = Null + Null;
0x001EC2        19009476                 M[0xff9476] = Null + Null;

 <$M.frame_proc_stream_configure.check_pri_right>
0x001EC3        01400002                 r2 = Null + 2;
0x001EC4        8002004F                 Null = r0 AND r2;
0x001EC5        DD000004                 if EQ jump $M.frame_proc_stream_configure.no_pri_right;
0x001EC6        01306228                 r1 = Null + 25128;
0x001EC7        1930626B                 M[0x626b] = r1 + Null;
0x001EC8        DDF00003                 jump $M.frame_proc_stream_configure.xover_config;

 <$M.frame_proc_stream_configure.no_pri_right>
0x001EC9        1900626B                 M[0x626b] = Null + Null;
0x001ECA        19006478                 M[0x6478] = Null + Null;

 <$M.frame_proc_stream_configure.xover_config>
0x001ECB        FD0000FF 19006BFC        M[0xff6bfc] = Null + Null;
0x001ECD        FD0000FF 19006BFD        M[0xff6bfd] = Null + Null;
0x001ECF        01400010                 r2 = Null + 16;
0x001ED0        8002004F                 Null = r0 AND r2;
0x001ED1        DD00000E                 if EQ jump $M.frame_proc_stream_configure.no_sec_left;
0x001ED2        013091F5                 r1 = Null + -28171;
0x001ED3        1930626C                 M[0x626c] = r1 + Null;
0x001ED4        013092E7                 r1 = Null + -27929;
0x001ED5        FD0000FF 19306BFC        M[0xff6bfc] = r1 + Null;
0x001ED7        FD0000FF 0130375C        r1 = Null + -51364;
0x001ED9        FD0000FF 19306BFD        M[0xff6bfd] = r1 + Null;
0x001EDB        FD0000FF 01303610        r1 = Null + -51696;
0x001EDD        193007FA                 M[0x7fa] = r1 + Null;
0x001EDE        DDF00004                 jump $M.frame_proc_stream_configure.check_sec_right;

 <$M.frame_proc_stream_configure.no_sec_left>
0x001EDF        1900626C                 M[0x626c] = Null + Null;
0x001EE0        190007FA                 M[0x7fa] = Null + Null;
0x001EE1        1900647A                 M[0x647a] = Null + Null;

 <$M.frame_proc_stream_configure.check_sec_right>
0x001EE2        01400020                 r2 = Null + 32;
0x001EE3        8002004F                 Null = r0 AND r2;
0x001EE4        DD00000E                 if EQ jump $M.frame_proc_stream_configure.no_sec_right;
0x001EE5        01306235                 r1 = Null + 25141;
0x001EE6        1930626D                 M[0x626d] = r1 + Null;
0x001EE7        013092E7                 r1 = Null + -27929;
0x001EE8        FD0000FF 19306BFC        M[0xff6bfc] = r1 + Null;
0x001EEA        FD0000FF 0130375C        r1 = Null + -51364;
0x001EEC        FD0000FF 19306BFD        M[0xff6bfd] = r1 + Null;
0x001EEE        FD0000FF 01303630        r1 = Null + -51664;
0x001EF0        193007FB                 M[0x7fb] = r1 + Null;
0x001EF1        DDF00004                 jump $M.frame_proc_stream_configure.aux_config;

 <$M.frame_proc_stream_configure.no_sec_right>
0x001EF2        1900626D                 M[0x626d] = Null + Null;
0x001EF3        190007FB                 M[0x7fb] = Null + Null;
0x001EF4        1900947A                 M[0xff947a] = Null + Null;

 <$M.frame_proc_stream_configure.aux_config>
0x001EF5        01400004                 r2 = Null + 4;
0x001EF6        85440008                 r2 = r2 OR 0x8;
0x001EF7        8034002F                 r1 = r2 AND r0;
0x001EF8        DD000015                 if EQ jump $M.frame_proc_stream_configure.no_aux;
0x001EF9        E450002F                 r3 = Null + 1;
0x001EFA        195064A8                 M[$M.system_config.data.uses_aux_out] = r3 + Null;
0x001EFB        01600004                 r4 = Null + 4;
0x001EFC        2060006F                 r4 = Null - r4;
0x001EFD        8F460000                 r2 = r2 LSHIFT r4;
0x001EFE        8F360000                 r1 = r1 LSHIFT r4;
0x001EFF        2034003F                 r1 = r2 - r1;
0x001F00        DD100003                 if NE jump $M.frame_proc_stream_configure.check_left_aux;
0x001F01        190094A8                 M[$M.system_config.data.aux_downmix] = Null + Null;
0x001F02        DDF0000E                 jump $M.frame_proc_stream_configure.wired_sub_config;

 <$M.frame_proc_stream_configure.check_left_aux>
0x001F03        E403003F                 Null = r1 - 1;
0x001F04        DD100005                 if NE jump $M.frame_proc_stream_configure.check_right_aux;
0x001F05        195094A8                 M[$M.system_config.data.aux_downmix] = r3 + Null;
0x001F06        01309202                 r1 = Null + -28158;
0x001F07        193092EF                 M[0xff92ef] = r1 + Null;
0x001F08        DDF00008                 jump $M.frame_proc_stream_configure.wired_sub_config;

 <$M.frame_proc_stream_configure.check_right_aux>
0x001F09        195094A8                 M[$M.system_config.data.aux_downmix] = r3 + Null;
0x001F0A        01306242                 r1 = Null + 25154;
0x001F0B        193092EF                 M[0xff92ef] = r1 + Null;
0x001F0C        DDF00004                 jump $M.frame_proc_stream_configure.wired_sub_config;

 <$M.frame_proc_stream_configure.no_aux>
0x001F0D        190064A8                 M[$M.system_config.data.uses_aux_out] = Null + Null;
0x001F0E        1900647C                 M[0x647c] = Null + Null;
0x001F0F        1900947C                 M[0xff947c] = Null + Null;

 <$M.frame_proc_stream_configure.wired_sub_config>
0x001F10        01400040                 r2 = Null + 64;
0x001F11        8004002F                 Null = r2 AND r0;
0x001F12        DD000011                 if EQ jump $M.frame_proc_stream_configure.no_wired_sub;
0x001F13        0130920F                 r1 = Null + -28145;
0x001F14        1930626F                 M[0x626f] = r1 + Null;
0x001F15        1930901D                 M[$M.system_config.data.wired_sub_channel_vol_struc] = r1 + Null;
0x001F16        1930901E                 M[0xff901e] = r1 + Null;
0x001F17        E450002F                 r3 = Null + 1;
0x001F18        195064A9                 M[$M.system_config.data.uses_wired_sub] = r3 + Null;
0x001F19        01500002                 r3 = Null + 2;
0x001F1A        195007F7                 M[$M.system_config.data.spkr_ctrl_coefs] = r3 + Null;
0x001F1B        190092F6                 M[0xff92f6] = Null + Null;
0x001F1C        1900633C                 M[0x633c] = Null + Null;
0x001F1D        190092FC                 M[0xff92fc] = Null + Null;
0x001F1E        19006342                 M[0x6342] = Null + Null;
0x001F1F        19009302                 M[0xff9302] = Null + Null;
0x001F20        19006348                 M[0x6348] = Null + Null;
0x001F21        190093AA                 M[$M.main.samples_latency_measure] = Null + Null;
0x001F22        DDF00005                 jump $M.frame_proc_stream_configure.done;

 <$M.frame_proc_stream_configure.no_wired_sub>
0x001F23        1900901D                 M[$M.system_config.data.wired_sub_channel_vol_struc] = Null + Null;
0x001F24        1900901E                 M[0xff901e] = Null + Null;
0x001F25        190064A9                 M[$M.system_config.data.uses_wired_sub] = Null + Null;
0x001F26        19009478                 M[0xff9478] = Null + Null;

 <$M.frame_proc_stream_configure.done>
0x001F27        DDF0F7A2                 jump $pop_rLink_and_rts;

 <$audio_proc.dbe.initialize>
0x001F28        F3D00000                 push rLink;
0x001F29        003C000F                 r1 = r10 + Null;
0x001F2A        510A0022                 I0 = r8 + 34;
0x001F2B        01C00053                 r10 = Null + 83;
0x001F2C        0020000F                 r0 = Null + Null;
0x001F2D        E5F00002                 do $M.audio_proc.dbe.initialize.lp_dbe_clr;
0x001F2E        0300A100                 Null = Null + Null, M[I0,1] = r0;

 <$M.audio_proc.dbe.initialize.lp_dbe_clr>
0x001F2F        00C3000F                 r10 = r1 + Null;
0x001F30        D12A0004                 r0 = M[r8 + 4];
0x001F31        D1220000                 r0 = M[r0 + 0];
0x001F32        81220002                 r0 = r0 AND 0x2;
0x001F33        E10006A8                 if EQ call $audio_proc.dbe.xover.initialize;
0x001F34        D12A0004                 r0 = M[r8 + 4];
0x001F35        D1220004                 r0 = M[r0 + 4];
0x001F36        FD000000 CD129630        rMAC = r0 * 0.0045833587646484375 (SS);
0x001F38        91E10012                 rMAC = rMAC ASHIFT 18 (MI);
0x001F39        FD000066 CD116666        rMAC = rMAC * 0.79999995231628418 (SS);
0x001F3B        9121007E                 r0 = rMAC ASHIFT -2;
0x001F3C        FD00007F CD22FFFF        r0 = r0 * 0.99999988079071045 (SS);
0x001F3E        FD000000 0122AAAB        r0 = r0 + 43691;
0x001F40        D13A0004                 r1 = M[r8 + 4];
0x001F41        D1330003                 r1 = M[r1 + 3];
0x001F42        FD000000 CD13AAAB        rMAC = r1 * 0.0052083730697631836 (SS);
0x001F44        91E10012                 rMAC = rMAC ASHIFT 18 (MI);
0x001F45        FD000066 CD116666        rMAC = rMAC * 0.79999995231628418 (SS);
0x001F47        9131007E                 r1 = rMAC ASHIFT -2;
0x001F48        FD00007F CD33FFFF        r1 = r1 * 0.99999988079071045 (SS);
0x001F4A        FD000000 0133AAAB        r1 = r1 + 43691;
0x001F4C        D53A0014                 M[r8 + 20] = r1;
0x001F4D        FD000070 CD42A3D7        r2 = r0 * 0.87999999523162842 (SS);
0x001F4F        CD532000                 r3 = r1 * 0.25 (SS);
0x001F50        D55A0016                 M[r8 + 22] = r3;
0x001F51        CD542000                 r3 = r2 * 0.25 (SS);
0x001F52        D55A0015                 M[r8 + 21] = r3;
0x001F53        CD644000                 r4 = r2 * 0.5 (SS);
0x001F54        CC75004F                 r5 = r3 * r2 (SS);
0x001F55        03670000                 r4 = r4 + r5;
0x001F56        FD000080 01660000        r4 = r4 + -8388608;
0x001F58        65660000                 r4 = 0 - r4;
0x001F59        D56A0017                 M[r8 + 23] = r4;
0x001F5A        CD640800                 r4 = r2 * 0.0625 (SS);
0x001F5B        CC65006F                 r4 = r3 * r4 (SS);
0x001F5C        2060006F                 r4 = Null - r4;
0x001F5D        D56A0018                 M[r8 + 24] = r4;
0x001F5E        99650002                 r4 = r3 * 2 (int);
0x001F5F        FD000080 01660000        r4 = r4 + -8388608;
0x001F61        65660000                 r4 = 0 - r4;
0x001F62        D56A0021                 M[r8 + 33] = r4;
0x001F63        D16A0018                 r4 = M[r8 + 24];
0x001F64        FD000080 65660000        r4 = -8388608 - r4;
0x001F66        D56A003D                 M[r8 + 61] = r4;
0x001F67        D16A0017                 r4 = M[r8 + 23];
0x001F68        CD66C000                 r4 = r4 * -0.5 (SS);
0x001F69        FD000040 21660000        r4 = r4 - 4194304;
0x001F6B        D56A003B                 M[r8 + 59] = r4;
0x001F6C        D16A0015                 r4 = M[r8 + 21];
0x001F6D        FD000040 65660000        r4 = 4194304 - r4;
0x001F6F        D56A003C                 M[r8 + 60] = r4;
0x001F70        D16A0015                 r4 = M[r8 + 21];
0x001F71        91660001                 r4 = r4 ASHIFT 1;
0x001F72        FD00007F 6566FFFF        r4 = 8388607 - r4;
0x001F74        D56A0030                 M[r8 + 48] = r4;
0x001F75        D52A0028                 M[r8 + 40] = r0;
0x001F76        D16A0015                 r4 = M[r8 + 21];
0x001F77        FD000080 01660000        r4 = r4 + -8388608;
0x001F79        65660000                 r4 = 0 - r4;
0x001F7A        D56A0029                 M[r8 + 41] = r4;
0x001F7B        D56A002D                 M[r8 + 45] = r4;
0x001F7C        D15A0016                 r3 = M[r8 + 22];
0x001F7D        91650001                 r4 = r3 ASHIFT 1;
0x001F7E        FD000080 01660000        r4 = r4 + -8388608;
0x001F80        65660000                 r4 = 0 - r4;
0x001F81        D56A0034                 M[r8 + 52] = r4;
0x001F82        D56A0038                 M[r8 + 56] = r4;
0x001F83        D16A0015                 r4 = M[r8 + 21];
0x001F84        D17A0016                 r5 = M[r8 + 22];
0x001F85        03670000                 r4 = r4 + r5;
0x001F86        D56A0037                 M[r8 + 55] = r4;
0x001F87        0160000C                 r4 = Null + 12;
0x001F88        D56A0049                 M[r8 + 73] = r4;
0x001F89        D50A004A                 M[r8 + 74] = Null;
0x001F8A        D50A004B                 M[r8 + 75] = Null;
0x001F8B        D50A0052                 M[r8 + 82] = Null;
0x001F8C        D50A0053                 M[r8 + 83] = Null;
0x001F8D        D50A0054                 M[r8 + 84] = Null;
0x001F8E        D16A0004                 r4 = M[r8 + 4];
0x001F8F        D1660005                 r4 = M[r4 + 5];
0x001F90        FD000001 996647AE        r4 = r4 * 83886 (int);
0x001F92        CD667F00                 r4 = r4 * 0.9921875 (SS);
0x001F93        D56A0019                 M[r8 + 25] = r4;
0x001F94        D16A0004                 r4 = M[r8 + 4];
0x001F95        D1660001                 r4 = M[r4 + 1];
0x001F96        FD0000E0 51060000        I0 = r4 + -2097152;
0x001F98        03006000                 Null = Null + Null, r4 = M[I0,0];
0x001F99        FD0000F9 CD12999A        rMAC = r0 * -0.04999995231628418 (SS);
0x001F9B        91110007                 rMAC = rMAC ASHIFT 7 (56bit);
0x001F9C        FD000003 CD115269        rMAC = rMAC * 0.025952458381652832 (SS);
0x001F9E        0021000F                 r0 = rMAC + Null;
0x001F9F        E1F0F5C1                 call $math.pow2_taylor;
0x001FA0        FD000000 CD22ADDF        r0 = r0 * 0.0053061246871948242 (SS);
0x001FA2        CC22006F                 r0 = r0 * r4 (SS);
0x001FA3        D52A004F                 M[r8 + 79] = r0;
0x001FA4        D16A0004                 r4 = M[r8 + 4];
0x001FA5        D1660002                 r4 = M[r4 + 2];
0x001FA6        91660074                 r4 = r4 ASHIFT -12;
0x001FA7        0130FFE5                 r1 = Null + -27;
0x001FA8        23360000                 r1 = r1 - r4;
0x001FA9        FD000003 99333333        r1 = r1 * 209715 (int);
0x001FAB        FD000006 CD13A4D2        rMAC = r1 * 0.051904916763305664 (SS);
0x001FAD        0021000F                 r0 = rMAC + Null;
0x001FAE        E1F0F5B2                 call $math.pow2_taylor;
0x001FAF        CD224000                 r0 = r0 * 0.5 (SS);
0x001FB0        D52A0051                 M[r8 + 81] = r0;
0x001FB1        012A0022                 r0 = r8 + 34;
0x001FB2        D52A0010                 M[r8 + 16] = r0;
0x001FB3        012A003E                 r0 = r8 + 62;
0x001FB4        D52A0011                 M[r8 + 17] = r0;
0x001FB5        012A005B                 r0 = r8 + 91;
0x001FB6        D52A0012                 M[r8 + 18] = r0;
0x001FB7        D50A0009                 M[r8 + 9] = Null;
0x001FB8        D12A0003                 r0 = M[r8 + 3];
0x001FB9        01300002                 r1 = Null + 2;
0x001FBA        01400004                 r2 = Null + 4;
0x001FBB        FD000001 21025888        Null = r0 - 88200;
0x001FBD        00340005                 if POS r1 = r2 + Null;
0x001FBE        D53A000D                 M[r8 + 13] = r1;
0x001FBF        E420003F                 r0 = Null - 1;
0x001FC0        0140FFFE                 r2 = Null + -2;
0x001FC1        21030004                 Null = r1 - 4;
0x001FC2        00240000                 if EQ r0 = r2 + Null;
0x001FC3        D52A000E                 M[r8 + 14] = r0;
0x001FC4        D50A0005                 M[r8 + 5] = Null;
0x001FC5        DDF0F704                 jump $pop_rLink_and_rts;

 <$cbops.dac_av_copy_m>
0x001FC6        E480002F                 r6 = Null + 1;
0x001FC7        DDF00002                 jump $M.cbops.dac_av_copy.func;

 <$cbops.dac_av_copy>
0x001FC8        01800000                 r6 = Null + 0;

 <$M.cbops.dac_av_copy.func>
0x001FC9        F3D00000                 push rLink;
0x001FCA        512A0001                 I2 = r8 + 1;
0x001FCB        03002900                 Null = Null + Null, r0 = M[I2,1];
0x001FCC        03003800                 Null = Null + Null, r1 = M[I2,0];
0x001FCD        193094DF                 M[$M.cbops.av_copy.control_cbuffer] = r1 + Null;
0x001FCE        5B220000                 I2 = I2 + r0;
0x001FCF        03002900                 Null = Null + Null, r0 = M[I2,1];
0x001FD0        03003800                 Null = Null + Null, r1 = M[I2,0];
0x001FD1        193064DF                 M[$M.cbops.av_copy.control_port] = r1 + Null;
0x001FD2        017063E2                 r5 = Null + 25570;
0x001FD3        0008000F                 Null = r6 + Null;
0x001FD4        DD000002                 if EQ jump $M.cbops.dac_av_copy.init_done;
0x001FD5        4872002F                 r5 = I2 + r0;

 <$M.cbops.dac_av_copy.init_done>
0x001FD6        197094E0                 M[$M.cbops.dac_av_copy.dac_av_struct] = r5 + Null;
0x001FD7        092064DF                 r0 = Null + M[$M.cbops.av_copy.control_port];
0x001FD8        E1F0F6BE                 call $cbuffer.is_it_enabled;
0x001FD9        DD000019                 if EQ jump $M.cbops.dac_av_copy.end_of_averaging;
0x001FDA        092094DF                 r0 = Null + M[$M.cbops.av_copy.control_cbuffer];
0x001FDB        E1F0F68C                 call $cbuffer.calc_amount_data;
0x001FDC        192064E0                 M[$M.cbops.dac_av_copy.buffer_level] = r0 + Null;
0x001FDD        092064DF                 r0 = Null + M[$M.cbops.av_copy.control_port];
0x001FDE        0052000F                 r3 = r0 + Null;
0x001FDF        E1F0F678                 call $cbuffer.calc_amount_space;
0x001FE0        E1F0F63F                 call $cbuffer.mmu_octets_to_samples;
0x001FE1        D1370001                 r1 = M[r5 + 1];
0x001FE2        2032003F                 r1 = r0 - r1;
0x001FE3        D5270001                 M[r5 + 1] = r0;
0x001FE4        D1270004                 r0 = M[r5 + 4];
0x001FE5        03320000                 r1 = r1 + r0;
0x001FE6        00330044                 if NEG r1 = r1 + r2;
0x001FE7        DD40000B                 if NEG jump $M.cbops.dac_av_copy.end_of_averaging;
0x001FE8        91230008                 r0 = r1 ASHIFT 8;
0x001FE9        D1370000                 r1 = M[r5 + 0];
0x001FEA        00320000                 if EQ r1 = r0 + Null;
0x001FEB        FD000006 95226666        r0 = r0 * 0.04999995231628418 (frac);
0x001FED        FD000079 9533999A        r1 = r1 * 0.95000004768371582 (frac);
0x001FEF        03320000                 r1 = r1 + r0;
0x001FF0        D5370000                 M[r5 + 0] = r1;
0x001FF1        DDF00001                 jump $M.cbops.dac_av_copy.end_of_averaging;

 <$M.cbops.dac_av_copy.end_of_averaging>
0x001FF2        190094DE                 M[$cbops.amount_written] = Null + Null;
0x001FF3        E1F0EA45                 call $cbops.copy;
0x001FF4        097094E0                 r5 = Null + M[$M.cbops.dac_av_copy.dac_av_struct];
0x001FF5        092094DE                 r0 = Null + M[$cbops.amount_written];
0x001FF6        D5270004                 M[r5 + 4] = r0;
0x001FF7        092064DF                 r0 = Null + M[$M.cbops.av_copy.control_port];
0x001FF8        0052000F                 r3 = r0 + Null;
0x001FF9        E1F0F65E                 call $cbuffer.calc_amount_space;
0x001FFA        E1F0F625                 call $cbuffer.mmu_octets_to_samples;
0x001FFB        2024002F                 r0 = r2 - r0;
0x001FFC        D1170000                 rMAC = M[r5 + 0];
0x001FFD        91110078                 rMAC = rMAC ASHIFT -8 (56bit);
0x001FFE        090064E0                 Null = Null + M[$M.cbops.dac_av_copy.buffer_level];
0x001FFF        DD000005                 if EQ jump $M.cbops.dac_av_copy.zero_input_level;
0x002000        2091002F                 r7 = rMAC - r0;
0x002001        DDB0000C                 if LT jump $M.cbops.dac_av_copy.No_need_to_insert;
0x002002        0091000F                 r7 = rMAC + Null;
0x002003        DDF00003                 jump $M.cbops.dac_av_copy.update_silence_buf;

 <$M.cbops.dac_av_copy.zero_input_level>
0x002004        6592007D                 r7 = 125 - r0;
0x002005        DD400008                 if NEG jump $M.cbops.dac_av_copy.No_need_to_insert;

 <$M.cbops.dac_av_copy.update_silence_buf>
0x002006        E1F00030                 call $M.cbops.dac_av_copy.fill_input_buffers_with_silence;
0x002007        190094DE                 M[$cbops.amount_written] = Null + Null;
0x002008        E1F0EA30                 call $cbops.copy;
0x002009        097094E0                 r5 = Null + M[$M.cbops.dac_av_copy.dac_av_struct];
0x00200A        D1270004                 r0 = M[r5 + 4];
0x00200B        092294DE                 r0 = r0 + M[$cbops.amount_written];
0x00200C        D5270004                 M[r5 + 4] = r0;

 <$M.cbops.dac_av_copy.No_need_to_insert>
0x00200D        092094DF                 r0 = Null + M[$M.cbops.av_copy.control_cbuffer];
0x00200E        E1F0F659                 call $cbuffer.calc_amount_data;
0x00200F        0082000F                 r6 = r0 + Null;
0x002010        092094DF                 r0 = Null + M[$M.cbops.av_copy.control_cbuffer];
0x002011        E1F0F675                 call $cbuffer.get_read_address_and_size;
0x002012        0092000F                 r7 = r0 + Null;
0x002013        D1570003                 r3 = M[r5 + 3];
0x002014        2105000A                 Null = r3 - 10;
0x002015        DD00000C                 if EQ jump $M.cbops.dac_av_copy.check_read_pointer_only;
0x002016        01500000                 r3 = Null + 0;
0x002017        D1470002                 r2 = M[r5 + 2];
0x002018        2049004F                 r2 = r7 - r2;
0x002019        DD100006                 if NE jump $M.cbops.dac_av_copy.reset_counter;
0x00201A        8D43007F                 r2 = r1 LSHIFT -1;
0x00201B        2008004F                 Null = r6 - r2;
0x00201C        DD400003                 if NEG jump $M.cbops.dac_av_copy.reset_counter;
0x00201D        D1570003                 r3 = M[r5 + 3];
0x00201E        E455002F                 r3 = r3 + 1;

 <$M.cbops.dac_av_copy.reset_counter>
0x00201F        D5570003                 M[r5 + 3] = r3;
0x002020        DDF00014                 jump $M.cbops.dac_av_copy.remove_end;

 <$M.cbops.dac_av_copy.check_read_pointer_only>
0x002021        D1470002                 r2 = M[r5 + 2];
0x002022        2049004F                 r2 = r7 - r2;
0x002023        DD000003                 if EQ jump $M.cbops.dac_av_copy.remove_samples_from_cbuffer;
0x002024        D5070003                 M[r5 + 3] = Null;
0x002025        DDF0000F                 jump $M.cbops.dac_av_copy.remove_end;

 <$M.cbops.dac_av_copy.remove_samples_from_cbuffer>
0x002026        D1CA0001                 r10 = M[r8 + 1];
0x002027        512A0002                 I2 = r8 + 2;
0x002028        E5F00004                 do $M.cbops.dac_av_copy.find_amount_to_discard_loop;
0x002029        03002900                 Null = Null + Null, r0 = M[I2,1];
0x00202A        E1F0F63D                 call $cbuffer.calc_amount_data;
0x00202B        E482005F                 r6 = MIN r0;

 <$M.cbops.dac_av_copy.find_amount_to_discard_loop>
0x00202C        D1BA0001                 r9 = M[r8 + 1];
0x00202D        512A0002                 I2 = r8 + 2;

 <$M.cbops.dac_av_copy.discard_loop>
0x00202E        E4BB003F                 r9 = r9 - 1;
0x00202F        DD400005                 if NEG jump $M.cbops.dac_av_copy.remove_end;
0x002030        03002900                 Null = Null + Null, r0 = M[I2,1];
0x002031        00C8000F                 r10 = r6 + Null;
0x002032        E1F0F5AB                 call $cbuffer.advance_read_ptr;
0x002033        DDF0FFFB                 jump $M.cbops.dac_av_copy.discard_loop;

 <$M.cbops.dac_av_copy.remove_end>
0x002034        D5970002                 M[r5 + 2] = r7;
0x002035        DDF0F694                 jump $pop_rLink_and_rts;

 <$M.cbops.dac_av_copy.fill_input_buffers_with_silence>
0x002036        F3D00000                 push rLink;
0x002037        D1CA0001                 r10 = M[r8 + 1];
0x002038        512A0002                 I2 = r8 + 2;
0x002039        E5F00006                 do $M.cbops.dac_av_copy.find_min_space_loop;
0x00203A        03002900                 Null = Null + Null, r0 = M[I2,1];
0x00203B        E1F0F62C                 call $cbuffer.calc_amount_data;
0x00203C        6522007D                 r0 = 125 - r0;
0x00203D        00200004                 if NEG r0 = Null + Null;
0x00203E        E492005F                 r7 = MIN r0;

 <$M.cbops.dac_av_copy.find_min_space_loop>
0x00203F        0009000F                 Null = r7 + Null;
0x002040        DD00F689                 if EQ jump $pop_rLink_and_rts;
0x002041        D16A0001                 r4 = M[r8 + 1];
0x002042        512A0002                 I2 = r8 + 2;

 <$M.cbops.dac_av_copy.silence_insert_loop>
0x002043        03002800                 Null = Null + Null, r0 = M[I2,0];
0x002044        E1F0F642                 call $cbuffer.get_read_address_and_size;
0x002045        5000002F                 I0 = Null + r0;
0x002046        50C0003F                 L0 = Null + r1;
0x002047        E4C9003F                 r10 = r7 - 1;
0x002048        03002300                 Null = Null + Null, r0 = M[I0,-1];
0x002049        01200000                 r0 = Null + 0;
0x00204A        E5F00002                 do $M.cbops.dac_av_copy.insert_silence_loop;
0x00204B        0300A300                 Null = Null + Null, M[I0,-1] = r0;

 <$M.cbops.dac_av_copy.insert_silence_loop>
0x00204C        0300A000                 Null = Null + Null, M[I0,0] = r0;
0x00204D        03002900                 Null = Null + Null, r0 = M[I2,1];
0x00204E        4430000F                 r1 = Null + I0;
0x00204F        E1F0F651                 call $cbuffer.set_read_address;
0x002050        E466003F                 r4 = r4 - 1;
0x002051        DDC0FFF2                 if GT jump $M.cbops.dac_av_copy.silence_insert_loop;
0x002052        51C00000                 L0 = Null + 0;
0x002053        DDF0F676                 jump $pop_rLink_and_rts;

 <$sbcdec.frame_decode>
0x002054        F3D00000                 push rLink;
0x002055        1970005E                 M[$sbcdec.codec_struc] = r5 + Null;
0x002056        D1B70005                 r9 = M[r5 + 5];

 <$M.sbcdec.frame_decode.reattempt_decode>
0x002057        0970005E                 r5 = Null + M[$sbcdec.codec_struc];
0x002058        D1270000                 r0 = M[r5 + 0];
0x002059        E1F0F62D                 call $cbuffer.get_read_address_and_size;
0x00205A        5000002F                 I0 = Null + r0;
0x00205B        50C0003F                 L0 = Null + r1;
0x00205C        D1270000                 r0 = M[r5 + 0];
0x00205D        E1F0F60A                 call $cbuffer.calc_amount_data;
0x00205E        00C2002F                 r10 = r0 + r0;
0x00205F        21CC0002                 r10 = r10 - 2;
0x002060        DDD0001D                 if LE jump $M.sbcdec.frame_decode.buffer_underflow;
0x002061        006C000F                 r4 = r10 + Null;
0x002062        E1F01B33                 call $sbcdec.find_sync;
0x002063        21080063                 Null = r6 - 99;
0x002064        DD000019                 if EQ jump $M.sbcdec.frame_decode.buffer_underflow;
0x002065        236C0000                 r4 = r4 - r10;
0x002066        D1270003                 r0 = M[r5 + 3];
0x002067        21020002                 Null = r0 - 2;
0x002068        DD00000F                 if EQ jump $M.sbcdec.frame_decode.enough_output_space_right;
0x002069        D1270001                 r0 = M[r5 + 1];
0x00206A        DD000005                 if EQ jump $M.sbcdec.frame_decode.enough_output_space_left;
0x00206B        E1F0F5EC                 call $cbuffer.calc_amount_space;
0x00206C        21020080                 Null = r0 - 128;
0x00206D        DD500002                 if POS jump $M.sbcdec.frame_decode.enough_output_space_left;
0x00206E        DDF00006                 jump $M.sbcdec.frame_decode.not_enough_data_exit;

 <$M.sbcdec.frame_decode.enough_output_space_left>
0x00206F        D1270002                 r0 = M[r5 + 2];
0x002070        DD000007                 if EQ jump $M.sbcdec.frame_decode.enough_output_space_right;
0x002071        E1F0F5E6                 call $cbuffer.calc_amount_space;
0x002072        21020080                 Null = r0 - 128;
0x002073        DD500004                 if POS jump $M.sbcdec.frame_decode.enough_output_space_right;

 <$M.sbcdec.frame_decode.not_enough_data_exit>
0x002074        01200002                 r0 = Null + 2;
0x002075        D5270003                 M[r5 + 3] = r0;
0x002076        DDF00058                 jump $M.sbcdec.frame_decode.exit;

 <$M.sbcdec.frame_decode.enough_output_space_right>
0x002077        D1270000                 r0 = M[r5 + 0];
0x002078        E1F0F5EF                 call $cbuffer.calc_amount_data;
0x002079        03220000                 r0 = r0 + r0;
0x00207A        23260000                 r0 = r0 - r4;
0x00207B        21020016                 Null = r0 - 22;
0x00207C        DD500008                 if POS jump $M.sbcdec.frame_decode.no_buffer_underflow;

 <$M.sbcdec.frame_decode.buffer_underflow>
0x00207D        0970005E                 r5 = Null + M[$sbcdec.codec_struc];
0x00207E        E420002F                 r0 = Null + 1;
0x00207F        D5270003                 M[r5 + 3] = r0;
0x002080        D1270000                 r0 = M[r5 + 0];
0x002081        4430000F                 r1 = Null + I0;
0x002082        E1F0F61E                 call $cbuffer.set_read_address;
0x002083        DDF0004B                 jump $M.sbcdec.frame_decode.exit;

 <$M.sbcdec.frame_decode.no_buffer_underflow>
0x002084        D52B0037                 M[r9 + 55] = r0;
0x002085        E1F0028E                 call $sbcdec.read_frame_header;
0x002086        D12B0039                 r0 = M[r9 + 57];
0x002087        D13B0037                 r1 = M[r9 + 55];
0x002088        2002003F                 Null = r0 - r1;
0x002089        DDD00004                 if LE jump $M.sbcdec.frame_decode.enough_frame_data;
0x00208A        5802000F                 I0 = I2 + Null;
0x00208B        D58B003B                 M[r9 + 59] = r6;
0x00208C        DDF0FFF1                 jump $M.sbcdec.frame_decode.buffer_underflow;

 <$M.sbcdec.frame_decode.enough_frame_data>
0x00208D        D10B0036                 Null = M[r9 + 54];
0x00208E        DD100007                 if NE jump $M.sbcdec.frame_decode.crc_fail_or_corrupt;
0x00208F        E1F01B5B                 call $sbcdec.read_scale_factors;
0x002090        D12B0023                 r0 = M[r9 + 35];
0x002091        D13B0024                 r1 = M[r9 + 36];
0x002092        23230000                 r0 = r0 - r1;
0x002093        812200FF                 r0 = r0 AND 0xff;
0x002094        DD00000B                 if EQ jump $M.sbcdec.frame_decode.crc_correct;

 <$M.sbcdec.frame_decode.crc_fail_or_corrupt>
0x002095        0970005E                 r5 = Null + M[$sbcdec.codec_struc];
0x002096        4430000F                 r1 = Null + I0;
0x002097        D1270000                 r0 = M[r5 + 0];
0x002098        E1F0F608                 call $cbuffer.set_read_address;
0x002099        51C00000                 L0 = Null + 0;
0x00209A        D12B003A                 r0 = M[r9 + 58];
0x00209B        DD00FFBC                 if EQ jump $M.sbcdec.frame_decode.reattempt_decode;
0x00209C        01200005                 r0 = Null + 5;
0x00209D        D5270003                 M[r5 + 3] = r0;
0x00209E        DDF00030                 jump $M.sbcdec.frame_decode.exit;

 <$M.sbcdec.frame_decode.crc_correct>
0x00209F        E1F0FBAE                 call $sbc.calc_bit_allocation;
0x0020A0        E1F0199B                 call $sbcdec.read_audio_samples;
0x0020A1        E1F01C07                 call $sbcdec.byte_align;
0x0020A2        0970005E                 r5 = Null + M[$sbcdec.codec_struc];
0x0020A3        4430000F                 r1 = Null + I0;
0x0020A4        D1270000                 r0 = M[r5 + 0];
0x0020A5        E1F0F5FB                 call $cbuffer.set_read_address;
0x0020A6        51C00000                 L0 = Null + 0;
0x0020A7        D1270003                 r0 = M[r5 + 3];
0x0020A8        21020000                 Null = r0 - 0;
0x0020A9        DD10001F                 if NE jump $M.sbcdec.frame_decode.all_done;
0x0020AA        E1F006E4                 call $sbcdec.sample_reconstruction;
0x0020AB        D12B001E                 r0 = M[r9 + 30];
0x0020AC        21020003                 Null = r0 - 3;
0x0020AD        E1001851                 if EQ call $sbcdec.joint_stereo_decode;
0x0020AE        0970005E                 r5 = Null + M[$sbcdec.codec_struc];
0x0020AF        D1270001                 r0 = M[r5 + 1];
0x0020B0        DD00000B                 if EQ jump $M.sbcdec.frame_decode.no_left_buffer;
0x0020B1        E1F0F5DA                 call $cbuffer.get_write_address_and_size;
0x0020B2        5010002F                 I1 = Null + r0;
0x0020B3        50D0003F                 L1 = Null + r1;
0x0020B4        01700000                 r5 = Null + 0;
0x0020B5        E1F001B1                 call $sbcdec.synthesis_subband_filter;
0x0020B6        0970005E                 r5 = Null + M[$sbcdec.codec_struc];
0x0020B7        4430001F                 r1 = Null + I1;
0x0020B8        D1270001                 r0 = M[r5 + 1];
0x0020B9        E1F0F5EB                 call $cbuffer.set_write_address;
0x0020BA        51D00000                 L1 = Null + 0;

 <$M.sbcdec.frame_decode.no_left_buffer>
0x0020BB        0970005E                 r5 = Null + M[$sbcdec.codec_struc];
0x0020BC        D1270002                 r0 = M[r5 + 2];
0x0020BD        DD00000B                 if EQ jump $M.sbcdec.frame_decode.all_done;
0x0020BE        E1F0F5CD                 call $cbuffer.get_write_address_and_size;
0x0020BF        5010002F                 I1 = Null + r0;
0x0020C0        50D0003F                 L1 = Null + r1;
0x0020C1        E470002F                 r5 = Null + 1;
0x0020C2        E1F001A4                 call $sbcdec.synthesis_subband_filter;
0x0020C3        0970005E                 r5 = Null + M[$sbcdec.codec_struc];
0x0020C4        4430001F                 r1 = Null + I1;
0x0020C5        D1270002                 r0 = M[r5 + 2];
0x0020C6        E1F0F5DE                 call $cbuffer.set_write_address;
0x0020C7        51D00000                 L1 = Null + 0;

 <$M.sbcdec.frame_decode.all_done>
0x0020C8        01200000                 r0 = Null + 0;
0x0020C9        D5270003                 M[r5 + 3] = r0;
0x0020CA        D12B001D                 r0 = M[r9 + 29];
0x0020CB        D13B0021                 r1 = M[r9 + 33];
0x0020CC        9B230000                 r0 = r0 * r1 (int);
0x0020CD        D5270004                 M[r5 + 4] = r0;

 <$M.sbcdec.frame_decode.exit>
0x0020CE        51C00000                 L0 = Null + 0;
0x0020CF        DDF0F5FA                 jump $pop_rLink_and_rts;

 <$codec.av_decode>
0x0020D0        F3D00000                 push rLink;
0x0020D1        197094E4                 M[$M.codec_av_decode.data_ptr] = r5 + Null;
0x0020D2        E420002F                 r0 = Null + 1;
0x0020D3        D5270006                 M[r5 + 6] = r0;
0x0020D4        0980FE71                 r6 = Null + M[0xfffe71];
0x0020D5        D1270014                 r0 = M[r5 + 20];
0x0020D6        D5870014                 M[r5 + 20] = r6;
0x0020D7        23820000                 r6 = r6 - r0;
0x0020D8        20800084                 if NEG r6 = Null - r6;
0x0020D9        D1270003                 r0 = M[r5 + 3];
0x0020DA        E1F0F5B1                 call $cbuffer.get_write_address_and_size;
0x0020DB        D1370010                 r1 = M[r5 + 16];
0x0020DC        D5270010                 M[r5 + 16] = r0;
0x0020DD        FD00007F 0110FFFF        rMAC = Null + 8388607;
0x0020DF        D1570011                 r3 = M[r5 + 17];
0x0020E0        0045008F                 r2 = r3 + r6;
0x0020E1        00410006                 if V r2 = rMAC + Null;
0x0020E2        2093002F                 r7 = r1 - r0;
0x0020E3        00400001                 if NE r2 = Null + Null;
0x0020E4        D5470011                 M[r5 + 17] = r2;
0x0020E5        D107000E                 Null = M[r5 + 14];
0x0020E6        DD000007                 if EQ jump $M.codec_av_decode.no_pause_handling;
0x0020E7        FD000002 210449F0        Null = r2 - 150000;
0x0020E9        DD400004                 if NEG jump $M.codec_av_decode.no_pause_handling;
0x0020EA        FD000002 210549F0        Null = r3 - 150000;
0x0020EC        DD40003A                 if NEG jump $M.codec_av_decode.cleare_buffers;

 <$M.codec_av_decode.no_pause_handling>
0x0020ED        D1070012                 Null = M[r5 + 18];
0x0020EE        DD100023                 if NE jump $M.codec_av_decode.decoding_proc;

 <$M.codec_av_decode.process_stalled>
0x0020EF        E420002F                 r0 = Null + 1;
0x0020F0        D1370013                 r1 = M[r5 + 19];
0x0020F1        0004000F                 Null = r2 + Null;
0x0020F2        00320000                 if EQ r1 = r0 + Null;
0x0020F3        D5370013                 M[r5 + 19] = r1;
0x0020F4        DD000013                 if EQ jump $M.codec_av_decode.check_buf_level;
0x0020F5        D137000B                 r1 = M[r5 + 11];
0x0020F6        2004003F                 Null = r2 - r1;
0x0020F7        DD400004                 if NEG jump $M.codec_av_decode.check_stall_time;
0x0020F8        2005003F                 Null = r3 - r1;
0x0020F9        DD400015                 if NEG jump $M.codec_av_decode.switchto_decode;
0x0020FA        DDF0000D                 jump $M.codec_av_decode.check_buf_level;

 <$M.codec_av_decode.check_stall_time>
0x0020FB        D1570015                 r3 = M[r5 + 21];
0x0020FC        DD100005                 if NE jump $M.codec_av_decode.update_stall_timer;
0x0020FD        0009000F                 Null = r7 + Null;
0x0020FE        E4550021                 if NE r3 = r3 + 1;
0x0020FF        D5570015                 M[r5 + 21] = r3;
0x002100        DDF00007                 jump $M.codec_av_decode.check_buf_level;

 <$M.codec_av_decode.update_stall_timer>
0x002101        0045008F                 r2 = r3 + r6;
0x002102        D137000B                 r1 = M[r5 + 11];
0x002103        91330001                 r1 = r1 ASHIFT 1;
0x002104        D5470015                 M[r5 + 21] = r2;
0x002105        2004003F                 Null = r2 - r1;
0x002106        DD500008                 if POS jump $M.codec_av_decode.switchto_decode;

 <$M.codec_av_decode.check_buf_level>
0x002107        D1270003                 r0 = M[r5 + 3];
0x002108        D1620000                 r4 = M[r0 + 0];
0x002109        E1F0F55E                 call $cbuffer.calc_amount_data;
0x00210A        D147000C                 r2 = M[r5 + 12];
0x00210B        97460000                 r2 = r2 * r4 (frac);
0x00210C        2002004F                 Null = r0 - r2;
0x00210D        DD400030                 if NEG jump $M.codec_av_decode.end;

 <$M.codec_av_decode.switchto_decode>
0x00210E        D5070013                 M[r5 + 19] = Null;
0x00210F        E430002F                 r1 = Null + 1;
0x002110        D5370012                 M[r5 + 18] = r1;

 <$M.codec_av_decode.decoding_proc>
0x002111        D5070015                 M[r5 + 21] = Null;
0x002112        01200000                 r0 = Null + 0;
0x002113        D5270006                 M[r5 + 6] = r0;
0x002114        D1270000                 r0 = M[r5 + 0];
0x002115        01770003                 r5 = r5 + 3;
0x002116        E002000F                 call r0;
0x002117        097094E4                 r5 = Null + M[$M.codec_av_decode.data_ptr];
0x002118        D1370011                 r1 = M[r5 + 17];
0x002119        D1270006                 r0 = M[r5 + 6];
0x00211A        21020000                 Null = r0 - 0;
0x00211B        DD100003                 if NE jump $M.codec_av_decode.check_not_enough_input_data;
0x00211C        00300000                 if EQ r1 = Null + Null;
0x00211D        D5370011                 M[r5 + 17] = r1;

 <$M.codec_av_decode.check_not_enough_input_data>
0x00211E        D1270006                 r0 = M[r5 + 6];
0x00211F        E402003F                 Null = r0 - 1;
0x002120        DD10001D                 if NE jump $M.codec_av_decode.end;
0x002121        D1370011                 r1 = M[r5 + 17];
0x002122        D127000A                 r0 = M[r5 + 10];
0x002123        2003002F                 Null = r1 - r0;
0x002124        DD500018                 if POS jump $M.codec_av_decode.switchto_stall;
0x002125        DDF00018                 jump $M.codec_av_decode.end;

 <$M.codec_av_decode.cleare_buffers>
0x002126        D5070015                 M[r5 + 21] = Null;
0x002127        E1F0F558                 call $block_interrupts;
0x002128        D1370003                 r1 = M[r5 + 3];
0x002129        D1230002                 r0 = M[r1 + 2];
0x00212A        D5230001                 M[r1 + 1] = r0;
0x00212B        D5270010                 M[r5 + 16] = r0;
0x00212C        D1370004                 r1 = M[r5 + 4];
0x00212D        D1230001                 r0 = M[r1 + 1];
0x00212E        D5230002                 M[r1 + 2] = r0;
0x00212F        D1370005                 r1 = M[r5 + 5];
0x002130        D1230001                 r0 = M[r1 + 1];
0x002131        D5230002                 M[r1 + 2] = r0;
0x002132        01770003                 r5 = r5 + 3;
0x002133        D127FFFE                 r0 = M[r5 + -2];
0x002134        E0020001                 if NE call r0;
0x002135        097094E4                 r5 = Null + M[$M.codec_av_decode.data_ptr];
0x002136        D127000F                 r0 = M[r5 + 15];
0x002137        E0020001                 if NE call r0;
0x002138        097094E4                 r5 = Null + M[$M.codec_av_decode.data_ptr];
0x002139        E420002F                 r0 = Null + 1;
0x00213A        192064E5                 M[$master_reset_needed] = r0 + Null;
0x00213B        E1F0F534                 call $interrupt.unblock;

 <$M.codec_av_decode.switchto_stall>
0x00213C        D5070012                 M[r5 + 18] = Null;

 <$M.codec_av_decode.end>
0x00213D        DDF0F58C                 jump $pop_rLink_and_rts;

 <$create_sub_packet>
0x00213E        F3D00000                 push rLink;
0x00213F        0120643E                 r0 = Null + 25662;
0x002140        E1F0F527                 call $cbuffer.calc_amount_data;
0x002141        01400009                 r2 = Null + 9;
0x002142        20C2004F                 r10 = r0 - r2;
0x002143        DD50000D                 if POS jump $M.create_sub_packet.continue;
0x002144        20C000CF                 r10 = Null - r10;
0x002145        0120643E                 r0 = Null + 25662;
0x002146        E1F0F545                 call $cbuffer.get_write_address_and_size;
0x002147        5000002F                 I0 = Null + r0;
0x002148        50C0003F                 L0 = Null + r1;
0x002149        01200000                 r0 = Null + 0;
0x00214A        E5F00002                 do $M.create_sub_packet.zero_insertion;
0x00214B        0300A100                 Null = Null + Null, M[I0,1] = r0;

 <$M.create_sub_packet.zero_insertion>
0x00214C        0120643E                 r0 = Null + 25662;
0x00214D        4430000F                 r1 = Null + I0;
0x00214E        E1F0F556                 call $cbuffer.set_write_address;
0x00214F        51C00000                 L0 = Null + 0;

 <$M.create_sub_packet.continue>
0x002150        01209438                 r0 = Null + -27592;
0x002151        E1F0F53A                 call $cbuffer.get_write_address_and_size;
0x002152        5000002F                 I0 = Null + r0;
0x002153        50C0003F                 L0 = Null + r1;
0x002154        0120643E                 r0 = Null + 25662;
0x002155        E1F0F531                 call $cbuffer.get_read_address_and_size;
0x002156        5040002F                 I4 = Null + r0;
0x002157        50E0003F                 L4 = Null + r1;
0x002158        09C064B1                 r10 = Null + M[$sco_param_to_air_size];
0x002159        91CC007F                 r10 = r10 ASHIFT -1;
0x00215A        FD000000 0120F5F5        r0 = Null + 62965;
0x00215C        0300A100                 Null = Null + Null, M[I0,1] = r0;
0x00215D        096094BC                 r4 = Null + M[$M.create_sub_packet.packet_counter];
0x00215E        8126FFFF                 r0 = r4 AND 0xffff;
0x00215F        0300A100                 Null = Null + Null, M[I0,1] = r0;
0x002160        092064BB                 r0 = Null + M[$wall_clock_adjustment];
0x002161        0922FE71                 r0 = r0 + M[0xfffe71];
0x002162        8D420070                 r2 = r0 LSHIFT -16;
0x002163        FD0000FF 81760000        r5 = r4 AND 0xff0000;
0x002165        8D770078                 r5 = r5 LSHIFT -8;
0x002166        0047004F                 r2 = r5 + r2;
0x002167        0300C100                 Null = Null + Null, M[I0,1] = r2;
0x002168        8142FFFF                 r2 = r0 AND 0xffff;
0x002169        0300C100                 Null = Null + Null, M[I0,1] = r2;
0x00216A        093064AD                 r1 = Null + M[$sub_link_port];
0x00216B        FD00009D 2103800D        Null = r1 - -6455283;
0x00216D        DD00001E                 if EQ jump $M.create_sub_packet.write_l2cap_sub_data;
0x00216E        01400009                 r2 = Null + 9;
0x00216F        01540004                 r3 = r2 + 4;
0x002170        205C005F                 r3 = r10 - r3;
0x002171        00C4000F                 r10 = r2 + Null;
0x002172        E5F00004                 do $M.create_sub_packet.copy_esco_sub_data_to_air;
0x002173        03000021                 Null = Null + Null, r0 = M[I4,1];
0x002174        91220078                 r0 = r0 ASHIFT -8;
0x002175        0300A100                 Null = Null + Null, M[I0,1] = r0;

 <$M.create_sub_packet.copy_esco_sub_data_to_air>
0x002176        00C5000F                 r10 = r3 + Null;
0x002177        E5F00003                 do $M.create_sub_packet.zero_padding;
0x002178        01200000                 r0 = Null + 0;
0x002179        0300A100                 Null = Null + Null, M[I0,1] = r0;

 <$M.create_sub_packet.zero_padding>
0x00217A        093094AF                 r1 = Null + M[$sco_param_tesco];
0x00217B        21030006                 Null = r1 - 6;
0x00217C        DD100003                 if NE jump $M.create_sub_packet.update_read_addr;
0x00217D        E406003F                 Null = r4 - 1;
0x00217E        DD000004                 if EQ jump $M.create_sub_packet.dont_update_sub_1k2_read_ptrs;

 <$M.create_sub_packet.update_read_addr>
0x00217F        0120643E                 r0 = Null + 25662;
0x002180        4430004F                 r1 = Null + I4;
0x002181        E1F0F51F                 call $cbuffer.set_read_address;

 <$M.create_sub_packet.dont_update_sub_1k2_read_ptrs>
0x002182        093094AF                 r1 = Null + M[$sco_param_tesco];
0x002183        21030006                 Null = r1 - 6;
0x002184        DD100006                 if NE jump $M.create_sub_packet.do_not_send_duplicates;
0x002185        E430002F                 r1 = Null + 1;
0x002186        E466002F                 r4 = r4 + 1;
0x002187        21060002                 Null = r4 - 2;
0x002188        00630001                 if NE r4 = r1 + Null;
0x002189        196094BC                 M[$M.create_sub_packet.packet_counter] = r4 + Null;

 <$M.create_sub_packet.do_not_send_duplicates>
0x00218A        DDF00016                 jump $M.create_sub_packet.done;

 <$M.create_sub_packet.write_l2cap_sub_data>
0x00218B        092094AD                 r0 = Null + M[$M.Subwoofer.playback_time];
0x00218C        8D420070                 r2 = r0 LSHIFT -16;
0x00218D        0030000F                 r1 = Null + Null;
0x00218E        8D530070                 r3 = r1 LSHIFT -16;
0x00218F        8D550008                 r3 = r3 LSHIFT 8;
0x002190        0045004F                 r2 = r3 + r2;
0x002191        0300C100                 Null = Null + Null, M[I0,1] = r2;
0x002192        8142FFFF                 r2 = r0 AND 0xffff;
0x002193        0300C100                 Null = Null + Null, M[I0,1] = r2;
0x002194        8143FFFF                 r2 = r1 AND 0xffff;
0x002195        0300C100                 Null = Null + Null, M[I0,1] = r2;
0x002196        01C00012                 r10 = Null + 18;
0x002197        E5F00004                 do $M.create_sub_packet.copy_l2cap_sub_data_to_air;
0x002198        03000021                 Null = Null + Null, r0 = M[I4,1];
0x002199        91220078                 r0 = r0 ASHIFT -8;
0x00219A        0300A100                 Null = Null + Null, M[I0,1] = r0;

 <$M.create_sub_packet.copy_l2cap_sub_data_to_air>
0x00219B        0120643E                 r0 = Null + 25662;
0x00219C        4430004F                 r1 = Null + I4;
0x00219D        E1F0F503                 call $cbuffer.set_read_address;
0x00219E        E466002F                 r4 = r4 + 1;
0x00219F        196094BC                 M[$M.create_sub_packet.packet_counter] = r4 + Null;

 <$M.create_sub_packet.done>
0x0021A0        01209438                 r0 = Null + -27592;
0x0021A1        4430000F                 r1 = Null + I0;
0x0021A2        E1F0F502                 call $cbuffer.set_write_address;
0x0021A3        51C00000                 L0 = Null + 0;
0x0021A4        51E00000                 L4 = Null + 0;
0x0021A5        DDF0F524                 jump $pop_rLink_and_rts;

 <$audio_proc.vse.process_channels>
0x0021A6        F3D00000                 push rLink;
0x0021A7        D5690008                 M[r7 + 8] = r4;
0x0021A8        D56A0008                 M[r8 + 8] = r4;
0x0021A9        D12A0005                 r0 = M[r8 + 5];
0x0021AA        5050002F                 I5 = Null + r0;
0x0021AB        E1F01A65                 call $audio_proc.vse.get_input_buffer_details;
0x0021AC        58FC000F                 L5 = L0 + Null;
0x0021AD        D1290005                 r0 = M[r7 + 5];
0x0021AE        5000002F                 I0 = Null + r0;
0x0021AF        F3A00000                 push r8;
0x0021B0        00A9000F                 r8 = r7 + Null;
0x0021B1        E1F01A5F                 call $audio_proc.vse.get_input_buffer_details;
0x0021B2        F3A40000                 pop r8;
0x0021B3        D1290002                 r0 = M[r7 + 2];
0x0021B4        D1320001                 r1 = M[r0 + 1];
0x0021B5        DD10001A                 if NE jump $M.audio_proc.vse.process_channels.binaural_scaling;
0x0021B6        E1F01993                 call $audio_proc.vse.binaural_synthesis_filters;
0x0021B7        5805000F                 I0 = I5 + Null;
0x0021B8        F3900000                 push r7;
0x0021B9        009A000F                 r7 = r8 + Null;
0x0021BA        E1F0198F                 call $audio_proc.vse.binaural_synthesis_filters;
0x0021BB        F3940000                 pop r7;
0x0021BC        D1290082                 r0 = M[r7 + 130];
0x0021BD        5020002F                 I2 = Null + r0;
0x0021BE        D1290083                 r0 = M[r7 + 131];
0x0021BF        5060002F                 I6 = Null + r0;
0x0021C0        D12A0082                 r0 = M[r8 + 130];
0x0021C1        5070002F                 I7 = Null + r0;
0x0021C2        D12A0083                 r0 = M[r8 + 131];
0x0021C3        5040002F                 I4 = Null + r0;
0x0021C4        D1CA0008                 r10 = M[r8 + 8];
0x0021C5        E420003F                 r0 = Null - 1;
0x0021C6        E5F00008                 do $M.audio_proc.vse.process_channels.binaural_synth_output;
0x0021C7        03001831                 Null = Null + Null, rMAC = M[I2,0], r1 = M[I4,1];
0x0021C8        BF230059                 rMAC = rMAC - r0 * r1 (SS), r3 = M[I6,1];
0x0021C9        CD114000                 rMAC = rMAC * 0.5 (SS);
0x0021CA        0300991C                 Null = Null + Null, M[I2,1] = rMAC, rMAC = M[I7,0];
0x0021CB        BC12005F                 rMAC = rMAC - r0 * r3 (SS);
0x0021CC        CD114000                 rMAC = rMAC * 0.5 (SS);
0x0021CD        0300009D                 Null = Null + Null, M[I7,1] = rMAC;

 <$M.audio_proc.vse.process_channels.binaural_synth_output>
0x0021CE        DDF0000B                 jump $M.audio_proc.vse.process_channels.binaural_done;

 <$M.audio_proc.vse.process_channels.binaural_scaling>
0x0021CF        D1290082                 r0 = M[r7 + 130];
0x0021D0        5010002F                 I1 = Null + r0;
0x0021D1        D12A0082                 r0 = M[r8 + 130];
0x0021D2        5040002F                 I4 = Null + r0;
0x0021D3        D1C90008                 r10 = M[r7 + 8];
0x0021D4        E5F00005                 do $M.audio_proc.vse.process_channels.binaural_done;
0x0021D5        03002135                 Null = Null + Null, r0 = M[I0,1], r1 = M[I5,1];
0x0021D6        CD224000                 r0 = r0 * 0.5 (SS);
0x0021D7        CD334000                 r1 = r1 * 0.5 (SS);
0x0021D8        0300A5B1                 Null = Null + Null, M[I1,1] = r0, M[I4,1] = r1;

 <$M.audio_proc.vse.process_channels.binaural_done>
0x0021D9        51C00000                 L0 = Null + 0;
0x0021DA        51F00000                 L5 = Null + 0;
0x0021DB        E1F018FD                 call $audio_proc.vse.xtc_dcb_filters;
0x0021DC        F3900000                 push r7;
0x0021DD        009A000F                 r7 = r8 + Null;
0x0021DE        E1F018FA                 call $audio_proc.vse.xtc_dcb_filters;
0x0021DF        F3940000                 pop r7;
0x0021E0        E1F0064E                 call $audio_proc.vse.ITF_process;
0x0021E1        F3A00000                 push r8;
0x0021E2        E1F01906                 call $audio_proc.vse.peak_lsf_filters;
0x0021E3        F3A40000                 pop r8;
0x0021E4        F1000600                 pushm <r7, r8>;
0x0021E5        009A000F                 r7 = r8 + Null;
0x0021E6        E1F01902                 call $audio_proc.vse.peak_lsf_filters;
0x0021E7        F1040600                 popm <r7, r8>;
0x0021E8        E1F004E4                 call $audio_proc.vse.limiter.process;
0x0021E9        D12A0006                 r0 = M[r8 + 6];
0x0021EA        5050002F                 I5 = Null + r0;
0x0021EB        E1F01A31                 call $audio_proc.vse.get_output_buffer_details;
0x0021EC        58FC000F                 L5 = L0 + Null;
0x0021ED        F3A00000                 push r8;
0x0021EE        00A9000F                 r8 = r7 + Null;
0x0021EF        D12A0006                 r0 = M[r8 + 6];
0x0021F0        5000002F                 I0 = Null + r0;
0x0021F1        E1F01A2B                 call $audio_proc.vse.get_output_buffer_details;
0x0021F2        F3A40000                 pop r8;
0x0021F3        D1290082                 r0 = M[r7 + 130];
0x0021F4        5010002F                 I1 = Null + r0;
0x0021F5        D12A0082                 r0 = M[r8 + 130];
0x0021F6        5040002F                 I4 = Null + r0;
0x0021F7        D1C90008                 r10 = M[r7 + 8];
0x0021F8        D159001B                 r3 = M[r7 + 27];
0x0021F9        D169001A                 r4 = M[r7 + 26];
0x0021FA        97562500                 r3 = r3 * r4 (frac), r0 = M[I1,1];
0x0021FB        E5F00004                 do $M.audio_proc.vse.process_channels.apply_limiter_gain_loop;
0x0021FC        97250031                 r0 = r0 * r3 (frac), r1 = M[I4,1];
0x0021FD        9735A100                 r1 = r1 * r3 (frac), M[I0,1] = r0;
0x0021FE        030025B5                 Null = Null + Null, r0 = M[I1,1], M[I5,1] = r1;

 <$M.audio_proc.vse.process_channels.apply_limiter_gain_loop>
0x0021FF        E1F018F9                 call $audio_proc.vse.advance_pointers;
0x002200        00A9000F                 r8 = r7 + Null;
0x002201        E1F018F7                 call $audio_proc.vse.advance_pointers;
0x002202        51C00000                 L0 = Null + 0;
0x002203        51F00000                 L5 = Null + 0;
0x002204        DDF0F4C5                 jump $pop_rLink_and_rts;

 <$conn_init>
0x002205        F3D00000                 push rLink;
0x002206        0920006F                 r0 = Null + M[$app_config.io];
0x002207        21020005                 Null = r0 - 5;
0x002208        DD100018                 if NE jump $M.conn_init.skip_usb_conn_init;
0x002209        015005DC                 r3 = Null + 1500;
0x00220A        01601000                 r4 = Null + 4096;
0x00220B        E1F0180F                 call $conn_init_cbuffers;
0x00220C        01200EA6                 r0 = Null + 3750;
0x00220D        19205788                 M[$sra_struct] = r0 + Null;
0x00220E        FD000080 01200000        r0 = Null + -8388608;
0x002210        19205789                 M[0x5789] = r0 + Null;
0x002211        012000AD                 r0 = Null + 173;
0x002212        1920578A                 M[0x578a] = r0 + Null;
0x002213        0120943E                 r0 = Null + -27586;
0x002214        1920578B                 M[0x578b] = r0 + Null;
0x002215        FD000000 0120A3D7        r0 = Null + 41943;
0x002217        1920578C                 M[0x578c] = r0 + Null;
0x002218        FD000002 01203280        r0 = Null + 144000;
0x00221A        1920578D                 M[0x578d] = r0 + Null;
0x00221B        01200320                 r0 = Null + 800;
0x00221C        19209487                 M[$tmr_period_con_copy] = r0 + Null;
0x00221D        5100620E                 I0 = Null + 25102;
0x00221E        E1F014F7                 call $copy_codec_stats_pointers;
0x00221F        DDF00046                 jump $M.conn_init.exit;

 <$M.conn_init.skip_usb_conn_init>
0x002220        0150021A                 r3 = Null + 538;
0x002221        01601000                 r4 = Null + 4096;
0x002222        E1F017F8                 call $conn_init_cbuffers;
0x002223        0130624F                 r1 = Null + 25167;
0x002224        21020008                 Null = r0 - 8;
0x002225        DD000005                 if EQ jump $M.conn_init.analogue_conn_init;
0x002226        0130921C                 r1 = Null + -28132;
0x002227        2102000A                 Null = r0 - 10;
0x002228        DD000002                 if EQ jump $M.conn_init.analogue_conn_init;
0x002229        DDF00019                 jump $M.conn_init.skip_analogue_i2s_conn_init;

 <$M.conn_init.analogue_conn_init>
0x00222A        5000003F                 I0 = Null + r1;
0x00222B        E1F014EA                 call $copy_codec_stats_pointers;
0x00222C        E1F01470                 call $set_input_handler_timer;
0x00222D        012007D0                 r0 = Null + 2000;
0x00222E        01300FA0                 r1 = Null + 4000;
0x00222F        09509481                 r3 = Null + M[$current_codec_sampling_rate];
0x002230        FD000000 6505BB80        Null = 48000 - r3;
0x002232        00230004                 if NEG r0 = r1 + Null;
0x002233        19205788                 M[$sra_struct] = r0 + Null;
0x002234        FD000080 01200000        r0 = Null + -8388608;
0x002236        19205789                 M[0x5789] = r0 + Null;
0x002237        012000AD                 r0 = Null + 173;
0x002238        1920578A                 M[0x578a] = r0 + Null;
0x002239        0120943E                 r0 = Null + -27586;
0x00223A        1920578B                 M[0x578b] = r0 + Null;
0x00223B        FD000000 0120A3D7        r0 = Null + 41943;
0x00223D        1920578C                 M[0x578c] = r0 + Null;
0x00223E        FD000002 01203280        r0 = Null + 144000;
0x002240        1920578D                 M[0x578d] = r0 + Null;
0x002241        DDF00024                 jump $M.conn_init.exit;

 <$M.conn_init.skip_analogue_i2s_conn_init>
0x002242        01200BB8                 r0 = Null + 3000;
0x002243        19205788                 M[$sra_struct] = r0 + Null;
0x002244        FD000080 01200000        r0 = Null + -8388608;
0x002246        19205789                 M[0x5789] = r0 + Null;
0x002247        FD0000FF 01204BFD        r0 = Null + -46083;
0x002249        1920578A                 M[0x578a] = r0 + Null;
0x00224A        0120943E                 r0 = Null + -27586;
0x00224B        1920578B                 M[0x578b] = r0 + Null;
0x00224C        09006481                 Null = Null + M[$current_dac_sampling_rate];
0x00224D        DD100007                 if NE jump $M.conn_init.sra_conf_done;
0x00224E        FD000000 0120A3D7        r0 = Null + 41943;
0x002250        1920578C                 M[0x578c] = r0 + Null;
0x002251        FD000002 01203280        r0 = Null + 144000;
0x002253        1920578D                 M[0x578d] = r0 + Null;

 <$M.conn_init.sra_conf_done>
0x002254        012003E8                 r0 = Null + 1000;
0x002255        19209487                 M[$tmr_period_con_copy] = r0 + Null;
0x002256        0920006F                 r0 = Null + M[$app_config.io];
0x002257        E402003F                 Null = r0 - 1;
0x002258        DD10000C                 if NE jump $M.conn_init.skip_sbc;
0x002259        01202054                 r0 = Null + 8276;
0x00225A        1920037F                 M[$decoder_codec_stream_struc] = r0 + Null;
0x00225B        01203C91                 r0 = Null + 15505;
0x00225C        19200380                 M[0x380] = r0 + Null;
0x00225D        01203BA2                 r0 = Null + 15266;
0x00225E        19200381                 M[0x381] = r0 + Null;
0x00225F        01700382                 r5 = Null + 898;
0x002260        E1F005AA                 call $sbcdec.init_static_decoder;
0x002261        510091CE                 I0 = Null + -28210;
0x002262        E1F014B3                 call $copy_codec_stats_pointers;
0x002263        DDF00002                 jump $M.conn_init.exit;

 <$M.conn_init.skip_sbc>
0x002264        DDF01B27                 jump $error;

 <$M.conn_init.exit>
0x002265        DDF0F464                 jump $pop_rLink_and_rts;

 <$sbcdec.synthesis_subband_filter>
0x002266        F3D00000                 push rLink;
0x002267        D13B0021                 r1 = M[r9 + 33];
0x002268        5080003F                 M0 = Null + r1;
0x002269        D14B001F                 r2 = M[r9 + 31];
0x00226A        9854003F                 r3 = r2 * r1 (int);
0x00226B        E455003F                 r3 = r3 - 1;
0x00226C        9823007F                 r0 = r1 * r5 (int);
0x00226D        E404003F                 Null = r2 - 1;
0x00226E        00200000                 if EQ r0 = Null + Null;
0x00226F        D16B0014                 r4 = M[r9 + 20];
0x002270        5022006F                 I2 = r0 + r4;
0x002271        012B003C                 r0 = r9 + 60;
0x002272        D027002F                 r0 = M[r5 + r0];
0x002273        5000002F                 I0 = Null + r0;
0x002274        D16B001D                 r4 = M[r9 + 29];
0x002275        69080004                 Null = M0 - 4;
0x002276        DD000020                 if EQ jump $M.sbcdec.synthesis_subband_filter.M_equals_4;
0x002277        51C000A0                 L0 = Null + 160;

 <$M.sbcdec.synthesis_subband_filter.block_loop_M8>
0x002278        D12B0015                 r0 = M[r9 + 21];
0x002279        5040002F                 I4 = Null + r0;
0x00227A        D12B002E                 r0 = M[r9 + 46];
0x00227B        5050002F                 I5 = Null + r0;
0x00227C        51900001                 M1 = Null + 1;
0x00227D        51A0FFF0                 M2 = Null + -16;
0x00227E        51B0FFF9                 M3 = Null + -7;
0x00227F        4CC8008F                 r10 = M0 + M0;
0x002280        03002935                 Null = Null + Null, r0 = M[I2,1], r1 = M[I5,1];
0x002281        E5F0000A                 do $M.sbcdec.synthesis_subband_filter.matrix_loop_M8;
0x002282        CF232935                 rMAC = r0 * r1 (SS), r0 = M[I2,1], r1 = M[I5,1];
0x002283        AF232935                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I2,1], r1 = M[I5,1];
0x002284        AF232935                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I2,1], r1 = M[I5,1];
0x002285        AF232935                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I2,1], r1 = M[I5,1];
0x002286        AF232935                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I2,1], r1 = M[I5,1];
0x002287        AF232935                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I2,1], r1 = M[I5,1];
0x002288        AE232B35                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I2,M3], r1 = M[I5,M1];
0x002289        AF232935                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I2,1], r1 = M[I5,1];
0x00228A        03009100                 Null = Null + Null, M[I0,1] = rMAC;

 <$M.sbcdec.synthesis_subband_filter.matrix_loop_M8>
0x00228B        02002200                 Null = Null + Null, r0 = M[I0,M2];
0x00228C        5B250000                 I2 = I2 + r3;
0x00228D        51900018                 M1 = Null + 24;
0x00228E        51A0FFB9                 M2 = Null + -71;
0x00228F        51B0FF69                 M3 = Null + -151;
0x002290        E1F00025                 call $M.sbcdec.synthesis_subband_filter.output_code;
0x002291        5190FFD0                 M1 = Null + -48;
0x002292        02002100                 Null = Null + Null, r0 = M[I0,M1];
0x002293        E466003F                 r4 = r4 - 1;
0x002294        DD10FFE4                 if NE jump $M.sbcdec.synthesis_subband_filter.block_loop_M8;
0x002295        DDF0001B                 jump $M.sbcdec.synthesis_subband_filter.all_done;

 <$M.sbcdec.synthesis_subband_filter.M_equals_4>
0x002296        51C00050                 L0 = Null + 80;

 <$M.sbcdec.synthesis_subband_filter.block_loop_M4>
0x002297        D12B0016                 r0 = M[r9 + 22];
0x002298        5040002F                 I4 = Null + r0;
0x002299        D12B002F                 r0 = M[r9 + 47];
0x00229A        5050002F                 I5 = Null + r0;
0x00229B        51900001                 M1 = Null + 1;
0x00229C        51A0FFF8                 M2 = Null + -8;
0x00229D        51B0FFFD                 M3 = Null + -3;
0x00229E        4CC8008F                 r10 = M0 + M0;
0x00229F        03002935                 Null = Null + Null, r0 = M[I2,1], r1 = M[I5,1];
0x0022A0        E5F00006                 do $M.sbcdec.synthesis_subband_filter.matrix_loop_M4;
0x0022A1        CF232935                 rMAC = r0 * r1 (SS), r0 = M[I2,1], r1 = M[I5,1];
0x0022A2        AF232935                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I2,1], r1 = M[I5,1];
0x0022A3        AE232B35                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I2,M3], r1 = M[I5,M1];
0x0022A4        AF232935                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I2,1], r1 = M[I5,1];
0x0022A5        03009100                 Null = Null + Null, M[I0,1] = rMAC;

 <$M.sbcdec.synthesis_subband_filter.matrix_loop_M4>
0x0022A6        02002200                 Null = Null + Null, r0 = M[I0,M2];
0x0022A7        5B250000                 I2 = I2 + r3;
0x0022A8        5190000C                 M1 = Null + 12;
0x0022A9        51A0FFDD                 M2 = Null + -35;
0x0022AA        51B0FFB5                 M3 = Null + -75;
0x0022AB        E1F0000A                 call $M.sbcdec.synthesis_subband_filter.output_code;
0x0022AC        5190FFE8                 M1 = Null + -24;
0x0022AD        02002100                 Null = Null + Null, r0 = M[I0,M1];
0x0022AE        E466003F                 r4 = r4 - 1;
0x0022AF        DD10FFE8                 if NE jump $M.sbcdec.synthesis_subband_filter.block_loop_M4;

 <$M.sbcdec.synthesis_subband_filter.all_done>
0x0022B0        4420000F                 r0 = Null + I0;
0x0022B1        016B003C                 r4 = r9 + 60;
0x0022B2        D427006F                 M[r5 + r4] = r0;
0x0022B3        51C00000                 L0 = Null + 0;
0x0022B4        DDF0F415                 jump $pop_rLink_and_rts;

 <$M.sbcdec.synthesis_subband_filter.output_code>
0x0022B5        44C0008F                 r10 = Null + M0;
0x0022B6        02002130                 Null = Null + Null, r0 = M[I0,M1], r1 = M[I4,M0];
0x0022B7        E5F0000D                 do $M.sbcdec.synthesis_subband_filter.output_loop;
0x0022B8        CE232030                 rMAC = r0 * r1 (SS), r0 = M[I0,M0], r1 = M[I4,M0];
0x0022B9        AE232130                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I0,M1], r1 = M[I4,M0];
0x0022BA        AE232030                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I0,M0], r1 = M[I4,M0];
0x0022BB        AE232130                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I0,M1], r1 = M[I4,M0];
0x0022BC        AE232030                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I0,M0], r1 = M[I4,M0];
0x0022BD        AE232130                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I0,M1], r1 = M[I4,M0];
0x0022BE        AE232030                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I0,M0], r1 = M[I4,M0];
0x0022BF        AE232130                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I0,M1], r1 = M[I4,M0];
0x0022C0        AE232332                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I0,M3], r1 = M[I4,M2];
0x0022C1        AE232130                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I0,M1], r1 = M[I4,M0];
0x0022C2        9D41FFFC                 r2 = rMAC * -4 (int) (sat);
0x0022C3        0300C500                 Null = Null + Null, M[I1,1] = r2;

 <$M.sbcdec.synthesis_subband_filter.output_loop>
0x0022C4        DC0D000F                 rts;

 <$wall_clock_message_handler>
0x0022C5        F3D00000                 push rLink;
0x0022C6        D1250004                 r0 = M[r3 + 4];
0x0022C7        192064AE                 M[$wall_clock_msw] = r0 + Null;
0x0022C8        D1250005                 r0 = M[r3 + 5];
0x0022C9        192094AE                 M[$wall_clock_lsw] = r0 + Null;
0x0022CA        D1250006                 r0 = M[r3 + 6];
0x0022CB        D1350007                 r1 = M[r3 + 7];
0x0022CC        8D220010                 r0 = r0 LSHIFT 16;
0x0022CD        8133FFFF                 r1 = r1 AND 0xffff;
0x0022CE        03320000                 r1 = r1 + r0;
0x0022CF        193064AF                 M[$wall_clock_time] = r1 + Null;
0x0022D0        D1350004                 r1 = M[r3 + 4];
0x0022D1        193064AE                 M[$wall_clock_msw] = r1 + Null;
0x0022D2        D1450005                 r2 = M[r3 + 5];
0x0022D3        194094AE                 M[$wall_clock_lsw] = r2 + Null;
0x0022D4        8DE30078                 rMAC = r1 LSHIFT -8 (MI);
0x0022D5        811100FF                 rMAC = rMAC AND 0xff;
0x0022D6        991104E2                 rMAC = rMAC * 1250 (int);
0x0022D7        8D330010                 r1 = r1 LSHIFT 16;
0x0022D8        8144FFFF                 r2 = r2 AND 0xffff;
0x0022D9        03430000                 r2 = r2 + r1;
0x0022DA        FD000000 A1140271        rMAC = rMAC + r2 * 3.7252902984619141e-005 (UU);
0x0022DC        8D410016                 r2 = rMAC LSHIFT 22;
0x0022DD        D1650007                 r4 = M[r3 + 7];
0x0022DE        D1550006                 r3 = M[r3 + 6];
0x0022DF        8D550010                 r3 = r3 LSHIFT 16;
0x0022E0        8166FFFF                 r4 = r4 AND 0xffff;
0x0022E1        03650000                 r4 = r4 + r3;
0x0022E2        23460000                 r2 = r2 - r4;
0x0022E3        194064BB                 M[$wall_clock_adjustment] = r2 + Null;
0x0022E4        090094AF                 Null = Null + M[$sco_param_tesco];
0x0022E5        DD10002D                 if NE jump $M.wall_clock_message_handler.done;
0x0022E6        E1F0F399                 call $block_interrupts;
0x0022E7        E1F01398                 call $multi_chan_purge_buffers;
0x0022E8        09206440                 r0 = Null + M[0x6440];
0x0022E9        1920643F                 M[0x643f] = r0 + Null;
0x0022EA        0920943A                 r0 = Null + M[0xff943a];
0x0022EB        19209439                 M[0xff9439] = r0 + Null;
0x0022EC        E1F0F383                 call $interrupt.unblock;
0x0022ED        093064AD                 r1 = Null + M[$sub_link_port];
0x0022EE        FD00009D 2103800D        Null = r1 - -6455283;
0x0022F0        DD00001E                 if EQ jump $M.wall_clock_message_handler.uses_l2cap;
0x0022F1        FD000000 01408014        r2 = Null + 32788;
0x0022F3        095064AD                 r3 = Null + M[$sub_link_port];
0x0022F4        8155001F                 r3 = r3 AND 0x1f;
0x0022F5        01600000                 r4 = Null + 0;
0x0022F6        01700000                 r5 = Null + 0;
0x0022F7        01800000                 r6 = Null + 0;
0x0022F8        E1F0F3B0                 call $message.send;
0x0022F9        0120028A                 r0 = Null + 650;
0x0022FA        192092F6                 M[0xff92f6] = r0 + Null;
0x0022FB        1920633C                 M[0x633c] = r0 + Null;
0x0022FC        192092FC                 M[0xff92fc] = r0 + Null;
0x0022FD        19206342                 M[0x6342] = r0 + Null;
0x0022FE        19209302                 M[0xff9302] = r0 + Null;
0x0022FF        19206348                 M[0x6348] = r0 + Null;
0x002300        192093AA                 M[$M.main.samples_latency_measure] = r0 + Null;
0x002301        01A092F3                 r8 = Null + -27917;
0x002302        E1F01A4F                 call $audio_proc.delay.initialize;
0x002303        01A06339                 r8 = Null + 25401;
0x002304        E1F01A4D                 call $audio_proc.delay.initialize;
0x002305        01A092F9                 r8 = Null + -27911;
0x002306        E1F01A4B                 call $audio_proc.delay.initialize;
0x002307        01A0633F                 r8 = Null + 25407;
0x002308        E1F01A49                 call $audio_proc.delay.initialize;
0x002309        01A092FF                 r8 = Null + -27905;
0x00230A        E1F01A47                 call $audio_proc.delay.initialize;
0x00230B        01A06345                 r8 = Null + 25413;
0x00230C        E1F01A45                 call $audio_proc.delay.initialize;
0x00230D        DDF00005                 jump $M.wall_clock_message_handler.done;

 <$M.wall_clock_message_handler.uses_l2cap>
0x00230E        E420002F                 r0 = Null + 1;
0x00230F        192094AF                 M[$sco_param_tesco] = r0 + Null;
0x002310        01200032                 r0 = Null + 50;
0x002311        192064B1                 M[$sco_param_to_air_size] = r0 + Null;

 <$M.wall_clock_message_handler.done>
0x002312        DDF0F3B7                 jump $pop_rLink_and_rts;

 <$sbcdec.read_frame_header>
0x002313        F3D00000                 push rLink;
0x002314        D50B0036                 M[r9 + 54] = Null;
0x002315        E1F015CE                 call $sbcdec.get1byte;
0x002316        0120000F                 r0 = Null + 15;
0x002317        D52B0024                 M[r9 + 36] = r0;
0x002318        E1F015CF                 call $sbcdec.get2bits;
0x002319        E1F01924                 call $sbc.crc_calc;
0x00231A        D53B001C                 M[r9 + 28] = r1;
0x00231B        E1F015CC                 call $sbcdec.get2bits;
0x00231C        E1F01921                 call $sbc.crc_calc;
0x00231D        99330004                 r1 = r1 * 4 (int);
0x00231E        01330004                 r1 = r1 + 4;
0x00231F        D53B001D                 M[r9 + 29] = r1;
0x002320        E1F015C7                 call $sbcdec.get2bits;
0x002321        E1F0191C                 call $sbc.crc_calc;
0x002322        E420002F                 r0 = Null + 1;
0x002323        D53B001E                 M[r9 + 30] = r1;
0x002324        00220021                 if NE r0 = r0 + r0;
0x002325        D52B001F                 M[r9 + 31] = r0;
0x002326        E1F015C3                 call $sbcdec.get1bit;
0x002327        E1F01916                 call $sbc.crc_calc;
0x002328        D53B0020                 M[r9 + 32] = r1;
0x002329        E1F015C0                 call $sbcdec.get1bit;
0x00232A        E1F01913                 call $sbc.crc_calc;
0x00232B        99330004                 r1 = r1 * 4 (int);
0x00232C        01330004                 r1 = r1 + 4;
0x00232D        D12B0021                 r0 = M[r9 + 33];
0x00232E        2003002F                 Null = r1 - r0;
0x00232F        E1101873                 if NE call $sbcdec.silence_decoder;
0x002330        D53B0021                 M[r9 + 33] = r1;
0x002331        E1F015B2                 call $sbcdec.get1byte;
0x002332        E1F0190B                 call $sbc.crc_calc;
0x002333        D53B0022                 M[r9 + 34] = r1;
0x002334        D14B0021                 r2 = M[r9 + 33];
0x002335        99440010                 r2 = r2 * 16 (int);
0x002336        D12B001E                 r0 = M[r9 + 30];
0x002337        21020002                 Null = r0 - 2;
0x002338        00440045                 if POS r2 = r2 + r2;
0x002339        212400FA                 r0 = r2 - 250;
0x00233A        2044002C                 if GT r2 = r2 - r0;
0x00233B        2004003F                 Null = r2 - r1;
0x00233C        DD400017                 if NEG jump $M.sbcdec.read_frame_header.corrupt_frame_error;
0x00233D        21030002                 Null = r1 - 2;
0x00233E        DD400015                 if NEG jump $M.sbcdec.read_frame_header.corrupt_frame_error;
0x00233F        E1F015A4                 call $sbcdec.get1byte;
0x002340        D53B0023                 M[r9 + 35] = r1;
0x002341        D13B001E                 r1 = M[r9 + 30];
0x002342        21030003                 Null = r1 - 3;
0x002343        DD10000D                 if NE jump $M.sbcdec.read_frame_header.not_jointstereo;
0x002344        D1AB0021                 r8 = M[r9 + 33];
0x002345        E4AA003F                 r8 = r8 - 1;
0x002346        511B0026                 I1 = r9 + 38;

 <$M.sbcdec.read_frame_header.join_loop>
0x002347        E1F015A2                 call $sbcdec.get1bit;
0x002348        E1F018F5                 call $sbc.crc_calc;
0x002349        0300B500                 Null = Null + Null, M[I1,1] = r1;
0x00234A        E4AA003F                 r8 = r8 - 1;
0x00234B        DD10FFFC                 if NE jump $M.sbcdec.read_frame_header.join_loop;
0x00234C        01200000                 r0 = Null + 0;
0x00234D        0300A400                 Null = Null + Null, M[I1,0] = r0;
0x00234E        E1F0159B                 call $sbcdec.get1bit;
0x00234F        E1F018EE                 call $sbc.crc_calc;

 <$M.sbcdec.read_frame_header.not_jointstereo>
0x002350        E1F0173F                 call $sbc.calc_frame_length;
0x002351        D52B0039                 M[r9 + 57] = r0;
0x002352        DDF0F377                 jump $pop_rLink_and_rts;

 <$M.sbcdec.read_frame_header.corrupt_frame_error>
0x002353        E420002F                 r0 = Null + 1;
0x002354        D52B0036                 M[r9 + 54] = r0;
0x002355        DDF0F374                 jump $pop_rLink_and_rts;

 <$audio_proc.dbe.calc_DBEgain_process>
0x002356        F3D00000                 push rLink;
0x002357        D119001A                 rMAC = M[r7 + 26];
0x002358        0007000F                 Null = r5 + Null;
0x002359        DD000006                 if EQ jump $M.audio_proc.calc_DBEgain_process.no_right_chan;
0x00235A        FD000080 01300000        r1 = Null + -8388608;
0x00235C        D127001A                 r0 = M[r5 + 26];
0x00235D        BC12003F                 rMAC = rMAC - r0 * r1 (SS);
0x00235E        91E1007F                 rMAC = rMAC ASHIFT -1 (MI);

 <$M.audio_proc.calc_DBEgain_process.no_right_chan>
0x00235F        D129001B                 r0 = M[r7 + 27];
0x002360        E422002F                 r0 = r0 + 1;
0x002361        21010A5D                 Null = rMAC - 2653;
0x002362        0020000B                 if LT r0 = Null + Null;
0x002363        01600064                 r4 = Null + 100;
0x002364        01700000                 r5 = Null + 0;
0x002365        2002006F                 Null = r0 - r4;
0x002366        E4700021                 if NE r5 = Null + 1;
0x002367        E4220030                 if EQ r0 = r0 - 1;
0x002368        D529001B                 M[r7 + 27] = r0;
0x002369        D1290054                 r0 = M[r7 + 84];
0x00236A        CD120400                 rMAC = r0 * 0.03125 (SS);
0x00236B        91310004                 r1 = rMAC ASHIFT 4;
0x00236C        FD00007F 6533FFFF        r1 = 8388607 - r1;
0x00236E        CC12003F                 rMAC = r0 * r1 (SS);
0x00236F        01110800                 rMAC = rMAC + 2048;
0x002370        0021000F                 r0 = rMAC + Null;
0x002371        E420006F                 r0 = MAX Null;
0x002372        0007000F                 Null = r5 + Null;
0x002373        00200001                 if NE r0 = Null + Null;
0x002374        D5290054                 M[r7 + 84] = r0;
0x002375        D139004A                 r1 = M[r7 + 74];
0x002376        D1090002                 Null = M[r7 + 2];
0x002377        DD000003                 if EQ jump $M.audio_proc.calc_DBEgain_process.mono_mode_no_nlgain1;
0x002378        D149004B                 r2 = M[r7 + 75];
0x002379        E434005F                 r1 = MIN r2;

 <$M.audio_proc.calc_DBEgain_process.mono_mode_no_nlgain1>
0x00237A        CC12003F                 rMAC = r0 * r1 (SS);
0x00237B        D129004F                 r0 = M[r7 + 79];
0x00237C        99110040                 rMAC = rMAC * 64 (int);
0x00237D        CC11002F                 rMAC = rMAC * r0 (SS);
0x00237E        9111000E                 rMAC = rMAC ASHIFT 14 (56bit);
0x00237F        0021000F                 r0 = rMAC + Null;
0x002380        FD000060 01400000        r2 = Null + 6291456;
0x002382        E424005F                 r0 = MIN r2;
0x002383        D1390014                 r1 = M[r7 + 20];
0x002384        FD000080 01700000        r5 = Null + -8388608;
0x002386        D1F90015                 rMACB = M[r7 + 21];
0x002387        91FF0002                 rMACB = rMACB ASHIFT 2 (56bit);
0x002388        BC03007F                 rMACB = rMACB - r1 * r5 (SS);
0x002389        CD127800                 rMAC = r0 * 0.9375 (SS);
0x00238A        CC1100FF                 rMAC = rMAC * rMACB (SS);
0x00238B        CD110300                 rMAC = rMAC * 0.0234375 (SS);
0x00238C        91110002                 rMAC = rMAC ASHIFT 2 (56bit);
0x00238D        D1390053                 r1 = M[r7 + 83];
0x00238E        AD137D00                 rMAC = rMAC + r1 * 0.9765625 (SS);
0x00238F        D5190053                 M[r7 + 83] = rMAC;
0x002390        E47A004F                 r5 = ABS r8;
0x002391        CD070400                 rMACB = r5 * 0.03125 (SS);
0x002392        D1490035                 r2 = M[r7 + 53];
0x002393        E444004F                 r2 = ABS r2;
0x002394        91440001                 r2 = r2 ASHIFT 1;
0x002395        AD040400                 rMACB = rMACB + r2 * 0.03125 (SS);
0x002396        003F000F                 r1 = rMACB + Null;
0x002397        D1090002                 Null = M[r7 + 2];
0x002398        DD000008                 if EQ jump $M.audio_proc.calc_DBEgain_process.mono_mode_dbegain;
0x002399        D1690036                 r4 = M[r7 + 54];
0x00239A        E47B004F                 r5 = ABS r9;
0x00239B        CD070400                 rMACB = r5 * 0.03125 (SS);
0x00239C        E466004F                 r4 = ABS r4;
0x00239D        91660001                 r4 = r4 ASHIFT 1;
0x00239E        AD060400                 rMACB = rMACB + r4 * 0.03125 (SS);
0x00239F        E43F006F                 r1 = MAX rMACB;

 <$M.audio_proc.calc_DBEgain_process.mono_mode_dbegain>
0x0023A0        D1490051                 r2 = M[r7 + 81];
0x0023A1        CC04003F                 rMACB = r2 * r1 (SS);
0x0023A2        914F0008                 r2 = rMACB ASHIFT 8;
0x0023A3        FD000002 21440000        r2 = r2 - 131072;
0x0023A5        E440006F                 r2 = MAX Null;
0x0023A6        91440004                 r2 = r2 ASHIFT 4;
0x0023A7        FD000010 01300000        r1 = Null + 1048576;
0x0023A9        E443005F                 r2 = MIN r1;
0x0023AA        BC11004F                 rMAC = rMAC - rMAC * r2 (SS);
0x0023AB        D5190052                 M[r7 + 82] = rMAC;
0x0023AC        D5190033                 M[r7 + 51] = rMAC;
0x0023AD        DDF0F31C                 jump $pop_rLink_and_rts;

 <$calc_actual_port_rate>
0x0023AE        F3D00000                 push rLink;
0x0023AF        D11A0001                 rMAC = M[r8 + 1];
0x0023B0        DD000007                 if EQ jump $M.calc_actual_samples.measure_rate;
0x0023B1        D3100000                 rMAC = M[rMAC + Null];
0x0023B2        DD000005                 if EQ jump $M.calc_actual_samples.measure_rate;
0x0023B3        D50A0004                 M[r8 + 4] = Null;
0x0023B4        D50A000A                 M[r8 + 10] = Null;
0x0023B5        91E10004                 rMAC = rMAC ASHIFT 4 (MI);
0x0023B6        DDF00048                 jump $M.calc_actual_samples.set_rate;

 <$M.calc_actual_samples.measure_rate>
0x0023B7        D12A0004                 r0 = M[r8 + 4];
0x0023B8        D122942C                 r0 = M[r0 + -27604];
0x0023B9        DC02000F                 jump r0;

 <$M.calc_actual_samples.reset>
0x0023BA        E420002F                 r0 = Null + 1;
0x0023BB        D52A0004                 M[r8 + 4] = r0;
0x0023BC        D50A0005                 M[r8 + 5] = Null;
0x0023BD        D50A000A                 M[r8 + 10] = Null;
0x0023BE        0920FE71                 r0 = Null + M[0xfffe71];
0x0023BF        D52A0007                 M[r8 + 7] = r0;
0x0023C0        DDF00042                 jump $M.calc_actual_samples.exit;

 <$M.calc_actual_samples.wait>
0x0023C1        0920FE71                 r0 = Null + M[0xfffe71];
0x0023C2        D13A0007                 r1 = M[r8 + 7];
0x0023C3        2032003F                 r1 = r0 - r1;
0x0023C4        E433004F                 r1 = ABS r1;
0x0023C5        FD000001 015086A0        r3 = Null + 100000;
0x0023C7        D14A0003                 r2 = M[r8 + 3];
0x0023C8        0045000D                 if LE r2 = r3 + Null;
0x0023C9        2003004F                 Null = r1 - r2;
0x0023CA        DD400038                 if NEG jump $M.calc_actual_samples.exit;
0x0023CB        D52A0007                 M[r8 + 7] = r0;
0x0023CC        01200002                 r0 = Null + 2;
0x0023CD        D52A0004                 M[r8 + 4] = r0;
0x0023CE        D50A0005                 M[r8 + 5] = Null;
0x0023CF        D12A0000                 r0 = M[r8 + 0];
0x0023D0        8122001F                 r0 = r0 AND 0x1f;
0x0023D1        D1224FE6                 r0 = M[r0 + 20454];
0x0023D2        DD00FFE8                 if EQ jump $M.calc_actual_samples.reset;
0x0023D3        D3200000                 r0 = M[r0 + Null];
0x0023D4        D52A0006                 M[r8 + 6] = r0;
0x0023D5        DDF0002D                 jump $M.calc_actual_samples.exit;

 <$M.calc_actual_samples.run>
0x0023D6        0950FE71                 r3 = Null + M[0xfffe71];
0x0023D7        D12A0000                 r0 = M[r8 + 0];
0x0023D8        E1F0F27F                 call $cbuffer.calc_amount_space;
0x0023D9        D12A0000                 r0 = M[r8 + 0];
0x0023DA        8122001F                 r0 = r0 AND 0x1f;
0x0023DB        D1224FE6                 r0 = M[r0 + 20454];
0x0023DC        DD00FFDE                 if EQ jump $M.calc_actual_samples.reset;
0x0023DD        D3200000                 r0 = M[r0 + Null];
0x0023DE        D13A0006                 r1 = M[r8 + 6];
0x0023DF        2032003F                 r1 = r0 - r1;
0x0023E0        00330044                 if NEG r1 = r1 + r2;
0x0023E1        D52A0006                 M[r8 + 6] = r0;
0x0023E2        F3500000                 push r3;
0x0023E3        D15A0000                 r3 = M[r8 + 0];
0x0023E4        0043000F                 r2 = r1 + Null;
0x0023E5        E1F0F23A                 call $cbuffer.mmu_octets_to_samples;
0x0023E6        F3540000                 pop r3;
0x0023E7        0034000F                 r1 = r2 + Null;
0x0023E8        D12A0005                 r0 = M[r8 + 5];
0x0023E9        03230000                 r0 = r0 + r1;
0x0023EA        D52A0005                 M[r8 + 5] = r0;
0x0023EB        0035000F                 r1 = r3 + Null;
0x0023EC        D14A0007                 r2 = M[r8 + 7];
0x0023ED        2053004F                 r3 = r1 - r2;
0x0023EE        E455004F                 r3 = ABS r3;
0x0023EF        FD00000F 01104240        rMAC = Null + 1000000;
0x0023F1        D14A0002                 r2 = M[r8 + 2];
0x0023F2        00410000                 if EQ r2 = rMAC + Null;
0x0023F3        2005004F                 Null = r3 - r2;
0x0023F4        DD40000E                 if NEG jump $M.calc_actual_samples.exit;
0x0023F5        D53A0007                 M[r8 + 7] = r1;
0x0023F6        D14A000A                 r2 = M[r8 + 10];
0x0023F7        01100000                 rMAC = Null + 0;
0x0023F8        8DE40280                 rMAC0 = r2 LSHIFT 0;
0x0023F9        AD127A12                 rMAC = rMAC + r0 * 0.95367431640625 (SS);
0x0023FA        D9050000                 Div = rMAC / r3;
0x0023FB        D9200002                 r0 = DivRemainder;
0x0023FC        D52A000A                 M[r8 + 10] = r0;
0x0023FD        D9100001                 rMAC = DivResult;

 <$M.calc_actual_samples.set_rate>
0x0023FE        D51A0009                 M[r8 + 9] = rMAC;
0x0023FF        9111007C                 rMAC = rMAC ASHIFT -4 (56bit);
0x002400        D51A0008                 M[r8 + 8] = rMAC;
0x002401        D50A0005                 M[r8 + 5] = Null;

 <$M.calc_actual_samples.exit>
0x002402        DDF0F2C7                 jump $pop_rLink_and_rts;

 <$M.music_example_message.MainVolume.update_volumes>
0x002403        F3D00000                 push rLink;
0x002404        5000005F                 I0 = Null + r3;
0x002405        1950949E                 M[$M.music_example_message.MainVolume.temp_msg_ptr] = r3 + Null;
0x002406        03006100                 Null = Null + Null, r4 = M[I0,1];
0x002407        090094AB                 Null = Null + M[$DAC_conn_main];
0x002408        DD000003                 if EQ jump $M.music_example_message.MainVolume.no_system_vol;
0x002409        8166000F                 r4 = r4 AND 0xf;
0x00240A        19606492                 M[$music_example.SystemVolume] = r4 + Null;

 <$M.music_example_message.MainVolume.no_system_vol>
0x00240B        03002100                 Null = Null + Null, r0 = M[I0,1];
0x00240C        0002000F                 Null = r0 + Null;
0x00240D        00200005                 if POS r0 = Null + Null;
0x00240E        19209494                 M[$music_example.Main.MasterVolume] = r0 + Null;
0x00240F        E1F01865                 call $M.music_example_message.vmdB2vol;
0x002410        91220002                 r0 = r0 ASHIFT 2;
0x002411        19209002                 M[0xff9002] = r0 + Null;
0x002412        03002100                 Null = Null + Null, r0 = M[I0,1];
0x002413        0002000F                 Null = r0 + Null;
0x002414        00200005                 if POS r0 = Null + Null;
0x002415        19206495                 M[$music_example.Main.ToneVolume] = r0 + Null;
0x002416        E1F0185E                 call $M.music_example_message.vmdB2vol;
0x002417        91520003                 r3 = r0 ASHIFT 3;
0x002418        E1F01312                 call $multi_chan_set_prim_tone_mix_ratio;
0x002419        03002100                 Null = Null + Null, r0 = M[I0,1];
0x00241A        213202D2                 r1 = r0 - 722;
0x00241B        20220035                 if POS r0 = r0 - r1;
0x00241C        2132FD2E                 r1 = r0 - -722;
0x00241D        20220034                 if NEG r0 = r0 - r1;
0x00241E        19209495                 M[$music_example.Main.PrimaryLeftTrimVolume] = r0 + Null;
0x00241F        E1F01855                 call $M.music_example_message.vmdB2vol;
0x002420        1920900B                 M[0xff900b] = r0 + Null;
0x002421        03002100                 Null = Null + Null, r0 = M[I0,1];
0x002422        213202D2                 r1 = r0 - 722;
0x002423        20220035                 if POS r0 = r0 - r1;
0x002424        2132FD2E                 r1 = r0 - -722;
0x002425        20220034                 if NEG r0 = r0 - r1;
0x002426        19206496                 M[$music_example.Main.PrimaryRightTrimVolume] = r0 + Null;
0x002427        E1F0184D                 call $M.music_example_message.vmdB2vol;
0x002428        19209010                 M[0xff9010] = r0 + Null;
0x002429        03002100                 Null = Null + Null, r0 = M[I0,1];
0x00242A        213202D2                 r1 = r0 - 722;
0x00242B        20220035                 if POS r0 = r0 - r1;
0x00242C        2132FD2E                 r1 = r0 - -722;
0x00242D        20220034                 if NEG r0 = r0 - r1;
0x00242E        19209496                 M[$music_example.Main.SecondaryLeftTrimVolume] = r0 + Null;
0x00242F        E1F01845                 call $M.music_example_message.vmdB2vol;
0x002430        19209015                 M[0xff9015] = r0 + Null;
0x002431        03002100                 Null = Null + Null, r0 = M[I0,1];
0x002432        213202D2                 r1 = r0 - 722;
0x002433        20220035                 if POS r0 = r0 - r1;
0x002434        2132FD2E                 r1 = r0 - -722;
0x002435        20220034                 if NEG r0 = r0 - r1;
0x002436        19206497                 M[$music_example.Main.SecondaryRightTrimVolume] = r0 + Null;
0x002437        E1F0183D                 call $M.music_example_message.vmdB2vol;
0x002438        1920901A                 M[0xff901a] = r0 + Null;
0x002439        03002100                 Null = Null + Null, r0 = M[I0,1];
0x00243A        213202D2                 r1 = r0 - 722;
0x00243B        20220035                 if POS r0 = r0 - r1;
0x00243C        2132FD2E                 r1 = r0 - -722;
0x00243D        20220034                 if NEG r0 = r0 - r1;
0x00243E        19209497                 M[$music_example.Main.SubTrimVolume] = r0 + Null;
0x00243F        E1F01835                 call $M.music_example_message.vmdB2vol;
0x002440        1920901F                 M[0xff901f] = r0 + Null;
0x002441        0900649E                 Null = Null + M[$multichannel_vol_msg_echo];
0x002442        DD000005                 if EQ jump $M.music_example_message.MainVolume.done;
0x002443        0970949E                 r5 = Null + M[$M.music_example_message.MainVolume.temp_msg_ptr];
0x002444        01600008                 r4 = Null + 8;
0x002445        0150715A                 r3 = Null + 29018;
0x002446        E1F0ED13                 call $message.send_long;

 <$M.music_example_message.MainVolume.done>
0x002447        DDF0F282                 jump $pop_rLink_and_rts;

 <$M.music_example_message.MainVolume.func>
0x002448        F3D00000                 push rLink;
0x002449        E1F0FFBA                 call $M.music_example_message.MainVolume.update_volumes;

 <$M.music_example_message.MainVolume.volume_msg_done>
0x00244A        DDF0F27F                 jump $pop_rLink_and_rts;

 <$M.music_example_message.MainVolume.tws_func>
0x00244B        F3D00000                 push rLink;
0x00244C        E1F0FFB7                 call $M.music_example_message.MainVolume.update_volumes;
0x00244D        DDF0F27C                 jump $pop_rLink_and_rts;

 <$Set_Mode>
0x00244E        F3D00000                 push rLink;
0x00244F        095000FC                 r3 = Null + M[$music_example.CurMode];
0x002450        21050000                 Null = r3 - 0;
0x002451        DD000005                 if EQ jump $M.set_mode_gains.standby_gains;
0x002452        FD00007F 0130FFFF        r1 = Null + 8388607;
0x002454        0040000F                 r2 = Null + Null;
0x002455        DDF00003                 jump $M.set_mode_gains.continue;

 <$M.set_mode_gains.standby_gains>
0x002456        0030000F                 r1 = Null + Null;
0x002457        E440002F                 r2 = Null + 1;

 <$M.set_mode_gains.continue>
0x002458        095064D1                 r3 = Null + M[$M.multi_chan_port_scan_and_routing_config.fp_config_input];
0x002459        D1550000                 r3 = M[r3 + 0];
0x00245A        01600001                 r4 = Null + 1;
0x00245B        8005006F                 Null = r3 AND r4;
0x00245C        DD00000A                 if EQ jump $M.set_mode_gains.no_pri_left;
0x00245D        012091E8                 r0 = Null + -28184;
0x00245E        192093D3                 M[0xff93d3] = r0 + Null;
0x00245F        D5390000                 M[r7 + 0] = r1;
0x002460        D5490001                 M[r7 + 1] = r2;
0x002461        F1000238                 pushm <r1, r2, r3, r7>;
0x002462        019093D2                 r7 = Null + -27694;
0x002463        01A00000                 r8 = Null + 0;
0x002464        E1F0EA7A                 call $M.audio_proc.stream_gain.Process.func;
0x002465        F1040238                 popm <r1, r2, r3, r7>;

 <$M.set_mode_gains.no_pri_left>
0x002466        01600002                 r4 = Null + 2;
0x002467        8005006F                 Null = r3 AND r4;
0x002468        DD00000A                 if EQ jump $M.set_mode_gains.no_pri_right;
0x002469        01206228                 r0 = Null + 25128;
0x00246A        192063F4                 M[0x63f4] = r0 + Null;
0x00246B        D5390002                 M[r7 + 2] = r1;
0x00246C        D5490003                 M[r7 + 3] = r2;
0x00246D        F1000238                 pushm <r1, r2, r3, r7>;
0x00246E        019063F3                 r7 = Null + 25587;
0x00246F        01A00000                 r8 = Null + 0;
0x002470        E1F0EA6E                 call $M.audio_proc.stream_gain.Process.func;
0x002471        F1040238                 popm <r1, r2, r3, r7>;

 <$M.set_mode_gains.no_pri_right>
0x002472        01600040                 r4 = Null + 64;
0x002473        8006005F                 Null = r4 AND r3;
0x002474        DD00000A                 if EQ jump $M.set_mode_gains.no_wired_sub;
0x002475        0120920F                 r0 = Null + -28145;
0x002476        192093D7                 M[0xff93d7] = r0 + Null;
0x002477        D539000C                 M[r7 + 12] = r1;
0x002478        D549000D                 M[r7 + 13] = r2;
0x002479        F1000238                 pushm <r1, r2, r3, r7>;
0x00247A        019093D6                 r7 = Null + -27690;
0x00247B        01A00000                 r8 = Null + 0;
0x00247C        E1F0EA62                 call $M.audio_proc.stream_gain.Process.func;
0x00247D        F1040238                 popm <r1, r2, r3, r7>;

 <$M.set_mode_gains.no_wired_sub>
0x00247E        01600010                 r4 = Null + 16;
0x00247F        8005006F                 Null = r3 AND r4;
0x002480        DD00000A                 if EQ jump $M.set_mode_gains.no_sec_left;
0x002481        012091F5                 r0 = Null + -28171;
0x002482        192063F8                 M[0x63f8] = r0 + Null;
0x002483        D5390004                 M[r7 + 4] = r1;
0x002484        D5490005                 M[r7 + 5] = r2;
0x002485        F1000238                 pushm <r1, r2, r3, r7>;
0x002486        019063F7                 r7 = Null + 25591;
0x002487        01A00000                 r8 = Null + 0;
0x002488        E1F0EA56                 call $M.audio_proc.stream_gain.Process.func;
0x002489        F1040238                 popm <r1, r2, r3, r7>;

 <$M.set_mode_gains.no_sec_left>
0x00248A        01600020                 r4 = Null + 32;
0x00248B        8005006F                 Null = r3 AND r4;
0x00248C        DD00000A                 if EQ jump $M.set_mode_gains.no_sec_right;
0x00248D        01206235                 r0 = Null + 25141;
0x00248E        192093DB                 M[0xff93db] = r0 + Null;
0x00248F        D5390006                 M[r7 + 6] = r1;
0x002490        D5490007                 M[r7 + 7] = r2;
0x002491        F1000238                 pushm <r1, r2, r3, r7>;
0x002492        019093DA                 r7 = Null + -27686;
0x002493        01A00000                 r8 = Null + 0;
0x002494        E1F0EA4A                 call $M.audio_proc.stream_gain.Process.func;
0x002495        F1040238                 popm <r1, r2, r3, r7>;

 <$M.set_mode_gains.no_sec_right>
0x002496        DDF0F233                 jump $pop_rLink_and_rts;

 <$audio_proc.vse.initialize>
0x002497        F3D00000                 push rLink;
0x002498        012A0084                 r0 = r8 + 132;
0x002499        D52A0009                 M[r8 + 9] = r0;
0x00249A        01220003                 r0 = r0 + 3;
0x00249B        D52A000A                 M[r8 + 10] = r0;
0x00249C        01220003                 r0 = r0 + 3;
0x00249D        D52A000B                 M[r8 + 11] = r0;
0x00249E        01220003                 r0 = r0 + 3;
0x00249F        D52A000D                 M[r8 + 13] = r0;
0x0024A0        01220003                 r0 = r0 + 3;
0x0024A1        D52A000E                 M[r8 + 14] = r0;
0x0024A2        01220002                 r0 = r0 + 2;
0x0024A3        D52A000F                 M[r8 + 15] = r0;
0x0024A4        01220005                 r0 = r0 + 5;
0x0024A5        D52A0010                 M[r8 + 16] = r0;
0x0024A6        D12A0003                 r0 = M[r8 + 3];
0x0024A7        E1F013B7                 call $audio_proc.vse.sample_rate_index;
0x0024A8        D15A0002                 r3 = M[r8 + 2];
0x0024A9        D1250003                 r0 = M[r3 + 3];
0x0024AA        E1F00433                 call $audio_proc.vse.virtual_angle_index;
0x0024AB        D1250002                 r0 = M[r3 + 2];
0x0024AC        E1F0161A                 call $audio_proc.vse.speaker_spacing_index;
0x0024AD        FD0000E0 015000BF        r3 = Null + -2096961;
0x0024AF        D3530000                 r3 = M[r3 + r1];
0x0024B0        D065000F                 r4 = M[r3 + Null];
0x0024B1        D3640000                 r4 = M[r4 + r2];
0x0024B2        D12A0009                 r0 = M[r8 + 9];
0x0024B3        01C00003                 r10 = Null + 3;
0x0024B4        E1F00027                 call $M.audio_proc.vse.initialize.copytoram;
0x0024B5        D1650001                 r4 = M[r3 + 1];
0x0024B6        D3640000                 r4 = M[r4 + r2];
0x0024B7        D12A000A                 r0 = M[r8 + 10];
0x0024B8        01C00003                 r10 = Null + 3;
0x0024B9        E1F00022                 call $M.audio_proc.vse.initialize.copytoram;
0x0024BA        D1650002                 r4 = M[r3 + 2];
0x0024BB        D3670000                 r4 = M[r4 + r5];
0x0024BC        D12A000B                 r0 = M[r8 + 11];
0x0024BD        01C00003                 r10 = Null + 3;
0x0024BE        E1F0001D                 call $M.audio_proc.vse.initialize.copytoram;
0x0024BF        D1650004                 r4 = M[r3 + 4];
0x0024C0        D12A000D                 r0 = M[r8 + 13];
0x0024C1        01C00003                 r10 = Null + 3;
0x0024C2        E1F00019                 call $M.audio_proc.vse.initialize.copytoram;
0x0024C3        D1650005                 r4 = M[r3 + 5];
0x0024C4        D12A000E                 r0 = M[r8 + 14];
0x0024C5        01C00002                 r10 = Null + 2;
0x0024C6        E1F00015                 call $M.audio_proc.vse.initialize.copytoram;
0x0024C7        D1650006                 r4 = M[r3 + 6];
0x0024C8        D12A000F                 r0 = M[r8 + 15];
0x0024C9        01C00005                 r10 = Null + 5;
0x0024CA        E1F00011                 call $M.audio_proc.vse.initialize.copytoram;
0x0024CB        D1650007                 r4 = M[r3 + 7];
0x0024CC        D12A0010                 r0 = M[r8 + 16];
0x0024CD        01C00005                 r10 = Null + 5;
0x0024CE        E1F0000D                 call $M.audio_proc.vse.initialize.copytoram;
0x0024CF        D1650003                 r4 = M[r3 + 3];
0x0024D0        D3640000                 r4 = M[r4 + r2];
0x0024D1        D56A000C                 M[r8 + 12] = r4;
0x0024D2        012A0020                 r0 = r8 + 32;
0x0024D3        D52A0012                 M[r8 + 18] = r0;
0x0024D4        012A006E                 r0 = r8 + 110;
0x0024D5        D52A0013                 M[r8 + 19] = r0;
0x0024D6        012A0078                 r0 = r8 + 120;
0x0024D7        D52A0014                 M[r8 + 20] = r0;
0x0024D8        E1F01308                 call $audio_proc.vse.limiter.initialize;
0x0024D9        D50A0004                 M[r8 + 4] = Null;
0x0024DA        DDF0F1EF                 jump $pop_rLink_and_rts;

 <$M.audio_proc.vse.initialize.copytoram>
0x0024DB        5040002F                 I4 = Null + r0;
0x0024DC        5010006F                 I1 = Null + r4;
0x0024DD        03002500                 Null = Null + Null, r0 = M[I1,1];
0x0024DE        E5F00002                 do $M.audio_proc.vse.initialize.copy_vsecoeffs_to_ram;
0x0024DF        030025A1                 Null = Null + Null, r0 = M[I1,1], M[I4,1] = r0;

 <$M.audio_proc.vse.initialize.copy_vsecoeffs_to_ram>
0x0024E0        DC0D000F                 rts;

 <$downsample_sub_to_1k2>
0x0024E1        F3D00000                 push rLink;
0x0024E2        01209447                 r0 = Null + -27577;
0x0024E3        E1F0F184                 call $cbuffer.calc_amount_data;
0x0024E4        21020168                 Null = r0 - 360;
0x0024E5        DD40F1E4                 if NEG jump $pop_rLink_and_rts;
0x0024E6        01209447                 r0 = Null + -27577;
0x0024E7        E1F0F19F                 call $cbuffer.get_read_address_and_size;
0x0024E8        5000002F                 I0 = Null + r0;
0x0024E9        50C0003F                 L0 = Null + r1;
0x0024EA        0120643E                 r0 = Null + 25662;
0x0024EB        E1F0F1A0                 call $cbuffer.get_write_address_and_size;
0x0024EC        5040002F                 I4 = Null + r0;
0x0024ED        50E0003F                 L4 = Null + r1;
0x0024EE        01200012                 r0 = Null + 18;
0x0024EF        01C00009                 r10 = Null + 9;
0x0024F0        093064AD                 r1 = Null + M[$sub_link_port];
0x0024F1        FD00009D 2103800D        Null = r1 - -6455283;
0x0024F3        00C20000                 if EQ r10 = r0 + Null;
0x0024F4        01300000                 r1 = Null + 0;
0x0024F5        51800028                 M0 = Null + 40;
0x0024F6        01300000                 r1 = Null + 0;
0x0024F7        092064AD                 r0 = Null + M[$sub_link_port];
0x0024F8        FD00009D 2102800D        Null = r0 - -6455283;
0x0024FA        DD000009                 if EQ jump $M.downsample_sub_to_1k2.downsample;
0x0024FB        01300000                 r1 = Null + 0;
0x0024FC        09206481                 r0 = Null + M[$current_dac_sampling_rate];
0x0024FD        FD000000 2102AC44        Null = r0 - 44100;
0x0024FF        DD100004                 if NE jump $M.downsample_sub_to_1k2.downsample;
0x002500        51800024                 M0 = Null + 36;
0x002501        FD000060 01300000        r1 = Null + 6291456;

 <$M.downsample_sub_to_1k2.downsample>
0x002503        096094BA                 r4 = Null + M[$M.downsample_sub_to_1k2.mute_index];
0x002504        097094B9                 r5 = Null + M[$M.downsample_sub_to_1k2.mute_direction];
0x002505        094064BA                 r2 = Null + M[$M.downsample_sub_to_1k2.residual];
0x002506        E5F00012                 do $M.downsample_sub_to_1k2.copy_sub_to_downsampled_buffer;
0x002507        02002000                 Null = Null + Null, r0 = M[I0,M0];
0x002508        03670000                 r4 = r4 + r5;
0x002509        00600004                 if NEG r4 = Null + Null;
0x00250A        01500007                 r3 = Null + 7;
0x00250B        2005006F                 Null = r3 - r4;
0x00250C        00650004                 if NEG r4 = r3 + Null;
0x00250D        01509282                 r3 = Null + -28030;
0x00250E        0056005F                 r3 = r4 + r3;
0x00250F        D3500000                 r3 = M[r3 + Null];
0x002510        97250000                 r0 = r0 * r3 (frac);
0x002511        2020002F                 r0 = Null - r0;
0x002512        03430000                 r2 = r2 + r1;
0x002513        DD500004                 if POS jump $M.downsample_sub_to_1k2.no_extra_read;
0x002514        03005100                 Null = Null + Null, r3 = M[I0,1];
0x002515        FD00007F 8144FFFF        r2 = r2 AND 0x7fffff;

 <$M.downsample_sub_to_1k2.no_extra_read>
0x002517        030000A1                 Null = Null + Null, M[I4,1] = r0;

 <$M.downsample_sub_to_1k2.copy_sub_to_downsampled_buffer>
0x002518        194064BA                 M[$M.downsample_sub_to_1k2.residual] = r2 + Null;
0x002519        196094BA                 M[$M.downsample_sub_to_1k2.mute_index] = r4 + Null;
0x00251A        01209447                 r0 = Null + -27577;
0x00251B        4430000F                 r1 = Null + I0;
0x00251C        E1F0F184                 call $cbuffer.set_read_address;
0x00251D        51C00000                 L0 = Null + 0;
0x00251E        0120643E                 r0 = Null + 25662;
0x00251F        4430004F                 r1 = Null + I4;
0x002520        E1F0F184                 call $cbuffer.set_write_address;
0x002521        51E00000                 L4 = Null + 0;
0x002522        DDF0F1A7                 jump $pop_rLink_and_rts;

 <$audio_proc.xover.process>
0x002523        F3D00000                 push rLink;
0x002524        D1290006                 r0 = M[r7 + 6];
0x002525        5000002F                 I0 = Null + r0;
0x002526        00A9000F                 r8 = r7 + Null;
0x002527        E1F013F2                 call $audio_proc.dbe.get_buffer_details;
0x002528        5840000F                 I4 = I0 + Null;
0x002529        58EC000F                 L4 = L0 + Null;
0x00252A        D1290020                 r0 = M[r7 + 32];
0x00252B        5050002F                 I5 = Null + r0;
0x00252C        01290068                 r0 = r7 + 104;
0x00252D        F3200000                 push r0;
0x00252E        F3B60000                 pop B1;
0x00252F        D129000F                 r0 = M[r7 + 15];
0x002530        5010002F                 I1 = Null + r0;
0x002531        51D0000D                 L1 = Null + 13;
0x002532        D1590065                 r3 = M[r7 + 101];
0x002533        D1290066                 r0 = M[r7 + 102];
0x002534        00A2000F                 r8 = r0 + Null;
0x002535        D1290067                 r0 = M[r7 + 103];
0x002536        00B2000F                 r9 = r0 + Null;
0x002537        D1C90009                 r10 = M[r7 + 9];
0x002538        51800004                 M0 = Null + 4;
0x002539        51900001                 M1 = Null + 1;
0x00253A        51A00002                 M2 = Null + 2;
0x00253B        51B0FFFA                 M3 = Null + -6;
0x00253C        F3900000                 push r7;
0x00253D        FD000040 01800000        r6 = Null + 4194304;
0x00253F        0190FFE8                 r7 = Null + -24;
0x002540        03006100                 Null = Null + Null, r4 = M[I0,1];
0x002541        03002500                 Null = Null + Null, r0 = M[I1,1];
0x002542        03002500                 Null = Null + Null, r0 = M[I1,1];
0x002543        23110000                 rMAC = rMAC - rMAC;
0x002544        E5F00019                 do $M.audio_proc.xover.process.ap_loop;
0x002545        C80B252F                 rMACB = r9 * r0 (SU), r0 = M[I1,M1];
0x002546        B80AE52F                 rMACB = rMACB - r8 * r0 (SU), M[I1,M1] = r4;
0x002547        92F97500                 rMACB = rMACB ASHIFT r7 (56bit), r5 = M[I1,M1];
0x002548        AC0A266F                 rMACB = rMACB + r8 * r4 (SS), r0 = M[I1,M2];
0x002549        BC0B007F                 rMACB = rMACB - r9 * r5 (SS);
0x00254A        AC08252F                 rMACB = rMACB + r6 * r0 (SS), r0 = M[I1,M1];
0x00254B        AC0B262F                 rMACB = rMACB + r9 * r0 (SS), r0 = M[I1,M2];
0x00254C        BC0A472F                 rMACB = rMACB - r8 * r0 (SS), r2 = M[I1,M3];
0x00254D        91FF0001                 rMACB = rMACB ASHIFT 1 (56bit);
0x00254E        902F360F                 r0 = rMACB ASHIFT Null, r1 = M[I1,M2];
0x00254F        8D3F0018                 r1 = rMACB LSHIFT 24;
0x002550        A815A74F                 rMAC = rMAC + r3 * r2 (SU), M[I1,M3] = r0;
0x002551        9319B700                 rMAC = rMAC ASHIFT r7 (56bit), M[I1,-1] = r1;
0x002552        AF562700                 rMAC = rMAC + r3 * r4 (SS), r0 = M[I1,-1];
0x002553        AD178000                 rMAC = rMAC + r5 * -1 (SS);
0x002554        AF526100                 rMAC = rMAC + r3 * r0 (SS), r4 = M[I0,1];
0x002555        8D710018                 r5 = rMAC LSHIFT 24;
0x002556        9021000F                 r0 = rMAC ASHIFT Null;
0x002557        9111007F                 rMAC = rMAC ASHIFT -1 (56bit);
0x002558        AF8FA700                 rMAC = rMAC + r6 * rMACB (SS), M[I1,-1] = r0;
0x002559        BF8F0095                 rMAC = rMAC - r6 * rMACB (SS), M[I5,1] = rMAC;
0x00255A        BF8F4700                 rMAC = rMAC - r6 * rMACB (SS), r2 = M[I1,-1];
0x00255B        2211F491                 rMAC = rMAC - rMAC, M[I1,M0] = r5, M[I4,M1] = rMAC;
0x00255C        03002500                 Null = Null + Null, r0 = M[I1,1];

 <$M.audio_proc.xover.process.ap_loop>
0x00255D        03002700                 Null = Null + Null, r0 = M[I1,-1];
0x00255E        03002700                 Null = Null + Null, r0 = M[I1,-1];
0x00255F        4420001F                 r0 = Null + I1;
0x002560        F3940000                 pop r7;
0x002561        D529000F                 M[r7 + 15] = r0;
0x002562        F3000000                 push Null;
0x002563        F3B60000                 pop B1;
0x002564        51C00000                 L0 = Null + 0;
0x002565        51D00000                 L1 = Null + 0;
0x002566        51E00000                 L4 = Null + 0;
0x002567        DDF0F162                 jump $pop_rLink_and_rts;

 <$run_usb_state_mc>
0x002568        F3D00000                 push rLink;
0x002569        FD000080 01200000        r0 = Null + -8388608;
0x00256B        E1F0F0FC                 call $cbuffer.calc_amount_data;
0x00256C        095064A2                 r3 = Null + M[$usb_state];
0x00256D        D13501AD                 r1 = M[r3 + 429];
0x00256E        E003000F                 call r1;
0x00256F        195064A2                 M[$usb_state] = r3 + Null;
0x002570        DDF0F159                 jump $pop_rLink_and_rts;

 <$M.usb_state_mc.paused_fn>
0x002571        F3D00000                 push rLink;
0x002572        092094A4                 r0 = Null + M[$debug_usb_pause_count];
0x002573        E422002F                 r0 = r0 + 1;
0x002574        192094A4                 M[$debug_usb_pause_count] = r0 + Null;
0x002575        FD000080 01200000        r0 = Null + -8388608;
0x002577        E1F0EF47                 call $cbuffer.empty_buffer;
0x002578        E420002F                 r0 = Null + 1;
0x002579        192064A4                 M[$usb_reset_pending] = r0 + Null;
0x00257A        E450002F                 r3 = Null + 1;
0x00257B        E420002F                 r0 = Null + 1;
0x00257C        1920948C                 M[$M.jitter_buffering.is_buffering] = r0 + Null;
0x00257D        DDF0F14C                 jump $pop_rLink_and_rts;

 <$M.usb_state_mc.waiting_to_start_fn>
0x00257E        F3D00000                 push rLink;
0x00257F        0002000F                 Null = r0 + Null;
0x002580        DD000013                 if EQ jump $M.usb_state_mc.still_waiting_to_start;
0x002581        090064A4                 Null = Null + M[$usb_reset_pending];
0x002582        DD000007                 if EQ jump $M.usb_state_mc.buffer_reset_done;
0x002583        F3500000                 push r3;
0x002584        FD000080 01200000        r0 = Null + -8388608;
0x002586        E1F0EF38                 call $cbuffer.empty_buffer;
0x002587        F3540000                 pop r3;
0x002588        DDF0000B                 jump $M.usb_state_mc.still_waiting_to_start;

 <$M.usb_state_mc.buffer_reset_done>
0x002589        190094A2                 M[$usb_pause_period_count] = Null + Null;
0x00258A        09209481                 r0 = Null + M[$current_codec_sampling_rate];
0x00258B        093094A3                 r1 = Null + M[$usb_pause_silence_insertion_time];
0x00258C        9472003F                 r5 = r0 * r1 (frac);
0x00258D        016000AD                 r4 = Null + 173;
0x00258E        E1F015EB                 call $cbuffer_insert_silence;
0x00258F        0160941A                 r4 = Null + -27622;
0x002590        E1F015E9                 call $cbuffer_insert_silence;
0x002591        E009000F                 call r7;
0x002592        01500002                 r3 = Null + 2;

 <$M.usb_state_mc.still_waiting_to_start>
0x002593        DDF0F136                 jump $pop_rLink_and_rts;

 <$M.usb_state_mc.running_fn>
0x002594        F3D00000                 push rLink;
0x002595        01700000                 r5 = Null + 0;
0x002596        096094A2                 r4 = Null + M[$usb_pause_period_count];
0x002597        E466002F                 r4 = r4 + 1;
0x002598        0002000F                 Null = r0 + Null;
0x002599        00600001                 if NE r4 = Null + Null;
0x00259A        196094A2                 M[$usb_pause_period_count] = r4 + Null;
0x00259B        290664A3                 Null = r4 - M[$usb_pause_period_thresh];
0x00259C        00570005                 if POS r3 = r5 + Null;
0x00259D        F3500000                 push r3;
0x00259E        E009000F                 call r7;
0x00259F        F3540000                 pop r3;
0x0025A0        DDF0F129                 jump $pop_rLink_and_rts;

 <$audio_proc.vse.filter2_process>
0x0025A1        F3D00000                 push rLink;
0x0025A2        0007000F                 Null = r5 + Null;
0x0025A3        DD100008                 if NE jump $M.audio_proc.vse.filter2_process.LSF_filter_setup;

 <$M.audio_proc.vse.filter2_process.PEAK_filter_setup>
0x0025A4        0129006E                 r0 = r7 + 110;
0x0025A5        F3200000                 push r0;
0x0025A6        F3B60000                 pop B1;
0x0025A7        D1290013                 r0 = M[r7 + 19];
0x0025A8        5010002F                 I1 = Null + r0;
0x0025A9        51D00009                 L1 = Null + 9;
0x0025AA        DDF00007                 jump $M.audio_proc.vse.filter2_process.filter_setup_done;

 <$M.audio_proc.vse.filter2_process.LSF_filter_setup>
0x0025AB        01290078                 r0 = r7 + 120;
0x0025AC        F3200000                 push r0;
0x0025AD        F3B60000                 pop B1;
0x0025AE        D1290014                 r0 = M[r7 + 20];
0x0025AF        5010002F                 I1 = Null + r0;
0x0025B0        51D00009                 L1 = Null + 9;

 <$M.audio_proc.vse.filter2_process.filter_setup_done>
0x0025B1        D1C90008                 r10 = M[r7 + 8];
0x0025B2        51900001                 M1 = Null + 1;
0x0025B3        51A00002                 M2 = Null + 2;
0x0025B4        51B0FFFE                 M3 = Null + -2;
0x0025B5        51800003                 M0 = Null + 3;
0x0025B6        03004D00                 Null = Null + Null, r2 = M[I3,1];
0x0025B7        03005D00                 Null = Null + Null, r3 = M[I3,1];
0x0025B8        03003D00                 Null = Null + Null, r1 = M[I3,1];
0x0025B9        00A3000F                 r8 = r1 + Null;
0x0025BA        03003D00                 Null = Null + Null, r1 = M[I3,1];
0x0025BB        0083000F                 r6 = r1 + Null;
0x0025BC        03003D00                 Null = Null + Null, r1 = M[I3,1];
0x0025BD        00B3000F                 r9 = r1 + Null;
0x0025BE        03006100                 Null = Null + Null, r4 = M[I0,1];
0x0025BF        03002500                 Null = Null + Null, r0 = M[I1,1];
0x0025C0        03002500                 Null = Null + Null, r0 = M[I1,1];
0x0025C1        F3700000                 push r5;
0x0025C2        01700018                 r5 = Null + 24;
0x0025C3        E5F0000D                 do $M.audio_proc.vse.filter2_process.filter2_loop;
0x0025C4        C818252F                 rMAC = r6 * r0 (SU), r0 = M[I1,M1];
0x0025C5        A81BE52F                 rMAC = rMAC + r9 * r0 (SU), M[I1,M1] = r4;
0x0025C6        91110068                 rMAC = rMAC ASHIFT -24 (56bit);
0x0025C7        AC14256F                 rMAC = rMAC + r2 * r4 (SS), r0 = M[I1,M1];
0x0025C8        AC15262F                 rMAC = rMAC + r3 * r0 (SS), r0 = M[I1,M2];
0x0025C9        AC1A252F                 rMAC = rMAC + r8 * r0 (SS), r0 = M[I1,M1];
0x0025CA        AC18272F                 rMAC = rMAC + r6 * r0 (SS), r0 = M[I1,M3];
0x0025CB        AC1B612F                 rMAC = rMAC + r9 * r0 (SS), r4 = M[I0,M1];
0x0025CC        91110001                 rMAC = rMAC ASHIFT 1 (56bit);
0x0025CD        9031000F                 r1 = rMAC ASHIFT Null;
0x0025CE        8C21B47F                 r0 = rMAC LSHIFT r5, M[I1,M0] = r1;
0x0025CF        0200A595                 Null = Null + Null, M[I1,M1] = r0, M[I5,M1] = rMAC;

 <$M.audio_proc.vse.filter2_process.filter2_loop>
0x0025D0        02002700                 Null = Null + Null, r0 = M[I1,M3];
0x0025D1        4420001F                 r0 = Null + I1;
0x0025D2        F3740000                 pop r5;
0x0025D3        DD100003                 if NE jump $M.audio_proc.vse.filter2_process.LSF_filter_setup2;
0x0025D4        D5290013                 M[r7 + 19] = r0;
0x0025D5        DDF00002                 jump $M.audio_proc.vse.filter2_process.filter_done;

 <$M.audio_proc.vse.filter2_process.LSF_filter_setup2>
0x0025D6        D5290014                 M[r7 + 20] = r0;

 <$M.audio_proc.vse.filter2_process.filter_done>
0x0025D7        F3000000                 push Null;
0x0025D8        F3B60000                 pop B1;
0x0025D9        51D00000                 L1 = Null + 0;
0x0025DA        DDF0F0EF                 jump $pop_rLink_and_rts;

 <$audio_proc.dbe.xover.initialize>
0x0025DB        F3D00000                 push rLink;
0x0025DC        012A0068                 r0 = r8 + 104;
0x0025DD        D52A000F                 M[r8 + 15] = r0;
0x0025DE        D12A0004                 r0 = M[r8 + 4];
0x0025DF        D1720006                 r5 = M[r0 + 6];
0x0025E0        D18A0003                 r6 = M[r8 + 3];
0x0025E1        E1F015D2                 call $audio_proc.dbe.float_division;
0x0025E2        9166007C                 r4 = r4 ASHIFT -4;
0x0025E3        0026000F                 r0 = r4 + Null;
0x0025E4        E1F0EF45                 call $math.sin;
0x0025E5        0073000F                 r5 = r1 + Null;
0x0025E6        FD000040 01260000        r0 = r4 + 4194304;
0x0025E8        E1F0EF41                 call $math.sin;
0x0025E9        0083000F                 r6 = r1 + Null;
0x0025EA        E1F015C9                 call $audio_proc.dbe.float_division;
0x0025EB        F3600000                 push r4;
0x0025EC        95662000                 r4 = r4 * 0.25 (frac);
0x0025ED        FD000020 01860000        r6 = r4 + 2097152;
0x0025EF        FD000020 65760000        r5 = 2097152 - r4;
0x0025F1        E1F015C2                 call $audio_proc.dbe.float_division;
0x0025F2        D56A0065                 M[r8 + 101] = r4;
0x0025F3        D12A0065                 r0 = M[r8 + 101];
0x0025F4        97220000                 r0 = r0 * r0 (frac);
0x0025F5        95222000                 r0 = r0 * 0.25 (frac);
0x0025F6        FD00000A 0172AAAB        r5 = r0 + 699051;
0x0025F8        FD00002A 9582AAAB        r6 = r0 * 0.33333337306976318 (frac);
0x0025FA        FD000020 01880000        r6 = r6 + 2097152;
0x0025FC        E1F015B7                 call $audio_proc.dbe.float_division;
0x0025FD        95564000                 r3 = r4 * 0.5 (frac);
0x0025FE        D55A0066                 M[r8 + 102] = r3;
0x0025FF        0095000F                 r7 = r3 + Null;
0x002600        F3640000                 pop r4;
0x002601        CC66006F                 r4 = r4 * r4 (SS);
0x002602        95662000                 r4 = r4 * 0.25 (frac);
0x002603        FD000020 01860000        r6 = r4 + 2097152;
0x002605        FD000020 65760000        r5 = 2097152 - r4;
0x002607        E1F015AC                 call $audio_proc.dbe.float_division;
0x002608        95764000                 r5 = r4 * 0.5 (frac);
0x002609        97960000                 r7 = r7 * r4 (frac);
0x00260A        0069007F                 r4 = r7 + r5;
0x00260B        D56A0067                 M[r8 + 103] = r4;
0x00260C        DDF0F0BD                 jump $pop_rLink_and_rts;

 <$M.music_example_message.AuxVolume.update_volumes>
0x00260D        F3D00000                 push rLink;
0x00260E        5000005F                 I0 = Null + r3;
0x00260F        1950949D                 M[$M.music_example_message.AuxVolume.temp_msg_ptr] = r3 + Null;
0x002610        03006100                 Null = Null + Null, r4 = M[I0,1];
0x002611        090064AC                 Null = Null + M[$DAC_conn_aux];
0x002612        DD000003                 if EQ jump $M.music_example_message.AuxVolume.no_system_vol;
0x002613        8166000F                 r4 = r4 AND 0xf;
0x002614        19606492                 M[$music_example.SystemVolume] = r4 + Null;

 <$M.music_example_message.AuxVolume.no_system_vol>
0x002615        03002100                 Null = Null + Null, r0 = M[I0,1];
0x002616        0002000F                 Null = r0 + Null;
0x002617        00200005                 if POS r0 = Null + Null;
0x002618        19209492                 M[$music_example.Aux.MasterVolume] = r0 + Null;
0x002619        E1F0165B                 call $M.music_example_message.vmdB2vol;
0x00261A        91220002                 r0 = r0 ASHIFT 2;
0x00261B        192057ED                 M[0x57ed] = r0 + Null;
0x00261C        03002100                 Null = Null + Null, r0 = M[I0,1];
0x00261D        0002000F                 Null = r0 + Null;
0x00261E        00200005                 if POS r0 = Null + Null;
0x00261F        19206493                 M[$music_example.Aux.ToneVolume] = r0 + Null;
0x002620        E1F01654                 call $M.music_example_message.vmdB2vol;
0x002621        91520003                 r3 = r0 ASHIFT 3;
0x002622        E1F0110A                 call $multi_chan_set_aux_tone_mix_ratio;
0x002623        03002100                 Null = Null + Null, r0 = M[I0,1];
0x002624        213202D2                 r1 = r0 - 722;
0x002625        20220035                 if POS r0 = r0 - r1;
0x002626        2132FD2E                 r1 = r0 - -722;
0x002627        20220034                 if NEG r0 = r0 - r1;
0x002628        19209493                 M[$music_example.Aux.LeftTrimVolume] = r0 + Null;
0x002629        E1F0164B                 call $M.music_example_message.vmdB2vol;
0x00262A        192057F6                 M[0x57f6] = r0 + Null;
0x00262B        03002100                 Null = Null + Null, r0 = M[I0,1];
0x00262C        213202D2                 r1 = r0 - 722;
0x00262D        20220035                 if POS r0 = r0 - r1;
0x00262E        2132FD2E                 r1 = r0 - -722;
0x00262F        20220034                 if NEG r0 = r0 - r1;
0x002630        19206494                 M[$music_example.Aux.RightTrimVolume] = r0 + Null;
0x002631        E1F01643                 call $M.music_example_message.vmdB2vol;
0x002632        192057FB                 M[0x57fb] = r0 + Null;
0x002633        0900649D                 Null = Null + M[$aux_vol_msg_echo];
0x002634        DD000005                 if EQ jump $M.music_example_message.AuxVolume.done;
0x002635        0970949D                 r5 = Null + M[$M.music_example_message.AuxVolume.temp_msg_ptr];
0x002636        01600005                 r4 = Null + 5;
0x002637        0150715D                 r3 = Null + 29021;
0x002638        E1F0EB21                 call $message.send_long;

 <$M.music_example_message.AuxVolume.done>
0x002639        DDF0F090                 jump $pop_rLink_and_rts;

 <$M.music_example_message.AuxVolume.func>
0x00263A        F3D00000                 push rLink;
0x00263B        E1F0FFD2                 call $M.music_example_message.AuxVolume.update_volumes;

 <$M.music_example_message.AuxVolume.volume_msg_done>
0x00263C        DDF0F08D                 jump $pop_rLink_and_rts;

 <$disable_subwoofer>
0x00263D        F3D00000                 push rLink;
0x00263E        09206489                 r0 = Null + M[$sra_rate_addr];
0x00263F        19209135                 M[0xff9135] = r0 + Null;
0x002640        094064B3                 r2 = Null + M[$sco_timer_id];
0x002641        E1F0EE54                 call $timer.cancel_event;
0x002642        094064BC                 r2 = Null + M[$wall_clock_timer_id];
0x002643        E1F0EE52                 call $timer.cancel_event;
0x002644        094094B3                 r2 = Null + M[$bass_timer_id];
0x002645        E1F0EE50                 call $timer.cancel_event;
0x002646        190093F2                 M[$bdaddr_struc] = Null + Null;
0x002647        190093F3                 M[0xff93f3] = Null + Null;
0x002648        190093F4                 M[0xff93f4] = Null + Null;
0x002649        190093F5                 M[0xff93f5] = Null + Null;
0x00264A        190094AF                 M[$sco_param_tesco] = Null + Null;
0x00264B        190064AD                 M[$sub_link_port] = Null + Null;
0x00264C        1900649C                 M[$M.Sleep.sync_flag_esco] = Null + Null;
0x00264D        190094AD                 M[$M.Subwoofer.playback_time] = Null + Null;
0x00264E        190092F6                 M[0xff92f6] = Null + Null;
0x00264F        1900633C                 M[0x633c] = Null + Null;
0x002650        190092FC                 M[0xff92fc] = Null + Null;
0x002651        19006342                 M[0x6342] = Null + Null;
0x002652        19009302                 M[0xff9302] = Null + Null;
0x002653        19006348                 M[0x6348] = Null + Null;
0x002654        190093AA                 M[$M.main.samples_latency_measure] = Null + Null;
0x002655        19009499                 M[$music_example.OTA_IF_Connections] = Null + Null;
0x002656        E420002F                 r0 = Null + 1;
0x002657        192007F7                 M[$M.system_config.data.spkr_ctrl_coefs] = r0 + Null;
0x002658        1900626F                 M[0x626f] = Null + Null;
0x002659        01905B34                 r7 = Null + 23348;
0x00265A        01A002D0                 r8 = Null + 720;
0x00265B        E1F0E7CB                 call $spkr_ctrl_system.zero_data;
0x00265C        FD0000FF 01906BF9        r7 = Null + -37895;
0x00265E        E1F0E799                 call $spkr_ctrl_system.initialize;
0x00265F        01200168                 r0 = Null + 360;
0x002660        19209490                 M[$music_example.frame_processing_size] = r0 + Null;
0x002661        FD000000 01508019        r3 = Null + 32793;
0x002663        E1F016C7                 call $message.unregister_handler;
0x002664        FD000000 01508015        r3 = Null + 32789;
0x002666        E1F016C4                 call $message.unregister_handler;
0x002667        FD000000 0150801C        r3 = Null + 32796;
0x002669        E1F016C1                 call $message.unregister_handler;

 <$M.subwoofer.done>
0x00266A        DDF0F05F                 jump $pop_rLink_and_rts;

 <$audio_proc.dbe.process_channels>
0x00266B        F3D00000                 push rLink;
0x00266C        01700000                 r5 = Null + 0;

 <$M.audio_proc.dbe.process_channels.dbe_channel_loop_proc>
0x00266D        D109000B                 Null = M[r7 + 11];
0x00266E        DD100006                 if NE jump $M.audio_proc.dbe.process_channels.bass_enhance_proc;
0x00266F        F1000680                 pushm <r5, r7, r8>;
0x002670        0007000F                 Null = r5 + Null;
0x002671        009A0001                 if NE r7 = r8 + Null;
0x002672        E1F0FEB1                 call $audio_proc.xover.process;
0x002673        F1040680                 popm <r5, r7, r8>;

 <$M.audio_proc.dbe.process_channels.bass_enhance_proc>
0x002674        F1000680                 pushm <r5, r7, r8>;
0x002675        0007000F                 Null = r5 + Null;
0x002676        009A0001                 if NE r7 = r8 + Null;
0x002677        E1F0143D                 call $audio_proc.sigdetect.process;
0x002678        F1040680                 popm <r5, r7, r8>;
0x002679        D109000A                 Null = M[r7 + 10];
0x00267A        DD100006                 if NE jump $M.audio_proc.dbe.process_channels.no_update_dbe_gains;
0x00267B        012039B1                 r0 = Null + 14769;
0x00267C        01303C52                 r1 = Null + 15442;
0x00267D        0007000F                 Null = r5 + Null;
0x00267E        00230001                 if NE r0 = r1 + Null;
0x00267F        E002000F                 call r0;

 <$M.audio_proc.dbe.process_channels.no_update_dbe_gains>
0x002680        D509000A                 M[r7 + 10] = Null;
0x002681        F1000680                 pushm <r5, r7, r8>;
0x002682        0007000F                 Null = r5 + Null;
0x002683        00A90000                 if EQ r8 = r7 + Null;
0x002684        E1F0021D                 call $audio_proc.dbe.filters_process;
0x002685        F1040680                 popm <r5, r7, r8>;
0x002686        D109000C                 Null = M[r7 + 12];
0x002687        DD100006                 if NE jump $M.audio_proc.dbe.process_channels.process_next_channel;
0x002688        F1000600                 pushm <r7, r8>;
0x002689        0007000F                 Null = r5 + Null;
0x00268A        009A0001                 if NE r7 = r8 + Null;
0x00268B        E1F0120B                 call $audio_proc.output_mixer.process;
0x00268C        F1040600                 popm <r7, r8>;

 <$M.audio_proc.dbe.process_channels.process_next_channel>
0x00268D        F1000600                 pushm <r7, r8>;
0x00268E        0007000F                 Null = r5 + Null;
0x00268F        009A0001                 if NE r7 = r8 + Null;
0x002690        E1F014A9                 call $audio_proc.dbe.advance_pointers;
0x002691        F1040600                 popm <r7, r8>;
0x002692        51C00000                 L0 = Null + 0;
0x002693        51E00000                 L4 = Null + 0;
0x002694        D1090002                 Null = M[r7 + 2];
0x002695        DD000004                 if EQ jump $M.audio_proc.dbe.process_channels.dbe_channels_proc_done;
0x002696        E477002F                 r5 = r5 + 1;
0x002697        21070002                 Null = r5 - 2;
0x002698        DD10FFD5                 if NE jump $M.audio_proc.dbe.process_channels.dbe_channel_loop_proc;

 <$M.audio_proc.dbe.process_channels.dbe_channels_proc_done>
0x002699        DDF0F030                 jump $pop_rLink_and_rts;

 <$M.audio_proc.dbe.process.set_buffer_left_data_object>
0x00269A        D1290000                 r0 = M[r7 + 0];
0x00269B        D1520002                 r3 = M[r0 + 2];
0x00269C        D5590008                 M[r7 + 8] = r3;
0x00269D        E420002F                 r0 = Null + 1;
0x00269E        D5290005                 M[r7 + 5] = r0;
0x00269F        D1090002                 Null = M[r7 + 2];
0x0026A0        DD000006                 if EQ jump $audio_proc.dbe.stream_process;

 <$M.audio_proc.dbe.process.set_buffer_right_data_object>
0x0026A1        D12A0000                 r0 = M[r8 + 0];
0x0026A2        D1520002                 r3 = M[r0 + 2];
0x0026A3        D55A0008                 M[r8 + 8] = r3;
0x0026A4        E420002F                 r0 = Null + 1;
0x0026A5        D52A0005                 M[r8 + 5] = r0;

 <$audio_proc.dbe.stream_process>
0x0026A6        F3D00000                 push rLink;

 <$M.audio_proc.dbe.process.dbe_proc>
0x0026A7        D1290004                 r0 = M[r7 + 4];
0x0026A8        D1220000                 r0 = M[r0 + 0];
0x0026A9        81420004                 r2 = r0 AND 0x4;
0x0026AA        81320002                 r1 = r0 AND 0x2;
0x0026AB        D539000B                 M[r7 + 11] = r1;
0x0026AC        D549000C                 M[r7 + 12] = r2;
0x0026AD        F3A00000                 push r8;
0x0026AE        00A9000F                 r8 = r7 + Null;
0x0026AF        E1F0126A                 call $audio_proc.dbe.get_buffer_details;
0x0026B0        F3A40000                 pop r8;
0x0026B1        D5590006                 M[r7 + 6] = r3;
0x0026B2        D5690007                 M[r7 + 7] = r4;
0x0026B3        D1090002                 Null = M[r7 + 2];
0x0026B4        DD000004                 if EQ jump $M.audio_proc.dbe.process.dbe_frame_proc;
0x0026B5        E1F01264                 call $audio_proc.dbe.get_buffer_details;
0x0026B6        D55A0006                 M[r8 + 6] = r3;
0x0026B7        D56A0007                 M[r8 + 7] = r4;

 <$M.audio_proc.dbe.process.dbe_frame_proc>
0x0026B8        D1590008                 r3 = M[r7 + 8];
0x0026B9        01600018                 r4 = Null + 24;
0x0026BA        D1290009                 r0 = M[r7 + 9];
0x0026BB        00620001                 if NE r4 = r0 + Null;

 <$M.audio_proc.dbe.process.dbe_frame_proc_loop>
0x0026BC        F1000060                 pushm <r3, r4>;
0x0026BD        65360018                 r1 = 24 - r4;
0x0026BE        D539000A                 M[r7 + 10] = r1;
0x0026BF        2005006F                 Null = r3 - r4;
0x0026C0        0065000D                 if LE r4 = r3 + Null;
0x0026C1        D5690009                 M[r7 + 9] = r4;
0x0026C2        D56A0009                 M[r8 + 9] = r4;
0x0026C3        E1F0FFA8                 call $audio_proc.dbe.process_channels;
0x0026C4        F1040060                 popm <r3, r4>;
0x0026C5        23560000                 r3 = r3 - r4;
0x0026C6        DDD00003                 if LE jump $M.audio_proc.dbe.process.dbe_process_done;
0x0026C7        01600018                 r4 = Null + 24;
0x0026C8        DDF0FFF4                 jump $M.audio_proc.dbe.process.dbe_frame_proc_loop;

 <$M.audio_proc.dbe.process.dbe_process_done>
0x0026C9        2040005F                 r2 = Null - r3;
0x0026CA        D5490009                 M[r7 + 9] = r2;

 <$M.audio_proc.dbe.process.init_cur_block_size_done>
0x0026CB        DDF0EFFE                 jump $pop_rLink_and_rts;

 <$audio_proc.vse.limiter.process>
0x0026CC        F3D00000                 push rLink;
0x0026CD        D1290082                 r0 = M[r7 + 130];
0x0026CE        5010002F                 I1 = Null + r0;
0x0026CF        D12A0082                 r0 = M[r8 + 130];
0x0026D0        5040002F                 I4 = Null + r0;
0x0026D1        D1C90008                 r10 = M[r7 + 8];
0x0026D2        01500000                 r3 = Null + 0;
0x0026D3        E5F00007                 do $M.audio_proc.vse.limiter.process.find_max_loop;
0x0026D4        03002531                 Null = Null + Null, r0 = M[I1,1], r1 = M[I4,1];
0x0026D5        E422004F                 r0 = ABS r0;
0x0026D6        E433004F                 r1 = ABS r1;
0x0026D7        2002003F                 Null = r0 - r1;
0x0026D8        00230004                 if NEG r0 = r1 + Null;
0x0026D9        E452006F                 r3 = MAX r0;

 <$M.audio_proc.vse.limiter.process.find_max_loop>
0x0026DA        0015000F                 rMAC = r3 + Null;
0x0026DB        E1F0EE04                 call $math.log2_taylor;
0x0026DC        01408071                 r2 = Null + -32655;
0x0026DD        2032004F                 r1 = r0 - r2;
0x0026DE        DD400008                 if NEG jump $M.audio_proc.vse.limiter.process.limiter_label1;
0x0026DF        FD00000C CD73CCCD        r5 = r1 * 0.10000002384185791 (SS);
0x0026E1        0074007F                 r5 = r2 + r5;
0x0026E2        2087002F                 r6 = r5 - r0;
0x0026E3        D1590015                 r3 = M[r7 + 21];
0x0026E4        D1690016                 r4 = M[r7 + 22];
0x0026E5        DDF00004                 jump $M.audio_proc.vse.limiter.process.limiter_values_set;

 <$M.audio_proc.vse.limiter.process.limiter_label1>
0x0026E6        01800000                 r6 = Null + 0;
0x0026E7        D1590017                 r3 = M[r7 + 23];
0x0026E8        D1690018                 r4 = M[r7 + 24];

 <$M.audio_proc.vse.limiter.process.limiter_values_set>
0x0026E9        D179001C                 r5 = M[r7 + 28];
0x0026EA        2007008F                 Null = r5 - r6;
0x0026EB        DD400006                 if NEG jump $M.audio_proc.vse.limiter.process.limiter_label2;
0x0026EC        FD00007F 6565FFFF        r4 = 8388607 - r3;
0x0026EE        CC18005F                 rMAC = r6 * r3 (SS);
0x0026EF        AC17006F                 rMAC = rMAC + r5 * r4 (SS);
0x0026F0        DDF00005                 jump $M.audio_proc.vse.limiter.process.limiter_gain_calc_done;

 <$M.audio_proc.vse.limiter.process.limiter_label2>
0x0026F1        FD00007F 6556FFFF        r3 = 8388607 - r4;
0x0026F3        CC18006F                 rMAC = r6 * r4 (SS);
0x0026F4        AC17005F                 rMAC = rMAC + r5 * r3 (SS);

 <$M.audio_proc.vse.limiter.process.limiter_gain_calc_done>
0x0026F5        FD00007F 0120FFFF        r0 = Null + 8388607;
0x0026F7        D519001C                 M[r7 + 28] = rMAC;
0x0026F8        DD000005                 if EQ jump $M.audio_proc.vse.limiter.process.limiter_gain_set;
0x0026F9        0021000F                 r0 = rMAC + Null;
0x0026FA        F3900000                 push r7;
0x0026FB        E1F0EE65                 call $math.pow2_taylor;
0x0026FC        F3940000                 pop r7;

 <$M.audio_proc.vse.limiter.process.limiter_gain_set>
0x0026FD        D529001B                 M[r7 + 27] = r0;
0x0026FE        DDF0EFCB                 jump $pop_rLink_and_rts;

 <$audio_proc.dbe.hp2_process>
0x0026FF        F3D00000                 push rLink;
0x002700        D12A001F                 r0 = M[r8 + 31];
0x002701        5000002F                 I0 = Null + r0;
0x002702        D12A001E                 r0 = M[r8 + 30];
0x002703        5050002F                 I5 = Null + r0;
0x002704        012A003E                 r0 = r8 + 62;
0x002705        F3200000                 push r0;
0x002706        F3B60000                 pop B1;
0x002707        D12A0011                 r0 = M[r8 + 17];
0x002708        5010002F                 I1 = Null + r0;
0x002709        51D00009                 L1 = Null + 9;
0x00270A        D1CA0009                 r10 = M[r8 + 9];
0x00270B        D16A000E                 r4 = M[r8 + 14];
0x00270C        93C60000                 r10 = r10 ASHIFT r4;
0x00270D        51900001                 M1 = Null + 1;
0x00270E        D15A000D                 r3 = M[r8 + 13];
0x00270F        50A0005F                 M2 = Null + r3;
0x002710        51B0FFFE                 M3 = Null + -2;
0x002711        51800003                 M0 = Null + 3;
0x002712        FD0000C0 01900000        r7 = Null + -4194304;
0x002714        D15A003D                 r3 = M[r8 + 61];
0x002715        D18A003B                 r6 = M[r8 + 59];
0x002716        D1BA003C                 r9 = M[r8 + 60];
0x002717        03006100                 Null = Null + Null, r4 = M[I0,1];
0x002718        03002500                 Null = Null + Null, r0 = M[I1,1];
0x002719        03002500                 Null = Null + Null, r0 = M[I1,1];
0x00271A        01400018                 r2 = Null + 24;
0x00271B        01100000                 rMAC = Null + 0;
0x00271C        E5F0000D                 do $M.audio_proc.dbe.hp2_process.hp2_loop;
0x00271D        B818252F                 rMAC = rMAC - r6 * r0 (SU), r0 = M[I1,M1];
0x00271E        B81BE52F                 rMAC = rMAC - r9 * r0 (SU), M[I1,M1] = r4;
0x00271F        91110068                 rMAC = rMAC ASHIFT -24 (56bit);
0x002720        BC19756F                 rMAC = rMAC - r7 * r4 (SS), r5 = M[I1,M1];
0x002721        AF572600                 rMAC = rMAC + r3 * r5 (SS), r0 = M[I1,2];
0x002722        BC19252F                 rMAC = rMAC - r7 * r0 (SS), r0 = M[I1,M1];
0x002723        BC18272F                 rMAC = rMAC - r6 * r0 (SS), r0 = M[I1,M3];
0x002724        BFB26100                 rMAC = rMAC - r9 * r0 (SS), r4 = M[I0,1];
0x002725        91110001                 rMAC = rMAC ASHIFT 1 (56bit);
0x002726        9031000F                 r1 = rMAC ASHIFT Null;
0x002727        8C21B44F                 r0 = rMAC LSHIFT r2, M[I1,M0] = r1;
0x002728        2211A596                 rMAC = rMAC - rMAC, M[I1,M1] = r0, M[I5,M2] = rMAC;

 <$M.audio_proc.dbe.hp2_process.hp2_loop>
0x002729        03004700                 Null = Null + Null, r2 = M[I1,-1];
0x00272A        0300A700                 Null = Null + Null, M[I1,-1] = r0;
0x00272B        4440001F                 r2 = Null + I1;
0x00272C        4420001F                 r0 = Null + I1;
0x00272D        D52A0011                 M[r8 + 17] = r0;
0x00272E        F3000000                 push Null;
0x00272F        F3B60000                 pop B1;
0x002730        51D00000                 L1 = Null + 0;
0x002731        DDF0EF98                 jump $pop_rLink_and_rts;

 <$audio_proc.dbe.hp1hp3_process>
0x002732        F3D00000                 push rLink;
0x002733        D12A001C                 r0 = M[r8 + 28];
0x002734        5040002F                 I4 = Null + r0;
0x002735        51E00000                 L4 = Null + 0;
0x002736        D12A001D                 r0 = M[r8 + 29];
0x002737        5050002F                 I5 = Null + r0;
0x002738        012A0022                 r0 = r8 + 34;
0x002739        F3200000                 push r0;
0x00273A        F3B60000                 pop B1;
0x00273B        D12A0010                 r0 = M[r8 + 16];
0x00273C        5010002F                 I1 = Null + r0;
0x00273D        51D00006                 L1 = Null + 6;
0x00273E        D15A0021                 r3 = M[r8 + 33];
0x00273F        D1CA0009                 r10 = M[r8 + 9];
0x002740        D17A000D                 r5 = M[r8 + 13];
0x002741        D16A000E                 r4 = M[r8 + 14];
0x002742        93C60000                 r10 = r10 ASHIFT r4;
0x002743        51800000                 M0 = Null + 0;
0x002744        51900001                 M1 = Null + 1;
0x002745        50A0007F                 M2 = Null + r5;
0x002746        51B0FFFD                 M3 = Null + -3;
0x002747        0180FFE8                 r6 = Null + -24;
0x002748        FD000080 01900000        r7 = Null + -8388608;
0x00274A        02006500                 Null = Null + Null, r4 = M[I1,M1];
0x00274B        02006200                 Null = Null + Null, r4 = M[I0,M2];
0x00274C        CD661000                 r4 = r4 * 0.125 (SS);
0x00274D        02002500                 Null = Null + Null, r0 = M[I1,M1];
0x00274E        E5F0000C                 do $M.audio_proc.dbe.hp1hp3_process.hp1_loop;
0x00274F        C815E52F                 rMAC = r3 * r0 (SU), M[I1,M1] = r4;
0x002750        93187600                 rMAC = rMAC ASHIFT r6 (56bit), r5 = M[I1,2];
0x002751        AC19247F                 rMAC = rMAC + r7 * r5 (SS), r0 = M[I1,M0];
0x002752        BC19006F                 rMAC = rMAC - r7 * r4 (SS);
0x002753        AF524700                 rMAC = rMAC + r3 * r0 (SS), r2 = M[I1,-1];
0x002754        9031000F                 r1 = rMAC ASHIFT Null;
0x002755        8D210018                 r0 = rMAC LSHIFT 24;
0x002756        AC67B79F                 r4 = r4 + r5 * r7 (SS), M[I1,M3] = r1;
0x002757        02000091                 Null = Null + Null, M[I4,M1] = rMAC;
0x002758        020062E5                 Null = Null + Null, r4 = M[I0,M2], M[I5,M1] = r4;
0x002759        CD661000                 r4 = r4 * 0.125 (SS);

 <$M.audio_proc.dbe.hp1hp3_process.hp1_loop>
0x00275A        03003700                 Null = Null + Null, r1 = M[I1,-1];
0x00275B        0300A700                 Null = Null + Null, M[I1,-1] = r0;
0x00275C        4420001F                 r0 = Null + I1;
0x00275D        D52A0010                 M[r8 + 16] = r0;
0x00275E        F3000000                 push Null;
0x00275F        F3B60000                 pop B1;
0x002760        51C00000                 L0 = Null + 0;
0x002761        51D00000                 L1 = Null + 0;
0x002762        DDF0EF67                 jump $pop_rLink_and_rts;

 <$calc_time_to_play>
0x002763        F3D00000                 push rLink;
0x002764        E1F0EF1B                 call $block_interrupts;
0x002765        01800000                 r6 = Null + 0;

 <$M.calc_time_to_play.proc_loop>
0x002766        D029000F                 r0 = M[r7 + Null];
0x002767        DD00000A                 if EQ jump $M.calc_time_to_play.calculate_num_samples_in_port;
0x002768        E1F0EEFF                 call $cbuffer.calc_amount_data;
0x002769        D1390001                 r1 = M[r7 + 1];
0x00276A        D3300000                 r1 = M[r1 + Null];
0x00276B        CC12003F                 rMAC = r0 * r1 (SS);
0x00276C        91E10005                 rMAC = rMAC ASHIFT 5 (MI);
0x00276D        8D310000                 r1 = rMAC LSHIFT 0;
0x00276E        03830000                 r6 = r6 + r1;
0x00276F        01990002                 r7 = r7 + 2;
0x002770        DDF0FFF6                 jump $M.calc_time_to_play.proc_loop;

 <$M.calc_time_to_play.calculate_num_samples_in_port>
0x002771        D12A0000                 r0 = M[r8 + 0];
0x002772        E1F0EEE5                 call $cbuffer.calc_amount_space;
0x002773        E422002F                 r0 = r0 + 1;
0x002774        F3500000                 push r3;
0x002775        D15A0000                 r3 = M[r8 + 0];
0x002776        E1F0EEA9                 call $cbuffer.mmu_octets_to_samples;
0x002777        F3540000                 pop r3;
0x002778        2024002F                 r0 = r2 - r0;
0x002779        D13A0001                 r1 = M[r8 + 1];
0x00277A        D3300000                 r1 = M[r1 + Null];
0x00277B        CC12003F                 rMAC = r0 * r1 (SS);
0x00277C        91E10005                 rMAC = rMAC ASHIFT 5 (MI);
0x00277D        8D310000                 r1 = rMAC LSHIFT 0;
0x00277E        F3300000                 push r1;
0x00277F        D12A0002                 r0 = M[r8 + 2];
0x002780        D13A0003                 r1 = M[r8 + 3];
0x002781        D3300000                 r1 = M[r1 + Null];
0x002782        CC12003F                 rMAC = r0 * r1 (SS);
0x002783        91E10005                 rMAC = rMAC ASHIFT 5 (MI);
0x002784        8D310000                 r1 = rMAC LSHIFT 0;
0x002785        03830000                 r6 = r6 + r1;
0x002786        F3340000                 pop r1;
0x002787        0048003F                 r2 = r6 + r1;
0x002788        093064BB                 r1 = Null + M[$wall_clock_adjustment];
0x002789        0933FE71                 r1 = r1 + M[0xfffe71];
0x00278A        0083004F                 r6 = r1 + r2;
0x00278B        D58A0004                 M[r8 + 4] = r6;

 <$M.calc_time_to_play.done>
0x00278C        E1F0EEE3                 call $interrupt.unblock;
0x00278D        DDF0EF3C                 jump $pop_rLink_and_rts;

 <$sbcdec.sample_reconstruction>
0x00278E        01700080                 r5 = Null + 128;
0x00278F        D1AB0030                 r8 = M[r9 + 48];
0x002790        21AA0002                 r8 = r8 - 2;
0x002791        D13B0014                 r1 = M[r9 + 20];
0x002792        5000003F                 I0 = Null + r1;
0x002793        D13B001B                 r1 = M[r9 + 27];
0x002794        5010003F                 I1 = Null + r1;
0x002795        D13B0018                 r1 = M[r9 + 24];
0x002796        5020003F                 I2 = Null + r1;
0x002797        D19B001F                 r7 = M[r9 + 31];
0x002798        D13B0021                 r1 = M[r9 + 33];
0x002799        9B390000                 r1 = r1 * r7 (int);
0x00279A        5080003F                 M0 = Null + r1;
0x00279B        70A0003F                 M2 = Null - r1;
0x00279C        50B3003F                 M3 = r1 + r1;
0x00279D        D14B001D                 r2 = M[r9 + 29];
0x00279E        9843004F                 r2 = r1 * r2 (int);
0x00279F        7090004F                 M1 = Null - r2;
0x0027A0        59990001                 M1 = M1 + 1;

 <$M.sbcdec.sample_reconstruction.chan_loop>
0x0027A1        D18B0021                 r6 = M[r9 + 33];

 <$M.sbcdec.sample_reconstruction.subband_loop>
0x0027A2        D1CB001D                 r10 = M[r9 + 29];
0x0027A3        03003500                 Null = Null + Null, r1 = M[I1,1];
0x0027A4        03034900                 Null = Null + r1, r2 = M[I2,1];
0x0027A5        DD00000F                 if EQ jump $M.sbcdec.sample_reconstruction.zero_sample;
0x0027A6        E444002F                 r2 = r2 + 1;
0x0027A7        D05A003F                 r3 = M[r8 + r1];
0x0027A8        2034003F                 r1 = r2 - r1;
0x0027A9        9067004F                 r4 = r5 ASHIFT r2;
0x0027AA        02002000                 Null = Null + Null, r0 = M[I0,M0];
0x0027AB        E5F00007                 do $M.sbcdec.sample_reconstruction.block_loop;
0x0027AC        8D220008                 r0 = r0 LSHIFT 8;
0x0027AD        01220080                 r0 = r0 + 128;
0x0027AE        C012005F                 rMAC = r0 * r3 (UU);
0x0027AF        8C21003F                 r0 = rMAC LSHIFT r1;
0x0027B0        2012226F                 rMAC = r0 - r4, r0 = M[I0,M2];
0x0027B1        02009300                 Null = Null + Null, M[I0,M3] = rMAC;

 <$M.sbcdec.sample_reconstruction.block_loop>
0x0027B2        02002200                 Null = Null + Null, r0 = M[I0,M2];
0x0027B3        DDF00003                 jump $M.sbcdec.sample_reconstruction.done_block_loop;

 <$M.sbcdec.sample_reconstruction.zero_sample>
0x0027B4        E5F00002                 do $M.sbcdec.sample_reconstruction.done_block_loop;
0x0027B5        0200B000                 Null = Null + Null, M[I0,M0] = r1;

 <$M.sbcdec.sample_reconstruction.done_block_loop>
0x0027B6        02003100                 Null = Null + Null, r1 = M[I0,M1];
0x0027B7        E488003F                 r6 = r6 - 1;
0x0027B8        DD10FFEA                 if NE jump $M.sbcdec.sample_reconstruction.subband_loop;
0x0027B9        E499003F                 r7 = r7 - 1;
0x0027BA        DD10FFE7                 if NE jump $M.sbcdec.sample_reconstruction.chan_loop;
0x0027BB        DC0D000F                 rts;

 <$jitter_buffering>
0x0027BC        F3D00000                 push rLink;
0x0027BD        0900948C                 Null = Null + M[$M.jitter_buffering.is_buffering];
0x0027BE        DD000025                 if EQ jump $M.jitter_buffering.done;
0x0027BF        0920006F                 r0 = Null + M[$app_config.io];
0x0027C0        21020005                 Null = r0 - 5;
0x0027C1        DD100021                 if NE jump $M.jitter_buffering.clear_buffering_flag;
0x0027C2        09209481                 r0 = Null + M[$current_codec_sampling_rate];
0x0027C3        FD000000 2102BB80        Null = r0 - 48000;
0x0027C5        DD100003                 if NE jump $M.jitter_buffering.check_fs_44100;
0x0027C6        01600000                 r4 = Null + 0;
0x0027C7        DDF00015                 jump $M.jitter_buffering.buffering_state;

 <$M.jitter_buffering.check_fs_44100>
0x0027C8        FD000000 2102AC44        Null = r0 - 44100;
0x0027CA        DD100003                 if NE jump $M.jitter_buffering.check_fs_32000;
0x0027CB        01600084                 r4 = Null + 132;
0x0027CC        DDF00010                 jump $M.jitter_buffering.buffering_state;

 <$M.jitter_buffering.check_fs_32000>
0x0027CD        21027D00                 Null = r0 - 32000;
0x0027CE        DD100003                 if NE jump $M.jitter_buffering.check_fs_22050;
0x0027CF        01600000                 r4 = Null + 0;
0x0027D0        DDF0000C                 jump $M.jitter_buffering.buffering_state;

 <$M.jitter_buffering.check_fs_22050>
0x0027D1        21025622                 Null = r0 - 22050;
0x0027D2        DD100003                 if NE jump $M.jitter_buffering.check_fs_16000;
0x0027D3        01600084                 r4 = Null + 132;
0x0027D4        DDF00008                 jump $M.jitter_buffering.buffering_state;

 <$M.jitter_buffering.check_fs_16000>
0x0027D5        21023E80                 Null = r0 - 16000;
0x0027D6        DD100003                 if NE jump $M.jitter_buffering.check_fs_8000;
0x0027D7        01600000                 r4 = Null + 0;
0x0027D8        DDF00004                 jump $M.jitter_buffering.buffering_state;

 <$M.jitter_buffering.check_fs_8000>
0x0027D9        21021F40                 Null = r0 - 8000;
0x0027DA        DD100008                 if NE jump $M.jitter_buffering.clear_buffering_flag;
0x0027DB        01600000                 r4 = Null + 0;

 <$M.jitter_buffering.buffering_state>
0x0027DC        09509490                 r3 = Null + M[$music_example.frame_processing_size];
0x0027DD        03560000                 r3 = r3 + r4;
0x0027DE        012000AD                 r0 = Null + 173;
0x0027DF        E1F0EE88                 call $cbuffer.calc_amount_data;
0x0027E0        2002005F                 Null = r0 - r3;
0x0027E1        DD400002                 if NEG jump $M.jitter_buffering.done;

 <$M.jitter_buffering.clear_buffering_flag>
0x0027E2        1900948C                 M[$M.jitter_buffering.is_buffering] = Null + Null;

 <$M.jitter_buffering.done>
0x0027E3        DDF0EEE6                 jump $pop_rLink_and_rts;

 <$sco_schedule_to_air>
0x0027E4        F3D00000                 push rLink;
0x0027E5        093064AE                 r1 = Null + M[$wall_clock_msw];
0x0027E6        094094AE                 r2 = Null + M[$wall_clock_lsw];
0x0027E7        8D330010                 r1 = r1 LSHIFT 16;
0x0027E8        8144FFFF                 r2 = r2 AND 0xffff;
0x0027E9        03430000                 r2 = r2 + r1;
0x0027EA        093064AE                 r1 = Null + M[$wall_clock_msw];
0x0027EB        8D330078                 r1 = r1 LSHIFT -8;
0x0027EC        095064B0                 r3 = Null + M[$sco_param_clock_msw];
0x0027ED        096094B0                 r4 = Null + M[$sco_param_clock_lsw];

 <$M.sco_schedule_to_air.sco_schedule_next_instant>
0x0027EE        2086004F                 r6 = r4 - r2;
0x0027EF        2475003F                 r5 = r3 - r1 - Borrow;
0x0027F0        99780271                 r5 = r6 * 625 (int);
0x0027F1        9177007F                 r5 = r5 ASHIFT -1;
0x0027F2        092064AF                 r0 = Null + M[$wall_clock_time];
0x0027F3        0042007F                 r2 = r0 + r5;
0x0027F4        294464B2                 r2 = r2 - M[$sco_param_to_air_time];
0x0027F5        0054000F                 r3 = r2 + Null;
0x0027F6        294494BD                 r2 = r2 - M[$subwoofer.sco_offset];
0x0027F7        2904FE71                 Null = r2 - M[0xfffe71];
0x0027F8        DD500007                 if POS jump $M.sco_schedule_to_air.continue;
0x0027F9        093094AF                 r1 = Null + M[$sco_param_tesco];
0x0027FA        99330271                 r1 = r1 * 625 (int);

 <$M.sco_schedule_to_air.advance>
0x0027FB        03430000                 r2 = r2 + r1;
0x0027FC        03530000                 r3 = r3 + r1;
0x0027FD        2904FE71                 Null = r2 - M[0xfffe71];
0x0027FE        DD40FFFD                 if NEG jump $M.sco_schedule_to_air.advance;

 <$M.sco_schedule_to_air.continue>
0x0027FF        195094BB                 M[$esco_write_deadline] = r3 + Null;
0x002800        F3400000                 push r2;
0x002801        094064B3                 r2 = Null + M[$sco_timer_id];
0x002802        E1F0EC93                 call $timer.cancel_event;
0x002803        F3440000                 pop r2;
0x002804        013093EE                 r1 = Null + -27666;
0x002805        01503C5C                 r3 = Null + 15452;
0x002806        E1F0EA30                 call $timer.schedule_event_at;
0x002807        195064B3                 M[$sco_timer_id] = r3 + Null;
0x002808        190094B5                 M[$M.Subwoofer.sco_schedule_to_air_flag] = Null + Null;
0x002809        DDF0EEC0                 jump $pop_rLink_and_rts;

 <$sbcdec.init_static_decoder>
0x00280A        F3D00000                 push rLink;
0x00280B        01B007B2                 r9 = Null + 1970;
0x00280C        D5B70005                 M[r5 + 5] = r9;
0x00280D        E1F014B5                 call $sbc.init_static_common;
0x00280E        FD0000FF 012034A9        r0 = Null + -52055;
0x002810        D52B002E                 M[r9 + 46] = r0;
0x002811        FD0000FF 01203650        r0 = Null + -51632;
0x002813        D52B002F                 M[r9 + 47] = r0;
0x002814        FD0000FF 01203717        r0 = Null + -51433;
0x002816        D52B0030                 M[r9 + 48] = r0;
0x002817        FD0000FF 01203706        r0 = Null + -51450;
0x002819        D52B0031                 M[r9 + 49] = r0;
0x00281A        FD0000FF 01203000        r0 = Null + -53248;
0x00281C        D52B0032                 M[r9 + 50] = r0;
0x00281D        FD0000FF 01203100        r0 = Null + -52992;
0x00281F        D52B0033                 M[r9 + 51] = r0;
0x002820        D50B003A                 M[r9 + 58] = Null;
0x002821        01200010                 r0 = Null + 16;
0x002822        D52B003B                 M[r9 + 59] = r0;
0x002823        01200760                 r0 = Null + 1888;
0x002824        D52B003E                 M[r9 + 62] = r0;
0x002825        E1F0146C                 call $sbcdec.reset_decoder;
0x002826        E1F01471                 call $sbcdec.init_tables;
0x002827        01309416                 r1 = Null + -27626;
0x002828        01407010                 r2 = Null + 28688;
0x002829        0150282C                 r3 = Null + 10284;
0x00282A        E1F014CF                 call $message.register_handler;
0x00282B        DDF0EE9E                 jump $pop_rLink_and_rts;

 <$sbcdec.convert_mono_handler>
0x00282C        D53B0034                 M[r9 + 52] = r1;
0x00282D        DC0D000F                 rts;

 <$audio_proc.vse.ITF_process>
0x00282E        F3D00000                 push rLink;
0x00282F        D1290082                 r0 = M[r7 + 130];
0x002830        5000002F                 I0 = Null + r0;
0x002831        5810000F                 I1 = I0 + Null;
0x002832        D12A0082                 r0 = M[r8 + 130];
0x002833        5050002F                 I5 = Null + r0;
0x002834        5040002F                 I4 = Null + r0;
0x002835        D129000E                 r0 = M[r7 + 14];
0x002836        5030002F                 I3 = Null + r0;
0x002837        03004D00                 Null = Null + Null, r2 = M[I3,1];
0x002838        0084000F                 r6 = r2 + Null;
0x002839        03005F00                 Null = Null + Null, r3 = M[I3,-1];
0x00283A        00B5000F                 r9 = r3 + Null;
0x00283B        D1C90008                 r10 = M[r7 + 8];
0x00283C        51900001                 M1 = Null + 1;
0x00283D        D129006C                 r0 = M[r7 + 108];
0x00283E        D139006D                 r1 = M[r7 + 109];
0x00283F        D14A006C                 r2 = M[r8 + 108];
0x002840        D15A006D                 r3 = M[r8 + 109];
0x002841        02006175                 Null = Null + Null, r4 = M[I0,M1], r5 = M[I5,M1];
0x002842        E5F0000F                 do $M.audio_proc.vse.ITF_process.hitf_loop;
0x002843        23730000                 r5 = r5 - r1;
0x002844        226500F1                 r4 = r4 - r3, M[I4,M1] = r5;
0x002845        C81BE52F                 rMAC = r9 * r0 (SU), M[I1,M1] = r4;
0x002846        91110068                 rMAC = rMAC ASHIFT -24 (56bit);
0x002847        AC16008F                 rMAC = rMAC + r4 * r6 (SS);
0x002848        AC1B613F                 rMAC = rMAC + r9 * r1 (SS), r4 = M[I0,M1];
0x002849        9031000F                 r1 = rMAC ASHIFT Null;
0x00284A        8D210018                 r0 = rMAC LSHIFT 24;
0x00284B        C81B004F                 rMAC = r9 * r2 (SU);
0x00284C        91110068                 rMAC = rMAC ASHIFT -24 (56bit);
0x00284D        AC17008F                 rMAC = rMAC + r5 * r6 (SS);
0x00284E        AEB50075                 rMAC = rMAC + r9 * r3 (SS), r5 = M[I5,M1];
0x00284F        9051000F                 r3 = rMAC ASHIFT Null;
0x002850        8D410018                 r2 = rMAC LSHIFT 24;

 <$M.audio_proc.vse.ITF_process.hitf_loop>
0x002851        D529006C                 M[r7 + 108] = r0;
0x002852        D539006D                 M[r7 + 109] = r1;
0x002853        D54A006C                 M[r8 + 108] = r2;
0x002854        D55A006D                 M[r8 + 109] = r3;
0x002855        DDF0EE74                 jump $pop_rLink_and_rts;

 <$cbops.signal_detect_op.timer_handler>
0x002856        F3D00000                 push rLink;
0x002857        D13A0000                 r1 = M[r8 + 0];
0x002858        DD00001C                 if EQ jump $M.signal_detect_op.timer_handler.detectionDisabled;
0x002859        D12A0002                 r0 = M[r8 + 2];
0x00285A        2002003F                 Null = r0 - r1;
0x00285B        DD50000E                 if POS jump $M.signal_detect_op.timer_handler.levelOverThreshold;
0x00285C        D14A0003                 r2 = M[r8 + 3];
0x00285D        E444002F                 r2 = r2 + 1;
0x00285E        D54A0003                 M[r8 + 3] = r2;
0x00285F        D13A0001                 r1 = M[r8 + 1];
0x002860        2004003F                 Null = r2 - r1;
0x002861        DD400010                 if NEG jump $M.signal_detect_op.timer_handler.exit;
0x002862        D10A0004                 Null = M[r8 + 4];
0x002863        DD00000C                 if EQ jump $M.signal_detect_op.timer_handler.resetTimer;
0x002864        01500000                 r3 = Null + 0;
0x002865        D55A0004                 M[r8 + 4] = r3;
0x002866        D14A0005                 r2 = M[r8 + 5];
0x002867        E1F0EC67                 call $message.send_short;
0x002868        DDF00009                 jump $M.signal_detect_op.timer_handler.exit;

 <$M.signal_detect_op.timer_handler.levelOverThreshold>
0x002869        D10A0004                 Null = M[r8 + 4];
0x00286A        DD100005                 if NE jump $M.signal_detect_op.timer_handler.resetTimer;
0x00286B        E450002F                 r3 = Null + 1;
0x00286C        D55A0004                 M[r8 + 4] = r3;
0x00286D        D14A0005                 r2 = M[r8 + 5];
0x00286E        E1F0EC60                 call $message.send_short;

 <$M.signal_detect_op.timer_handler.resetTimer>
0x00286F        01400000                 r2 = Null + 0;
0x002870        D54A0003                 M[r8 + 3] = r2;

 <$M.signal_detect_op.timer_handler.exit>
0x002871        01200000                 r0 = Null + 0;
0x002872        D52A0002                 M[r8 + 2] = r0;
0x002873        DDF0EE56                 jump $pop_rLink_and_rts;

 <$M.signal_detect_op.timer_handler.detectionDisabled>
0x002874        01200000                 r0 = Null + 0;
0x002875        D52A0003                 M[r8 + 3] = r0;
0x002876        D52A0002                 M[r8 + 2] = r0;
0x002877        E420002F                 r0 = Null + 1;
0x002878        D52A0004                 M[r8 + 4] = r0;
0x002879        DDF0EE50                 jump $pop_rLink_and_rts;

 <$audio_proc.dbe.src_process_downsample4>
0x00287A        F3D00000                 push rLink;
0x00287B        D12A001E                 r0 = M[r8 + 30];
0x00287C        5000002F                 I0 = Null + r0;
0x00287D        012A005B                 r0 = r8 + 91;
0x00287E        F3200000                 push r0;
0x00287F        F3B60000                 pop B1;
0x002880        D12A0012                 r0 = M[r8 + 18];
0x002881        5010002F                 I1 = Null + r0;
0x002882        51D00009                 L1 = Null + 9;
0x002883        D1CA0009                 r10 = M[r8 + 9];
0x002884        FD000010 01500000        r3 = Null + 1048576;
0x002886        FD000030 01600000        r4 = Null + 3145728;
0x002888        FD000050 01700000        r5 = Null + 5242880;
0x00288A        FD000070 01900000        r7 = Null + 7340032;
0x00288C        5190FFFE                 M1 = Null + -2;
0x00288D        03002500                 Null = Null + Null, r0 = M[I1,1];
0x00288E        03002500                 Null = Null + Null, r0 = M[I1,1];
0x00288F        E5F0000B                 do $M.audio_proc.dbe.src_process_downsample4.src_loop;
0x002890        CF253500                 rMAC = r0 * r3 (SS), r1 = M[I1,1];
0x002891        AF362500                 rMAC = rMAC + r1 * r4 (SS), r0 = M[I1,1];
0x002892        AF273500                 rMAC = rMAC + r0 * r5 (SS), r1 = M[I1,1];
0x002893        AF392500                 rMAC = rMAC + r1 * r7 (SS), r0 = M[I1,1];
0x002894        AF293500                 rMAC = rMAC + r0 * r7 (SS), r1 = M[I1,1];
0x002895        AF372500                 rMAC = rMAC + r1 * r5 (SS), r0 = M[I1,1];
0x002896        AF263500                 rMAC = rMAC + r0 * r4 (SS), r1 = M[I1,1];
0x002897        AF352100                 rMAC = rMAC + r1 * r3 (SS), r0 = M[I0,1];
0x002898        91110003                 rMAC = rMAC ASHIFT 3 (56bit);
0x002899        0300A591                 Null = Null + Null, M[I1,1] = r0, M[I4,1] = rMAC;

 <$M.audio_proc.dbe.src_process_downsample4.src_loop>
0x00289A        02003500                 Null = Null + Null, r1 = M[I1,M1];
0x00289B        4430001F                 r1 = Null + I1;
0x00289C        D53A0012                 M[r8 + 18] = r1;
0x00289D        F3000000                 push Null;
0x00289E        F3B60000                 pop B1;
0x00289F        51D00000                 L1 = Null + 0;
0x0028A0        DDF0EE29                 jump $pop_rLink_and_rts;

 <$audio_proc.dbe.filters_process>
0x0028A1        F3D00000                 push rLink;
0x0028A2        D12A0006                 r0 = M[r8 + 6];
0x0028A3        5000002F                 I0 = Null + r0;
0x0028A4        D12A0007                 r0 = M[r8 + 7];
0x0028A5        5040002F                 I4 = Null + r0;
0x0028A6        E1F01073                 call $audio_proc.dbe.get_buffer_details;
0x0028A7        F3410000                 push I4;
0x0028A8        F3E10000                 push L4;
0x0028A9        E1F0FE89                 call $audio_proc.dbe.hp1hp3_process;
0x0028AA        01900000                 r7 = Null + 0;
0x0028AB        E1F00F57                 call $audio_proc.dbe.ntp_process;
0x0028AC        E490002F                 r7 = Null + 1;
0x0028AD        E1F00F55                 call $audio_proc.dbe.ntp_process;
0x0028AE        E1F0112F                 call $audio_proc.dbe.nhp_process;
0x0028AF        E1F01156                 call $audio_proc.dbe.mixer1_process;
0x0028B0        E1F011F2                 call $audio_proc.dbe.tp1_process;
0x0028B1        E1F010D4                 call $audio_proc.dbe.tp2_process;
0x0028B2        E1F0FE4D                 call $audio_proc.dbe.hp2_process;
0x0028B3        F3E50000                 pop L4;
0x0028B4        F3450000                 pop I4;
0x0028B5        01303821                 r1 = Null + 14369;
0x0028B6        0140287A                 r2 = Null + 10362;
0x0028B7        D12A000D                 r0 = M[r8 + 13];
0x0028B8        21020004                 Null = r0 - 4;
0x0028B9        00340000                 if EQ r1 = r2 + Null;
0x0028BA        E003000F                 call r1;
0x0028BB        DDF0EE0E                 jump $pop_rLink_and_rts;

 <$M.audio_proc.vse.process.set_buffer_left_data_object>
0x0028BC        D1290000                 r0 = M[r7 + 0];
0x0028BD        D1520002                 r3 = M[r0 + 2];
0x0028BE        D5590007                 M[r7 + 7] = r3;
0x0028BF        E420002F                 r0 = Null + 1;
0x0028C0        D5290004                 M[r7 + 4] = r0;

 <$M.audio_proc.vse.process.set_buffer_right_data_object>
0x0028C1        D12A0000                 r0 = M[r8 + 0];
0x0028C2        D1520002                 r3 = M[r0 + 2];
0x0028C3        D55A0007                 M[r8 + 7] = r3;
0x0028C4        E420002F                 r0 = Null + 1;
0x0028C5        D52A0004                 M[r8 + 4] = r0;

 <$audio_proc.vse.stream_process>
0x0028C6        F3D00000                 push rLink;
0x0028C7        F3A00000                 push r8;
0x0028C8        00A9000F                 r8 = r7 + Null;
0x0028C9        E1F01347                 call $audio_proc.vse.get_input_buffer_details;
0x0028CA        D5590005                 M[r7 + 5] = r3;
0x0028CB        E1F01351                 call $audio_proc.vse.get_output_buffer_details;
0x0028CC        D5590006                 M[r7 + 6] = r3;
0x0028CD        F3A40000                 pop r8;
0x0028CE        E1F01342                 call $audio_proc.vse.get_input_buffer_details;
0x0028CF        D55A0005                 M[r8 + 5] = r3;
0x0028D0        E1F0134C                 call $audio_proc.vse.get_output_buffer_details;
0x0028D1        D55A0006                 M[r8 + 6] = r3;
0x0028D2        D1590007                 r3 = M[r7 + 7];
0x0028D3        0160003C                 r4 = Null + 60;

 <$M.audio_proc.vse.process.vse_frame_proc_loop>
0x0028D4        2005006F                 Null = r3 - r4;
0x0028D5        0065000D                 if LE r4 = r3 + Null;
0x0028D6        F1000460                 pushm <r3, r4, r8>;
0x0028D7        E1F0F8CF                 call $audio_proc.vse.process_channels;
0x0028D8        F1040460                 popm <r3, r4, r8>;
0x0028D9        23560000                 r3 = r3 - r4;
0x0028DA        DD000002                 if EQ jump $M.audio_proc.vse.process.vse_process_done;
0x0028DB        DDF0FFF9                 jump $M.audio_proc.vse.process.vse_frame_proc_loop;

 <$M.audio_proc.vse.process.vse_process_done>
0x0028DC        DDF0EDED                 jump $pop_rLink_and_rts;

 <$audio_proc.vse.virtual_angle_index>
0x0028DD        F3D00000                 push rLink;

 <$M.audio_proc.vse.virtual_angle_index.virtual_angle_60_check>
0x0028DE        2102003C                 Null = r0 - 60;
0x0028DF        DD100003                 if NE jump $M.audio_proc.vse.virtual_angle_index.virtual_angle_120_check;
0x0028E0        01400000                 r2 = Null + 0;
0x0028E1        DDF00006                 jump $M.audio_proc.vse.virtual_angle_index.virtual_angle_set;

 <$M.audio_proc.vse.virtual_angle_index.virtual_angle_120_check>
0x0028E2        21020078                 Null = r0 - 120;
0x0028E3        DD100003                 if NE jump $M.audio_proc.vse.virtual_angle_index.virtual_angle_180_check;
0x0028E4        E440002F                 r2 = Null + 1;
0x0028E5        DDF00002                 jump $M.audio_proc.vse.virtual_angle_index.virtual_angle_set;

 <$M.audio_proc.vse.virtual_angle_index.virtual_angle_180_check>
0x0028E6        01400002                 r2 = Null + 2;

 <$M.audio_proc.vse.virtual_angle_index.virtual_angle_set>
0x0028E7        DDF0EDE2                 jump $pop_rLink_and_rts;
------------------------------------------------------------------------
Region: flash.code
------------------------------------------------------------------------

 <$user_eq.userEqInitialize>
0x003000        F3D00000                 push rLink;
0x003001        09404DDC                 r2 = Null + M[$M.system_config.data.CurParams];
0x003002        81440007                 r2 = r2 AND 0x7;
0x003003        D1390000                 r1 = M[r7 + 0];
0x003004        E443005F                 r2 = MIN r1;
0x003005        D1290004                 r0 = M[r7 + 4];
0x003006        D1390005                 r1 = M[r7 + 5];
0x003007        03A40000                 r8 = r8 + r2;
0x003008        D3A00000                 r8 = M[r8 + Null];
0x003009        E45A002F                 r3 = r8 + 1;
0x00300A        DD10002A                 if NE jump $user_eq.calcBankCoefs.jump_entry;
0x00300B        E444003F                 r2 = r2 - 1;
0x00300C        D1590000                 r3 = M[r7 + 0];
0x00300D        09306481                 r1 = Null + M[$current_dac_sampling_rate];
0x00300E        FD000000 2103BB80        Null = r1 - 48000;
0x003010        00440050                 if EQ r2 = r2 + r3;
0x003011        D1590001                 r3 = M[r7 + 1];
0x003012        99550006                 r3 = r3 * 6 (int);
0x003013        01550003                 r3 = r3 + 3;
0x003014        9B540000                 r3 = r3 * r2 (int);
0x003015        03250000                 r0 = r0 + r3;
0x003016        F1000204                 pushm <r0, r7>;
0x003017        D1990002                 r7 = M[r7 + 2];
0x003018        D5290003                 M[r7 + 3] = r0;
0x003019        E1F00D2A                 call $audio_proc.hq_peq.initialize;
0x00301A        F1040204                 popm <r0, r7>;
0x00301B        D1990003                 r7 = M[r7 + 3];
0x00301C        DD000003                 if EQ jump $user_eq.userEqInitialize.no2ndChannelEq;
0x00301D        D5290003                 M[r7 + 3] = r0;
0x00301E        E1F00D25                 call $audio_proc.hq_peq.initialize;

 <$user_eq.userEqInitialize.no2ndChannelEq>
0x00301F        DDF0E6AA                 jump $pop_rLink_and_rts;

 <$user_eq.eqInitialize>
0x003020        F3D00000                 push rLink;
0x003021        D1290004                 r0 = M[r7 + 4];
0x003022        D1390005                 r1 = M[r7 + 5];
0x003023        D3A00000                 r8 = M[r8 + Null];
0x003024        DD100010                 if NE jump $user_eq.calcBankCoefs.jump_entry;
0x003025        09406481                 r2 = Null + M[$current_dac_sampling_rate];
0x003026        FD000000 2104BB80        Null = r2 - 48000;
0x003028        00230000                 if EQ r0 = r1 + Null;
0x003029        F1000204                 pushm <r0, r7>;
0x00302A        D1990002                 r7 = M[r7 + 2];
0x00302B        D5290003                 M[r7 + 3] = r0;
0x00302C        E1F00D17                 call $audio_proc.hq_peq.initialize;
0x00302D        F1040204                 popm <r0, r7>;
0x00302E        D1990003                 r7 = M[r7 + 3];
0x00302F        DD000003                 if EQ jump $user_eq.eqInitialize.no2ndChannelEq;
0x003030        D5290003                 M[r7 + 3] = r0;
0x003031        E1F00D12                 call $audio_proc.hq_peq.initialize;

 <$user_eq.eqInitialize.no2ndChannelEq>
0x003032        DDF0E697                 jump $pop_rLink_and_rts;

 <$user_eq.calcBankCoefs.call_entry>
0x003033        F3D00000                 push rLink;

 <$user_eq.calcBankCoefs.jump_entry>
0x003034        D1490002                 r2 = M[r7 + 2];
0x003035        D1440003                 r2 = M[r2 + 3];
0x003036        2004002F                 Null = r2 - r0;
0x003037        00230000                 if EQ r0 = r1 + Null;
0x003038        F1000204                 pushm <r0, r7>;
0x003039        500000AF                 I0 = Null + r8;
0x00303A        5010002F                 I1 = Null + r0;
0x00303B        51C00000                 L0 = Null + 0;
0x00303C        51D00000                 L1 = Null + 0;
0x00303D        000A000F                 Null = r8 + Null;
0x00303E        DD100009                 if NE jump $user_eq.calcBankCoefs.NotNullBank;
0x00303F        01200000                 r0 = Null + 0;
0x003040        0300A500                 Null = Null + Null, M[I1,1] = r0;
0x003041        E420002F                 r0 = Null + 1;
0x003042        0300A500                 Null = Null + Null, M[I1,1] = r0;
0x003043        FD000040 01200000        r0 = Null + 4194304;
0x003045        0300A500                 Null = Null + Null, M[I1,1] = r0;
0x003046        DDF00018                 jump $user_eq.calcBankCoefs.switchToNewCoefs;

 <$user_eq.calcBankCoefs.NotNullBank>
0x003047        03002100                 Null = Null + Null, r0 = M[I0,1];
0x003048        0300A500                 Null = Null + Null, M[I1,1] = r0;
0x003049        F3200000                 push r0;
0x00304A        E1F000AE                 call $user_eq.calcPreGain.call_entry;
0x00304B        4420001F                 r0 = Null + I1;
0x00304C        D1390001                 r1 = M[r7 + 1];
0x00304D        99330005                 r1 = r1 * 5 (int);
0x00304E        03230000                 r0 = r0 + r1;
0x00304F        5020002F                 I2 = Null + r0;

 <$user_eq.calcBandLoop>
0x003050        F3240000                 pop r0;
0x003051        E422003F                 r0 = r0 - 1;
0x003052        DD40000C                 if NEG jump $user_eq.calcBankCoefs.switchToNewCoefs;
0x003053        F3200000                 push r0;
0x003054        F1010007                 pushm <I0, I1, I2>;
0x003055        E1F00072                 call $user_eq.coefCalcBiquadBand.call_entry;
0x003056        F104001C                 popm <r0, r1, r2>;
0x003057        01220004                 r0 = r0 + 4;
0x003058        5000002F                 I0 = Null + r0;
0x003059        01330005                 r1 = r1 + 5;
0x00305A        5010003F                 I1 = Null + r1;
0x00305B        E444002F                 r2 = r2 + 1;
0x00305C        5020004F                 I2 = Null + r2;
0x00305D        DDF0FFF3                 jump $user_eq.calcBandLoop;

 <$user_eq.calcBankCoefs.switchToNewCoefs>
0x00305E        F1040204                 popm <r0, r7>;
0x00305F        F1000204                 pushm <r0, r7>;
0x003060        D1990002                 r7 = M[r7 + 2];
0x003061        D5290003                 M[r7 + 3] = r0;
0x003062        E1F00CE1                 call $audio_proc.hq_peq.initialize;
0x003063        F1040204                 popm <r0, r7>;
0x003064        D1990003                 r7 = M[r7 + 3];
0x003065        DD000003                 if EQ jump $user_eq.calcBankCoefs.no2ndChannelEq;
0x003066        D5290003                 M[r7 + 3] = r0;
0x003067        E1F00CDC                 call $audio_proc.hq_peq.initialize;

 <$user_eq.calcBankCoefs.no2ndChannelEq>
0x003068        DDF0E661                 jump $pop_rLink_and_rts;

 <$user_eq.calcBandCoefs>
0x003069        F3D00000                 push rLink;
0x00306A        0062000F                 r4 = r0 + Null;
0x00306B        8122FFF0                 r0 = r0 AND 0xfff0;
0x00306C        E1F00027                 call $user_eq.calcParamAddrOffset;
0x00306D        00A2005F                 r8 = r0 + r3;
0x00306E        D1890002                 r6 = M[r7 + 2];
0x00306F        D1880003                 r6 = M[r6 + 3];
0x003070        2008003F                 Null = r6 - r1;
0x003071        DD000004                 if EQ jump $user_eq.calcBandCoefsB;
0x003072        0054000F                 r3 = r2 + Null;
0x003073        0043000F                 r2 = r1 + Null;
0x003074        DDF00002                 jump $user_eq.calcBandCoefsAorB;

 <$user_eq.calcBandCoefsB>
0x003075        0053000F                 r3 = r1 + Null;

 <$user_eq.calcBandCoefsAorB>
0x003076        5000005F                 I0 = Null + r3;
0x003077        5010004F                 I1 = Null + r2;
0x003078        D1C90001                 r10 = M[r7 + 1];
0x003079        99CC0006                 r10 = r10 * 6 (int);
0x00307A        01CC0003                 r10 = r10 + 3;
0x00307B        E5F00003                 do $user_eq.copyCurrentCoefsLoop;
0x00307C        03002100                 Null = Null + Null, r0 = M[I0,1];
0x00307D        0300A500                 Null = Null + Null, M[I1,1] = r0;

 <$user_eq.copyCurrentCoefsLoop>
0x00307E        500000AF                 I0 = Null + r8;
0x00307F        0026000F                 r0 = r4 + Null;
0x003080        E1F0002B                 call $user_eq.calcCoefAddrOffset;
0x003081        00A2004F                 r8 = r0 + r2;
0x003082        501000AF                 I1 = Null + r8;
0x003083        00A3004F                 r8 = r1 + r2;
0x003084        502000AF                 I2 = Null + r8;
0x003085        F1000210                 pushm <r2, r7>;
0x003086        0026000F                 r0 = r4 + Null;
0x003087        E1F00034                 call $user_eq.coefCalc;
0x003088        F1040210                 popm <r2, r7>;
0x003089        F1000210                 pushm <r2, r7>;
0x00308A        D1990002                 r7 = M[r7 + 2];
0x00308B        D5490003                 M[r7 + 3] = r2;
0x00308C        E1F00CB7                 call $audio_proc.hq_peq.initialize;
0x00308D        F1040210                 popm <r2, r7>;
0x00308E        D1990003                 r7 = M[r7 + 3];
0x00308F        DD000003                 if EQ jump $user_eq.calcBandCoefs.no2ndChannelEq;
0x003090        D5490003                 M[r7 + 3] = r2;
0x003091        E1F00CB2                 call $audio_proc.hq_peq.initialize;

 <$user_eq.calcBandCoefs.no2ndChannelEq>
0x003092        DDF0E637                 jump $pop_rLink_and_rts;

 <$user_eq.calcParamAddrOffset>
0x003093        F1000038                 pushm <r1, r2, r3>;
0x003094        81320F00                 r1 = r0 AND 0xf00;
0x003095        91330078                 r1 = r1 ASHIFT -8;
0x003096        814200F0                 r2 = r0 AND 0xf0;
0x003097        9144007C                 r2 = r2 ASHIFT -4;
0x003098        8152000F                 r3 = r0 AND 0xf;
0x003099        0025000F                 r0 = r3 + Null;
0x00309A        21030000                 Null = r1 - 0;
0x00309B        DD00000E                 if EQ jump $user_eq.completedParamAddrCalculation;
0x00309C        E433003F                 r1 = r1 - 1;
0x00309D        D1290001                 r0 = M[r7 + 1];
0x00309E        99220004                 r0 = r0 * 4 (int);
0x00309F        01220002                 r0 = r0 + 2;
0x0030A0        9B320000                 r1 = r1 * r0 (int);
0x0030A1        0023005F                 r0 = r1 + r3;
0x0030A2        E422002F                 r0 = r0 + 1;
0x0030A3        21040000                 Null = r2 - 0;
0x0030A4        DD000005                 if EQ jump $user_eq.completedParamAddrCalculation;
0x0030A5        E444003F                 r2 = r2 - 1;
0x0030A6        99440004                 r2 = r2 * 4 (int);
0x0030A7        03240000                 r0 = r0 + r2;
0x0030A8        01220002                 r0 = r0 + 2;

 <$user_eq.completedParamAddrCalculation>
0x0030A9        F1040038                 popm <r1, r2, r3>;
0x0030AA        DC0D000F                 rts;

 <$user_eq.calcCoefAddrOffset>
0x0030AB        F1000030                 pushm <r2, r3>;
0x0030AC        814200F0                 r2 = r0 AND 0xf0;
0x0030AD        9144007C                 r2 = r2 ASHIFT -4;
0x0030AE        8152000F                 r3 = r0 AND 0xf;
0x0030AF        0025000F                 r0 = r3 + Null;
0x0030B0        21040000                 Null = r2 - 0;
0x0030B1        DD000008                 if EQ jump $user_eq.completedCoefAddrCalculation;
0x0030B2        E444003F                 r2 = r2 - 1;
0x0030B3        D1290001                 r0 = M[r7 + 1];
0x0030B4        99220005                 r0 = r0 * 5 (int);
0x0030B5        01220003                 r0 = r0 + 3;
0x0030B6        0034002F                 r1 = r2 + r0;
0x0030B7        99240005                 r0 = r2 * 5 (int);
0x0030B8        01220003                 r0 = r0 + 3;

 <$user_eq.completedCoefAddrCalculation>
0x0030B9        F1040030                 popm <r2, r3>;
0x0030BA        DC0D000F                 rts;

 <$user_eq.coefCalc>
0x0030BB        F3D00000                 push rLink;
0x0030BC        814200F0                 r2 = r0 AND 0xf0;
0x0030BD        9144007C                 r2 = r2 ASHIFT -4;
0x0030BE        DD10000A                 if NE jump $user_eq.coefCalcBiquadBand.jump_entry;
0x0030BF        8122000F                 r0 = r0 AND 0xf;
0x0030C0        21020000                 Null = r0 - 0;
0x0030C1        DD000033                 if EQ jump $user_eq.calcNumBands.jump_entry;
0x0030C2        03004100                 Null = Null + Null, r2 = M[I0,1];
0x0030C3        E402003F                 Null = r0 - 1;
0x0030C4        DD000035                 if EQ jump $user_eq.calcPreGain.jump_entry;
0x0030C5        F3D40000                 pop rLink;
0x0030C6        DC0D000F                 rts;

 <$user_eq.coefCalcBiquadBand.call_entry>
0x0030C7        F3D00000                 push rLink;

 <$user_eq.coefCalcBiquadBand.jump_entry>
0x0030C8        03002100                 Null = Null + Null, r0 = M[I0,1];
0x0030C9        21020000                 Null = r0 - 0;
0x0030CA        DD000044                 if EQ jump $user_eq.calcBypass.jump_entry;
0x0030CB        01901750                 r7 = Null + 5968;
0x0030CC        E402003F                 Null = r0 - 1;
0x0030CD        DD000044                 if EQ jump $user_eq.calcXP1.jump_entry;
0x0030CE        01901785                 r7 = Null + 6021;
0x0030CF        21020002                 Null = r0 - 2;
0x0030D0        DD000041                 if EQ jump $user_eq.calcXP1.jump_entry;
0x0030D1        019017B9                 r7 = Null + 6073;
0x0030D2        21020003                 Null = r0 - 3;
0x0030D3        DD00003E                 if EQ jump $user_eq.calcXP1.jump_entry;
0x0030D4        019018B8                 r7 = Null + 6328;
0x0030D5        21020007                 Null = r0 - 7;
0x0030D6        DD00005B                 if EQ jump $user_eq.calcXP2.jump_entry;
0x0030D7        01901909                 r7 = Null + 6409;
0x0030D8        21020008                 Null = r0 - 8;
0x0030D9        DD000058                 if EQ jump $user_eq.calcXP2.jump_entry;
0x0030DA        01901959                 r7 = Null + 6489;
0x0030DB        21020009                 Null = r0 - 9;
0x0030DC        DD000055                 if EQ jump $user_eq.calcXP2.jump_entry;
0x0030DD        01901859                 r7 = Null + 6233;
0x0030DE        21020004                 Null = r0 - 4;
0x0030DF        DD00007B                 if EQ jump $user_eq.calcShelf1.jump_entry;
0x0030E0        01901877                 r7 = Null + 6263;
0x0030E1        21020005                 Null = r0 - 5;
0x0030E2        DD000078                 if EQ jump $user_eq.calcShelf1.jump_entry;
0x0030E3        01901897                 r7 = Null + 6295;
0x0030E4        21020006                 Null = r0 - 6;
0x0030E5        DD000075                 if EQ jump $user_eq.calcShelf1.jump_entry;
0x0030E6        01901A40                 r7 = Null + 6720;
0x0030E7        2102000A                 Null = r0 - 10;
0x0030E8        DD0000A0                 if EQ jump $user_eq.calcShelf2.jump_entry;
0x0030E9        01901A61                 r7 = Null + 6753;
0x0030EA        2102000B                 Null = r0 - 11;
0x0030EB        DD00009D                 if EQ jump $user_eq.calcShelf2.jump_entry;
0x0030EC        01901A84                 r7 = Null + 6788;
0x0030ED        2102000C                 Null = r0 - 12;
0x0030EE        DD00009A                 if EQ jump $user_eq.calcShelf2.jump_entry;
0x0030EF        2102000D                 Null = r0 - 13;
0x0030F0        DD0000CE                 if EQ jump $user_eq.calcPEQ.jump_entry;

 <$user_eq.coefCalcInvalid>
0x0030F1        F3D40000                 pop rLink;
0x0030F2        DC0D000F                 rts;

 <$user_eq.calcNumBands.call_entry>
0x0030F3        F3D00000                 push rLink;

 <$user_eq.calcNumBands.jump_entry>
0x0030F4        03002100                 Null = Null + Null, r0 = M[I0,1];
0x0030F5        0300A500                 Null = Null + Null, M[I1,1] = r0;
0x0030F6        F3D40000                 pop rLink;
0x0030F7        DC0D000F                 rts;

 <$user_eq.calcPreGain.call_entry>
0x0030F8        F3D00000                 push rLink;

 <$user_eq.calcPreGain.jump_entry>
0x0030F9        0120003C                 r0 = Null + 60;
0x0030FA        E1F0ECC4                 call $kal_float_lib.int_to_float;
0x0030FB        0042000F                 r2 = r0 + Null;
0x0030FC        0053000F                 r3 = r1 + Null;
0x0030FD        03002100                 Null = Null + Null, r0 = M[I0,1];
0x0030FE        8D220008                 r0 = r0 LSHIFT 8;
0x0030FF        91220078                 r0 = r0 ASHIFT -8;
0x003100        0130F790                 r1 = Null + -2160;
0x003101        E423006F                 r0 = MAX r1;
0x003102        013002D0                 r1 = Null + 720;
0x003103        E423005F                 r0 = MIN r1;
0x003104        E1F0ECBA                 call $kal_float_lib.int_to_float;
0x003105        E1F0ED10                 call $kal_float_lib.div;
0x003106        E1F0E5E8                 call $kal_filter_coef_lib.__db2lin;
0x003107        812200FF                 r0 = r0 AND 0xff;
0x003108        2122007F                 r0 = r0 - 127;
0x003109        8D33007F                 r1 = r1 LSHIFT -1;
0x00310A        0300A500                 Null = Null + Null, M[I1,1] = r0;
0x00310B        0300B500                 Null = Null + Null, M[I1,1] = r1;
0x00310C        F3D40000                 pop rLink;
0x00310D        DC0D000F                 rts;

 <$user_eq.calcBypass.jump_entry>
0x00310E        F1030006                 SP = SP + 6;
0x00310F        E1F0E634                 call $kal_filter_coef_lib.calc_bypass;
0x003110        DDF000E7                 jump $user_eq.pop_biquad_coefs_and_rts;

 <$user_eq.calcXP1.jump_entry>
0x003111        F1030006                 SP = SP + 6;
0x003112        01200003                 r0 = Null + 3;
0x003113        E1F0ECAB                 call $kal_float_lib.int_to_float;
0x003114        0042000F                 r2 = r0 + Null;
0x003115        0053000F                 r3 = r1 + Null;
0x003116        03002100                 Null = Null + Null, r0 = M[I0,1];
0x003117        FD000000 0170BB80        r5 = Null + 48000;
0x003119        09606481                 r4 = Null + M[$current_dac_sampling_rate];
0x00311A        00670000                 if EQ r4 = r5 + Null;
0x00311B        FD00003A 01700CC8        r5 = Null + 3804360;
0x00311D        CC66007F                 r4 = r4 * r5 (SS);
0x00311E        99660003                 r4 = r4 * 3 (int);
0x00311F        2002006F                 Null = r0 - r4;
0x003120        DDC000D5                 if GT jump $user_eq.substituteBypassFilter.jump_entry;
0x003121        E430002F                 r1 = Null + 1;
0x003122        E423006F                 r0 = MAX r1;
0x003123        FD000000 0130EA60        r1 = Null + 60000;
0x003125        E423005F                 r0 = MIN r1;
0x003126        E1F0EC98                 call $kal_float_lib.int_to_float;
0x003127        E1F0ECEE                 call $kal_float_lib.div;
0x003128        F100000C                 pushm <r0, r1>;
0x003129        FD000000 0130BB80        r1 = Null + 48000;
0x00312B        09206481                 r0 = Null + M[$current_dac_sampling_rate];
0x00312C        00230000                 if EQ r0 = r1 + Null;
0x00312D        E1F0EC91                 call $kal_float_lib.int_to_float;
0x00312E        F100000C                 pushm <r0, r1>;
0x00312F        E009000F                 call r7;
0x003130        DDF000C7                 jump $user_eq.pop_biquad_coefs_and_rts;

 <$user_eq.calcXP2.jump_entry>
0x003131        F1030006                 SP = SP + 6;
0x003132        01200003                 r0 = Null + 3;
0x003133        E1F0EC8B                 call $kal_float_lib.int_to_float;
0x003134        0042000F                 r2 = r0 + Null;
0x003135        0053000F                 r3 = r1 + Null;
0x003136        03002100                 Null = Null + Null, r0 = M[I0,1];
0x003137        FD000000 0170BB80        r5 = Null + 48000;
0x003139        09606481                 r4 = Null + M[$current_dac_sampling_rate];
0x00313A        00670000                 if EQ r4 = r5 + Null;
0x00313B        FD00003A 01700CC8        r5 = Null + 3804360;
0x00313D        CC66007F                 r4 = r4 * r5 (SS);
0x00313E        99660003                 r4 = r4 * 3 (int);
0x00313F        2002006F                 Null = r0 - r4;
0x003140        DDC000B5                 if GT jump $user_eq.substituteBypassFilter.jump_entry;
0x003141        01300078                 r1 = Null + 120;
0x003142        E423006F                 r0 = MAX r1;
0x003143        FD000000 0130EA60        r1 = Null + 60000;
0x003145        E423005F                 r0 = MIN r1;
0x003146        E1F0EC78                 call $kal_float_lib.int_to_float;
0x003147        E1F0ECCE                 call $kal_float_lib.div;
0x003148        F100000C                 pushm <r0, r1>;
0x003149        03002100                 Null = Null + Null, r0 = M[I0,1];
0x00314A        03002100                 Null = Null + Null, r0 = M[I0,1];
0x00314B        01300400                 r1 = Null + 1024;
0x00314C        E423006F                 r0 = MAX r1;
0x00314D        01302000                 r1 = Null + 8192;
0x00314E        E423005F                 r0 = MIN r1;
0x00314F        0130000C                 r1 = Null + 12;
0x003150        E1F0EC53                 call $kal_float_lib.q_to_float;
0x003151        F100000C                 pushm <r0, r1>;
0x003152        FD000000 0130BB80        r1 = Null + 48000;
0x003154        09206481                 r0 = Null + M[$current_dac_sampling_rate];
0x003155        00230000                 if EQ r0 = r1 + Null;
0x003156        E1F0EC68                 call $kal_float_lib.int_to_float;
0x003157        F100000C                 pushm <r0, r1>;
0x003158        E009000F                 call r7;
0x003159        DDF0009E                 jump $user_eq.pop_biquad_coefs_and_rts;

 <$user_eq.calcShelf1.jump_entry>
0x00315A        F1030006                 SP = SP + 6;
0x00315B        01200003                 r0 = Null + 3;
0x00315C        E1F0EC62                 call $kal_float_lib.int_to_float;
0x00315D        0042000F                 r2 = r0 + Null;
0x00315E        0053000F                 r3 = r1 + Null;
0x00315F        03002100                 Null = Null + Null, r0 = M[I0,1];
0x003160        FD000000 0170BB80        r5 = Null + 48000;
0x003162        09606481                 r4 = Null + M[$current_dac_sampling_rate];
0x003163        00670000                 if EQ r4 = r5 + Null;
0x003164        FD00003A 01700CC8        r5 = Null + 3804360;
0x003166        CC66007F                 r4 = r4 * r5 (SS);
0x003167        99660003                 r4 = r4 * 3 (int);
0x003168        2002006F                 Null = r0 - r4;
0x003169        DDC0008C                 if GT jump $user_eq.substituteBypassFilter.jump_entry;
0x00316A        0130003C                 r1 = Null + 60;
0x00316B        E423006F                 r0 = MAX r1;
0x00316C        FD000000 0130EA60        r1 = Null + 60000;
0x00316E        E423005F                 r0 = MIN r1;
0x00316F        E1F0EC4F                 call $kal_float_lib.int_to_float;
0x003170        E1F0ECA5                 call $kal_float_lib.div;
0x003171        F100000C                 pushm <r0, r1>;
0x003172        0120003C                 r0 = Null + 60;
0x003173        E1F0EC4B                 call $kal_float_lib.int_to_float;
0x003174        0042000F                 r2 = r0 + Null;
0x003175        0053000F                 r3 = r1 + Null;
0x003176        03002100                 Null = Null + Null, r0 = M[I0,1];
0x003177        8D220008                 r0 = r0 LSHIFT 8;
0x003178        91220078                 r0 = r0 ASHIFT -8;
0x003179        0130FD30                 r1 = Null + -720;
0x00317A        E423006F                 r0 = MAX r1;
0x00317B        013002D0                 r1 = Null + 720;
0x00317C        E423005F                 r0 = MIN r1;
0x00317D        E1F0EC41                 call $kal_float_lib.int_to_float;
0x00317E        E1F0EC97                 call $kal_float_lib.div;
0x00317F        F100000C                 pushm <r0, r1>;
0x003180        FD000000 0130BB80        r1 = Null + 48000;
0x003182        09206481                 r0 = Null + M[$current_dac_sampling_rate];
0x003183        00230000                 if EQ r0 = r1 + Null;
0x003184        E1F0EC3A                 call $kal_float_lib.int_to_float;
0x003185        F100000C                 pushm <r0, r1>;
0x003186        E009000F                 call r7;
0x003187        DDF00070                 jump $user_eq.pop_biquad_coefs_and_rts;

 <$user_eq.calcShelf2.jump_entry>
0x003188        F1030006                 SP = SP + 6;
0x003189        01200003                 r0 = Null + 3;
0x00318A        E1F0EC34                 call $kal_float_lib.int_to_float;
0x00318B        0042000F                 r2 = r0 + Null;
0x00318C        0053000F                 r3 = r1 + Null;
0x00318D        03002100                 Null = Null + Null, r0 = M[I0,1];
0x00318E        FD000000 0170BB80        r5 = Null + 48000;
0x003190        09606481                 r4 = Null + M[$current_dac_sampling_rate];
0x003191        00670000                 if EQ r4 = r5 + Null;
0x003192        FD00003A 01700CC8        r5 = Null + 3804360;
0x003194        CC66007F                 r4 = r4 * r5 (SS);
0x003195        99660003                 r4 = r4 * 3 (int);
0x003196        2002006F                 Null = r0 - r4;
0x003197        DDC0005E                 if GT jump $user_eq.substituteBypassFilter.jump_entry;
0x003198        01300078                 r1 = Null + 120;
0x003199        E423006F                 r0 = MAX r1;
0x00319A        FD000000 0130EA60        r1 = Null + 60000;
0x00319C        E423005F                 r0 = MIN r1;
0x00319D        E1F0EC21                 call $kal_float_lib.int_to_float;
0x00319E        E1F0EC77                 call $kal_float_lib.div;
0x00319F        F100000C                 pushm <r0, r1>;
0x0031A0        0120003C                 r0 = Null + 60;
0x0031A1        E1F0EC1D                 call $kal_float_lib.int_to_float;
0x0031A2        0042000F                 r2 = r0 + Null;
0x0031A3        0053000F                 r3 = r1 + Null;
0x0031A4        03002100                 Null = Null + Null, r0 = M[I0,1];
0x0031A5        8D220008                 r0 = r0 LSHIFT 8;
0x0031A6        91220078                 r0 = r0 ASHIFT -8;
0x0031A7        0130FD30                 r1 = Null + -720;
0x0031A8        E423006F                 r0 = MAX r1;
0x0031A9        013002D0                 r1 = Null + 720;
0x0031AA        E423005F                 r0 = MIN r1;
0x0031AB        E1F0EC13                 call $kal_float_lib.int_to_float;
0x0031AC        E1F0EC69                 call $kal_float_lib.div;
0x0031AD        F100000C                 pushm <r0, r1>;
0x0031AE        03002100                 Null = Null + Null, r0 = M[I0,1];
0x0031AF        01300400                 r1 = Null + 1024;
0x0031B0        E423006F                 r0 = MAX r1;
0x0031B1        01302000                 r1 = Null + 8192;
0x0031B2        E423005F                 r0 = MIN r1;
0x0031B3        0130000C                 r1 = Null + 12;
0x0031B4        E1F0EBEF                 call $kal_float_lib.q_to_float;
0x0031B5        F100000C                 pushm <r0, r1>;
0x0031B6        FD000000 0130BB80        r1 = Null + 48000;
0x0031B8        09206481                 r0 = Null + M[$current_dac_sampling_rate];
0x0031B9        00230000                 if EQ r0 = r1 + Null;
0x0031BA        E1F0EC04                 call $kal_float_lib.int_to_float;
0x0031BB        F100000C                 pushm <r0, r1>;
0x0031BC        E009000F                 call r7;
0x0031BD        DDF0003A                 jump $user_eq.pop_biquad_coefs_and_rts;

 <$user_eq.calcPEQ.jump_entry>
0x0031BE        F1030006                 SP = SP + 6;
0x0031BF        01200003                 r0 = Null + 3;
0x0031C0        E1F0EBFE                 call $kal_float_lib.int_to_float;
0x0031C1        0042000F                 r2 = r0 + Null;
0x0031C2        0053000F                 r3 = r1 + Null;
0x0031C3        03002100                 Null = Null + Null, r0 = M[I0,1];
0x0031C4        FD000000 0170BB80        r5 = Null + 48000;
0x0031C6        09606481                 r4 = Null + M[$current_dac_sampling_rate];
0x0031C7        00670000                 if EQ r4 = r5 + Null;
0x0031C8        FD00003A 01700CC8        r5 = Null + 3804360;
0x0031CA        CC66007F                 r4 = r4 * r5 (SS);
0x0031CB        99660003                 r4 = r4 * 3 (int);
0x0031CC        2002006F                 Null = r0 - r4;
0x0031CD        DDC00028                 if GT jump $user_eq.substituteBypassFilter.jump_entry;
0x0031CE        0130003C                 r1 = Null + 60;
0x0031CF        E423006F                 r0 = MAX r1;
0x0031D0        FD000000 0130EA60        r1 = Null + 60000;
0x0031D2        E423005F                 r0 = MIN r1;
0x0031D3        E1F0EBEB                 call $kal_float_lib.int_to_float;
0x0031D4        E1F0EC41                 call $kal_float_lib.div;
0x0031D5        F100000C                 pushm <r0, r1>;
0x0031D6        0120003C                 r0 = Null + 60;
0x0031D7        E1F0EBE7                 call $kal_float_lib.int_to_float;
0x0031D8        0042000F                 r2 = r0 + Null;
0x0031D9        0053000F                 r3 = r1 + Null;
0x0031DA        03002100                 Null = Null + Null, r0 = M[I0,1];
0x0031DB        8D220008                 r0 = r0 LSHIFT 8;
0x0031DC        91220078                 r0 = r0 ASHIFT -8;
0x0031DD        0130F790                 r1 = Null + -2160;
0x0031DE        E423006F                 r0 = MAX r1;
0x0031DF        013002D0                 r1 = Null + 720;
0x0031E0        E423005F                 r0 = MIN r1;
0x0031E1        E1F0EBDD                 call $kal_float_lib.int_to_float;
0x0031E2        E1F0EC33                 call $kal_float_lib.div;
0x0031E3        F100000C                 pushm <r0, r1>;
0x0031E4        03002100                 Null = Null + Null, r0 = M[I0,1];
0x0031E5        01300400                 r1 = Null + 1024;
0x0031E6        E423006F                 r0 = MAX r1;
0x0031E7        FD000000 01308000        r1 = Null + 32768;
0x0031E9        E423005F                 r0 = MIN r1;
0x0031EA        0130000C                 r1 = Null + 12;
0x0031EB        E1F0EBB8                 call $kal_float_lib.q_to_float;
0x0031EC        F100000C                 pushm <r0, r1>;
0x0031ED        FD000000 0130BB80        r1 = Null + 48000;
0x0031EF        09206481                 r0 = Null + M[$current_dac_sampling_rate];
0x0031F0        00230000                 if EQ r0 = r1 + Null;
0x0031F1        E1F0EBCD                 call $kal_float_lib.int_to_float;
0x0031F2        F100000C                 pushm <r0, r1>;
0x0031F3        E1F0E8B5                 call $kal_filter_coef_lib.calc_peq;
0x0031F4        DDF00003                 jump $user_eq.pop_biquad_coefs_and_rts;

 <$user_eq.substituteBypassFilter.jump_entry>
0x0031F5        E1F0E54E                 call $kal_filter_coef_lib.calc_bypass;
0x0031F6        DDF00001                 jump $user_eq.pop_biquad_coefs_and_rts;

 <$user_eq.pop_biquad_coefs_and_rts>
0x0031F7        F3240000                 pop r0;
0x0031F8        0300A500                 Null = Null + Null, M[I1,1] = r0;
0x0031F9        F3240000                 pop r0;
0x0031FA        0300A500                 Null = Null + Null, M[I1,1] = r0;
0x0031FB        F3240000                 pop r0;
0x0031FC        0300A500                 Null = Null + Null, M[I1,1] = r0;
0x0031FD        F3240000                 pop r0;
0x0031FE        0300A500                 Null = Null + Null, M[I1,1] = r0;
0x0031FF        F3240000                 pop r0;
0x003200        0300A500                 Null = Null + Null, M[I1,1] = r0;
0x003201        F3240000                 pop r0;
0x003202        0300A900                 Null = Null + Null, M[I2,1] = r0;
0x003203        F3D40000                 pop rLink;
0x003204        DC0D000F                 rts;

 <$main>
0x003205        0920948B                 r0 = Null + M[$reset_count1];
0x003206        E422002F                 r0 = r0 + 1;
0x003207        1920948B                 M[$reset_count1] = r0 + Null;
0x003208        E402003F                 Null = r0 - 1;
0x003209        DD100B82                 if NE jump $error;
0x00320A        E1F00B53                 call $_stack_initialise;
0x00320B        E1F00B12                 call $interrupt.initialise;
0x00320C        E1F00B84                 call $message.initialise;
0x00320D        E1F00B71                 call $cbuffer.initialise;
0x00320E        E1F00B04                 call $pskey.initialise;
0x00320F        E1F00B2A                 call $wall_clock.initialise;
0x003210        E1F0CE2A                 call $flash.init_dmconst;
0x003211        013000BC                 r1 = Null + 188;
0x003212        01401070                 r2 = Null + 4208;
0x003213        015035C6                 r3 = Null + 13766;
0x003214        E1F00AE5                 call $message.register_handler;
0x003215        013093A6                 r1 = Null + -27738;
0x003216        01401071                 r2 = Null + 4209;
0x003217        015036E2                 r3 = Null + 14050;
0x003218        E1F00AE1                 call $message.register_handler;
0x003219        01309402                 r1 = Null + -27646;
0x00321A        01401072                 r2 = Null + 4210;
0x00321B        01501367                 r3 = Null + 4967;
0x00321C        E1F00ADD                 call $message.register_handler;
0x00321D        E1F00B78                 call $spi_comm.initialize;
0x00321E        E1F004F2                 call $music_example.power_up_reset;
0x00321F        01401000                 r2 = Null + 4096;
0x003220        FD000000 0150E00D        r3 = Null + 57357;
0x003222        0960648F                 r4 = Null + M[$music_example.Version];
0x003223        8D660078                 r4 = r4 LSHIFT -8;
0x003224        E1F0E2AA                 call $message.send_short;
0x003225        01609140                 r4 = Null + -28352;
0x003226        E1F0E427                 call $frame_sync.run_function_table;
0x003227        0120322C                 r0 = Null + 12844;
0x003228        192094D3                 M[$cbuffer.write_port_connect_address] = r0 + Null;
0x003229        0120322F                 r0 = Null + 12847;
0x00322A        192064D4                 M[$cbuffer.write_port_disconnect_address] = r0 + Null;
0x00322B        DDF00009                 jump $M.main.skip_port_handlers;

 <$M.main.write_port_connected_handler>
0x00322C        2143000C                 r2 = r1 - 12;
0x00322D        D124625C                 r0 = M[r2 + 25180];
0x00322E        DC02000F                 jump r0;

 <$M.main.write_port_disconnected_handler>
0x00322F        2143000C                 r2 = r1 - 12;
0x003230        FD0000FF D1244F74        r0 = M[r2 + -45196];
0x003232        DC02000F                 jump r0;

 <$M.main.dummy>
0x003233        DC0D000F                 rts;

 <$M.main.skip_port_handlers>
0x003234        01909193                 r7 = Null + -28269;
0x003235        E1F0E2E3                 call $latency.reset_encoded_latency;
0x003236        E1F00ACE                 call $message.send_ready_wait_for_go;
0x003237        E1F0E448                 call $block_interrupts;
0x003238        E1F0EFCD                 call $conn_init;
0x003239        09909489                 r7 = Null + M[$inputResolutionMode];
0x00323A        E1F00330                 call $config_input_scaling;
0x00323B        015093FA                 r3 = Null + -27654;
0x00323C        0990948A                 r7 = Null + M[$outputResolutionMode];
0x00323D        E1F00242                 call $multi_chan_port_scan_and_routing_config;
0x00323E        E1F0039C                 call $multi_chan_config_tone_mixing;
0x00323F        0990648A                 r7 = Null + M[$procResolutionMode];
0x003240        E1F001E2                 call $codec_resampler.config;
0x003241        E1F0016E                 call $config_rate_matching;
0x003242        E1F000A2                 call $codec_rate_adj.config_buffers;
0x003243        E1F000D0                 call $codec_rate_adj.config_quality;
0x003244        01A003D5                 r8 = Null + 981;
0x003245        E1F00923                 call $config_usb;
0x003246        E1F0E429                 call $interrupt.unblock;
0x003247        E1F003F2                 call $set_output_handler_timer;
0x003248        013000A4                 r1 = Null + 164;
0x003249        09406488                 r2 = Null + M[$tmr_period_audio_copy];
0x00324A        01501110                 r3 = Null + 4368;
0x00324B        E1F0E471                 call $timer.schedule_event_in;
0x00324C        FD0000FF 01304FFC        r1 = Null + -45060;
0x00324E        09409487                 r2 = Null + M[$tmr_period_con_copy];
0x00324F        01500F14                 r3 = Null + 3860;
0x003250        E1F0E46C                 call $timer.schedule_event_in;
0x003251        0130641F                 r1 = Null + 25631;
0x003252        094094D2                 r2 = Null + M[$tmr_period_tone_copy];
0x003253        01500FCE                 r3 = Null + 4046;
0x003254        E1F0E468                 call $timer.schedule_event_in;
0x003255        FD0000FF 01306FFC        r1 = Null + -36868;
0x003257        FD00000F 01404240        r2 = Null + 1000000;
0x003259        01503C33                 r3 = Null + 15411;
0x00325A        E1F0E462                 call $timer.schedule_event_in;

 <$M.main.frame_loop>
0x00325B        E1F00A68                 call $spi_comm.polled_service_routine;
0x00325C        0920006F                 r0 = Null + M[$app_config.io];
0x00325D        21020005                 Null = r0 - 5;
0x00325E        DD100003                 if NE jump $M.main.skip_usb;
0x00325F        E1F00A25                 call $usb_cond_buffer_reset;
0x003260        DDF0001B                 jump $M.main.skip_a2dp_decode;

 <$M.main.skip_usb>
0x003261        21020008                 Null = r0 - 8;
0x003262        DD000019                 if EQ jump $M.main.skip_a2dp_decode;
0x003263        2102000A                 Null = r0 - 10;
0x003264        DD000017                 if EQ jump $M.main.skip_a2dp_decode;

 <$M.main.start_profiler>
0x003265        01A06289                 r8 = Null + 25225;
0x003266        E1F0DDF0                 call $M.mips_profile.mainstart;
0x003267        0170037F                 r5 = Null + 895;
0x003268        E1F0EE68                 call $codec.av_decode;
0x003269        09200391                 r0 = Null + M[0x391];
0x00326A        E1100A49                 if NE call $av_audio_out_silence_prime;
0x00326B        09200391                 r0 = Null + M[0x391];
0x00326C        E10009DE                 if EQ call $av_audio_out_silence_insert;
0x00326D        E1F0D458                 call $sra_calcrate;
0x00326E        090094C2                 Null = Null + M[$M.configure_latency_reporting.enabled];
0x00326F        DD000003                 if EQ jump $M.main.skip_latency_measurement;
0x003270        01909193                 r7 = Null + -28269;
0x003271        E1F0D309                 call $latency.calc_encoded_latency;

 <$M.main.skip_latency_measurement>
0x003272        01A06289                 r8 = Null + 25225;
0x003273        E1F0DDF0                 call $M.mips_profile.mainend;
0x003274        D12A0006                 r0 = M[r8 + 6];
0x003275        192000FE                 M[$music_example.PeakMipsDecoder] = r0 + Null;
0x003276        0170037F                 r5 = Null + 895;
0x003277        D1270006                 r0 = M[r5 + 6];
0x003278        21020000                 Null = r0 - 0;
0x003279        E11004B5                 if NE call $SystemSleepAudio;
0x00327A        DDF00003                 jump $M.main.done_decode;

 <$M.main.skip_a2dp_decode>
0x00327B        E1F0D44A                 call $sra_calcrate;
0x00327C        E1F004B2                 call $SystemSleepAudio;

 <$M.main.done_decode>
0x00327D        0900648E                 Null = Null + M[$codec_resampler.resampler_active];
0x00327E        E11001CA                 if NE call $codec_resampler.run_resampler;
0x00327F        090094CF                 Null = Null + M[$chain0_hw_warp_enable];
0x003280        E100008D                 if EQ call $codec_rate_adj.run_rate_adjustment;
0x003281        01A061F2                 r8 = Null + 25074;
0x003282        090064C5                 Null = Null + M[$M.multi_chan_output.num_chain1_channels];
0x003283        E110D756                 if NE call $pcm_sync_calc_rate;
0x003284        09509490                 r3 = Null + M[$music_example.frame_processing_size];
0x003285        E1F0E98F                 call $M.Subwoofer.set_frame_size;
0x003286        092091DB                 r0 = Null + M[$M.system_config.data.stream_map_left_in];
0x003287        E1F0E3E0                 call $cbuffer.calc_amount_data;
0x003288        2002005F                 Null = r0 - r3;
0x003289        DD40FFD2                 if NEG jump $M.main.frame_loop;
0x00328A        092091E8                 r0 = Null + M[$M.system_config.data.stream_map_primary_left_out];
0x00328B        E1F0E3CC                 call $cbuffer.calc_amount_space;
0x00328C        2002005F                 Null = r0 - r3;
0x00328D        DD40FFCE                 if NEG jump $M.main.frame_loop;
0x00328E        E1F0F52E                 call $jitter_buffering;
0x00328F        0900948C                 Null = Null + M[$M.jitter_buffering.is_buffering];
0x003290        DD10FFCB                 if NE jump $M.main.frame_loop;
0x003291        E1F00218                 call $music_example_process;
0x003292        E1F0E98C                 call $M.Subwoofer.transmit_wireless_subwoofer_audio;
0x003293        DDF0FFC8                 jump $M.main.frame_loop;

 <$multi_chan_config_cbops_copy_strucs>
0x003294        F3D00000                 push rLink;
0x003295        090094C4                 Null = Null + M[$M.multi_chan_output.num_chain0_channels];
0x003296        DD00002A                 if EQ jump $M.multi_chan_config_cbops_copy_strucs.skip_chain0_config;
0x003297        092093FA                 r0 = Null + M[$interface_map_struc];
0x003298        093093FC                 r1 = Null + M[0xff93fc];
0x003299        FD0000FF 8933FFFF        r1 = r1 XOR 0xffffff;
0x00329B        83230000                 r0 = r0 AND r1;
0x00329C        0130000F                 r1 = Null + 15;
0x00329D        E1F00421                 call $multi_chan_calc_cbops_channel_enables;
0x00329E        195094C7                 M[$M.multi_chan_output.chain0_tone_mix_en] = r3 + Null;
0x00329F        092094C5                 r0 = Null + M[$M.multi_chan_output.chain0_enables];
0x0032A0        8122003F                 r0 = r0 AND 0x3f;
0x0032A1        E422009F                 r0 = ONEBITCOUNT r0;
0x0032A2        192062B4                 M[0x62b4] = r0 + Null;
0x0032A3        013090B1                 r1 = Null + -28495;
0x0032A4        09406481                 r2 = Null + M[$current_dac_sampling_rate];
0x0032A5        0950648B                 r3 = Null + M[$ancMode];
0x0032A6        E1F003E8                 call $lookup_2_in_1_out;
0x0032A7        0005000F                 Null = r3 + Null;
0x0032A8        DD100009                 if NE jump $M.multi_chan_config_cbops_copy_strucs.skip_resampler;
0x0032A9        0930648B                 r1 = Null + M[$ancMode];
0x0032AA        193094C6                 M[$M.multi_chan_output.chain0_anc_resampler_enable] = r1 + Null;
0x0032AB        19208C90                 M[0xff8c90] = r0 + Null;
0x0032AC        19203F64                 M[0x3f64] = r0 + Null;
0x0032AD        092094C4                 r0 = Null + M[$M.multi_chan_output.num_chain0_channels];
0x0032AE        19208C8F                 M[0xff8c8f] = r0 + Null;
0x0032AF        E422002F                 r0 = r0 + 1;
0x0032B0        19203F63                 M[0x3f63] = r0 + Null;

 <$M.multi_chan_config_cbops_copy_strucs.skip_resampler>
0x0032B1        092094C4                 r0 = Null + M[$M.multi_chan_output.num_chain0_channels];
0x0032B2        192062D8                 M[0x62d8] = r0 + Null;
0x0032B3        E422002F                 r0 = r0 + 1;
0x0032B4        1920928D                 M[0xff928d] = r0 + Null;
0x0032B5        E422002F                 r0 = r0 + 1;
0x0032B6        192062E0                 M[0x62e0] = r0 + Null;
0x0032B7        E422002F                 r0 = r0 + 1;
0x0032B8        19209295                 M[0xff9295] = r0 + Null;
0x0032B9        E422002F                 r0 = r0 + 1;
0x0032BA        192062E8                 M[0x62e8] = r0 + Null;
0x0032BB        E422002F                 r0 = r0 + 1;
0x0032BC        1920929D                 M[0xff929d] = r0 + Null;
0x0032BD        01209153                 r0 = Null + -28333;
0x0032BE        093064CA                 r1 = Null + M[$M.multi_chan_output.chain0_sync_port];
0x0032BF        E1F0042C                 call $multi_chan_set_port_for_latency_calc;

 <$M.multi_chan_config_cbops_copy_strucs.skip_chain0_config>
0x0032C0        090064C5                 Null = Null + M[$M.multi_chan_output.num_chain1_channels];
0x0032C1        DD00001A                 if EQ jump $M.multi_chan_config_cbops_copy_strucs.skip_chain1_config;
0x0032C2        092093FA                 r0 = Null + M[$interface_map_struc];
0x0032C3        093093FC                 r1 = Null + M[0xff93fc];
0x0032C4        83230000                 r0 = r0 AND r1;
0x0032C5        0130000F                 r1 = Null + 15;
0x0032C6        E1F003F8                 call $multi_chan_calc_cbops_channel_enables;
0x0032C7        195064C8                 M[$M.multi_chan_output.chain1_tone_mix_en] = r3 + Null;
0x0032C8        092064C6                 r0 = Null + M[$M.multi_chan_output.chain1_enables];
0x0032C9        81220003                 r0 = r0 AND 0x3;
0x0032CA        E422009F                 r0 = ONEBITCOUNT r0;
0x0032CB        19209260                 M[0xff9260] = r0 + Null;
0x0032CC        E440002F                 r2 = Null + 1;
0x0032CD        E450003F                 r3 = Null - 1;
0x0032CE        E460003F                 r4 = Null - 1;
0x0032CF        E470002F                 r5 = Null + 1;
0x0032D0        092064C5                 r0 = Null + M[$M.multi_chan_output.num_chain1_channels];
0x0032D1        21020002                 Null = r0 - 2;
0x0032D2        DD400005                 if NEG jump $M.multi_chan_config_cbops_copy_strucs.conf_chai1_sra_op;
0x0032D3        01400002                 r2 = Null + 2;
0x0032D4        E450002F                 r3 = Null + 1;
0x0032D5        01600003                 r4 = Null + 3;
0x0032D6        01700002                 r5 = Null + 2;

 <$M.multi_chan_config_cbops_copy_strucs.conf_chai1_sra_op>
0x0032D7        194090DF                 M[0xff90df] = r2 + Null;
0x0032D8        195090E0                 M[0xff90e0] = r3 + Null;
0x0032D9        196090E1                 M[0xff90e1] = r4 + Null;
0x0032DA        197062F0                 M[0x62f0] = r5 + Null;

 <$M.multi_chan_config_cbops_copy_strucs.skip_chain1_config>
0x0032DB        01500000                 r3 = Null + 0;
0x0032DC        E1F00172                 call $multi_chan_soft_mute;
0x0032DD        093064AB                 r1 = Null + M[$M.system_config.data.dithertype];
0x0032DE        E1F00326                 call $multi_chan_config_dither_type;
0x0032DF        0930648A                 r1 = Null + M[$procResolutionMode];
0x0032E0        E1F003D4                 call $multi_chan_config_output_resampler_quality;
0x0032E1        0930948A                 r1 = Null + M[$outputResolutionMode];
0x0032E2        E1F00334                 call $multi_chan_config_output_scaling;
0x0032E3        DDF0E3E6                 jump $pop_rLink_and_rts;

 <$codec_rate_adj.config_buffers>
0x0032E4        F3D00000                 push rLink;
0x0032E5        E1F0E39A                 call $block_interrupts;
0x0032E6        016000ED                 r4 = Null + 237;
0x0032E7        0170941D                 r5 = Null + -27619;
0x0032E8        0900648E                 Null = Null + M[$codec_resampler.resampler_active];
0x0032E9        DD100007                 if NE jump $codec_rate_adj.resampler_done;
0x0032EA        012000ED                 r0 = Null + 237;
0x0032EB        E1F0E1D3                 call $cbuffer.empty_buffer;
0x0032EC        0120941D                 r0 = Null + -27619;
0x0032ED        E1F0E1D1                 call $cbuffer.empty_buffer;
0x0032EE        016000AD                 r4 = Null + 173;
0x0032EF        0170941A                 r5 = Null + -27622;

 <$codec_rate_adj.resampler_done>
0x0032F0        092094CF                 r0 = Null + M[$chain0_hw_warp_enable];
0x0032F1        09229488                 r0 = r0 + M[$rate_match_disable];
0x0032F2        DD000006                 if EQ jump $codec_rate_adj.chain0_sw_rate_matching;
0x0032F3        0120012D                 r0 = Null + 301;
0x0032F4        E1F0E1CA                 call $cbuffer.empty_buffer;
0x0032F5        01209420                 r0 = Null + -27616;
0x0032F6        E1F0E1C8                 call $cbuffer.empty_buffer;
0x0032F7        DDF00005                 jump $codec_rate_adj.rate_adj_done;

 <$codec_rate_adj.chain0_sw_rate_matching>
0x0032F8        1960912D                 M[$codec_rate_adj.stereo] = r4 + Null;
0x0032F9        1970912F                 M[0xff912f] = r5 + Null;
0x0032FA        0160012D                 r4 = Null + 301;
0x0032FB        01709420                 r5 = Null + -27616;

 <$codec_rate_adj.rate_adj_done>
0x0032FC        196091DB                 M[$M.system_config.data.stream_map_left_in] = r4 + Null;
0x0032FD        1970621B                 M[$M.system_config.data.stream_map_right_in] = r5 + Null;
0x0032FE        01205799                 r0 = Null + 22425;
0x0032FF        013061FA                 r1 = Null + 25082;
0x003300        090064D0                 Null = Null + M[$chain1_hw_warp_enable];
0x003301        00230001                 if NE r0 = r1 + Null;
0x003302        192063CF                 M[0x63cf] = r0 + Null;
0x003303        E1F0E36C                 call $interrupt.unblock;
0x003304        092094CF                 r0 = Null + M[$chain0_hw_warp_enable];
0x003305        092264D0                 r0 = r0 + M[$chain1_hw_warp_enable];
0x003306        DD10E3C3                 if NE jump $pop_rLink_and_rts;
0x003307        01600000                 r4 = Null + 0;
0x003308        FD000000 01408004        r2 = Null + 32772;
0x00330A        01500003                 r3 = Null + 3;
0x00330B        E1F0E1C3                 call $message.send_short;
0x00330C        DDF0E3BD                 jump $pop_rLink_and_rts;

 <$codec_rate_adj.run_rate_adjustment>
0x00330D        09009488                 Null = Null + M[$rate_match_disable];
0x00330E        DC0D0001                 if NE rts;
0x00330F        F3D00000                 push rLink;
0x003310        01A0912D                 r8 = Null + -28371;
0x003311        E1F0D32A                 call $cbops.rate_adjustment_and_shift.Process;

 <$codec_rate_adj.done>
0x003312        DDF0E3B7                 jump $pop_rLink_and_rts;

 <$codec_rate_adj.config_quality>
0x003313        FD0000FF 01403529        r2 = Null + -51927;
0x003315        0150000C                 r3 = Null + 12;
0x003316        09004FE4                 Null = Null + M[0x4fe4];
0x003317        DD000004                 if EQ jump $codec_rate_adj.set_warp_operator;
0x003318        FD0000FF 014031A0        r2 = Null + -52832;
0x00331A        01500024                 r3 = Null + 36;

 <$codec_rate_adj.set_warp_operator>
0x00331B        19409132                 M[0xff9132] = r2 + Null;
0x00331C        19509138                 M[0xff9138] = r3 + Null;
0x00331D        DC0D000F                 rts;

 <$codec_rate_adj.clear_history_buffers>
0x00331E        01C00024                 r10 = Null + 36;
0x00331F        01200080                 r0 = Null + 128;
0x003320        5000002F                 I0 = Null + r0;
0x003321        012000C0                 r0 = Null + 192;
0x003322        5010002F                 I1 = Null + r0;
0x003323        01200000                 r0 = Null + 0;
0x003324        E5F00003                 do $codec_rate_adj.audio_fill_loop1;
0x003325        0300A100                 Null = Null + Null, M[I0,1] = r0;
0x003326        0300A500                 Null = Null + Null, M[I1,1] = r0;

 <$codec_rate_adj.audio_fill_loop1>
0x003327        DC0D000F                 rts;

 <$M.music_example.GetControl.func>
0x003328        F3D00000                 push rLink;
0x003329        5140627F                 I4 = Null + 25215;
0x00332A        5000003F                 I0 = Null + r1;
0x00332B        01C0000A                 r10 = Null + 10;
0x00332C        E5F00003                 do $M.music_example.GetControl.lp_copy_control;
0x00332D        03002100                 Null = Null + Null, r0 = M[I0,1];
0x00332E        030000A1                 Null = Null + Null, M[I4,1] = r0;

 <$M.music_example.GetControl.lp_copy_control>
0x00332F        09306492                 r1 = Null + M[$music_example.SystemVolume];
0x003330        1930949C                 M[$M.music_example.GetControl.local_sys_vol] = r1 + Null;
0x003331        0920627F                 r0 = Null + M[$music_example.SpiSysControl];
0x003332        81028000                 Null = r0 AND 0x8000;
0x003333        DD000009                 if EQ jump $M.music_example.GetControl.dontupdateDAC;
0x003334        09306280                 r1 = Null + M[$music_example.OvrSystemVolume];
0x003335        8133000F                 r1 = r1 AND 0xf;
0x003336        1930949C                 M[$M.music_example.GetControl.local_sys_vol] = r1 + Null;
0x003337        19306492                 M[$music_example.SystemVolume] = r1 + Null;
0x003338        0960949C                 r4 = Null + M[$M.music_example.GetControl.local_sys_vol];
0x003339        0056000F                 r3 = r4 + Null;
0x00333A        01401006                 r2 = Null + 4102;
0x00333B        E1F0E193                 call $message.send_short;

 <$M.music_example.GetControl.dontupdateDAC>
0x00333C        0920627F                 r0 = Null + M[$music_example.SpiSysControl];
0x00333D        81021000                 Null = r0 AND 0x1000;
0x00333E        DD000011                 if EQ jump $M.music_example.GetControl.dontupdateAUX;
0x00333F        0930949C                 r1 = Null + M[$M.music_example.GetControl.local_sys_vol];
0x003340        09406283                 r2 = Null + M[$music_example.AuxOvrMasterVolumes];
0x003341        09506495                 r3 = Null + M[$music_example.Main.ToneVolume];
0x003342        09606284                 r4 = Null + M[$music_example.AuxOvrTrimVolumes];
0x003343        91760074                 r5 = r4 ASHIFT -12;
0x003344        8D66000C                 r4 = r4 LSHIFT 12;
0x003345        91660074                 r4 = r4 ASHIFT -12;
0x003346        51009383                 I0 = Null + -27773;
0x003347        0300B100                 Null = Null + Null, M[I0,1] = r1;
0x003348        0300C100                 Null = Null + Null, M[I0,1] = r2;
0x003349        0300D100                 Null = Null + Null, M[I0,1] = r3;
0x00334A        0300E100                 Null = Null + Null, M[I0,1] = r4;
0x00334B        0300F100                 Null = Null + Null, M[I0,1] = r5;
0x00334C        5000000F                 I0 = Null + Null;
0x00334D        01509383                 r3 = Null + -27773;
0x00334E        E1F0F2BF                 call $M.music_example_message.AuxVolume.update_volumes;

 <$M.music_example.GetControl.dontupdateAUX>
0x00334F        0920627F                 r0 = Null + M[$music_example.SpiSysControl];
0x003350        81020800                 Null = r0 AND 0x800;
0x003351        DD00001E                 if EQ jump $M.music_example.GetControl.dontupdateDAC1;
0x003352        0930949C                 r1 = Null + M[$M.music_example.GetControl.local_sys_vol];
0x003353        09406285                 r2 = Null + M[$music_example.MainOvrMasterVolumes];
0x003354        09506495                 r3 = Null + M[$music_example.Main.ToneVolume];
0x003355        09606286                 r4 = Null + M[$music_example.PriOvrTrimVolumes];
0x003356        91760074                 r5 = r4 ASHIFT -12;
0x003357        8D66000C                 r4 = r4 LSHIFT 12;
0x003358        91660074                 r4 = r4 ASHIFT -12;
0x003359        09806287                 r6 = Null + M[$music_example.SecOvrTrimVolumes];
0x00335A        91980074                 r7 = r6 ASHIFT -12;
0x00335B        8D88000C                 r6 = r6 LSHIFT 12;
0x00335C        91880074                 r6 = r6 ASHIFT -12;
0x00335D        09A06288                 r8 = Null + M[$music_example.SubOvrTrimVolumes];
0x00335E        8DAA000C                 r8 = r8 LSHIFT 12;
0x00335F        91AA0074                 r8 = r8 ASHIFT -12;
0x003360        510062C5                 I0 = Null + 25285;
0x003361        0300B100                 Null = Null + Null, M[I0,1] = r1;
0x003362        0300C100                 Null = Null + Null, M[I0,1] = r2;
0x003363        0300D100                 Null = Null + Null, M[I0,1] = r3;
0x003364        0300E100                 Null = Null + Null, M[I0,1] = r4;
0x003365        0300F100                 Null = Null + Null, M[I0,1] = r5;
0x003366        0028000F                 r0 = r6 + Null;
0x003367        0300A100                 Null = Null + Null, M[I0,1] = r0;
0x003368        0029000F                 r0 = r7 + Null;
0x003369        0300A100                 Null = Null + Null, M[I0,1] = r0;
0x00336A        002A000F                 r0 = r8 + Null;
0x00336B        0300A100                 Null = Null + Null, M[I0,1] = r0;
0x00336C        5000000F                 I0 = Null + Null;
0x00336D        015062C5                 r3 = Null + 25285;
0x00336E        E1F0F095                 call $M.music_example_message.MainVolume.update_volumes;

 <$M.music_example.GetControl.dontupdateDAC1>
0x00336F        01A00000                 r8 = Null + 0;
0x003370        DDF0E359                 jump $pop_rLink_and_rts;

 <$M.music_example.PsKeyReadHandler.func>
0x003371        F3D00000                 push rLink;
0x003372        E404002F                 Null = r2 + 1;
0x003373        DD100009                 if NE jump $M.music_example.PsKeyReadHandler.No_Retry;
0x003374        0920949F                 r0 = Null + M[$M.music_example.LoadParams.Pskey_fetch_flg];
0x003375        DD000004                 if EQ jump $M.music_example.PsKeyReadHandler.No_2nd_Retry;
0x003376        1900949F                 M[$M.music_example.LoadParams.Pskey_fetch_flg] = Null + Null;
0x003377        094064A0                 r2 = Null + M[$M.music_example.LoadParams.Last_PsKey];
0x003378        DDF001E6                 jump $M.music_example.LoadParams.TestPsKey;

 <$M.music_example.PsKeyReadHandler.No_2nd_Retry>
0x003379        E420002F                 r0 = Null + 1;
0x00337A        1920949F                 M[$M.music_example.LoadParams.Pskey_fetch_flg] = r0 + Null;
0x00337B        DDF001E8                 jump $M.music_example.LoadParams.done;

 <$M.music_example.PsKeyReadHandler.No_Retry>
0x00337C        51050001                 I0 = r3 + 1;
0x00337D        E4C4003F                 r10 = r2 - 1;
0x00337E        5820000F                 I2 = I0 + Null;
0x00337F        FD000000 0150FFFF        r3 = Null + 65535;
0x003381        E5F00004                 do $M.music_example.PsKeyReadHandler.loop1;
0x003382        03002800                 Null = Null + Null, r0 = M[I2,0];
0x003383        83250000                 r0 = r0 AND r3;
0x003384        0300A900                 Null = Null + Null, M[I2,1] = r0;

 <$M.music_example.PsKeyReadHandler.loop1>
0x003385        01C00100                 r10 = Null + 256;
0x003386        79220001                 I2 = I2 - 1;
0x003387        03002100                 Null = Null + Null, r0 = M[I0,1];
0x003388        2003002F                 Null = r1 - r0;
0x003389        DD1001DA                 if NE jump $M.music_example.LoadParams.done;
0x00338A        03007100                 Null = Null + Null, r5 = M[I0,1];
0x00338B        03002100                 Null = Null + Null, r0 = M[I0,1];
0x00338C        816200FF                 r4 = r0 AND 0xff;
0x00338D        006C0000                 if EQ r4 = r10 + Null;
0x00338E        8D220078                 r0 = r0 LSHIFT -8;
0x00338F        00A0000F                 r8 = Null + Null;

 <$M.music_example.PsKeyReadHandler.start_loop>
0x003390        8DAA007F                 r8 = r8 LSHIFT -1;
0x003391        DD100007                 if NE jump $M.music_example.PsKeyReadHandler.withinGroup;
0x003392        6C02000F                 Null = I2 - I0;
0x003393        DD400016                 if NEG jump $M.music_example.PsKeyReadHandler.endOfBuffer;
0x003394        03005100                 Null = Null + Null, r3 = M[I0,1];
0x003395        FD000000 01A08000        r8 = Null + 32768;
0x003397        0090000F                 r7 = Null + Null;

 <$M.music_example.PsKeyReadHandler.withinGroup>
0x003398        800500AF                 Null = r3 AND r8;
0x003399        DD00000D                 if EQ jump $M.music_example.PsKeyReadHandler.dontOverwriteCurrentValue;
0x00339A        FD0000FF 8999FFFF        r7 = r7 XOR 0xffffff;
0x00339C        DD000004                 if EQ jump $M.music_example.PsKeyReadHandler.SomeWhere;
0x00339D        03004100                 Null = Null + Null, r2 = M[I0,1];
0x00339E        8D840078                 r6 = r2 LSHIFT -8;
0x00339F        DDF00002                 jump $M.music_example.PsKeyReadHandler.SomeWhereElse;

 <$M.music_example.PsKeyReadHandler.SomeWhere>
0x0033A0        818400FF                 r6 = r2 AND 0xff;

 <$M.music_example.PsKeyReadHandler.SomeWhereElse>
0x0033A1        03003100                 Null = Null + Null, r1 = M[I0,1];
0x0033A2        8D880010                 r6 = r6 LSHIFT 16;
0x0033A3        87380000                 r1 = r1 OR r6;
0x0033A4        0982649F                 r6 = r0 + M[$M.music_example.LoadParams.paramoffset];
0x0033A5        D5384DDC                 M[r6 + 19932] = r1;

 <$M.music_example.PsKeyReadHandler.dontOverwriteCurrentValue>
0x0033A6        E422002F                 r0 = r0 + 1;
0x0033A7        2002006F                 Null = r0 - r4;
0x0033A8        DD40FFE8                 if NEG jump $M.music_example.PsKeyReadHandler.start_loop;

 <$M.music_example.PsKeyReadHandler.endOfBuffer>
0x0033A9        0940649F                 r2 = Null + M[$M.music_example.LoadParams.paramoffset];
0x0033AA        200600CF                 Null = r4 - r10;
0x0033AB        004400C0                 if EQ r2 = r2 + r10;
0x0033AC        1940649F                 M[$M.music_example.LoadParams.paramoffset] = r2 + Null;
0x0033AD        0047000F                 r2 = r5 + Null;
0x0033AE        DDF001B0                 jump $M.music_example.LoadParams.TestPsKey;

 <$config_rate_matching>
0x0033AF        F3D00000                 push rLink;
0x0033B0        09306481                 r1 = Null + M[$current_dac_sampling_rate];
0x0033B1        99330003                 r1 = r1 * 3 (int);
0x0033B2        1930578D                 M[0x578d] = r1 + Null;
0x0033B3        09406483                 r2 = Null + M[$max_clock_mismatch];
0x0033B4        8D240079                 r0 = r2 LSHIFT -7;
0x0033B5        81220001                 r0 = r0 AND 0x1;
0x0033B6        19209488                 M[$rate_match_disable] = r0 + Null;
0x0033B7        09606482                 r4 = Null + M[$local_encoded_play_back];
0x0033B8        DD000005                 if EQ jump $M.config_rate_matching.is_remote_stream;
0x0033B9        012001F4                 r0 = Null + 500;
0x0033BA        19209487                 M[$tmr_period_con_copy] = r0 + Null;
0x0033BB        E420002F                 r0 = Null + 1;
0x0033BC        19209488                 M[$rate_match_disable] = r0 + Null;

 <$M.config_rate_matching.is_remote_stream>
0x0033BD        09009488                 Null = Null + M[$rate_match_disable];
0x0033BE        DD100029                 if NE jump $M.config_rate_matching.end;
0x0033BF        8144007F                 r2 = r2 AND 0x7f;
0x0033C0        21340004                 r1 = r2 - 4;
0x0033C1        20440034                 if NEG r2 = r2 - r1;
0x0033C2        994420C5                 r2 = r2 * 8389 (int);
0x0033C3        95342000                 r1 = r2 * 0.25 (frac);
0x0033C4        03430000                 r2 = r2 + r1;
0x0033C5        FD000003 2134D70A        r1 = r2 - 251658;
0x0033C7        20440035                 if POS r2 = r2 - r1;
0x0033C8        1940578C                 M[0x578c] = r2 + Null;
0x0033C9        FD000040 01400000        r2 = Null + 4194304;
0x0033CB        194057A1                 M[0x57a1] = r2 + Null;
0x0033CC        09509483                 r3 = Null + M[$long_term_mismatch];
0x0033CD        81250001                 r0 = r3 AND 0x1;
0x0033CE        DD000019                 if EQ jump $M.config_rate_matching.end;
0x0033CF        9155007F                 r3 = r3 ASHIFT -1;
0x0033D0        91550006                 r3 = r3 ASHIFT 6;
0x0033D1        2905578C                 Null = r3 - M[0x578c];
0x0033D2        DD500015                 if POS jump $M.config_rate_matching.end;
0x0033D3        0905578C                 Null = r3 + M[0x578c];
0x0033D4        DD400013                 if NEG jump $M.config_rate_matching.end;
0x0033D5        195057A0                 M[0x57a0] = r3 + Null;
0x0033D6        19505799                 M[0x5799] = r3 + Null;
0x0033D7        0920578D                 r0 = Null + M[0x578d];
0x0033D8        97250000                 r0 = r0 * r3 (frac);
0x0033D9        192057A8                 M[0x57a8] = r0 + Null;
0x0033DA        192057A9                 M[0x57a9] = r0 + Null;
0x0033DB        01200002                 r0 = Null + 2;
0x0033DC        1920579B                 M[0x579b] = r0 + Null;
0x0033DD        E420002F                 r0 = Null + 1;
0x0033DE        192057A2                 M[0x57a2] = r0 + Null;
0x0033DF        090094CF                 Null = Null + M[$chain0_hw_warp_enable];
0x0033E0        DD000007                 if EQ jump $M.config_rate_matching.end;
0x0033E1        195063D2                 M[0x63d2] = r3 + Null;
0x0033E2        9565FE00                 r4 = r3 * -0.015625 (frac);
0x0033E3        FD000000 01408004        r2 = Null + 32772;
0x0033E5        01500003                 r3 = Null + 3;
0x0033E6        E1F0E0E8                 call $message.send_short;

 <$M.config_rate_matching.end>
0x0033E7        DDF0E2E2                 jump $pop_rLink_and_rts;

 <$multi_chan_adjust_tone_cbuffers>
0x0033E8        09406450                 r2 = Null + M[$tone_in_left_resample_cbuffer_struc];
0x0033E9        01500000                 r3 = Null + 0;
0x0033EA        09606452                 r4 = Null + M[0x6452];
0x0033EB        09206454                 r0 = Null + M[0x6454];
0x0033EC        290264CB                 Null = r0 - M[$M.multi_chan_output.tone0_in_left_read_ptr];
0x0033ED        DD000004                 if EQ jump $M.multi_chan_adjust_tone_cbuffers.skip_tone0_in_left;
0x0033EE        2026002F                 r0 = r4 - r0;
0x0033EF        00220044                 if NEG r0 = r0 + r2;
0x0033F0        E452006F                 r3 = MAX r0;

 <$M.multi_chan_adjust_tone_cbuffers.skip_tone0_in_left>
0x0033F1        09206457                 r0 = Null + M[0x6457];
0x0033F2        290294CB                 Null = r0 - M[$M.multi_chan_output.tone1_in_left_read_ptr];
0x0033F3        DD000004                 if EQ jump $M.multi_chan_adjust_tone_cbuffers.skip_tone1_in_left;
0x0033F4        2026002F                 r0 = r4 - r0;
0x0033F5        00220044                 if NEG r0 = r0 + r2;
0x0033F6        E452006F                 r3 = MAX r0;

 <$M.multi_chan_adjust_tone_cbuffers.skip_tone1_in_left>
0x0033F7        0920645A                 r0 = Null + M[0x645a];
0x0033F8        290264CC                 Null = r0 - M[$M.multi_chan_output.tone2_in_left_read_ptr];
0x0033F9        DD000004                 if EQ jump $M.multi_chan_adjust_tone_cbuffers.skip_tone2_in_left;
0x0033FA        2026002F                 r0 = r4 - r0;
0x0033FB        00220044                 if NEG r0 = r0 + r2;
0x0033FC        E452006F                 r3 = MAX r0;

 <$M.multi_chan_adjust_tone_cbuffers.skip_tone2_in_left>
0x0033FD        01700000                 r5 = Null + 0;
0x0033FE        0980944F                 r6 = Null + M[0xff944f];
0x0033FF        09209451                 r0 = Null + M[0xff9451];
0x003400        290294CC                 Null = r0 - M[$M.multi_chan_output.tone0_in_right_read_ptr];
0x003401        DD000004                 if EQ jump $M.multi_chan_adjust_tone_cbuffers.skip_tone0_in_right;
0x003402        2028002F                 r0 = r6 - r0;
0x003403        00220044                 if NEG r0 = r0 + r2;
0x003404        E472006F                 r5 = MAX r0;

 <$M.multi_chan_adjust_tone_cbuffers.skip_tone0_in_right>
0x003405        09209454                 r0 = Null + M[0xff9454];
0x003406        290264CD                 Null = r0 - M[$M.multi_chan_output.tone1_in_right_read_ptr];
0x003407        DD000004                 if EQ jump $M.multi_chan_adjust_tone_cbuffers.skip_tone1_in_right;
0x003408        2028002F                 r0 = r6 - r0;
0x003409        00220044                 if NEG r0 = r0 + r2;
0x00340A        E472006F                 r5 = MAX r0;

 <$M.multi_chan_adjust_tone_cbuffers.skip_tone1_in_right>
0x00340B        09209457                 r0 = Null + M[0xff9457];
0x00340C        290294CD                 Null = r0 - M[$M.multi_chan_output.tone2_in_right_read_ptr];
0x00340D        DD000004                 if EQ jump $M.multi_chan_adjust_tone_cbuffers.skip_tone2_in_right;
0x00340E        2028002F                 r0 = r6 - r0;
0x00340F        00220044                 if NEG r0 = r0 + r2;
0x003410        E472006F                 r5 = MAX r0;

 <$M.multi_chan_adjust_tone_cbuffers.skip_tone2_in_right>
0x003411        0005000F                 Null = r3 + Null;
0x003412        00570000                 if EQ r3 = r5 + Null;
0x003413        0007000F                 Null = r5 + Null;
0x003414        00750000                 if EQ r5 = r3 + Null;
0x003415        50C0004F                 L0 = Null + r2;
0x003416        7080005F                 M0 = Null - r3;
0x003417        5000006F                 I0 = Null + r4;
0x003418        02002000                 Null = Null + Null, r0 = M[I0,M0];
0x003419        4420000F                 r0 = Null + I0;
0x00341A        19206451                 M[0x6451] = r0 + Null;
0x00341B        7080007F                 M0 = Null - r5;
0x00341C        5000008F                 I0 = Null + r6;
0x00341D        02002000                 Null = Null + Null, r0 = M[I0,M0];
0x00341E        4420000F                 r0 = Null + I0;
0x00341F        1920944E                 M[0xff944e] = r0 + Null;
0x003420        51C00000                 L0 = Null + 0;
0x003421        DC0D000F                 rts;

 <$codec_resampler.config>
0x003422        F3D00000                 push rLink;
0x003423        01308E8A                 r1 = Null + -29046;
0x003424        09409481                 r2 = Null + M[$current_codec_sampling_rate];
0x003425        09506481                 r3 = Null + M[$current_dac_sampling_rate];
0x003426        E1F00268                 call $lookup_2_in_1_out;
0x003427        0005000F                 Null = r3 + Null;
0x003428        DD00000E                 if EQ jump $codec_resampler.match_found;
0x003429        09509481                 r3 = Null + M[$current_codec_sampling_rate];
0x00342A        09606481                 r4 = Null + M[$current_dac_sampling_rate];
0x00342B        0120000A                 r0 = Null + 10;
0x00342C        0015000F                 rMAC = r3 + Null;
0x00342D        D9020000                 Div = rMAC / r0;
0x00342E        D9500001                 r3 = DivResult;
0x00342F        0016000F                 rMAC = r4 + Null;
0x003430        D9020000                 Div = rMAC / r0;
0x003431        D9600001                 r4 = DivResult;
0x003432        01401090                 r2 = Null + 4240;
0x003433        E1F0E09B                 call $message.send_short;
0x003434        E420002F                 r0 = Null + 1;
0x003435        1920948E                 M[$codec_resampler.rate_error] = r0 + Null;

 <$codec_resampler.match_found>
0x003436        E1F0E249                 call $block_interrupts;
0x003437        01200000                 r0 = Null + 0;
0x003438        E440002F                 r2 = Null + 1;
0x003439        21090018                 Null = r7 - 24;
0x00343A        00240000                 if EQ r0 = r2 + Null;
0x00343B        19208D07                 M[0xff8d07] = r0 + Null;
0x00343C        19204792                 M[0x4792] = r0 + Null;
0x00343D        E440002F                 r2 = Null + 1;
0x00343E        19008D06                 M[0xff8d06] = Null + Null;
0x00343F        19004791                 M[0x4791] = Null + Null;
0x003440        D1230002                 r0 = M[r1 + 2];
0x003441        19208D01                 M[0xff8d01] = r0 + Null;
0x003442        1920478C                 M[0x478c] = r0 + Null;
0x003443        00400000                 if EQ r2 = Null + Null;
0x003444        1940648E                 M[$codec_resampler.resampler_active] = r2 + Null;
0x003445        E1F0013C                 call $calc_sra_resampling_adjustment;
0x003446        E1F0E229                 call $interrupt.unblock;
0x003447        DDF0E282                 jump $pop_rLink_and_rts;

 <$codec_resampler.run_resampler>
0x003448        F3D00000                 push rLink;
0x003449        01A08CFF                 r8 = Null + -29441;
0x00344A        E1F0D715                 call $iir_resamplev2.Process;
0x00344B        01A0478A                 r8 = Null + 18314;
0x00344C        E1F0D713                 call $iir_resamplev2.Process;

 <$codec_resampler.run_resampler_done>
0x00344D        DDF0E27C                 jump $pop_rLink_and_rts;

 <$multi_chan_soft_mute>
0x00344E        F3D00000                 push rLink;
0x00344F        195064CE                 M[$M.multi_chan_output.channels_mute_en] = r3 + Null;
0x003450        092093FA                 r0 = Null + M[$interface_map_struc];
0x003451        093093FC                 r1 = Null + M[0xff93fc];
0x003452        FD0000FF 8933FFFF        r1 = r1 XOR 0xffffff;
0x003454        83230000                 r0 = r0 AND r1;
0x003455        0035000F                 r1 = r3 + Null;
0x003456        E1F00268                 call $multi_chan_calc_cbops_channel_enables;
0x003457        195094CE                 M[$M.multi_chan_output.chain0_mute_en] = r3 + Null;
0x003458        E430002F                 r1 = Null + 1;
0x003459        81050001                 Null = r3 AND 0x1;
0x00345A        20300031                 if NE r1 = Null - r1;
0x00345B        1930630C                 M[$M.multi_chan_output.chain0_ch0_mute_op.param] = r1 + Null;
0x00345C        E430002F                 r1 = Null + 1;
0x00345D        81050002                 Null = r3 AND 0x2;
0x00345E        20300031                 if NE r1 = Null - r1;
0x00345F        193092BA                 M[$M.multi_chan_output.chain0_ch1_mute_op.param] = r1 + Null;
0x003460        E430002F                 r1 = Null + 1;
0x003461        81050004                 Null = r3 AND 0x4;
0x003462        20300031                 if NE r1 = Null - r1;
0x003463        19306313                 M[$M.multi_chan_output.chain0_ch2_mute_op.param] = r1 + Null;
0x003464        E430002F                 r1 = Null + 1;
0x003465        81050008                 Null = r3 AND 0x8;
0x003466        20300031                 if NE r1 = Null - r1;
0x003467        193092C1                 M[$M.multi_chan_output.chain0_ch3_mute_op.param] = r1 + Null;
0x003468        E430002F                 r1 = Null + 1;
0x003469        81050010                 Null = r3 AND 0x10;
0x00346A        20300031                 if NE r1 = Null - r1;
0x00346B        1930631A                 M[$M.multi_chan_output.chain0_ch4_mute_op.param] = r1 + Null;
0x00346C        E430002F                 r1 = Null + 1;
0x00346D        81050020                 Null = r3 AND 0x20;
0x00346E        20300031                 if NE r1 = Null - r1;
0x00346F        193092C8                 M[$M.multi_chan_output.chain0_ch5_mute_op.param] = r1 + Null;
0x003470        092093FA                 r0 = Null + M[$interface_map_struc];
0x003471        093093FC                 r1 = Null + M[0xff93fc];
0x003472        83230000                 r0 = r0 AND r1;
0x003473        093064CE                 r1 = Null + M[$M.multi_chan_output.channels_mute_en];
0x003474        E1F0024A                 call $multi_chan_calc_cbops_channel_enables;
0x003475        195064CF                 M[$M.multi_chan_output.chain1_mute_en] = r3 + Null;
0x003476        E430002F                 r1 = Null + 1;
0x003477        81050001                 Null = r3 AND 0x1;
0x003478        20300031                 if NE r1 = Null - r1;
0x003479        19306321                 M[$M.multi_chan_output.chain1_ch0_mute_op.param] = r1 + Null;
0x00347A        E430002F                 r1 = Null + 1;
0x00347B        81050002                 Null = r3 AND 0x2;
0x00347C        20300031                 if NE r1 = Null - r1;
0x00347D        193092CF                 M[$M.multi_chan_output.chain1_ch1_mute_op.param] = r1 + Null;
0x00347E        DDF0E24B                 jump $pop_rLink_and_rts;

 <$multi_chan_port_scan_and_routing_config>
0x00347F        F3D00000                 push rLink;
0x003480        FD0000FF 01207BF9        r0 = Null + -33799;
0x003482        013062FC                 r1 = Null + 25340;
0x003483        21090018                 Null = r7 - 24;
0x003484        00230000                 if EQ r0 = r1 + Null;
0x003485        01C00007                 r10 = Null + 7;
0x003486        E1F00223                 call $multi_chan_build_channel_enable_mask;
0x003487        D5650000                 M[r3 + 0] = r4;
0x003488        012092AA                 r0 = Null + -27990;
0x003489        E430002F                 r1 = Null + 1;
0x00348A        01C00007                 r10 = Null + 7;
0x00348B        E1F0027C                 call $multi_chan_build_channel_type_mask;
0x00348C        D5750001                 M[r3 + 1] = r5;
0x00348D        E1F001E2                 call $multi_chan_select_chain_usage;
0x00348E        012092AA                 r0 = Null + -27990;
0x00348F        01300003                 r1 = Null + 3;
0x003490        01C00007                 r10 = Null + 7;
0x003491        E1F00276                 call $multi_chan_build_channel_type_mask;
0x003492        D5750003                 M[r3 + 3] = r5;
0x003493        195064D1                 M[$M.multi_chan_port_scan_and_routing_config.fp_config_input] = r3 + Null;
0x003494        0075000F                 r5 = r3 + Null;
0x003495        E1F000A5                 call $multi_chan_select_rate_matching;
0x003496        E1F0006F                 call $multi_chan_build_all_cbops_copy_strucs;
0x003497        E1F0FDFD                 call $multi_chan_config_cbops_copy_strucs;
0x003498        09206112                 r0 = Null + M[0x6112];
0x003499        192092B1                 M[$M.multi_chan_output.chain0_pcm_cbuffers_latency_measure] = r0 + Null;
0x00349A        092064CA                 r0 = Null + M[$M.multi_chan_output.chain0_sync_port];
0x00349B        192092B4                 M[0xff92b4] = r0 + Null;
0x00349C        19206274                 M[$calc_chain0_actual_port_rate_struc] = r0 + Null;
0x00349D        0920922B                 r0 = Null + M[0xff922b];
0x00349E        19206303                 M[$M.multi_chan_output.chain1_pcm_cbuffers_latency_measure] = r0 + Null;
0x00349F        092094CA                 r0 = Null + M[$M.multi_chan_output.chain1_sync_port];
0x0034A0        19206306                 M[0x6306] = r0 + Null;
0x0034A1        FD0000FF 19207FF5        M[$calc_chain1_actual_port_rate_struc] = r0 + Null;
0x0034A3        095064D1                 r3 = Null + M[$M.multi_chan_port_scan_and_routing_config.fp_config_input];
0x0034A4        E1F0E99E                 call $M.frame_proc_stream_configure.func;
0x0034A5        092094C9                 r0 = Null + M[$M.multi_chan_output.i2s_slave0];
0x0034A6        01306274                 r1 = Null + 25204;
0x0034A7        E1F00274                 call $config_calc_port_rate;
0x0034A8        DDF0E221                 jump $pop_rLink_and_rts;

 <$music_example_process>
0x0034A9        F3D00000                 push rLink;
0x0034AA        1900FE93                 M[0xfffe93] = Null + Null;
0x0034AB        09006490                 Null = Null + M[$music_example.reinit];
0x0034AC        E1100075                 if NE call $music_example_reinitialize;
0x0034AD        093064AB                 r1 = Null + M[$M.system_config.data.dithertype];
0x0034AE        E1F00156                 call $multi_chan_config_dither_type;
0x0034AF        0930948F                 r1 = Null + M[$music_example.sys_mode];
0x0034B0        0920627F                 r0 = Null + M[$music_example.SpiSysControl];
0x0034B1        09606282                 r4 = Null + M[$music_example.OvrMode];
0x0034B2        81022000                 Null = r0 AND 0x2000;
0x0034B3        00360001                 if NE r1 = r4 + Null;
0x0034B4        E440002F                 r2 = Null + 1;
0x0034B5        09206481                 r0 = Null + M[$current_dac_sampling_rate];
0x0034B6        FD000000 2102AC44        Null = r0 - 44100;
0x0034B8        DD00000B                 if EQ jump $M.music_example_process.no_fs_force_passthru;
0x0034B9        FD000000 2102BB80        Null = r0 - 48000;
0x0034BB        DD000008                 if EQ jump $M.music_example_process.no_fs_force_passthru;
0x0034BC        FD000001 21025888        Null = r0 - 88200;
0x0034BE        DD000005                 if EQ jump $M.music_example_process.no_fs_force_passthru;
0x0034BF        FD000001 21027700        Null = r0 - 96000;
0x0034C1        DD000002                 if EQ jump $M.music_example_process.no_fs_force_passthru;
0x0034C2        0034000F                 r1 = r2 + Null;

 <$M.music_example_process.no_fs_force_passthru>
0x0034C3        193000FC                 M[$music_example.CurMode] = r1 + Null;
0x0034C4        D1636403                 r4 = M[r1 + 25603];
0x0034C5        E1F0E188                 call $frame_sync.run_function_table;
0x0034C6        0920923B                 r0 = Null + M[0xff923b];
0x0034C7        192000FD                 M[$music_example.PeakMipsFunc] = r0 + Null;
0x0034C8        09209481                 r0 = Null + M[$current_codec_sampling_rate];
0x0034C9        192000FF                 M[$music_example.SamplingRate] = r0 + Null;
0x0034CA        DDF0E1FF                 jump $pop_rLink_and_rts;

 <$master_app_reset>
0x0034CB        F3D00000                 push rLink;
0x0034CC        09006482                 Null = Null + M[$local_encoded_play_back];
0x0034CD        DD000008                 if EQ jump $M.master_app_reset.pause_happened;
0x0034CE        01401080                 r2 = Null + 4224;
0x0034CF        01500000                 r3 = Null + 0;
0x0034D0        01600000                 r4 = Null + 0;
0x0034D1        01700000                 r5 = Null + 0;
0x0034D2        01800000                 r6 = Null + 0;
0x0034D3        E1F0DFFB                 call $message.send_short;
0x0034D4        19006482                 M[$local_encoded_play_back] = Null + Null;

 <$M.master_app_reset.pause_happened>
0x0034D5        E1F0E1AA                 call $block_interrupts;
0x0034D6        E1F001A9                 call $multi_chan_purge_buffers;
0x0034D7        E1F00189                 call $purge_input_pcm_cbuffers;
0x0034D8        E1F00049                 call $music_example_reinitialize;
0x0034D9        01609140                 r4 = Null + -28352;
0x0034DA        E1F0E173                 call $frame_sync.run_function_table;
0x0034DB        016060BE                 r4 = Null + 24766;
0x0034DC        E1F0E171                 call $frame_sync.run_function_table;
0x0034DD        01909193                 r7 = Null + -28269;
0x0034DE        E1F0E03A                 call $latency.reset_encoded_latency;
0x0034DF        190094BF                 M[$first_packet_received] = Null + Null;
0x0034E0        190057A4                 M[0x57a4] = Null + Null;
0x0034E1        E1F0E18E                 call $interrupt.unblock;
0x0034E2        DDF0E1E7                 jump $pop_rLink_and_rts;

 <$M.music_example_message.SetMode.func>
0x0034E3        0004000F                 Null = r2 + Null;
0x0034E4        DD000017                 if EQ jump $M.music_example_message.SetMode.do_not_advance_to_next_eq_bank;
0x0034E5        01600007                 r4 = Null + 7;
0x0034E6        09704E23                 r5 = Null + M[0x4e23];
0x0034E7        83760000                 r5 = r5 AND r4;
0x0034E8        09204DDC                 r0 = Null + M[$M.system_config.data.CurParams];
0x0034E9        8082006F                 r6 = r0 AND r4;
0x0034EA        E488002F                 r6 = r6 + 1;
0x0034EB        21040002                 Null = r2 - 2;
0x0034EC        00850000                 if EQ r6 = r3 + Null;
0x0034ED        01A00200                 r8 = Null + 512;
0x0034EE        01500000                 r3 = Null + 0;
0x0034EF        E490002F                 r7 = Null + 1;
0x0034F0        800200AF                 Null = r0 AND r8;
0x0034F1        00590000                 if EQ r3 = r7 + Null;
0x0034F2        2007008F                 Null = r5 - r6;
0x0034F3        0085000B                 if LT r6 = r3 + Null;
0x0034F4        21080000                 Null = r6 - 0;
0x0034F5        00850000                 if EQ r6 = r3 + Null;
0x0034F6        FD0000FF 8996FFFF        r7 = r4 XOR 0xffffff;
0x0034F8        8092009F                 r7 = r0 AND r7;
0x0034F9        8489008F                 r6 = r7 OR r6;
0x0034FA        19804DDC                 M[$M.system_config.data.CurParams] = r6 + Null;

 <$M.music_example_message.SetMode.do_not_advance_to_next_eq_bank>
0x0034FB        01500003                 r3 = Null + 3;
0x0034FC        2005003F                 Null = r3 - r1;
0x0034FD        00350004                 if NEG r1 = r3 + Null;
0x0034FE        01500000                 r3 = Null + 0;
0x0034FF        2005003F                 Null = r3 - r1;
0x003500        00350005                 if POS r1 = r3 + Null;
0x003501        1930948F                 M[$music_example.sys_mode] = r1 + Null;
0x003502        E430002F                 r1 = Null + 1;
0x003503        19306490                 M[$music_example.reinit] = r1 + Null;
0x003504        DC0D000F                 rts;

 <$multi_chan_build_all_cbops_copy_strucs>
0x003505        F3D00000                 push rLink;
0x003506        D1670000                 r4 = M[r5 + 0];
0x003507        D1770002                 r5 = M[r5 + 2];
0x003508        FD0000FF 8927FFFF        r0 = r5 XOR 0xffffff;
0x00350A        F3600000                 push r4;
0x00350B        83620000                 r4 = r4 AND r0;
0x00350C        E426009F                 r0 = ONEBITCOUNT r4;
0x00350D        192094C4                 M[$M.multi_chan_output.num_chain0_channels] = r0 + Null;
0x00350E        E9220001                 r0 = 0x1 LSHIFT r0;
0x00350F        E422003F                 r0 = r0 - 1;
0x003510        192094C5                 M[$M.multi_chan_output.chain0_enables] = r0 + Null;
0x003511        01206110                 r0 = Null + 24848;
0x003512        013062F5                 r1 = Null + 25333;
0x003513        018064CA                 r6 = Null + 25802;
0x003514        E1F00114                 call $multi_chan_build_cbops_copy_struc;
0x003515        F3640000                 pop r4;
0x003516        83670000                 r4 = r4 AND r5;
0x003517        E426009F                 r0 = ONEBITCOUNT r4;
0x003518        192064C5                 M[$M.multi_chan_output.num_chain1_channels] = r0 + Null;
0x003519        E9220001                 r0 = 0x1 LSHIFT r0;
0x00351A        E422003F                 r0 = r0 - 1;
0x00351B        192064C6                 M[$M.multi_chan_output.chain1_enables] = r0 + Null;
0x00351C        01209229                 r0 = Null + -28119;
0x00351D        013062F5                 r1 = Null + 25333;
0x00351E        018094CA                 r6 = Null + -27446;
0x00351F        E1F00109                 call $multi_chan_build_cbops_copy_struc;
0x003520        DDF0E1A9                 jump $pop_rLink_and_rts;

 <$music_example_reinitialize>
0x003521        F3D00000                 push rLink;
0x003522        51900001                 M1 = Null + 1;
0x003523        FD0000FF 5100331A        I0 = Null + -52454;
0x003525        02002100                 Null = Null + Null, r0 = M[I0,M1];

 <$M.music_example_reinitialize.lp_param_copy>
0x003526        02003100                 Null = Null + Null, r1 = M[I0,M1];
0x003527        D3200000                 r0 = M[r0 + Null];
0x003528        1832210F                 M[r1] = r0 + Null, r0 = M[I0,M1];
0x003529        0002000F                 Null = r0 + Null;
0x00352A        DD10FFFC                 if NE jump $M.music_example_reinitialize.lp_param_copy;
0x00352B        09204DDC                 r0 = Null + M[$M.system_config.data.CurParams];
0x00352C        09406487                 r2 = Null + M[$codec_config];
0x00352D        D5244DDC                 M[r2 + 19932] = r0;
0x00352E        01401014                 r2 = Null + 4116;
0x00352F        81520007                 r3 = r0 AND 0x7;
0x003530        E1F0DF9E                 call $message.send_short;
0x003531        09204DDC                 r0 = Null + M[$M.system_config.data.CurParams];
0x003532        0140100F                 r2 = Null + 4111;
0x003533        8D520070                 r3 = r0 LSHIFT -16;
0x003534        8162FFFF                 r4 = r0 AND 0xffff;
0x003535        E1F0DF99                 call $message.send_short;
0x003536        01608FAC                 r4 = Null + -28756;
0x003537        E1F0E116                 call $frame_sync.run_function_table;
0x003538        19006490                 M[$music_example.reinit] = Null + Null;
0x003539        DDF0E190                 jump $pop_rLink_and_rts;

 <$multi_chan_select_rate_matching>
0x00353A        190094CF                 M[$chain0_hw_warp_enable] = Null + Null;
0x00353B        190064D0                 M[$chain1_hw_warp_enable] = Null + Null;
0x00353C        DDF00019                 jump $M.multi_chan_select_rate_matching.exit;
0x00353D        09009488                 Null = Null + M[$rate_match_disable];
0x00353E        DD100017                 if NE jump $M.multi_chan_select_rate_matching.exit;
0x00353F        D1270000                 r0 = M[r5 + 0];
0x003540        D1370001                 r1 = M[r5 + 1];
0x003541        D1470002                 r2 = M[r5 + 2];
0x003542        FD0000FF 8954FFFF        r3 = r2 XOR 0xffffff;
0x003544        83520000                 r3 = r3 AND r0;
0x003545        83420000                 r2 = r2 AND r0;
0x003546        FD0000FF 8963FFFF        r4 = r1 XOR 0xffffff;
0x003548        8005003F                 Null = r3 AND r1;
0x003549        DD000006                 if EQ jump $M.multi_chan_select_rate_matching.check_chain1;
0x00354A        8005006F                 Null = r3 AND r4;
0x00354B        DD10000A                 if NE jump $M.multi_chan_select_rate_matching.exit;
0x00354C        E420002F                 r0 = Null + 1;
0x00354D        192094CF                 M[$chain0_hw_warp_enable] = r0 + Null;
0x00354E        DDF00007                 jump $M.multi_chan_select_rate_matching.exit;

 <$M.multi_chan_select_rate_matching.check_chain1>
0x00354F        8004003F                 Null = r2 AND r1;
0x003550        DD000005                 if EQ jump $M.multi_chan_select_rate_matching.exit;
0x003551        8004006F                 Null = r2 AND r4;
0x003552        DD100003                 if NE jump $M.multi_chan_select_rate_matching.exit;
0x003553        E420002F                 r0 = Null + 1;
0x003554        192064D0                 M[$chain1_hw_warp_enable] = r0 + Null;

 <$M.multi_chan_select_rate_matching.exit>
0x003555        DC0D000F                 rts;

 <$M.music_example.LoadParams.func>
0x003556        F3D00000                 push rLink;
0x003557        01A00000                 r8 = Null + 0;
0x003558        19A0948F                 M[$music_example.sys_mode] = r8 + Null;
0x003559        F3300000                 push r1;
0x00355A        E1F000F3                 call $M.music_example.load_default_params.func;
0x00355B        1900649F                 M[$M.music_example.LoadParams.paramoffset] = Null + Null;
0x00355C        F3440000                 pop r2;
0x00355D        194064A0                 M[$M.music_example.LoadParams.Last_PsKey] = r2 + Null;

 <$M.music_example.LoadParams.TestPsKey>
0x00355E        DD000005                 if EQ jump $M.music_example.LoadParams.done;
0x00355F        01309429                 r1 = Null + -27607;
0x003560        01503371                 r3 = Null + 13169;
0x003561        E1F0DF93                 call $pskey.read_key;
0x003562        DDF0E167                 jump $pop_rLink_and_rts;

 <$M.music_example.LoadParams.done>
0x003563        09206487                 r0 = Null + M[$codec_config];
0x003564        D1224DDC                 r0 = M[r0 + 19932];
0x003565        19204DDC                 M[$M.system_config.data.CurParams] = r0 + Null;
0x003566        E1F001BD                 call $M.music_example.ReInit.func;
0x003567        01401015                 r2 = Null + 4117;
0x003568        E1F0DF66                 call $message.send_short;
0x003569        DDF0E160                 jump $pop_rLink_and_rts;

 <$config_input_scaling>
0x00356A        F3D00000                 push rLink;
0x00356B        E1F0E114                 call $block_interrupts;
0x00356C        FD000080 01200000        r0 = Null + -8388608;
0x00356E        FD000080 01300001        r1 = Null + -8388607;
0x003570        01400008                 r2 = Null + 8;
0x003571        21090018                 Null = r7 - 24;
0x003572        DD100006                 if NE jump $M.config_input_scaling.skip_24_bit;
0x003573        FD000013 8522B400        r0 = r0 OR 0x13b400;
0x003575        FD000013 8533B400        r1 = r1 OR 0x13b400;
0x003577        01400000                 r2 = Null + 0;

 <$M.config_input_scaling.skip_24_bit>
0x003578        192003E1                 M[0x3e1] = r0 + Null;
0x003579        193003E2                 M[0x3e2] = r1 + Null;
0x00357A        1920004C                 M[0x4c] = r0 + Null;
0x00357B        1940939B                 M[0xff939b] = r2 + Null;
0x00357C        194063DC                 M[0x63dc] = r2 + Null;
0x00357D        194063E1                 M[0x63e1] = r2 + Null;
0x00357E        194093A5                 M[0xff93a5] = r2 + Null;
0x00357F        E1F0E0F0                 call $interrupt.unblock;
0x003580        DDF0E149                 jump $pop_rLink_and_rts;

 <$calc_sra_resampling_adjustment>
0x003581        F100003E                 pushm <rMAC, r0, r1, r2, r3>;
0x003582        09209481                 r0 = Null + M[$current_codec_sampling_rate];
0x003583        09306481                 r1 = Null + M[$current_dac_sampling_rate];
0x003584        E440002F                 r2 = Null + 1;
0x003585        01500000                 r3 = Null + 0;
0x003586        2002003F                 Null = r0 - r1;
0x003587        DD00000F                 if EQ jump $M.calc_sra_resampling_adjustment.done;
0x003588        DD40000A                 if NEG jump $M.calc_sra_resampling_adjustment.upsampling;
0x003589        8D22007E                 r0 = r0 LSHIFT -2;
0x00358A        8DE2007F                 rMAC = r0 LSHIFT -1 (MI);
0x00358B        D9030000                 Div = rMAC / r1;
0x00358C        D9200001                 r0 = DivResult;
0x00358D        8D42006B                 r2 = r0 LSHIFT -21;
0x00358E        FD00001F 8122FFFF        r0 = r0 AND 0x1fffff;
0x003590        8D520002                 r3 = r0 LSHIFT 2;
0x003591        DDF00005                 jump $M.calc_sra_resampling_adjustment.done;

 <$M.calc_sra_resampling_adjustment.upsampling>
0x003592        8DE2007F                 rMAC = r0 LSHIFT -1 (MI);
0x003593        D9030000                 Div = rMAC / r1;
0x003594        01400000                 r2 = Null + 0;
0x003595        D9500001                 r3 = DivResult;

 <$M.calc_sra_resampling_adjustment.done>
0x003596        194064A1                 M[$sra_resamp_adjust_int] = r2 + Null;
0x003597        195094A1                 M[$sra_resamp_adjust_frac] = r3 + Null;
0x003598        F104003E                 popm <rMAC, r0, r1, r2, r3>;
0x003599        DC0D000F                 rts;

 <$M.music_example.GetStatus.func>
0x00359A        5010003F                 I1 = Null + r1;
0x00359B        01C00036                 r10 = Null + 54;
0x00359C        00AC000F                 r8 = r10 + Null;
0x00359D        51408F49                 I4 = Null + -28855;
0x00359E        03000031                 Null = Null + Null, r1 = M[I4,1];
0x00359F        E5F00004                 do $M.music_example.GetStatus.lp_copy_status;
0x0035A0        D3300000                 r1 = M[r1 + Null];
0x0035A1        0300B531                 Null = Null + Null, M[I1,1] = r1, r1 = M[I4,1];
0x0035A2        03000000                 Null = Null + Null;

 <$M.music_example.GetStatus.lp_copy_status>
0x0035A3        01C00004                 r10 = Null + 4;
0x0035A4        514000FC                 I4 = Null + 252;
0x0035A5        8B440000                 r2 = r2 XOR r2;
0x0035A6        E5F00002                 do $M.music_example.GetStatus.loop_clr_statistics;
0x0035A7        030000C1                 Null = Null + Null, M[I4,1] = r2;

 <$M.music_example.GetStatus.loop_clr_statistics>
0x0035A8        19009474                 M[0xff9474] = Null + Null;
0x0035A9        190057FF                 M[0x57ff] = Null + Null;
0x0035AA        19009476                 M[0xff9476] = Null + Null;
0x0035AB        19006478                 M[0x6478] = Null + Null;
0x0035AC        19009478                 M[0xff9478] = Null + Null;
0x0035AD        1900647A                 M[0x647a] = Null + Null;
0x0035AE        1900947A                 M[0xff947a] = Null + Null;
0x0035AF        1900647C                 M[0x647c] = Null + Null;
0x0035B0        1900947C                 M[0xff947c] = Null + Null;
0x0035B1        DC0D000F                 rts;

 <$music_example.peq.initialize>
0x0035B2        09204DDC                 r0 = Null + M[$M.system_config.data.CurParams];
0x0035B3        D07A000F                 r5 = M[r8 + Null];
0x0035B4        81520007                 r3 = r0 AND 0x7;
0x0035B5        E407003F                 Null = r5 - 1;
0x0035B6        00500000                 if EQ r3 = Null + Null;
0x0035B7        09306481                 r1 = Null + M[$current_dac_sampling_rate];
0x0035B8        FD000000 2103BB80        Null = r1 - 48000;
0x0035BA        00550070                 if EQ r3 = r3 + r5;
0x0035BB        E4AA002F                 r8 = r8 + 1;
0x0035BC        D02A005F                 r0 = M[r8 + r3];
0x0035BD        D5290003                 M[r7 + 3] = r0;
0x0035BE        DC0D0000                 if EQ rts;
0x0035BF        DDF00784                 jump $audio_proc.hq_peq.initialize;

 <$music_example.peq.process>
0x0035C0        09204DDC                 r0 = Null + M[$M.system_config.data.CurParams];
0x0035C1        800200AF                 Null = r0 AND r8;
0x0035C2        DC0D0001                 if NE rts;
0x0035C3        D1090003                 Null = M[r7 + 3];
0x0035C4        DC0D0000                 if EQ rts;
0x0035C5        DDF0D735                 jump $audio_proc.hq_peq.process;

 <$set_dac_rate_from_vm>
0x0035C6        8133FFFF                 r1 = r1 AND 0xffff;
0x0035C7        9933000A                 r1 = r1 * 10 (int);
0x0035C8        19306481                 M[$current_dac_sampling_rate] = r1 + Null;
0x0035C9        19406483                 M[$max_clock_mismatch] = r2 + Null;
0x0035CA        19509483                 M[$long_term_mismatch] = r3 + Null;
0x0035CB        81360200                 r1 = r4 AND 0x200;
0x0035CC        89430200                 r2 = r1 XOR 0x200;
0x0035CD        81260100                 r0 = r4 AND 0x100;
0x0035CE        9F420000                 r2 = r2 * r0 (int) (sat);
0x0035CF        19406482                 M[$local_encoded_play_back] = r2 + Null;
0x0035D0        E450002F                 r3 = Null + 1;
0x0035D1        9F320000                 r1 = r1 * r0 (int) (sat);
0x0035D2        00350001                 if NE r1 = r3 + Null;
0x0035D3        19309482                 M[$aux_input_stream_available] = r1 + Null;
0x0035D4        F3D00000                 push rLink;
0x0035D5        09206481                 r0 = Null + M[$current_dac_sampling_rate];
0x0035D6        E1F0E0DA                 call $latency.calc_inv_fs;
0x0035D7        19209484                 M[$inv_dac_fs] = r0 + Null;
0x0035D8        F3D40000                 pop rLink;
0x0035D9        DC0D000F                 rts;

 <$multi_chan_config_tone_mixing>
0x0035DA        095093FA                 r3 = Null + M[$interface_map_struc];
0x0035DB        096093FC                 r4 = Null + M[0xff93fc];
0x0035DC        FD0000FF 8936FFFF        r1 = r4 XOR 0xffffff;
0x0035DE        8025003F                 r0 = r3 AND r1;
0x0035DF        093094C8                 r1 = Null + M[$M.multi_chan_output.prim_tone_mix_ratio];
0x0035E0        094064C9                 r2 = Null + M[$M.multi_chan_output.aux_tone_mix_ratio];
0x0035E1        1940910E                 M[0xff910e] = r2 + Null;
0x0035E2        19406141                 M[0x6141] = r2 + Null;
0x0035E3        81020003                 Null = r0 AND 0x3;
0x0035E4        00340000                 if EQ r1 = r2 + Null;
0x0035E5        193090FA                 M[0xff90fa] = r1 + Null;
0x0035E6        1930612D                 M[0x612d] = r1 + Null;
0x0035E7        8025006F                 r0 = r3 AND r4;
0x0035E8        093094C8                 r1 = Null + M[$M.multi_chan_output.prim_tone_mix_ratio];
0x0035E9        094064C9                 r2 = Null + M[$M.multi_chan_output.aux_tone_mix_ratio];
0x0035EA        81020003                 Null = r0 AND 0x3;
0x0035EB        00340000                 if EQ r1 = r2 + Null;
0x0035EC        19309122                 M[0xff9122] = r1 + Null;
0x0035ED        19306155                 M[0x6155] = r1 + Null;
0x0035EE        DC0D000F                 rts;

 <$multi_chan_clone_tone_cbuffers>
0x0035EF        09206454                 r0 = Null + M[0x6454];
0x0035F0        192064CB                 M[$M.multi_chan_output.tone0_in_left_read_ptr] = r0 + Null;
0x0035F1        09206457                 r0 = Null + M[0x6457];
0x0035F2        192094CB                 M[$M.multi_chan_output.tone1_in_left_read_ptr] = r0 + Null;
0x0035F3        0920645A                 r0 = Null + M[0x645a];
0x0035F4        192064CC                 M[$M.multi_chan_output.tone2_in_left_read_ptr] = r0 + Null;
0x0035F5        09206452                 r0 = Null + M[0x6452];
0x0035F6        19206455                 M[0x6455] = r0 + Null;
0x0035F7        19206458                 M[0x6458] = r0 + Null;
0x0035F8        1920645B                 M[0x645b] = r0 + Null;
0x0035F9        09209451                 r0 = Null + M[0xff9451];
0x0035FA        192094CC                 M[$M.multi_chan_output.tone0_in_right_read_ptr] = r0 + Null;
0x0035FB        09209454                 r0 = Null + M[0xff9454];
0x0035FC        192064CD                 M[$M.multi_chan_output.tone1_in_right_read_ptr] = r0 + Null;
0x0035FD        09209457                 r0 = Null + M[0xff9457];
0x0035FE        192094CD                 M[$M.multi_chan_output.tone2_in_right_read_ptr] = r0 + Null;
0x0035FF        0920944F                 r0 = Null + M[0xff944f];
0x003600        19209452                 M[0xff9452] = r0 + Null;
0x003601        19209455                 M[0xff9455] = r0 + Null;
0x003602        19209458                 M[0xff9458] = r0 + Null;
0x003603        DC0D000F                 rts;

 <$multi_chan_config_dither_type>
0x003604        F3D00000                 push rLink;
0x003605        E1F0E07A                 call $block_interrupts;
0x003606        0023000F                 r0 = r1 + Null;
0x003607        01400000                 r2 = Null + 0;
0x003608        09306481                 r1 = Null + M[$current_dac_sampling_rate];
0x003609        FD000000 2103AC44        Null = r1 - 44100;
0x00360B        00240004                 if NEG r0 = r2 + Null;
0x00360C        192062DA                 M[0x62da] = r0 + Null;
0x00360D        1920928F                 M[0xff928f] = r0 + Null;
0x00360E        192062E2                 M[0x62e2] = r0 + Null;
0x00360F        19209297                 M[0xff9297] = r0 + Null;
0x003610        192062EA                 M[0x62ea] = r0 + Null;
0x003611        1920929F                 M[0xff929f] = r0 + Null;
0x003612        192062F2                 M[0x62f2] = r0 + Null;
0x003613        192092A7                 M[0xff92a7] = r0 + Null;
0x003614        E1F0E05B                 call $interrupt.unblock;
0x003615        DDF0E0B4                 jump $pop_rLink_and_rts;

 <$multi_chan_config_output_scaling>
0x003616        F3D00000                 push rLink;
0x003617        E1F0E068                 call $block_interrupts;
0x003618        0120FFF8                 r0 = Null + -8;
0x003619        21030018                 Null = r1 - 24;
0x00361A        00200000                 if EQ r0 = Null + Null;
0x00361B        19208C91                 M[0xff8c91] = r0 + Null;
0x00361C        19203F65                 M[0x3f65] = r0 + Null;
0x00361D        192062D9                 M[0x62d9] = r0 + Null;
0x00361E        1920928E                 M[0xff928e] = r0 + Null;
0x00361F        192062E1                 M[0x62e1] = r0 + Null;
0x003620        19209296                 M[0xff9296] = r0 + Null;
0x003621        192062E9                 M[0x62e9] = r0 + Null;
0x003622        1920929E                 M[0xff929e] = r0 + Null;
0x003623        192062F1                 M[0x62f1] = r0 + Null;
0x003624        192092A6                 M[0xff92a6] = r0 + Null;
0x003625        192090E2                 M[0xff90e2] = r0 + Null;
0x003626        E1F0E049                 call $interrupt.unblock;
0x003627        DDF0E0A2                 jump $pop_rLink_and_rts;

 <$multi_chan_build_cbops_copy_struc>
0x003628        F3D00000                 push rLink;
0x003629        E456009F                 r3 = ONEBITCOUNT r4;
0x00362A        51320001                 I3 = r0 + 1;
0x00362B        0300DD00                 Null = Null + Null, M[I3,1] = r3;
0x00362C        0023000F                 r0 = r1 + Null;
0x00362D        01C00007                 r10 = Null + 7;
0x00362E        E1F0009C                 call $multi_chan_copy_enabled_channels;
0x00362F        1880000F                 M[r6] = Null + Null;
0x003630        0300DD00                 Null = Null + Null, M[I3,1] = r3;
0x003631        FD0000FF 01207BF9        r0 = Null + -33799;
0x003633        013062FC                 r1 = Null + 25340;
0x003634        21090018                 Null = r7 - 24;
0x003635        00230000                 if EQ r0 = r1 + Null;
0x003636        01C00007                 r10 = Null + 7;
0x003637        E1F00093                 call $multi_chan_copy_enabled_channels;
0x003638        DDF0E091                 jump $pop_rLink_and_rts;

 <$set_output_handler_timer>
0x003639        0130641B                 r1 = Null + 25627;
0x00363A        014093FE                 r2 = Null + -27650;
0x00363B        0950948A                 r3 = Null + M[$outputResolutionMode];
0x00363C        21050018                 Null = r3 - 24;
0x00363D        00430001                 if NE r2 = r1 + Null;
0x00363E        D1240000                 r0 = M[r2 + 0];
0x00363F        D1340001                 r1 = M[r2 + 1];
0x003640        09506481                 r3 = Null + M[$current_dac_sampling_rate];
0x003641        FD000000 6505BB80        Null = 48000 - r3;
0x003643        00230004                 if NEG r0 = r1 + Null;
0x003644        0950648B                 r3 = Null + M[$ancMode];
0x003645        21050000                 Null = r3 - 0;
0x003646        DD000005                 if EQ jump $M.set_output_handler_timer.timer_value_calculated;
0x003647        D1240002                 r0 = M[r2 + 2];
0x003648        D1340003                 r1 = M[r2 + 3];
0x003649        21050002                 Null = r3 - 2;
0x00364A        00230000                 if EQ r0 = r1 + Null;

 <$M.set_output_handler_timer.timer_value_calculated>
0x00364B        19206488                 M[$tmr_period_audio_copy] = r0 + Null;
0x00364C        DC0D000F                 rts;

 <$M.music_example.load_default_params.func>
0x00364D        51C00005                 L0 = Null + 5;
0x00364E        510000A8                 I0 = Null + 168;
0x00364F        FD0000D0 51400000        I4 = Null + -3145728;
0x003651        51104DDC                 I1 = Null + 19932;
0x003652        01C0020A                 r10 = Null + 522;
0x003653        91CC007F                 r10 = r10 ASHIFT -1;
0x003654        03006121                 Null = Null + Null, r4 = M[I0,1], r0 = M[I4,1];
0x003655        E5F00009                 do $M.music_example.load_default_params.three16_to_two24_loop;
0x003656        8F266140                 r0 = r0 LSHIFT r4, r4 = M[I0,1], r2 = M[I4,0];
0x003657        83466100                 r2 = r2 AND r4, r4 = M[I0,1];
0x003658        8F466151                 r2 = r2 LSHIFT r4, r4 = M[I0,1], r3 = M[I4,1];
0x003659        87240041                 r0 = r0 OR r2, r2 = M[I4,1];
0x00365A        83466100                 r2 = r2 AND r4, r4 = M[I0,1];
0x00365B        8F56A500                 r3 = r3 LSHIFT r4, M[I1,1] = r0;
0x00365C        87546121                 r3 = r3 OR r2, r4 = M[I0,1], r0 = M[I4,1];
0x00365D        0300D500                 Null = Null + Null, M[I1,1] = r3;

 <$M.music_example.load_default_params.three16_to_two24_loop>
0x00365E        51C00000                 L0 = Null + 0;
0x00365F        DC0D000F                 rts;

 <$purge_input_pcm_cbuffers>
0x003660        F3D00000                 push rLink;
0x003661        092000AF                 r0 = Null + M[0xaf];
0x003662        192000AE                 M[0xae] = r0 + Null;
0x003663        0920941C                 r0 = Null + M[0xff941c];
0x003664        1920941B                 M[0xff941b] = r0 + Null;
0x003665        092000EF                 r0 = Null + M[0xef];
0x003666        192000EE                 M[0xee] = r0 + Null;
0x003667        0920941F                 r0 = Null + M[0xff941f];
0x003668        1920941E                 M[0xff941e] = r0 + Null;
0x003669        0920012F                 r0 = Null + M[0x12f];
0x00366A        1920012E                 M[0x12e] = r0 + Null;
0x00366B        09209422                 r0 = Null + M[0xff9422];
0x00366C        19209421                 M[0xff9421] = r0 + Null;
0x00366D        E1F0FCB1                 call $codec_rate_adj.clear_history_buffers;
0x00366E        DDF0E05B                 jump $pop_rLink_and_rts;

 <$multi_chan_select_chain_usage>
0x00366F        01300000                 r1 = Null + 0;
0x003670        8006007F                 Null = r4 AND r5;
0x003671        DD00000C                 if EQ jump $M.multi_chan_select_chain_usage.only_chain0;
0x003672        FD0000FF 8927FFFF        r0 = r5 XOR 0xffffff;
0x003674        8006002F                 Null = r4 AND r0;
0x003675        DD000008                 if EQ jump $M.multi_chan_select_chain_usage.only_chain0;
0x003676        09206481                 r0 = Null + M[$current_dac_sampling_rate];
0x003677        FD000000 2102AC44        Null = r0 - 44100;
0x003679        DD000003                 if EQ jump $M.multi_chan_select_chain_usage.chain0_and_chain1;
0x00367A        092094C9                 r0 = Null + M[$M.multi_chan_output.i2s_slave0];
0x00367B        DD000002                 if EQ jump $M.multi_chan_select_chain_usage.only_chain0;

 <$M.multi_chan_select_chain_usage.chain0_and_chain1>
0x00367C        0037000F                 r1 = r5 + Null;

 <$M.multi_chan_select_chain_usage.only_chain0>
0x00367D        D5350002                 M[r3 + 2] = r1;
0x00367E        DC0D000F                 rts;

 <$multi_chan_purge_buffers>
0x00367F        09209440                 r0 = Null + M[0xff9440];
0x003680        1920943F                 M[0xff943f] = r0 + Null;
0x003681        09206446                 r0 = Null + M[0x6446];
0x003682        19206445                 M[0x6445] = r0 + Null;
0x003683        09209443                 r0 = Null + M[0xff9443];
0x003684        19209442                 M[0xff9442] = r0 + Null;
0x003685        09206449                 r0 = Null + M[0x6449];
0x003686        19206448                 M[0x6448] = r0 + Null;
0x003687        09209446                 r0 = Null + M[0xff9446];
0x003688        19209445                 M[0xff9445] = r0 + Null;
0x003689        0920644C                 r0 = Null + M[0x644c];
0x00368A        1920644B                 M[0x644b] = r0 + Null;
0x00368B        09209449                 r0 = Null + M[0xff9449];
0x00368C        19209448                 M[0xff9448] = r0 + Null;
0x00368D        DC0D000F                 rts;

 <$lookup_2_in_1_out>
0x00368E        E460002F                 r4 = Null + 1;

 <$M.lookup_2_in_1_out.lookup_loop>
0x00368F        D023000F                 r0 = M[r1 + Null];
0x003690        DD000009                 if EQ jump $M.lookup_2_in_1_out.rates_not_supported;
0x003691        2002004F                 Null = r0 - r2;
0x003692        DD100004                 if NE jump $M.lookup_2_in_1_out.skip;
0x003693        D1230001                 r0 = M[r1 + 1];
0x003694        2002005F                 Null = r0 - r3;
0x003695        DD000003                 if EQ jump $M.lookup_2_in_1_out.match_found;

 <$M.lookup_2_in_1_out.skip>
0x003696        01330003                 r1 = r1 + 3;
0x003697        DDF0FFF8                 jump $M.lookup_2_in_1_out.lookup_loop;

 <$M.lookup_2_in_1_out.match_found>
0x003698        01600000                 r4 = Null + 0;

 <$M.lookup_2_in_1_out.rates_not_supported>
0x003699        0056000F                 r3 = r4 + Null;
0x00369A        D1230002                 r0 = M[r1 + 2];
0x00369B        DC0D000F                 rts;

 <$set_input_handler_timer>
0x00369C        0130077E                 r1 = Null + 1918;
0x00369D        01409471                 r2 = Null + -27535;
0x00369E        09509489                 r3 = Null + M[$inputResolutionMode];
0x00369F        21050018                 Null = r3 - 24;
0x0036A0        00430001                 if NE r2 = r1 + Null;
0x0036A1        D1240000                 r0 = M[r2 + 0];
0x0036A2        D1340001                 r1 = M[r2 + 1];
0x0036A3        09509481                 r3 = Null + M[$current_codec_sampling_rate];
0x0036A4        FD000000 6505BB80        Null = 48000 - r3;
0x0036A6        00230004                 if NEG r0 = r1 + Null;
0x0036A7        19209487                 M[$tmr_period_con_copy] = r0 + Null;
0x0036A8        DC0D000F                 rts;

 <$multi_chan_build_channel_enable_mask>
0x0036A9        F3D00000                 push rLink;
0x0036AA        5020002F                 I2 = Null + r0;
0x0036AB        E430002F                 r1 = Null + 1;
0x0036AC        01600000                 r4 = Null + 0;
0x0036AD        E5F00006                 do $M.multi_chan_build_channel_enable_mask.channel_loop;
0x0036AE        03002900                 Null = Null + Null, r0 = M[I2,1];
0x0036AF        E1F0DFE7                 call $cbuffer.is_it_enabled;
0x0036B0        DD000002                 if EQ jump $M.multi_chan_build_channel_enable_mask.not_enabled;
0x0036B1        87630000                 r4 = r4 OR r1;

 <$M.multi_chan_build_channel_enable_mask.not_enabled>
0x0036B2        8D330001                 r1 = r1 LSHIFT 1;

 <$M.multi_chan_build_channel_enable_mask.channel_loop>
0x0036B3        DDF0E016                 jump $pop_rLink_and_rts;

 <$multi_chan_config_output_resampler_quality>
0x0036B4        F3D00000                 push rLink;
0x0036B5        E1F0DFCA                 call $block_interrupts;
0x0036B6        01200000                 r0 = Null + 0;
0x0036B7        E440002F                 r2 = Null + 1;
0x0036B8        21030018                 Null = r1 - 24;
0x0036B9        00240000                 if EQ r0 = r2 + Null;
0x0036BA        19208C96                 M[0xff8c96] = r0 + Null;
0x0036BB        19203F6A                 M[0x3f6a] = r0 + Null;
0x0036BC        E1F0DFB3                 call $interrupt.unblock;
0x0036BD        DDF0E00C                 jump $pop_rLink_and_rts;

 <$multi_chan_calc_cbops_channel_enables>
0x0036BE        01C00007                 r10 = Null + 7;
0x0036BF        E440002F                 r2 = Null + 1;
0x0036C0        01500000                 r3 = Null + 0;
0x0036C1        E460002F                 r4 = Null + 1;
0x0036C2        E5F00007                 do $M.multi_chan_calc_cbops_channel_enables.loop_over_channels;
0x0036C3        8002006F                 Null = r0 AND r4;
0x0036C4        DD000004                 if EQ jump $M.multi_chan_calc_cbops_channel_enables.skip_en;
0x0036C5        8003006F                 Null = r1 AND r4;
0x0036C6        84550041                 if NE r3 = r3 OR r2;
0x0036C7        8D440001                 r2 = r2 LSHIFT 1;

 <$M.multi_chan_calc_cbops_channel_enables.skip_en>
0x0036C8        8D660001                 r4 = r4 LSHIFT 1;

 <$M.multi_chan_calc_cbops_channel_enables.loop_over_channels>
0x0036C9        DC0D000F                 rts;

 <$multi_chan_copy_enabled_channels>
0x0036CA        5020002F                 I2 = Null + r0;
0x0036CB        E430002F                 r1 = Null + 1;
0x0036CC        E5F00009                 do $M.multi_chan_copy_enabled_channels.channel_loop;
0x0036CD        03002900                 Null = Null + Null, r0 = M[I2,1];
0x0036CE        8006003F                 Null = r4 AND r1;
0x0036CF        DD000005                 if EQ jump $M.multi_chan_copy_enabled_channels.not_enabled;
0x0036D0        D048000F                 r2 = M[r6 + Null];
0x0036D1        00420000                 if EQ r2 = r0 + Null;
0x0036D2        1884000F                 M[r6] = r2 + Null;
0x0036D3        0300AD00                 Null = Null + Null, M[I3,1] = r0;

 <$M.multi_chan_copy_enabled_channels.not_enabled>
0x0036D4        8D330001                 r1 = r1 LSHIFT 1;

 <$M.multi_chan_copy_enabled_channels.channel_loop>
0x0036D5        DC0D000F                 rts;

 <$multi_chan_tones_active>
0x0036D6        09209102                 r0 = Null + M[0xff9102];
0x0036D7        09306135                 r1 = Null + M[0x6135];
0x0036D8        87230000                 r0 = r0 OR r1;
0x0036D9        09309116                 r1 = Null + M[0xff9116];
0x0036DA        87230000                 r0 = r0 OR r1;
0x0036DB        09306149                 r1 = Null + M[0x6149];
0x0036DC        87230000                 r0 = r0 OR r1;
0x0036DD        0930912A                 r1 = Null + M[0xff912a];
0x0036DE        87230000                 r0 = r0 OR r1;
0x0036DF        0930615D                 r1 = Null + M[0x615d];
0x0036E0        87230000                 r0 = r0 OR r1;
0x0036E1        DC0D000F                 rts;

 <$set_codec_rate_from_vm>
0x0036E2        8133FFFF                 r1 = r1 AND 0xffff;
0x0036E3        9933000A                 r1 = r1 * 10 (int);
0x0036E4        19309481                 M[$current_codec_sampling_rate] = r1 + Null;
0x0036E5        F3D00000                 push rLink;
0x0036E6        09209481                 r0 = Null + M[$current_codec_sampling_rate];
0x0036E7        E1F0DFC9                 call $latency.calc_inv_fs;
0x0036E8        19206484                 M[$inv_codec_fs] = r0 + Null;
0x0036E9        F3D40000                 pop rLink;
0x0036EA        DC0D000F                 rts;

 <$multi_chan_set_port_for_latency_calc>
0x0036EB        5000002F                 I0 = Null + r0;
0x0036EC        51800003                 M0 = Null + 3;
0x0036ED        5190FFFD                 M1 = Null + -3;

 <$M.multi_chan_set_port_for_latency_calc.next_entry>
0x0036EE        02002000                 Null = Null + Null, r0 = M[I0,M0];
0x0036EF        DD000005                 if EQ jump $M.multi_chan_set_port_for_latency_calc.exit;
0x0036F0        D802000F                 Null = SIGNDET r0;
0x0036F1        DD10FFFD                 if NE jump $M.multi_chan_set_port_for_latency_calc.next_entry;
0x0036F2        02002100                 Null = Null + Null, r0 = M[I0,M1];
0x0036F3        0200B100                 Null = Null + Null, M[I0,M1] = r1;

 <$M.multi_chan_set_port_for_latency_calc.exit>
0x0036F4        DC0D000F                 rts;

 <$M.music_example.GetParams.func>
0x0036F5        01504DDC                 r3 = Null + 19932;
0x0036F6        01600209                 r4 = Null + 521;
0x0036F7        FD0000D0 01700000        r5 = Null + -3145728;
0x0036F9        1835000F                 M[r1] = r3 + Null;
0x0036FA        D5630001                 M[r1 + 1] = r4;
0x0036FB        D5730002                 M[r1 + 2] = r5;
0x0036FC        01A00003                 r8 = Null + 3;
0x0036FD        DC0D000F                 rts;

 <$M.music_example.GetVersion.func>
0x0036FE        FD000000 0150E00D        r3 = Null + 57357;
0x003700        0970648F                 r5 = Null + M[$music_example.Version];
0x003701        09809481                 r6 = Null + M[$current_codec_sampling_rate];
0x003702        1835000F                 M[r1] = r3 + Null;
0x003703        D5730001                 M[r1 + 1] = r5;
0x003704        D5830002                 M[r1 + 2] = r6;
0x003705        01A00003                 r8 = Null + 3;
0x003706        DC0D000F                 rts;

 <$multi_chan_build_channel_type_mask>
0x003707        5020002F                 I2 = Null + r0;
0x003708        01700000                 r5 = Null + 0;
0x003709        E440002F                 r2 = Null + 1;
0x00370A        E5F00005                 do $M.multi_chan_build_channel_type_mask.channel_loop;
0x00370B        03002900                 Null = Null + Null, r0 = M[I2,1];
0x00370C        23230000                 r0 = r0 - r1;
0x00370D        84770040                 if EQ r5 = r5 OR r2;
0x00370E        8D440001                 r2 = r2 LSHIFT 1;

 <$M.multi_chan_build_channel_type_mask.channel_loop>
0x00370F        DC0D000F                 rts;

 <$music_example.power_up_reset>
0x003710        F3D00000                 push rLink;
0x003711        E1F0FF3C                 call $M.music_example.load_default_params.func;
0x003712        01605360                 r4 = Null + 21344;
0x003713        E1F0DF23                 call $frame_sync.register_handlers;
0x003714        DDF0DFB5                 jump $pop_rLink_and_rts;

 <$copy_codec_stats_pointers>
0x003715        01C0000D                 r10 = Null + 13;
0x003716        51408F72                 I4 = Null + -28814;
0x003717        E5F00003                 do $M.copy_codec_stats_pointers.assign_loop;
0x003718        03002100                 Null = Null + Null, r0 = M[I0,1];
0x003719        030000A1                 Null = Null + Null, M[I4,1] = r0;

 <$M.copy_codec_stats_pointers.assign_loop>
0x00371A        DC0D000F                 rts;

 <$config_calc_port_rate>
0x00371B        01406481                 r2 = Null + 25729;
0x00371C        0002000F                 Null = r0 + Null;
0x00371D        00400001                 if NE r2 = Null + Null;
0x00371E        D5430001                 M[r1 + 1] = r2;
0x00371F        DC0D000F                 rts;

 <$music_example.anc_eq.process>
0x003720        0900648B                 Null = Null + M[$ancMode];
0x003721        DC0D0000                 if EQ rts;
0x003722        DDF0FE9E                 jump $music_example.peq.process;

 <$M.music_example.ReInit.func>
0x003723        E4A0002F                 r8 = Null + 1;
0x003724        19A06490                 M[$music_example.reinit] = r8 + Null;
0x003725        01A00000                 r8 = Null + 0;
0x003726        DC0D000F                 rts;

 <$apply_sra_resampling_adjustment>
0x003727        99220003                 r0 = r0 * 3 (int);
0x003728        1920578D                 M[0x578d] = r0 + Null;
0x003729        DC0D000F                 rts;

 <$multi_chan_set_prim_tone_mix_ratio>
0x00372A        195094C8                 M[$M.multi_chan_output.prim_tone_mix_ratio] = r3 + Null;
0x00372B        DC0D000F                 rts;

 <$multi_chan_set_aux_tone_mix_ratio>
0x00372C        195064C9                 M[$M.multi_chan_output.aux_tone_mix_ratio] = r3 + Null;
0x00372D        DC0D000F                 rts;

 <$SystemSleepAudio>
0x00372E        014094E5                 r2 = Null + -27419;
0x00372F        DDF00002                 jump $M.Sleep.SleepSetSync;

 <$SystemSleepEsco>
0x003730        0140649C                 r2 = Null + 25756;

 <$M.Sleep.SleepSetSync>
0x003731        E420002F                 r0 = Null + 1;
0x003732        1842000F                 M[r2] = r0 + Null;
0x003733        0930FE71                 r1 = Null + M[0xfffe71];
0x003734        096094D7                 r4 = Null + M[$interrupt.total_time];
0x003735        0980FE4D                 r6 = Null + M[0xfffe4d];
0x003736        0120003F                 r0 = Null + 63;
0x003737        1920FE4D                 M[0xfffe4d] = r0 + Null;

 <$M.Sleep.jp_wait>
0x003738        D004000F                 Null = M[r2 + Null];
0x003739        DD10FFFF                 if NE jump $M.Sleep.jp_wait;
0x00373A        1980FE4D                 M[0xfffe4d] = r6 + Null;
0x00373B        0950FE71                 r3 = Null + M[0xfffe71];
0x00373C        2035003F                 r1 = r3 - r1;
0x00373D        296694D7                 r4 = r4 - M[$interrupt.total_time];
0x00373E        03360000                 r1 = r1 + r4;
0x00373F        0920949A                 r0 = Null + M[$M.Sleep.TotalTime];
0x003740        03320000                 r1 = r1 + r0;
0x003741        1930949A                 M[$M.Sleep.TotalTime] = r1 + Null;
0x003742        0920649B                 r0 = Null + M[$M.Sleep.LastUpdateTm];
0x003743        2075002F                 r5 = r3 - r0;
0x003744        FD00000F 01104240        rMAC = Null + 1000000;
0x003746        2007001F                 Null = r5 - rMAC;
0x003747        DC0D0004                 if NEG rts;
0x003748        91E1007F                 rMAC = rMAC ASHIFT -1 (MI);
0x003749        D9070000                 Div = rMAC / r5;
0x00374A        2017003F                 rMAC = r5 - r1;
0x00374B        1950649B                 M[$M.Sleep.LastUpdateTm] = r3 + Null;
0x00374C        1900949A                 M[$M.Sleep.TotalTime] = Null + Null;
0x00374D        D9500001                 r3 = DivResult;
0x00374E        9415001F                 rMAC = r3 * rMAC (frac);
0x00374F        FD000001 01500625        r3 = Null + 67109;
0x003751        97150000                 rMAC = rMAC * r3 (frac);
0x003752        1910949B                 M[$M.Sleep.Mips] = rMAC + Null;
0x003753        DC0D000F                 rts;

 <$cbops.soft_mute.main>
0x003754        F3D00000                 push rLink;
0x003755        00BC000F                 r9 = r10 + Null;
0x003756        D17A0002                 r5 = M[r8 + 2];
0x003757        511A0003                 I1 = r8 + 3;
0x003758        51D00000                 L1 = Null + 0;
0x003759        51900001                 M1 = Null + 1;

 <$M.cbops.soft_mute.channelLoop>
0x00375A        00CB000F                 r10 = r9 + Null;
0x00375B        03002500                 Null = Null + Null, r0 = M[I1,1];
0x00375C        D038002F                 r1 = M[r6 + r0];
0x00375D        5000003F                 I0 = Null + r1;
0x00375E        D039002F                 r1 = M[r7 + r0];
0x00375F        50C0003F                 L0 = Null + r1;
0x003760        03002500                 Null = Null + Null, r0 = M[I1,1];
0x003761        D038002F                 r1 = M[r6 + r0];
0x003762        5040003F                 I4 = Null + r1;
0x003763        D039002F                 r1 = M[r7 + r0];
0x003764        50E0003F                 L4 = Null + r1;
0x003765        D12A0001                 r0 = M[r8 + 1];
0x003766        D13A0000                 r1 = M[r8 + 0];
0x003767        E5F0000C                 do $M.cbops.soft_mute.sampleLoop;
0x003768        02234100                 r0 = r0 + r1, r2 = M[I0,M1];
0x003769        00200004                 if NEG r0 = Null + Null;
0x00376A        0160001F                 r4 = Null + 31;
0x00376B        2006002F                 Null = r4 - r0;
0x00376C        00260004                 if NEG r0 = r4 + Null;
0x00376D        01609043                 r4 = Null + -28605;
0x00376E        0062006F                 r4 = r0 + r4;
0x00376F        D3600000                 r4 = M[r4 + Null];
0x003770        97460000                 r2 = r2 * r4 (frac);
0x003771        2040004F                 r2 = Null - r2;
0x003772        020000C1                 Null = Null + Null, M[I4,M1] = r2;

 <$M.cbops.soft_mute.sampleLoop>
0x003773        E477003F                 r5 = r5 - 1;
0x003774        DD10FFE6                 if NE jump $M.cbops.soft_mute.channelLoop;
0x003775        D52A0001                 M[r8 + 1] = r0;
0x003776        51C00000                 L0 = Null + 0;
0x003777        51E00000                 L4 = Null + 0;
0x003778        DDF0DF51                 jump $pop_rLink_and_rts;

 <$sco_params_message_handler>
0x003779        F3D00000                 push rLink;
0x00377A        D1250001                 r0 = M[r3 + 1];
0x00377B        192094AF                 M[$sco_param_tesco] = r0 + Null;
0x00377C        D1250003                 r0 = M[r3 + 3];
0x00377D        192064B1                 M[$sco_param_to_air_size] = r0 + Null;
0x00377E        D1250004                 r0 = M[r3 + 4];
0x00377F        192094B1                 M[$sco_param_from_air_size] = r0 + Null;
0x003780        D1250005                 r0 = M[r3 + 5];
0x003781        D1350006                 r1 = M[r3 + 6];
0x003782        8D220010                 r0 = r0 LSHIFT 16;
0x003783        8133FFFF                 r1 = r1 AND 0xffff;
0x003784        03320000                 r1 = r1 + r0;
0x003785        D1250005                 r0 = M[r3 + 5];
0x003786        8D220078                 r0 = r0 LSHIFT -8;
0x003787        192064B0                 M[$sco_param_clock_msw] = r0 + Null;
0x003788        193094B0                 M[$sco_param_clock_lsw] = r1 + Null;
0x003789        D1250007                 r0 = M[r3 + 7];
0x00378A        8D220008                 r0 = r0 LSHIFT 8;
0x00378B        91220078                 r0 = r0 ASHIFT -8;
0x00378C        192064B2                 M[$sco_param_to_air_time] = r0 + Null;
0x00378D        D1250008                 r0 = M[r3 + 8];
0x00378E        8D220008                 r0 = r0 LSHIFT 8;
0x00378F        91220078                 r0 = r0 ASHIFT -8;
0x003790        192094B2                 M[$sco_param_from_air_time] = r0 + Null;
0x003791        094064B3                 r2 = Null + M[$sco_timer_id];
0x003792        E1F0DD03                 call $timer.cancel_event;
0x003793        85408017                 r2 = Null OR 0x8017;
0x003794        095064AD                 r3 = Null + M[$sub_link_port];
0x003795        8155001F                 r3 = r3 AND 0x1f;
0x003796        096064B1                 r4 = Null + M[$sco_param_to_air_size];
0x003797        E1F0DF11                 call $message.send;
0x003798        E420002F                 r0 = Null + 1;
0x003799        192094B5                 M[$M.Subwoofer.sco_schedule_to_air_flag] = r0 + Null;
0x00379A        DDF0DF2F                 jump $pop_rLink_and_rts;

 <$audio_proc.vse.hc_process>
0x00379B        F3D00000                 push rLink;
0x00379C        01290020                 r0 = r7 + 32;
0x00379D        F3200000                 push r0;
0x00379E        F3B60000                 pop B1;
0x00379F        D1290012                 r0 = M[r7 + 18];
0x0037A0        5010002F                 I1 = Null + r0;
0x0037A1        D129000C                 r0 = M[r7 + 12];
0x0037A2        51D20001                 L1 = r0 + 1;
0x0037A3        03004D00                 Null = Null + Null, r2 = M[I3,1];
0x0037A4        03003D00                 Null = Null + Null, r1 = M[I3,1];
0x0037A5        0083000F                 r6 = r1 + Null;
0x0037A6        03005D00                 Null = Null + Null, r3 = M[I3,1];
0x0037A7        D1C90008                 r10 = M[r7 + 8];
0x0037A8        51900001                 M1 = Null + 1;
0x0037A9        51A00002                 M2 = Null + 2;
0x0037AA        01B00018                 r9 = Null + 24;
0x0037AB        5080610F                 M0 = Null + Null, r4 = M[I0,M1];
0x0037AC        D1290064                 r0 = M[r7 + 100];
0x0037AD        D1390063                 r1 = M[r7 + 99];
0x0037AE        03007400                 Null = Null + Null, r5 = M[I1,0];
0x0037AF        E5F00008                 do $M.audio_proc.vse.hc_process.hc_loop;
0x0037B0        CB52E700                 rMAC = r3 * r0 (SU), M[I1,-1] = r4;
0x0037B1        91110068                 rMAC = rMAC ASHIFT -24 (56bit);
0x0037B2        AC17648F                 rMAC = rMAC + r5 * r6 (SS), r4 = M[I1,M0];
0x0037B3        AC16744F                 rMAC = rMAC + r4 * r2 (SS), r5 = M[I1,M0];
0x0037B4        AC15613F                 rMAC = rMAC + r3 * r1 (SS), r4 = M[I0,M1];
0x0037B5        9031000F                 r1 = rMAC ASHIFT Null;
0x0037B6        8C21B9BF                 r0 = rMAC LSHIFT r9, M[I2,M1] = r1;

 <$M.audio_proc.vse.hc_process.hc_loop>
0x0037B7        D5290064                 M[r7 + 100] = r0;
0x0037B8        D5390063                 M[r7 + 99] = r1;
0x0037B9        4420001F                 r0 = Null + I1;
0x0037BA        D5290012                 M[r7 + 18] = r0;
0x0037BB        F3000000                 push Null;
0x0037BC        F3B60000                 pop B1;
0x0037BD        51D00000                 L1 = Null + 0;
0x0037BE        DDF0DF0B                 jump $pop_rLink_and_rts;

 <$M.music_example_message.MultiChannelMainMute.func>
0x0037BF        F3D00000                 push rLink;
0x0037C0        5000005F                 I0 = Null + r3;
0x0037C1        095064CE                 r3 = Null + M[$M.multi_chan_output.channels_mute_en];
0x0037C2        8155000C                 r3 = r3 AND 0xc;
0x0037C3        E430002F                 r1 = Null + 1;
0x0037C4        03002100                 Null = Null + Null, r0 = M[I0,1];
0x0037C5        0002000F                 Null = r0 + Null;
0x0037C6        84550031                 if NE r3 = r3 OR r1;
0x0037C7        01300002                 r1 = Null + 2;
0x0037C8        03002100                 Null = Null + Null, r0 = M[I0,1];
0x0037C9        0002000F                 Null = r0 + Null;
0x0037CA        84550031                 if NE r3 = r3 OR r1;
0x0037CB        01300010                 r1 = Null + 16;
0x0037CC        03002100                 Null = Null + Null, r0 = M[I0,1];
0x0037CD        0002000F                 Null = r0 + Null;
0x0037CE        84550031                 if NE r3 = r3 OR r1;
0x0037CF        01300020                 r1 = Null + 32;
0x0037D0        03002100                 Null = Null + Null, r0 = M[I0,1];
0x0037D1        0002000F                 Null = r0 + Null;
0x0037D2        84550031                 if NE r3 = r3 OR r1;
0x0037D3        01300040                 r1 = Null + 64;
0x0037D4        03002100                 Null = Null + Null, r0 = M[I0,1];
0x0037D5        0002000F                 Null = r0 + Null;
0x0037D6        84550031                 if NE r3 = r3 OR r1;
0x0037D7        F3500000                 push r3;
0x0037D8        E1F0FC76                 call $multi_chan_soft_mute;
0x0037D9        F3540000                 pop r3;
0x0037DA        E420002F                 r0 = Null + 1;
0x0037DB        E430003F                 r1 = Null - 1;
0x0037DC        81050040                 Null = r3 AND 0x40;
0x0037DD        00320000                 if EQ r1 = r0 + Null;
0x0037DE        193094B9                 M[$M.downsample_sub_to_1k2.mute_direction] = r1 + Null;
0x0037DF        DDF0DEEA                 jump $pop_rLink_and_rts;

 <$audio_proc.vse.limiter.initialize>
0x0037E0        F3D00000                 push rLink;
0x0037E1        D12A0003                 r0 = M[r8 + 3];

 <$M.audio_proc.vse.limiter.initialize.rate_44k_check>
0x0037E2        FD000000 2102AC44        Null = r0 - 44100;
0x0037E4        DD10000A                 if NE jump $M.audio_proc.vse.limiter.initialize.rate_non_44k;
0x0037E5        FD00007F 0130ED91        r1 = Null + 8383889;
0x0037E7        FD000000 0140F44A        r2 = Null + 62538;
0x0037E9        FD000063 0150578F        r3 = Null + 6510479;
0x0037EB        FD000001 0160E6C1        r4 = Null + 124609;
0x0037ED        DDF00009                 jump $M.audio_proc.vse.limiter.initialize.rate_set;

 <$M.audio_proc.vse.limiter.initialize.rate_non_44k>
0x0037EE        FD00007F 0130EDE0        r1 = Null + 8383968;
0x0037F0        FD000000 0140F4D7        r2 = Null + 62679;
0x0037F2        FD000063 01507079        r3 = Null + 6516857;
0x0037F4        FD000001 0160E7DA        r4 = Null + 124890;

 <$M.audio_proc.vse.limiter.initialize.rate_set>
0x0037F6        D53A0015                 M[r8 + 21] = r1;
0x0037F7        D54A0016                 M[r8 + 22] = r2;
0x0037F8        D55A0017                 M[r8 + 23] = r3;
0x0037F9        D56A0018                 M[r8 + 24] = r4;
0x0037FA        01308071                 r1 = Null + -32655;
0x0037FB        D53A0019                 M[r8 + 25] = r1;
0x0037FC        FD00007F 0130FFFF        r1 = Null + 8388607;
0x0037FE        D53A001A                 M[r8 + 26] = r1;
0x0037FF        01300000                 r1 = Null + 0;
0x003800        D53A001C                 M[r8 + 28] = r1;
0x003801        DDF0DEC8                 jump $pop_rLink_and_rts;

 <$audio_proc.dbe.ntp_process>
0x003802        F3D00000                 push rLink;
0x003803        0009000F                 Null = r7 + Null;
0x003804        DD100009                 if NE jump $M.audio_proc.dbe.ntp_process.ntp2_filter_setup;

 <$M.audio_proc.dbe.ntp_process.ntp1_filter_setup>
0x003805        D12A001C                 r0 = M[r8 + 28];
0x003806        5000002F                 I0 = Null + r0;
0x003807        D12A001F                 r0 = M[r8 + 31];
0x003808        5010002F                 I1 = Null + r0;
0x003809        D15A0028                 r3 = M[r8 + 40];
0x00380A        016A002B                 r4 = r8 + 43;
0x00380B        017A002A                 r5 = r8 + 42;
0x00380C        DDF00007                 jump $M.audio_proc.dbe.ntp_process.ntp_filter_process;

 <$M.audio_proc.dbe.ntp_process.ntp2_filter_setup>
0x00380D        D12A001F                 r0 = M[r8 + 31];
0x00380E        5000002F                 I0 = Null + r0;
0x00380F        5810000F                 I1 = I0 + Null;
0x003810        D15A002C                 r3 = M[r8 + 44];
0x003811        016A002F                 r4 = r8 + 47;
0x003812        017A002E                 r5 = r8 + 46;

 <$M.audio_proc.dbe.ntp_process.ntp_filter_process>
0x003813        D1CA0009                 r10 = M[r8 + 9];
0x003814        D12A000E                 r0 = M[r8 + 14];
0x003815        93C20000                 r10 = r10 ASHIFT r0;
0x003816        D18A0029                 r6 = M[r8 + 41];
0x003817        D027000F                 r0 = M[r5 + Null];
0x003818        D046000F                 r2 = M[r4 + Null];
0x003819        51900001                 M1 = Null + 1;
0x00381A        E5F00004                 do $M.audio_proc.dbe.ntp_process.ntp_loop;
0x00381B        CC15212F                 rMAC = r3 * r0 (SS), r0 = M[I0,M1];
0x00381C        AC18004F                 rMAC = rMAC + r6 * r2 (SS);
0x00381D        0041950F                 r2 = rMAC + Null, M[I1,M1] = rMAC;

 <$M.audio_proc.dbe.ntp_process.ntp_loop>
0x00381E        1864000F                 M[r4] = r2 + Null;
0x00381F        1872000F                 M[r5] = r0 + Null;
0x003820        DDF0DEA9                 jump $pop_rLink_and_rts;

 <$audio_proc.dbe.src_process_downsample2>
0x003821        F3D00000                 push rLink;
0x003822        D12A001E                 r0 = M[r8 + 30];
0x003823        5000002F                 I0 = Null + r0;
0x003824        012A005B                 r0 = r8 + 91;
0x003825        F3200000                 push r0;
0x003826        F3B60000                 pop B1;
0x003827        D12A0012                 r0 = M[r8 + 18];
0x003828        5010002F                 I1 = Null + r0;
0x003829        51D00005                 L1 = Null + 5;
0x00382A        D1CA0009                 r10 = M[r8 + 9];
0x00382B        FD000020 01500000        r3 = Null + 2097152;
0x00382D        FD000060 01900000        r7 = Null + 6291456;
0x00382F        5190FFFE                 M1 = Null + -2;
0x003830        03002500                 Null = Null + Null, r0 = M[I1,1];
0x003831        03002500                 Null = Null + Null, r0 = M[I1,1];
0x003832        E5F00007                 do $M.audio_proc.dbe.src_process_downsample2.src_loop;
0x003833        CF253500                 rMAC = r0 * r3 (SS), r1 = M[I1,1];
0x003834        AF392500                 rMAC = rMAC + r1 * r7 (SS), r0 = M[I1,1];
0x003835        AF293500                 rMAC = rMAC + r0 * r7 (SS), r1 = M[I1,1];
0x003836        AF352100                 rMAC = rMAC + r1 * r3 (SS), r0 = M[I0,1];
0x003837        91110003                 rMAC = rMAC ASHIFT 3 (56bit);
0x003838        0300A591                 Null = Null + Null, M[I1,1] = r0, M[I4,1] = rMAC;

 <$M.audio_proc.dbe.src_process_downsample2.src_loop>
0x003839        02003500                 Null = Null + Null, r1 = M[I1,M1];
0x00383A        4430001F                 r1 = Null + I1;
0x00383B        D53A0012                 M[r8 + 18] = r1;
0x00383C        F3000000                 push Null;
0x00383D        F3B60000                 pop B1;
0x00383E        51D00000                 L1 = Null + 0;
0x00383F        DDF0DE8A                 jump $pop_rLink_and_rts;

 <$audio_proc.dbe.calc_DBENLgain_process>
0x003840        F3D00000                 push rLink;
0x003841        E47A004F                 r5 = ABS r8;
0x003842        D139004A                 r1 = M[r7 + 74];
0x003843        CC47003F                 r2 = r5 * r1 (SS);
0x003844        CC44003F                 r2 = r2 * r1 (SS);
0x003845        D1590015                 r3 = M[r7 + 21];
0x003846        CC15005F                 rMAC = r3 * r3 (SS);
0x003847        91510001                 r3 = rMAC ASHIFT 1;
0x003848        23450000                 r2 = r2 - r3;
0x003849        E440006F                 r2 = MAX Null;
0x00384A        91440003                 r2 = r2 ASHIFT 3;
0x00384B        23340000                 r1 = r1 - r2;
0x00384C        01330200                 r1 = r1 + 512;
0x00384D        E430006F                 r1 = MAX Null;
0x00384E        D539004A                 M[r7 + 74] = r1;
0x00384F        D539002C                 M[r7 + 44] = r1;
0x003850        D1090002                 Null = M[r7 + 2];
0x003851        DD00000C                 if EQ jump $M.audio_proc.dbe_calc_DBENLgain_process.mono_mode_dbenlgain;
0x003852        E47B004F                 r5 = ABS r9;
0x003853        D139004B                 r1 = M[r7 + 75];
0x003854        CC47003F                 r2 = r5 * r1 (SS);
0x003855        CC44003F                 r2 = r2 * r1 (SS);
0x003856        23450000                 r2 = r2 - r3;
0x003857        E440006F                 r2 = MAX Null;
0x003858        91440003                 r2 = r2 ASHIFT 3;
0x003859        23340000                 r1 = r1 - r2;
0x00385A        01330200                 r1 = r1 + 512;
0x00385B        E430006F                 r1 = MAX Null;
0x00385C        D539004B                 M[r7 + 75] = r1;

 <$M.audio_proc.dbe_calc_DBENLgain_process.mono_mode_dbenlgain>
0x00385D        DDF0DE6C                 jump $pop_rLink_and_rts;

 <$audio_proc.vse.sample_rate_index>
0x00385E        F3D00000                 push rLink;
0x00385F        21027D00                 Null = r0 - 32000;
0x003860        DD500003                 if POS jump $M.audio_proc.vse.sample_rate_index.sample_rate_32k_check;
0x003861        01300000                 r1 = Null + 0;
0x003862        DDF00018                 jump $M.audio_proc.vse.sample_rate_index.sample_rate_set;

 <$M.audio_proc.vse.sample_rate_index.sample_rate_32k_check>
0x003863        21027D00                 Null = r0 - 32000;
0x003864        DD100003                 if NE jump $M.audio_proc.vse.sample_rate_index.sample_rate_44k_check;
0x003865        01300000                 r1 = Null + 0;
0x003866        DDF00014                 jump $M.audio_proc.vse.sample_rate_index.sample_rate_set;

 <$M.audio_proc.vse.sample_rate_index.sample_rate_44k_check>
0x003867        FD000000 2102AC44        Null = r0 - 44100;
0x003869        DD100003                 if NE jump $M.audio_proc.vse.sample_rate_index.sample_rate_48k_check;
0x00386A        E430002F                 r1 = Null + 1;
0x00386B        DDF0000F                 jump $M.audio_proc.vse.sample_rate_index.sample_rate_set;

 <$M.audio_proc.vse.sample_rate_index.sample_rate_48k_check>
0x00386C        FD000000 2102BB80        Null = r0 - 48000;
0x00386E        DD100003                 if NE jump $M.audio_proc.vse.sample_rate_index.sample_rate_88k_check;
0x00386F        01300002                 r1 = Null + 2;
0x003870        DDF0000A                 jump $M.audio_proc.vse.sample_rate_index.sample_rate_set;

 <$M.audio_proc.vse.sample_rate_index.sample_rate_88k_check>
0x003871        FD000001 21025888        Null = r0 - 88200;
0x003873        DD100003                 if NE jump $M.audio_proc.vse.sample_rate_index.sample_rate_96k_check;
0x003874        01300003                 r1 = Null + 3;
0x003875        DDF00005                 jump $M.audio_proc.vse.sample_rate_index.sample_rate_set;

 <$M.audio_proc.vse.sample_rate_index.sample_rate_96k_check>
0x003876        FD000001 21027700        Null = r0 - 96000;
0x003878        E1100513                 if NE call $error;
0x003879        01300004                 r1 = Null + 4;

 <$M.audio_proc.vse.sample_rate_index.sample_rate_set>
0x00387A        DDF0DE4F                 jump $pop_rLink_and_rts;

 <$bass_plus_init_wrapper>
0x00387B        F3D00000                 push rLink;
0x00387C        F3A00000                 push r8;
0x00387D        00A9000F                 r8 = r7 + Null;
0x00387E        01208E36                 r0 = Null + -29130;
0x00387F        D52A001C                 M[r8 + 28] = r0;
0x003880        01208E42                 r0 = Null + -29118;
0x003881        D52A001D                 M[r8 + 29] = r0;
0x003882        01208E4E                 r0 = Null + -29106;
0x003883        D52A001E                 M[r8 + 30] = r0;
0x003884        01208E66                 r0 = Null + -29082;
0x003885        D52A001F                 M[r8 + 31] = r0;
0x003886        01208E72                 r0 = Null + -29070;
0x003887        D52A0020                 M[r8 + 32] = r0;
0x003888        E1F0E6A0                 call $audio_proc.dbe.initialize;
0x003889        F3A40000                 pop r8;
0x00388A        01205734                 r0 = Null + 22324;
0x00388B        D52A001C                 M[r8 + 28] = r0;
0x00388C        01205740                 r0 = Null + 22336;
0x00388D        D52A001D                 M[r8 + 29] = r0;
0x00388E        0120574C                 r0 = Null + 22348;
0x00388F        D52A001E                 M[r8 + 30] = r0;
0x003890        01205764                 r0 = Null + 22372;
0x003891        D52A001F                 M[r8 + 31] = r0;
0x003892        01205770                 r0 = Null + 22384;
0x003893        D52A0020                 M[r8 + 32] = r0;
0x003894        E1F0E694                 call $audio_proc.dbe.initialize;
0x003895        DDF0DE34                 jump $pop_rLink_and_rts;

 <$audio_proc.output_mixer.process>
0x003896        F3D00000                 push rLink;
0x003897        D1290007                 r0 = M[r7 + 7];
0x003898        5000002F                 I0 = Null + r0;
0x003899        00A9000F                 r8 = r7 + Null;
0x00389A        E1F0007F                 call $audio_proc.dbe.get_buffer_details;
0x00389B        58CE000F                 L0 = L4 + Null;
0x00389C        5850000F                 I5 = I0 + Null;
0x00389D        58FC000F                 L5 = L0 + Null;
0x00389E        D1290020                 r0 = M[r7 + 32];
0x00389F        5060002F                 I6 = Null + r0;
0x0038A0        D1290004                 r0 = M[r7 + 4];
0x0038A1        D1620007                 r4 = M[r0 + 7];
0x0038A2        FD000001 996647AE        r4 = r4 * 83886 (int);
0x0038A4        D1C90009                 r10 = M[r7 + 9];
0x0038A5        FD00007F 6586FFFF        r6 = 8388607 - r4;
0x0038A7        E5F00006                 do $M.audio_proc.output_mixer.process.mix_freq_loop;
0x0038A8        03002139                 Null = Null + Null, r0 = M[I0,1], r1 = M[I6,1];
0x0038A9        CC12006F                 rMAC = r0 * r4 (SS);
0x0038AA        AC13008F                 rMAC = rMAC + r1 * r6 (SS);
0x0038AB        91E10001                 rMAC = rMAC ASHIFT 1 (MI);
0x0038AC        03000095                 Null = Null + Null, M[I5,1] = rMAC;

 <$M.audio_proc.output_mixer.process.mix_freq_loop>
0x0038AD        51C00000                 L0 = Null + 0;
0x0038AE        51E00000                 L4 = Null + 0;
0x0038AF        51F00000                 L5 = Null + 0;
0x0038B0        DDF0DE19                 jump $pop_rLink_and_rts;

 <$M.music_example_message.SetPlugin.func>
0x0038B1        0900006F                 Null = Null + M[$app_config.io];
0x0038B2        DC0D0005                 if POS rts;
0x0038B3        1930006F                 M[$app_config.io] = r1 + Null;
0x0038B4        21030005                 Null = r1 - 5;
0x0038B5        DD100004                 if NE jump $M.music_example_message.SetPlugin.skip_usb;
0x0038B6        01200003                 r0 = Null + 3;
0x0038B7        013001FC                 r1 = Null + 508;
0x0038B8        DDF00011                 jump $M.music_example_message.SetPlugin.set_mm_codec_info;

 <$M.music_example_message.SetPlugin.skip_usb>
0x0038B9        21030008                 Null = r1 - 8;
0x0038BA        DD100004                 if NE jump $M.music_example_message.SetPlugin.skip_analogue;
0x0038BB        01200006                 r0 = Null + 6;
0x0038BC        013001FF                 r1 = Null + 511;
0x0038BD        DDF0000C                 jump $M.music_example_message.SetPlugin.set_mm_codec_info;

 <$M.music_example_message.SetPlugin.skip_analogue>
0x0038BE        2103000A                 Null = r1 - 10;
0x0038BF        DD100004                 if NE jump $M.music_example_message.SetPlugin.skip_i2s;
0x0038C0        01200009                 r0 = Null + 9;
0x0038C1        01300202                 r1 = Null + 514;
0x0038C2        DDF00007                 jump $M.music_example_message.SetPlugin.set_mm_codec_info;

 <$M.music_example_message.SetPlugin.skip_i2s>
0x0038C3        21030001                 Null = r1 - 1;
0x0038C4        DD100004                 if NE jump $M.music_example_message.SetPlugin.skip_sbc;
0x0038C5        01200000                 r0 = Null + 0;
0x0038C6        013001F9                 r1 = Null + 505;
0x0038C7        DDF00002                 jump $M.music_example_message.SetPlugin.set_mm_codec_info;

 <$M.music_example_message.SetPlugin.skip_sbc>
0x0038C8        DDF004C3                 jump $error;

 <$M.music_example_message.SetPlugin.set_mm_codec_info>
0x0038C9        19209486                 M[$codec_type] = r0 + Null;
0x0038CA        19306487                 M[$codec_config] = r1 + Null;
0x0038CB        DC0D000F                 rts;

 <$sbcdec.private.init_tables>
0x0038CC        F3D00000                 push rLink;
0x0038CD        094061C1                 r2 = Null + M[$flash.windowed_data16.address];
0x0038CE        D12B002E                 r0 = M[r9 + 46];
0x0038CF        5000002F                 I0 = Null + r0;
0x0038D0        01200000                 r0 = Null + 0;
0x0038D1        01300080                 r1 = Null + 128;
0x0038D2        E1F0D722                 call $flash.copy_to_dm_24;
0x0038D3        D12B002F                 r0 = M[r9 + 47];
0x0038D4        5000002F                 I0 = Null + r0;
0x0038D5        01200174                 r0 = Null + 372;
0x0038D6        01300020                 r1 = Null + 32;
0x0038D7        E1F0D71D                 call $flash.copy_to_dm_24;
0x0038D8        D12B0030                 r0 = M[r9 + 48];
0x0038D9        5000002F                 I0 = Null + r0;
0x0038DA        012001EE                 r0 = Null + 494;
0x0038DB        0130000F                 r1 = Null + 15;
0x0038DC        E1F0D718                 call $flash.copy_to_dm_24;
0x0038DD        D12B0031                 r0 = M[r9 + 49];
0x0038DE        5000002F                 I0 = Null + r0;
0x0038DF        012001D4                 r0 = Null + 468;
0x0038E0        01300011                 r1 = Null + 17;
0x0038E1        E1F0D713                 call $flash.copy_to_dm_24;
0x0038E2        DDF0DDE7                 jump $pop_rLink_and_rts;

 <$sbcdec.get1byte>
0x0038E3        01200008                 r0 = Null + 8;
0x0038E4        DDF00006                 jump $sbcdec.getbits;

 <$sbcdec.get4bits>
0x0038E5        01200004                 r0 = Null + 4;
0x0038E6        DDF00004                 jump $sbcdec.getbits;

 <$sbcdec.get2bits>
0x0038E7        01200002                 r0 = Null + 2;
0x0038E8        DDF00002                 jump $sbcdec.getbits;

 <$sbcdec.get1bit>
0x0038E9        E420002F                 r0 = Null + 1;

 <$sbcdec.getbits>
0x0038EA        D15B0031                 r3 = M[r9 + 49];
0x0038EB        D3520000                 r3 = M[r3 + r0];
0x0038EC        D14B003B                 r2 = M[r9 + 59];
0x0038ED        2042004F                 r2 = r0 - r2;
0x0038EE        DDC00007                 if GT jump $M.sbcdec.getbits.anotherword;
0x0038EF        03003000                 Null = Null + Null, r1 = M[I0,0];
0x0038F0        8F340000                 r1 = r1 LSHIFT r2;
0x0038F1        83350000                 r1 = r1 AND r3;
0x0038F2        2040004F                 r2 = Null - r2;
0x0038F3        D54B003B                 M[r9 + 59] = r2;
0x0038F4        DC0D000F                 rts;

 <$M.sbcdec.getbits.anotherword>
0x0038F5        03003100                 Null = Null + Null, r1 = M[I0,1];
0x0038F6        8F340000                 r1 = r1 LSHIFT r2;
0x0038F7        83355000                 r1 = r1 AND r3, r3 = M[I0,0];
0x0038F8        21440010                 r2 = r2 - 16;
0x0038F9        8F540000                 r3 = r3 LSHIFT r2;
0x0038FA        03350000                 r1 = r1 + r3;
0x0038FB        2040004F                 r2 = Null - r2;
0x0038FC        D54B003B                 M[r9 + 59] = r2;
0x0038FD        DC0D000F                 rts;

 <$sbcdec.joint_stereo_decode>
0x0038FE        D15B0014                 r3 = M[r9 + 20];
0x0038FF        5010005F                 I1 = Null + r3;
0x003900        D1CB0021                 r10 = M[r9 + 33];
0x003901        D15B001D                 r3 = M[r9 + 29];
0x003902        508000CF                 M0 = Null + r10;
0x003903        709000CF                 M1 = Null - r10;
0x003904        59A90001                 M2 = M1 + 1;
0x003905        51B00001                 M3 = Null + 1;
0x003906        FD000080 01600000        r4 = Null + -8388608;

 <$M.sbcdec.joint_stereo_decode.blk_loop>
0x003908        514B0026                 I4 = r9 + 38;
0x003909        E5F0000B                 do $M.sbcdec.joint_stereo_decode.sb_loop;
0x00390A        02002443                 Null = Null + Null, r0 = M[I1,M0], r2 = M[I4,M3];
0x00390B        0004350F                 Null = r2 + Null, r1 = M[I1,M1];
0x00390C        DD000006                 if EQ jump $M.sbcdec.joint_stereo_decode.not_joint;
0x00390D        0042003F                 r2 = r0 + r1;
0x00390E        9C440066                 if V r2 = r2 * r4 (int) (sat);
0x00390F        2032003F                 r1 = r0 - r1;
0x003910        9C330066                 if V r1 = r1 * r4 (int) (sat);
0x003911        0024000F                 r0 = r2 + Null;

 <$M.sbcdec.joint_stereo_decode.not_joint>
0x003912        0200A400                 Null = Null + Null, M[I1,M0] = r0;
0x003913        0200B600                 Null = Null + Null, M[I1,M2] = r1;

 <$M.sbcdec.joint_stereo_decode.sb_loop>
0x003914        D1CB0021                 r10 = M[r9 + 33];
0x003915        5B1C0000                 I1 = I1 + r10;
0x003916        E455003F                 r3 = r3 - 1;
0x003917        DD10FFF1                 if NE jump $M.sbcdec.joint_stereo_decode.blk_loop;
0x003918        DC0D000F                 rts;

 <$audio_proc.dbe.get_buffer_details>
0x003919        F3D00000                 push rLink;
0x00391A        D10A0005                 Null = M[r8 + 5];
0x00391B        DD10000A                 if NE jump $M.audio_proc.dbe.get_buffer_details.frame_buffer_details;
0x00391C        D12A0000                 r0 = M[r8 + 0];
0x00391D        E1F0DD69                 call $cbuffer.get_read_address_and_size;
0x00391E        0052000F                 r3 = r0 + Null;
0x00391F        50C0003F                 L0 = Null + r1;
0x003920        D12A0001                 r0 = M[r8 + 1];
0x003921        E1F0DD6A                 call $cbuffer.get_write_address_and_size;
0x003922        0062000F                 r4 = r0 + Null;
0x003923        50E0003F                 L4 = Null + r1;
0x003924        DDF00009                 jump $M.audio_proc.dbe.get_buffer_details.buffer_details_done;

 <$M.audio_proc.dbe.get_buffer_details.frame_buffer_details>
0x003925        D12A0001                 r0 = M[r8 + 1];
0x003926        E1F0DD75                 call $frmbuffer.get_buffer;
0x003927        0062000F                 r4 = r0 + Null;
0x003928        50E0003F                 L4 = Null + r1;
0x003929        D12A0000                 r0 = M[r8 + 0];
0x00392A        E1F0DD71                 call $frmbuffer.get_buffer;
0x00392B        0052000F                 r3 = r0 + Null;
0x00392C        50C0003F                 L0 = Null + r1;

 <$M.audio_proc.dbe.get_buffer_details.buffer_details_done>
0x00392D        DDF0DD9C                 jump $pop_rLink_and_rts;

 <$av_insert_silence>
0x00392E        F3D00000                 push rLink;
0x00392F        0026000F                 r0 = r4 + Null;
0x003930        E1F0DD27                 call $cbuffer.calc_amount_space;
0x003931        D035000F                 r1 = M[r3 + Null];
0x003932        00C3000F                 r10 = r1 + Null;
0x003933        200200CF                 Null = r0 - r10;
0x003934        00C20004                 if NEG r10 = r0 + Null;
0x003935        202300CF                 r0 = r1 - r10;
0x003936        1852000F                 M[r3] = r0 + Null;
0x003937        0026000F                 r0 = r4 + Null;
0x003938        E1F0DD53                 call $cbuffer.get_write_address_and_size;
0x003939        5000002F                 I0 = Null + r0;
0x00393A        50C0003F                 L0 = Null + r1;
0x00393B        01200000                 r0 = Null + 0;
0x00393C        E5F00002                 do $M.av_insert_silence.audio_fill_loop;
0x00393D        0300A100                 Null = Null + Null, M[I0,1] = r0;

 <$M.av_insert_silence.audio_fill_loop>
0x00393E        0026000F                 r0 = r4 + Null;
0x00393F        4430000F                 r1 = Null + I0;
0x003940        E1F0DD64                 call $cbuffer.set_write_address;
0x003941        51C00000                 L0 = Null + 0;
0x003942        DDF0DD87                 jump $pop_rLink_and_rts;

 <$M.music_example_message.MainVolume_s.func>
0x003943        01709249                 r5 = Null + -28087;
0x003944        5000007F                 I0 = Null + r5;
0x003945        0003000F                 Null = r1 + Null;
0x003946        DD100006                 if NE jump $M.music_example_message.MainVolume_s.skip_select0;
0x003947        0300C100                 Null = Null + Null, M[I0,1] = r2;
0x003948        0300D100                 Null = Null + Null, M[I0,1] = r3;
0x003949        0300E100                 Null = Null + Null, M[I0,1] = r4;
0x00394A        0057000F                 r3 = r5 + Null;
0x00394B        DDF0EAFD                 jump $M.music_example_message.MainVolume.func;

 <$M.music_example_message.MainVolume_s.skip_select0>
0x00394C        E403003F                 Null = r1 - 1;
0x00394D        DD100006                 if NE jump $M.music_example_message.MainVolume_s.skip_select1;
0x00394E        51800003                 M0 = Null + 3;
0x00394F        02002000                 Null = Null + Null, r0 = M[I0,M0];
0x003950        0300C100                 Null = Null + Null, M[I0,1] = r2;
0x003951        0300D100                 Null = Null + Null, M[I0,1] = r3;
0x003952        DDF00008                 jump $M.music_example_message.MainVolume_s.exit;

 <$M.music_example_message.MainVolume_s.skip_select1>
0x003953        21030002                 Null = r1 - 2;
0x003954        DD100006                 if NE jump $M.music_example_message.MainVolume_s.exit;
0x003955        51800005                 M0 = Null + 5;
0x003956        02002000                 Null = Null + Null, r0 = M[I0,M0];
0x003957        0300C100                 Null = Null + Null, M[I0,1] = r2;
0x003958        0300D100                 Null = Null + Null, M[I0,1] = r3;
0x003959        0300E100                 Null = Null + Null, M[I0,1] = r4;

 <$M.music_example_message.MainVolume_s.exit>
0x00395A        DC0D000F                 rts;

 <$enable_esco_subwoofer>
0x00395B        F3D00000                 push rLink;
0x00395C        193094BD                 M[$subwoofer.sco_offset] = r1 + Null;
0x00395D        01306407                 r1 = Null + 25607;
0x00395E        FD000000 01408019        r2 = Null + 32793;
0x003960        0150399D                 r3 = Null + 14749;
0x003961        E1F00398                 call $message.register_handler;
0x003962        013093EA                 r1 = Null + -27670;
0x003963        FD000000 01408015        r2 = Null + 32789;
0x003965        01503779                 r3 = Null + 14201;
0x003966        E1F00393                 call $message.register_handler;
0x003967        0130640B                 r1 = Null + 25611;
0x003968        FD000000 0140801C        r2 = Null + 32796;
0x00396A        015022C5                 r3 = Null + 8901;
0x00396B        E1F0038E                 call $message.register_handler;

 <$M.enable_esco_subwoofer.done>
0x00396C        DDF0DD5D                 jump $pop_rLink_and_rts;

 <$cbops.signal_detect_op.main>
0x00396D        F3D00000                 push rLink;
0x00396E        00BC000F                 r9 = r10 + Null;
0x00396F        D17A0000                 r5 = M[r8 + 0];
0x003970        D15A0001                 r3 = M[r8 + 1];
0x003971        514A0002                 I4 = r8 + 2;
0x003972        51E00000                 L4 = Null + 0;
0x003973        D1470002                 r2 = M[r5 + 2];

 <$M.cbops.signal_detect_op.main.channelLoop>
0x003974        00CB000F                 r10 = r9 + Null;
0x003975        03000021                 Null = Null + Null, r0 = M[I4,1];
0x003976        D038002F                 r1 = M[r6 + r0];
0x003977        5000003F                 I0 = Null + r1;
0x003978        D039002F                 r1 = M[r7 + r0];
0x003979        50C0003F                 L0 = Null + r1;
0x00397A        E5F00006                 do $M.cbops.signal_detect_op.main.sampleLoop;
0x00397B        03002100                 Null = Null + Null, r0 = M[I0,1];
0x00397C        0002000F                 Null = r0 + Null;
0x00397D        20200024                 if NEG r0 = Null - r0;
0x00397E        2004002F                 Null = r2 - r0;
0x00397F        00420004                 if NEG r2 = r0 + Null;

 <$M.cbops.signal_detect_op.main.sampleLoop>
0x003980        E455003F                 r3 = r3 - 1;
0x003981        DD10FFF3                 if NE jump $M.cbops.signal_detect_op.main.channelLoop;
0x003982        D5470002                 M[r5 + 2] = r2;
0x003983        51C00000                 L0 = Null + 0;
0x003984        DDF0DD45                 jump $pop_rLink_and_rts;

 <$audio_proc.dbe.tp2_process>
0x003985        F3D00000                 push rLink;
0x003986        D13A001D                 r1 = M[r8 + 29];
0x003987        5010003F                 I1 = Null + r1;
0x003988        D13A001F                 r1 = M[r8 + 31];
0x003989        5040003F                 I4 = Null + r1;
0x00398A        5804000F                 I0 = I4 + Null;
0x00398B        D1CA0009                 r10 = M[r8 + 9];
0x00398C        D16A000E                 r4 = M[r8 + 14];
0x00398D        93C60000                 r10 = r10 ASHIFT r4;
0x00398E        D15A0037                 r3 = M[r8 + 55];
0x00398F        D16A0038                 r4 = M[r8 + 56];
0x003990        D14A0039                 r2 = M[r8 + 57];
0x003991        D13A003A                 r1 = M[r8 + 58];
0x003992        51900001                 M1 = Null + 1;
0x003993        FD000080 01700000        r5 = Null + -8388608;
0x003995        E5F00005                 do $M.audio_proc.dbe.tp2_process.tp2_loop;
0x003996        CC16003F                 rMAC = r4 * r1 (SS);
0x003997        AC15254F                 rMAC = rMAC + r3 * r2 (SS), r0 = M[I1,M1];
0x003998        BF270041                 rMAC = rMAC - r0 * r5 (SS), r2 = M[I4,1];
0x003999        0031910F                 r1 = rMAC + Null, M[I0,M1] = rMAC;

 <$M.audio_proc.dbe.tp2_process.tp2_loop>
0x00399A        D54A0039                 M[r8 + 57] = r2;
0x00399B        D53A003A                 M[r8 + 58] = r1;
0x00399C        DDF0DD2D                 jump $pop_rLink_and_rts;

 <$bdaddr_message_handler>
0x00399D        F3D00000                 push rLink;
0x00399E        8D330078                 r1 = r1 LSHIFT -8;
0x00399F        193093F2                 M[$bdaddr_struc] = r1 + Null;
0x0039A0        194093F3                 M[0xff93f3] = r2 + Null;
0x0039A1        195093F4                 M[0xff93f4] = r3 + Null;
0x0039A2        196093F5                 M[0xff93f5] = r4 + Null;
0x0039A3        8540801B                 r2 = Null OR 0x801b;
0x0039A4        095093F2                 r3 = Null + M[$bdaddr_struc];
0x0039A5        096093F3                 r4 = Null + M[0xff93f3];
0x0039A6        097093F4                 r5 = Null + M[0xff93f4];
0x0039A7        098093F5                 r6 = Null + M[0xff93f5];
0x0039A8        E1F0DD00                 call $message.send;
0x0039A9        0130640F                 r1 = Null + 25615;
0x0039AA        FD000001 014086A0        r2 = Null + 100000;
0x0039AC        01503B87                 r3 = Null + 15239;
0x0039AD        E1F0DD0F                 call $timer.schedule_event_in;
0x0039AE        E430002F                 r1 = Null + 1;
0x0039AF        193064BD                 M[$subwoofer.running] = r1 + Null;
0x0039B0        DDF0DD19                 jump $pop_rLink_and_rts;

 <$audio_proc.dbe.gains_calc>
0x0039B1        F3D00000                 push rLink;
0x0039B2        F1000480                 pushm <r5, r8>;
0x0039B3        D15A0035                 r3 = M[r8 + 53];
0x0039B4        D5590036                 M[r7 + 54] = r3;
0x0039B5        D1290006                 r0 = M[r7 + 6];
0x0039B6        D3200000                 r0 = M[r0 + Null];
0x0039B7        CD221000                 r0 = r0 * 0.125 (SS);
0x0039B8        0082000F                 r6 = r0 + Null;
0x0039B9        D1090002                 Null = M[r7 + 2];
0x0039BA        DD000005                 if EQ jump $M.audio_proc.dbe.gains_calc.dbe_gains_calc;
0x0039BB        D13A0006                 r1 = M[r8 + 6];
0x0039BC        D3300000                 r1 = M[r1 + Null];
0x0039BD        CD331000                 r1 = r1 * 0.125 (SS);
0x0039BE        00B3000F                 r9 = r1 + Null;

 <$M.audio_proc.dbe.gains_calc.dbe_gains_calc>
0x0039BF        F3A00000                 push r8;
0x0039C0        00A8000F                 r8 = r6 + Null;
0x0039C1        E1F0FE7F                 call $audio_proc.dbe.calc_DBENLgain_process;
0x0039C2        F3740000                 pop r5;
0x0039C3        E1F0E993                 call $audio_proc.dbe.calc_DBEgain_process;
0x0039C4        F1040480                 popm <r5, r8>;
0x0039C5        DDF0DD04                 jump $pop_rLink_and_rts;

 <$audio_proc.vse.filter_process>
0x0039C6        F3D00000                 push rLink;
0x0039C7        51900001                 M1 = Null + 1;
0x0039C8        51A0FFFF                 M2 = Null + -1;
0x0039C9        02004D00                 Null = Null + Null, r2 = M[I3,M1];
0x0039CA        02003D00                 Null = Null + Null, r1 = M[I3,M1];
0x0039CB        00835D0F                 r6 = r1 + Null, r3 = M[I3,M1];
0x0039CC        D1C90008                 r10 = M[r7 + 8];
0x0039CD        01B00018                 r9 = Null + 24;
0x0039CE        02002900                 Null = Null + Null, r0 = M[I2,M1];
0x0039CF        02003900                 Null = Null + Null, r1 = M[I2,M1];
0x0039D0        03006800                 Null = Null + Null, r4 = M[I2,0];
0x0039D1        E5F00008                 do $M.audio_proc.vse.filter_process.filter_loop;
0x0039D2        C815002F                 rMAC = r3 * r0 (SU);
0x0039D3        91110068                 rMAC = rMAC ASHIFT -24 (56bit);
0x0039D4        AC16008F                 rMAC = rMAC + r4 * r6 (SS);
0x0039D5        AC15613F                 rMAC = rMAC + r3 * r1 (SS), r4 = M[I0,M1];
0x0039D6        AC16004F                 rMAC = rMAC + r4 * r2 (SS);
0x0039D7        9031000F                 r1 = rMAC ASHIFT Null;
0x0039D8        8C21B5BF                 r0 = rMAC LSHIFT r9, M[I1,M1] = r1;

 <$M.audio_proc.vse.filter_process.filter_loop>
0x0039D9        0200EA00                 Null = Null + Null, M[I2,M2] = r4;
0x0039DA        0200BA00                 Null = Null + Null, M[I2,M2] = r1;
0x0039DB        0300A800                 Null = Null + Null, M[I2,0] = r0;
0x0039DC        DDF0DCED                 jump $pop_rLink_and_rts;

 <$audio_proc.dbe.nhp_process>
0x0039DD        F3D00000                 push rLink;
0x0039DE        D12A001F                 r0 = M[r8 + 31];
0x0039DF        5000002F                 I0 = Null + r0;
0x0039E0        5810000F                 I1 = I0 + Null;
0x0039E1        51900001                 M1 = Null + 1;
0x0039E2        D1CA0009                 r10 = M[r8 + 9];
0x0039E3        D16A000E                 r4 = M[r8 + 14];
0x0039E4        93C60000                 r10 = r10 ASHIFT r4;
0x0039E5        D15A0030                 r3 = M[r8 + 48];
0x0039E6        95554000                 r3 = r3 * 0.5 (frac);
0x0039E7        D14A0032                 r2 = M[r8 + 50];
0x0039E8        D16A0031                 r4 = M[r8 + 49];
0x0039E9        E5F00007                 do $M.audio_proc.dbe.nhp_process.nhp_loop;
0x0039EA        CF542100                 rMAC = r3 * r2 (SS), r0 = M[I0,1];
0x0039EB        AC16002F                 rMAC = rMAC + r4 * r0 (SS);
0x0039EC        BC16006F                 rMAC = rMAC - r4 * r4 (SS);
0x0039ED        91E10001                 rMAC = rMAC ASHIFT 1 (MI);
0x0039EE        0062950F                 r4 = r0 + Null, M[I1,M1] = rMAC;
0x0039EF        0041000F                 r2 = rMAC + Null;

 <$M.audio_proc.dbe.nhp_process.nhp_loop>
0x0039F0        D52A0031                 M[r8 + 49] = r0;
0x0039F1        D54A0032                 M[r8 + 50] = r2;
0x0039F2        DDF0DCD7                 jump $pop_rLink_and_rts;

 <$sbc.private.init_tables_common>
0x0039F3        F3D00000                 push rLink;
0x0039F4        094061C1                 r2 = Null + M[$flash.windowed_data16.address];
0x0039F5        D12B0015                 r0 = M[r9 + 21];
0x0039F6        5000002F                 I0 = Null + r0;
0x0039F7        012000C0                 r0 = Null + 192;
0x0039F8        01300050                 r1 = Null + 80;
0x0039F9        E1F0D5FB                 call $flash.copy_to_dm_24;
0x0039FA        D12B0016                 r0 = M[r9 + 22];
0x0039FB        5000002F                 I0 = Null + r0;
0x0039FC        01200138                 r0 = Null + 312;
0x0039FD        01300028                 r1 = Null + 40;
0x0039FE        E1F0D5F6                 call $flash.copy_to_dm_24;
0x0039FF        D12B0017                 r0 = M[r9 + 23];
0x003A00        5000002F                 I0 = Null + r0;
0x003A01        012001A4                 r0 = Null + 420;
0x003A02        01300030                 r1 = Null + 48;
0x003A03        E1F0DB7D                 call $flash.copy_to_dm;
0x003A04        DDF0DCC5                 jump $pop_rLink_and_rts;

 <$audio_proc.dbe.mixer1_process>
0x003A05        F3D00000                 push rLink;
0x003A06        D12A001C                 r0 = M[r8 + 28];
0x003A07        5000002F                 I0 = Null + r0;
0x003A08        D12A001F                 r0 = M[r8 + 31];
0x003A09        5040002F                 I4 = Null + r0;
0x003A0A        5854000F                 I5 = I4 + Null;
0x003A0B        D16A0019                 r4 = M[r8 + 25];
0x003A0C        FD00007F 6576FFFF        r5 = 8388607 - r4;
0x003A0E        D1CA0009                 r10 = M[r8 + 9];
0x003A0F        D12A000E                 r0 = M[r8 + 14];
0x003A10        93C20000                 r10 = r10 ASHIFT r0;
0x003A11        D12A0047                 r0 = M[r8 + 71];
0x003A12        D13A0048                 r1 = M[r8 + 72];
0x003A13        E5F00004                 do $M.audio_proc.dbe.mixer1_process.mixer1_loop;
0x003A14        CC17002F                 rMAC = r5 * r0 (SS);
0x003A15        AF630031                 rMAC = rMAC + r4 * r1 (SS), r1 = M[I4,1];
0x003A16        03002195                 Null = Null + Null, r0 = M[I0,1], M[I5,1] = rMAC;

 <$M.audio_proc.dbe.mixer1_process.mixer1_loop>
0x003A17        D52A0047                 M[r8 + 71] = r0;
0x003A18        D53A0048                 M[r8 + 72] = r1;
0x003A19        DDF0DCB0                 jump $pop_rLink_and_rts;

 <$conn_init_cbuffers>
0x003A1A        F3D00000                 push rLink;
0x003A1B        F3200000                 push r0;
0x003A1C        012000AD                 r0 = Null + 173;
0x003A1D        01304800                 r1 = Null + 18432;
0x003A1E        0045000F                 r2 = r3 + Null;
0x003A1F        E1F0DC96                 call $cbuffer.buffer_configure;
0x003A20        0120941A                 r0 = Null + -27622;
0x003A21        01308000                 r1 = Null + -32768;
0x003A22        0045000F                 r2 = r3 + Null;
0x003A23        E1F0DC92                 call $cbuffer.buffer_configure;
0x003A24        FD0000FF 01204BFD        r0 = Null + -46083;
0x003A26        01301000                 r1 = Null + 4096;
0x003A27        0046000F                 r2 = r4 + Null;
0x003A28        E1F0DC8D                 call $cbuffer.buffer_configure;
0x003A29        F3240000                 pop r0;
0x003A2A        DDF0DC9F                 jump $pop_rLink_and_rts;

 <$M.check_aux_out.process>
0x003A2B        F3D00000                 push rLink;
0x003A2C        D009000F                 Null = M[r7 + Null];
0x003A2D        DD00000D                 if EQ jump $M.check_aux_out.done;
0x003A2E        D00A000F                 Null = M[r8 + Null];
0x003A2F        DD000005                 if EQ jump $M.check_aux_out.stereo_copy;
0x003A30        019092ED                 r7 = Null + -27923;
0x003A31        01A00000                 r8 = Null + 0;
0x003A32        E1F0D8A5                 call $M.audio_proc.stream_mixer.Process.func;
0x003A33        DDF00004                 jump $M.check_aux_out.apply_vol;

 <$M.check_aux_out.stereo_copy>
0x003A34        019093E2                 r7 = Null + -27678;
0x003A35        01A00000                 r8 = Null + 0;
0x003A36        E1F0D820                 call $M.audio_proc.stereo_copy.Process.func;

 <$M.check_aux_out.apply_vol>
0x003A37        019057E9                 r7 = Null + 22505;
0x003A38        01A00000                 r8 = Null + 0;
0x003A39        E1F0CA8C                 call $volume_and_limit.apply_volume;

 <$M.check_aux_out.done>
0x003A3A        DDF0DC8F                 jump $pop_rLink_and_rts;

 <$sbcdec.read_audio_samples>
0x003A3B        F3D00000                 push rLink;
0x003A3C        D17B0014                 r5 = M[r9 + 20];
0x003A3D        5010007F                 I1 = Null + r5;
0x003A3E        D16B001D                 r4 = M[r9 + 29];

 <$M.sbcdec.read_audio_samples.blk_loop>
0x003A3F        D17B001F                 r5 = M[r9 + 31];
0x003A40        D1CB001B                 r10 = M[r9 + 27];
0x003A41        502000CF                 I2 = Null + r10;

 <$M.sbcdec.read_audio_samples.ch_loop>
0x003A42        D1CB0021                 r10 = M[r9 + 33];
0x003A43        E5F00005                 do $M.sbcdec.read_audio_samples.sb_loop;
0x003A44        23332900                 r1 = r1 - r1, r0 = M[I2,1];
0x003A45        0002000F                 Null = r0 + Null;
0x003A46        E110FEA4                 if NE call $sbcdec.getbits;
0x003A47        0300B500                 Null = Null + Null, M[I1,1] = r1;

 <$M.sbcdec.read_audio_samples.sb_loop>
0x003A48        E477003F                 r5 = r5 - 1;
0x003A49        DD10FFF9                 if NE jump $M.sbcdec.read_audio_samples.ch_loop;
0x003A4A        E466003F                 r4 = r4 - 1;
0x003A4B        DD10FFF4                 if NE jump $M.sbcdec.read_audio_samples.blk_loop;
0x003A4C        DDF0DC7D                 jump $pop_rLink_and_rts;

 <$M.music_example_message.SetOutputDevType_s.func>
0x003A4D        01706293                 r5 = Null + 25235;
0x003A4E        5000007F                 I0 = Null + r5;
0x003A4F        812300FF                 r0 = r1 AND 0xff;
0x003A50        0300A100                 Null = Null + Null, M[I0,1] = r0;
0x003A51        8D230078                 r0 = r1 LSHIFT -8;
0x003A52        0300A100                 Null = Null + Null, M[I0,1] = r0;
0x003A53        812400FF                 r0 = r2 AND 0xff;
0x003A54        0300A100                 Null = Null + Null, M[I0,1] = r0;
0x003A55        8D240078                 r0 = r2 LSHIFT -8;
0x003A56        0300A100                 Null = Null + Null, M[I0,1] = r0;
0x003A57        812500FF                 r0 = r3 AND 0xff;
0x003A58        0300A100                 Null = Null + Null, M[I0,1] = r0;
0x003A59        812600FF                 r0 = r4 AND 0xff;
0x003A5A        0300A100                 Null = Null + Null, M[I0,1] = r0;
0x003A5B        8D260078                 r0 = r4 LSHIFT -8;
0x003A5C        0300A100                 Null = Null + Null, M[I0,1] = r0;
0x003A5D        0057000F                 r3 = r5 + Null;
0x003A5E        DDF00162                 jump $M.music_example_message.SetOutputDevType.func;

 <$M.music_example_message.SoftMute.func>
0x003A5F        F3D00000                 push rLink;
0x003A60        0043000F                 r2 = r1 + Null;
0x003A61        81330001                 r1 = r1 AND 0x1;
0x003A62        0150007F                 r3 = Null + 127;
0x003A63        0003000F                 Null = r1 + Null;
0x003A64        00500000                 if EQ r3 = Null + Null;
0x003A65        F3400000                 push r2;
0x003A66        E1F0F9E8                 call $multi_chan_soft_mute;
0x003A67        F3440000                 pop r2;
0x003A68        8D34007F                 r1 = r2 LSHIFT -1;
0x003A69        81330001                 r1 = r1 AND 0x1;
0x003A6A        E420002F                 r0 = Null + 1;
0x003A6B        2030003F                 r1 = Null - r1;
0x003A6C        0003000F                 Null = r1 + Null;
0x003A6D        00320000                 if EQ r1 = r0 + Null;
0x003A6E        193094B9                 M[$M.downsample_sub_to_1k2.mute_direction] = r1 + Null;
0x003A6F        DDF0DC5A                 jump $pop_rLink_and_rts;

 <$M.music_example_message.SetUserEqParamMsg.func>
0x003A70        F3D00000                 push rLink;
0x003A71        0023000F                 r0 = r1 + Null;
0x003A72        019092E1                 r7 = Null + -27935;
0x003A73        E1F0F620                 call $user_eq.calcParamAddrOffset;
0x003A74        01224E23                 r0 = r0 + 20003;
0x003A75        8144FFFF                 r2 = r2 AND 0xffff;
0x003A76        1824000F                 M[r0] = r2 + Null;
0x003A77        21050000                 Null = r3 - 0;
0x003A78        DD00DC51                 if EQ jump $pop_rLink_and_rts;
0x003A79        0023000F                 r0 = r1 + Null;
0x003A7A        01309022                 r1 = Null + -28638;
0x003A7B        0140609D                 r2 = Null + 24733;
0x003A7C        01504E23                 r3 = Null + 20003;
0x003A7D        E1F0F5EC                 call $user_eq.calcBandCoefs;
0x003A7E        DDF0DC4B                 jump $pop_rLink_and_rts;

 <$M.music_example_message.GetUserEqGroupParamMsg.func>
0x003A7F        F3D00000                 push rLink;
0x003A80        5000005F                 I0 = Null + r3;
0x003A81        03003100                 Null = Null + Null, r1 = M[I0,1];
0x003A82        019092E1                 r7 = Null + -27935;
0x003A83        00C3000F                 r10 = r1 + Null;
0x003A84        E5F00006                 do $M.music_example_message.GetUserEqGroupParamMsg.GetParamsLoop;
0x003A85        03002100                 Null = Null + Null, r0 = M[I0,1];
0x003A86        E1F0F60D                 call $user_eq.calcParamAddrOffset;
0x003A87        01224E23                 r0 = r0 + 20003;
0x003A88        D3200000                 r0 = M[r0 + Null];
0x003A89        0300A100                 Null = Null + Null, M[I0,1] = r0;

 <$M.music_example_message.GetUserEqGroupParamMsg.GetParamsLoop>
0x003A8A        0075000F                 r5 = r3 + Null;
0x003A8B        0064000F                 r4 = r2 + Null;
0x003A8C        0150329B                 r3 = Null + 12955;
0x003A8D        E1F0D6CC                 call $message.send_long;
0x003A8E        DDF0DC3B                 jump $pop_rLink_and_rts;

 <$sbc.calc_frame_length>
0x003A8F        D12B0021                 r0 = M[r9 + 33];
0x003A90        D13B001F                 r1 = M[r9 + 31];
0x003A91        9862003F                 r4 = r0 * r1 (int);
0x003A92        8D66007F                 r4 = r4 LSHIFT -1;
0x003A93        01660005                 r4 = r4 + 5;
0x003A94        D14B001D                 r2 = M[r9 + 29];
0x003A95        D15B0022                 r3 = M[r9 + 34];
0x003A96        9854005F                 r3 = r2 * r3 (int);
0x003A97        D14B001E                 r2 = M[r9 + 30];
0x003A98        21440002                 r2 = r2 - 2;
0x003A99        DD400004                 if NEG jump $M.sbc.calc_frame_length.mono_or_dual_chan;

 <$M.sbc.calc_frame_length.stereo_or_jointstereo>
0x003A9A        9B420000                 r2 = r2 * r0 (int);
0x003A9B        03540000                 r3 = r3 + r2;
0x003A9C        DDF00002                 jump $M.sbc.calc_frame_length.finish_frame_length_calc;

 <$M.sbc.calc_frame_length.mono_or_dual_chan>
0x003A9D        9B530000                 r3 = r3 * r1 (int);

 <$M.sbc.calc_frame_length.finish_frame_length_calc>
0x003A9E        E455003F                 r3 = r3 - 1;
0x003A9F        8D55007D                 r3 = r3 LSHIFT -3;
0x003AA0        0026005F                 r0 = r4 + r3;
0x003AA1        DC0D000F                 rts;

 <$audio_proc.dbe.tp1_process>
0x003AA2        F3D00000                 push rLink;
0x003AA3        D13A001F                 r1 = M[r8 + 31];
0x003AA4        5010003F                 I1 = Null + r1;
0x003AA5        5831000F                 I3 = I1 + Null;
0x003AA6        D1CA0009                 r10 = M[r8 + 9];
0x003AA7        D16A000E                 r4 = M[r8 + 14];
0x003AA8        93C60000                 r10 = r10 ASHIFT r4;

 <$M.audio_proc.dbe.tp1_process.hist_ptr_loaded>
0x003AA9        D13A0035                 r1 = M[r8 + 53];
0x003AAA        D15A0033                 r3 = M[r8 + 51];
0x003AAB        D16A0034                 r4 = M[r8 + 52];
0x003AAC        51900001                 M1 = Null + 1;
0x003AAD        E5F00005                 do $M.audio_proc.dbe.tp1_process.tp1_loop;
0x003AAE        CC16453F                 rMAC = r4 * r1 (SS), r2 = M[I1,M1];
0x003AAF        BC15004F                 rMAC = rMAC - r3 * r2 (SS);
0x003AB0        BC15004F                 rMAC = rMAC - r3 * r2 (SS);
0x003AB1        00319D0F                 r1 = rMAC + Null, M[I3,M1] = rMAC;

 <$M.audio_proc.dbe.tp1_process.tp1_loop>
0x003AB2        D53A0035                 M[r8 + 53] = r1;
0x003AB3        DDF0DC16                 jump $pop_rLink_and_rts;

 <$audio_proc.sigdetect.process>
0x003AB4        F3D00000                 push rLink;
0x003AB5        00A9000F                 r8 = r7 + Null;
0x003AB6        E1F0FE63                 call $audio_proc.dbe.get_buffer_details;
0x003AB7        5000005F                 I0 = Null + r3;
0x003AB8        D1C90009                 r10 = M[r7 + 9];
0x003AB9        D119001A                 rMAC = M[r7 + 26];
0x003ABA        0150015E                 r3 = Null + 350;
0x003ABB        FD00007F 0160FEA2        r4 = Null + 8388258;
0x003ABD        03002100                 Null = Null + Null, r0 = M[I0,1];
0x003ABE        E5F00004                 do $M.audio_proc.sigdetect.process.signal_detect_loop;
0x003ABF        CC11006F                 rMAC = rMAC * r4 (SS);
0x003AC0        E422004F                 r0 = ABS r0;
0x003AC1        AF252100                 rMAC = rMAC + r0 * r3 (SS), r0 = M[I0,1];

 <$M.audio_proc.sigdetect.process.signal_detect_loop>
0x003AC2        D519001A                 M[r7 + 26] = rMAC;
0x003AC3        51C00000                 L0 = Null + 0;
0x003AC4        F3D40000                 pop rLink;
0x003AC5        DC0D000F                 rts;

 <$audio_proc.vse.speaker_spacing_index>
0x003AC6        F3D00000                 push rLink;
0x003AC7        FD000006 21026666        Null = r0 - 419430;
0x003AC9        DD100003                 if NE jump $M.audio_proc.vse.speaker_spacing_index.spkr_space_10cm_check;
0x003ACA        01700000                 r5 = Null + 0;
0x003ACB        DDF0000C                 jump $M.audio_proc.vse.speaker_spacing_index.spkr_spacing_set;

 <$M.audio_proc.vse.speaker_spacing_index.spkr_space_10cm_check>
0x003ACC        FD00000C 2102CCCD        Null = r0 - 838861;
0x003ACE        DD100003                 if NE jump $M.audio_proc.vse.speaker_spacing_index.spkr_space_12cm_check;
0x003ACF        E470002F                 r5 = Null + 1;
0x003AD0        DDF00007                 jump $M.audio_proc.vse.speaker_spacing_index.spkr_spacing_set;

 <$M.audio_proc.vse.speaker_spacing_index.spkr_space_12cm_check>
0x003AD1        FD000013 21023333        Null = r0 - 1258291;
0x003AD3        DD100003                 if NE jump $M.audio_proc.vse.speaker_spacing_index.spkr_space_20cm_check;
0x003AD4        01700002                 r5 = Null + 2;
0x003AD5        DDF00002                 jump $M.audio_proc.vse.speaker_spacing_index.spkr_spacing_set;

 <$M.audio_proc.vse.speaker_spacing_index.spkr_space_20cm_check>
0x003AD6        01700003                 r5 = Null + 3;

 <$M.audio_proc.vse.speaker_spacing_index.spkr_spacing_set>
0x003AD7        DDF0DBF2                 jump $pop_rLink_and_rts;

 <$audio_proc.vse.xtc_dcb_filters>
0x003AD8        F3D00000                 push rLink;
0x003AD9        D129000B                 r0 = M[r7 + 11];
0x003ADA        5030002F                 I3 = Null + r0;
0x003ADB        51290068                 I2 = r7 + 104;
0x003ADC        D1290082                 r0 = M[r7 + 130];
0x003ADD        5000002F                 I0 = Null + r0;
0x003ADE        5810000F                 I1 = I0 + Null;
0x003ADF        E1F0FEE7                 call $audio_proc.vse.filter_process;
0x003AE0        D129000D                 r0 = M[r7 + 13];
0x003AE1        5030002F                 I3 = Null + r0;
0x003AE2        51290065                 I2 = r7 + 101;
0x003AE3        D1290082                 r0 = M[r7 + 130];
0x003AE4        5000002F                 I0 = Null + r0;
0x003AE5        5810000F                 I1 = I0 + Null;
0x003AE6        E1F0FEE0                 call $audio_proc.vse.filter_process;
0x003AE7        DDF0DBE2                 jump $pop_rLink_and_rts;

 <$audio_proc.vse.peak_lsf_filters>
0x003AE8        F3D00000                 push rLink;
0x003AE9        D1290082                 r0 = M[r7 + 130];
0x003AEA        5000002F                 I0 = Null + r0;
0x003AEB        5050002F                 I5 = Null + r0;
0x003AEC        D1290010                 r0 = M[r7 + 16];
0x003AED        5030002F                 I3 = Null + r0;
0x003AEE        01700000                 r5 = Null + 0;
0x003AEF        E1F0EAB2                 call $audio_proc.vse.filter2_process;
0x003AF0        D1290082                 r0 = M[r7 + 130];
0x003AF1        5000002F                 I0 = Null + r0;
0x003AF2        5050002F                 I5 = Null + r0;
0x003AF3        D129000F                 r0 = M[r7 + 15];
0x003AF4        5030002F                 I3 = Null + r0;
0x003AF5        E470002F                 r5 = Null + 1;
0x003AF6        E1F0EAAB                 call $audio_proc.vse.filter2_process;
0x003AF7        DDF0DBD2                 jump $pop_rLink_and_rts;

 <$audio_proc.vse.advance_pointers>
0x003AF8        F3D00000                 push rLink;
0x003AF9        D16A0008                 r4 = M[r8 + 8];
0x003AFA        5080006F                 M0 = Null + r4;
0x003AFB        E1F00115                 call $audio_proc.vse.get_input_buffer_details;
0x003AFC        D12A0005                 r0 = M[r8 + 5];
0x003AFD        5000002F                 I0 = Null + r0;
0x003AFE        02002000                 Null = Null + Null, r0 = M[I0,M0];
0x003AFF        4420000F                 r0 = Null + I0;
0x003B00        D52A0005                 M[r8 + 5] = r0;
0x003B01        E1F0011B                 call $audio_proc.vse.get_output_buffer_details;
0x003B02        D12A0006                 r0 = M[r8 + 6];
0x003B03        5000002F                 I0 = Null + r0;
0x003B04        02002000                 Null = Null + Null, r0 = M[I0,M0];
0x003B05        4420000F                 r0 = Null + I0;
0x003B06        D52A0006                 M[r8 + 6] = r0;
0x003B07        DDF0DBC2                 jump $pop_rLink_and_rts;

 <$M.music_example_message.MultiChannelMainMute_s.func>
0x003B08        0150923F                 r3 = Null + -28097;
0x003B09        5000005F                 I0 = Null + r3;
0x003B0A        81230001                 r0 = r1 AND 0x1;
0x003B0B        0300A100                 Null = Null + Null, M[I0,1] = r0;
0x003B0C        8D33007F                 r1 = r1 LSHIFT -1;
0x003B0D        81230001                 r0 = r1 AND 0x1;
0x003B0E        0300A100                 Null = Null + Null, M[I0,1] = r0;
0x003B0F        8D33007F                 r1 = r1 LSHIFT -1;
0x003B10        81230001                 r0 = r1 AND 0x1;
0x003B11        0300A100                 Null = Null + Null, M[I0,1] = r0;
0x003B12        8D33007F                 r1 = r1 LSHIFT -1;
0x003B13        81230001                 r0 = r1 AND 0x1;
0x003B14        0300A100                 Null = Null + Null, M[I0,1] = r0;
0x003B15        8D33007F                 r1 = r1 LSHIFT -1;
0x003B16        81230001                 r0 = r1 AND 0x1;
0x003B17        0300A100                 Null = Null + Null, M[I0,1] = r0;
0x003B18        DDF0FCA7                 jump $M.music_example_message.MultiChannelMainMute.func;

 <$M.music_example_message.SetConfig.func>
0x003B19        F3D00000                 push rLink;
0x003B1A        8144FFFF                 r2 = r2 AND 0xffff;
0x003B1B        8D330010                 r1 = r1 LSHIFT 16;
0x003B1C        87340000                 r1 = r1 OR r2;
0x003B1D        8166FFFF                 r4 = r4 AND 0xffff;
0x003B1E        8D550010                 r3 = r3 LSHIFT 16;
0x003B1F        87560000                 r3 = r3 OR r4;
0x003B20        09204DDC                 r0 = Null + M[$M.system_config.data.CurParams];
0x003B21        83530000                 r3 = r3 AND r1;
0x003B22        FD00000F 8933FFFF        r1 = r1 XOR 0xfffff;
0x003B24        83230000                 r0 = r0 AND r1;
0x003B25        87250000                 r0 = r0 OR r3;
0x003B26        19204DDC                 M[$M.system_config.data.CurParams] = r0 + Null;
0x003B27        E430002F                 r1 = Null + 1;
0x003B28        19306490                 M[$music_example.reinit] = r1 + Null;
0x003B29        DDF0DBA0                 jump $pop_rLink_and_rts;

 <$n3dv_init_wrapper>
0x003B2A        F3D00000                 push rLink;
0x003B2B        F3A00000                 push r8;
0x003B2C        00A9000F                 r8 = r7 + Null;
0x003B2D        01208B9F                 r0 = Null + -29793;
0x003B2E        D52A0082                 M[r8 + 130] = r0;
0x003B2F        01208BDB                 r0 = Null + -29733;
0x003B30        D52A0083                 M[r8 + 131] = r0;
0x003B31        E1F0E966                 call $audio_proc.vse.initialize;
0x003B32        F3A40000                 pop r8;
0x003B33        01200F81                 r0 = Null + 3969;
0x003B34        D52A0082                 M[r8 + 130] = r0;
0x003B35        01200FBD                 r0 = Null + 4029;
0x003B36        D52A0083                 M[r8 + 131] = r0;
0x003B37        E1F0E960                 call $audio_proc.vse.initialize;
0x003B38        DDF0DB91                 jump $pop_rLink_and_rts;

 <$audio_proc.dbe.advance_pointers>
0x003B39        F3D00000                 push rLink;
0x003B3A        00A9000F                 r8 = r7 + Null;
0x003B3B        E1F0FDDE                 call $audio_proc.dbe.get_buffer_details;
0x003B3C        D1690009                 r4 = M[r7 + 9];
0x003B3D        5080006F                 M0 = Null + r4;
0x003B3E        D1290006                 r0 = M[r7 + 6];
0x003B3F        5000002F                 I0 = Null + r0;
0x003B40        02002000                 Null = Null + Null, r0 = M[I0,M0];
0x003B41        4420000F                 r0 = Null + I0;
0x003B42        D5290006                 M[r7 + 6] = r0;
0x003B43        D1290007                 r0 = M[r7 + 7];
0x003B44        5040002F                 I4 = Null + r0;
0x003B45        02000020                 Null = Null + Null, r0 = M[I4,M0];
0x003B46        4420004F                 r0 = Null + I4;
0x003B47        D5290007                 M[r7 + 7] = r0;
0x003B48        DDF0DB81                 jump $pop_rLink_and_rts;

 <$audio_proc.vse.binaural_synthesis_filters>
0x003B49        F3D00000                 push rLink;
0x003B4A        D1290009                 r0 = M[r7 + 9];
0x003B4B        5030002F                 I3 = Null + r0;
0x003B4C        D1290082                 r0 = M[r7 + 130];
0x003B4D        5010002F                 I1 = Null + r0;
0x003B4E        5129001D                 I2 = r7 + 29;
0x003B4F        F3010000                 push I0;
0x003B50        E1F0FE76                 call $audio_proc.vse.filter_process;
0x003B51        F3050000                 pop I0;
0x003B52        D1290083                 r0 = M[r7 + 131];
0x003B53        5020002F                 I2 = Null + r0;
0x003B54        D129000A                 r0 = M[r7 + 10];
0x003B55        5030002F                 I3 = Null + r0;
0x003B56        E1F0FC45                 call $audio_proc.vse.hc_process;
0x003B57        DDF0DB72                 jump $pop_rLink_and_rts;

 <$M.music_example_message.AuxVolume_s.func>
0x003B58        017062A7                 r5 = Null + 25255;
0x003B59        5000007F                 I0 = Null + r5;
0x003B5A        0003000F                 Null = r1 + Null;
0x003B5B        DD100006                 if NE jump $M.music_example_message.AuxVolume_s.skip_select0;
0x003B5C        0300C100                 Null = Null + Null, M[I0,1] = r2;
0x003B5D        0300D100                 Null = Null + Null, M[I0,1] = r3;
0x003B5E        0300E100                 Null = Null + Null, M[I0,1] = r4;
0x003B5F        0057000F                 r3 = r5 + Null;
0x003B60        DDF0EADA                 jump $M.music_example_message.AuxVolume.func;

 <$M.music_example_message.AuxVolume_s.skip_select0>
0x003B61        E403003F                 Null = r1 - 1;
0x003B62        DD100005                 if NE jump $M.music_example_message.AuxVolume_s.skip_select1;
0x003B63        51800003                 M0 = Null + 3;
0x003B64        02002000                 Null = Null + Null, r0 = M[I0,M0];
0x003B65        0300C100                 Null = Null + Null, M[I0,1] = r2;
0x003B66        0300D100                 Null = Null + Null, M[I0,1] = r3;

 <$M.music_example_message.AuxVolume_s.skip_select1>
0x003B67        DC0D000F                 rts;

 <$config_usb>
0x003B68        01206160                 r0 = Null + 24928;
0x003B69        5000002F                 I0 = Null + r0;
0x003B6A        51800002                 M0 = Null + 2;
0x003B6B        09209481                 r0 = Null + M[$current_codec_sampling_rate];

 <$M.config_usb.rate_loop>
0x003B6C        03003100                 Null = Null + Null, r1 = M[I0,1];
0x003B6D        0003000F                 Null = r1 + Null;
0x003B6E        DD000005                 if EQ jump $M.config_usb.error;
0x003B6F        2003002F                 Null = r1 - r0;
0x003B70        DD000004                 if EQ jump $M.config_usb.done;
0x003B71        02003000                 Null = Null + Null, r1 = M[I0,M0];
0x003B72        DDF0FFFA                 jump $M.config_usb.rate_loop;

 <$M.config_usb.error>
0x003B73        51006161                 I0 = Null + 24929;

 <$M.config_usb.done>
0x003B74        03002100                 Null = Null + Null, r0 = M[I0,1];
0x003B75        D52A0003                 M[r8 + 3] = r0;
0x003B76        03002100                 Null = Null + Null, r0 = M[I0,1];
0x003B77        D52A0006                 M[r8 + 6] = r0;
0x003B78        DC0D000F                 rts;

 <$cbuffer_insert_silence>
0x003B79        F3D00000                 push rLink;
0x003B7A        0026000F                 r0 = r4 + Null;
0x003B7B        E1F0DB10                 call $cbuffer.get_write_address_and_size;
0x003B7C        5000002F                 I0 = Null + r0;
0x003B7D        50C0003F                 L0 = Null + r1;
0x003B7E        00C7000F                 r10 = r5 + Null;
0x003B7F        01200000                 r0 = Null + 0;
0x003B80        E5F00002                 do $M.cbuffer_insert_silence.audio_fill_loop;
0x003B81        0300A100                 Null = Null + Null, M[I0,1] = r0;

 <$M.cbuffer_insert_silence.audio_fill_loop>
0x003B82        0026000F                 r0 = r4 + Null;
0x003B83        4430000F                 r1 = Null + I0;
0x003B84        E1F0DB20                 call $cbuffer.set_write_address;
0x003B85        51C00000                 L0 = Null + 0;
0x003B86        DDF0DB43                 jump $pop_rLink_and_rts;

 <$wall_clock_timer_handler>
0x003B87        F3D00000                 push rLink;
0x003B88        8540801B                 r2 = Null OR 0x801b;
0x003B89        095093F2                 r3 = Null + M[$bdaddr_struc];
0x003B8A        096093F3                 r4 = Null + M[0xff93f3];
0x003B8B        097093F4                 r5 = Null + M[0xff93f4];
0x003B8C        098093F5                 r6 = Null + M[0xff93f5];
0x003B8D        E1F0DB1B                 call $message.send;
0x003B8E        0130640F                 r1 = Null + 25615;
0x003B8F        FD000001 014086A0        r2 = Null + 100000;
0x003B91        01503B87                 r3 = Null + 15239;
0x003B92        E1F0DB27                 call $timer.schedule_event_in_period;
0x003B93        195064BC                 M[$wall_clock_timer_id] = r3 + Null;
0x003B94        DDF0DB35                 jump $pop_rLink_and_rts;

 <$sbcdec.find_sync>
0x003B95        F3D00000                 push rLink;
0x003B96        E1F00112                 call $sbcdec.byte_align;
0x003B97        E5F00006                 do $M.sbcdec.find_sync.findsyncloop;
0x003B98        D18B003B                 r6 = M[r9 + 59];
0x003B99        5820000F                 I2 = I0 + Null;
0x003B9A        E1F0FD49                 call $sbcdec.get1byte;
0x003B9B        2103009C                 Null = r1 - 156;
0x003B9C        DD000003                 if EQ jump $M.sbcdec.find_sync.found_sync;

 <$M.sbcdec.find_sync.findsyncloop>
0x003B9D        01800063                 r6 = Null + 99;
0x003B9E        DDF0DB2B                 jump $pop_rLink_and_rts;

 <$M.sbcdec.find_sync.found_sync>
0x003B9F        5802000F                 I0 = I2 + Null;
0x003BA0        D58B003B                 M[r9 + 59] = r6;
0x003BA1        DDF0DB28                 jump $pop_rLink_and_rts;

 <$sbcdec.silence_decoder>
0x003BA2        D12B0032                 r0 = M[r9 + 50];
0x003BA3        D52B003C                 M[r9 + 60] = r0;
0x003BA4        D12B0032                 r0 = M[r9 + 50];
0x003BA5        5010002F                 I1 = Null + r0;
0x003BA6        01C000A0                 r10 = Null + 160;
0x003BA7        01200000                 r0 = Null + 0;
0x003BA8        E5F00002                 do $M.sbcdec.silence_decoder.ssf_init_loop1;
0x003BA9        0300A500                 Null = Null + Null, M[I1,1] = r0;

 <$M.sbcdec.silence_decoder.ssf_init_loop1>
0x003BAA        D12B0033                 r0 = M[r9 + 51];
0x003BAB        D52B003D                 M[r9 + 61] = r0;
0x003BAC        D12B0033                 r0 = M[r9 + 51];
0x003BAD        5010002F                 I1 = Null + r0;
0x003BAE        01C000A0                 r10 = Null + 160;
0x003BAF        01200000                 r0 = Null + 0;
0x003BB0        E5F00002                 do $M.sbcdec.silence_decoder.ssf_init_loop2;
0x003BB1        0300A500                 Null = Null + Null, M[I1,1] = r0;

 <$M.sbcdec.silence_decoder.ssf_init_loop2>
0x003BB2        DC0D000F                 rts;

 <$audio_proc.dbe.float_division>
0x003BB3        F3D00000                 push rLink;
0x003BB4        0028000F                 r0 = r6 + Null;
0x003BB5        E1F0E209                 call $kal_float_lib.int_to_float;
0x003BB6        0042000F                 r2 = r0 + Null;
0x003BB7        0053000F                 r3 = r1 + Null;
0x003BB8        0027000F                 r0 = r5 + Null;
0x003BB9        E1F0E205                 call $kal_float_lib.int_to_float;
0x003BBA        E1F0E25B                 call $kal_float_lib.div;
0x003BBB        812200FF                 r0 = r0 AND 0xff;
0x003BBC        2122007F                 r0 = r0 - 127;
0x003BBD        8D33007F                 r1 = r1 LSHIFT -1;
0x003BBE        9063002F                 r4 = r1 ASHIFT r0;
0x003BBF        DDF0DB0A                 jump $pop_rLink_and_rts;

 <$M.music_example_message.SetOutputDevType.func>
0x003BC0        5000005F                 I0 = Null + r3;
0x003BC1        03002100                 Null = Null + Null, r0 = M[I0,1];
0x003BC2        192092AA                 M[$M.multi_chan_output.wired_out_type_table] = r0 + Null;
0x003BC3        03002100                 Null = Null + Null, r0 = M[I0,1];
0x003BC4        192092AB                 M[0xff92ab] = r0 + Null;
0x003BC5        03002100                 Null = Null + Null, r0 = M[I0,1];
0x003BC6        192092AE                 M[0xff92ae] = r0 + Null;
0x003BC7        03002100                 Null = Null + Null, r0 = M[I0,1];
0x003BC8        192092AF                 M[0xff92af] = r0 + Null;
0x003BC9        03002100                 Null = Null + Null, r0 = M[I0,1];
0x003BCA        192092B0                 M[0xff92b0] = r0 + Null;
0x003BCB        03002100                 Null = Null + Null, r0 = M[I0,1];
0x003BCC        192092AC                 M[0xff92ac] = r0 + Null;
0x003BCD        03002100                 Null = Null + Null, r0 = M[I0,1];
0x003BCE        192092AD                 M[0xff92ad] = r0 + Null;
0x003BCF        DC0D000F                 rts;

 <$M.music_example_message.MultiChannelAuxMute.func>
0x003BD0        F3D00000                 push rLink;
0x003BD1        5000005F                 I0 = Null + r3;
0x003BD2        095064CE                 r3 = Null + M[$M.multi_chan_output.channels_mute_en];
0x003BD3        81550073                 r3 = r3 AND 0x73;
0x003BD4        01300004                 r1 = Null + 4;
0x003BD5        03002100                 Null = Null + Null, r0 = M[I0,1];
0x003BD6        0002000F                 Null = r0 + Null;
0x003BD7        84550031                 if NE r3 = r3 OR r1;
0x003BD8        01300008                 r1 = Null + 8;
0x003BD9        03002100                 Null = Null + Null, r0 = M[I0,1];
0x003BDA        0002000F                 Null = r0 + Null;
0x003BDB        84550031                 if NE r3 = r3 OR r1;
0x003BDC        E1F0F872                 call $multi_chan_soft_mute;
0x003BDD        DDF0DAEC                 jump $pop_rLink_and_rts;

 <$M.check_wired_subwoofer.process>
0x003BDE        F3D00000                 push rLink;
0x003BDF        D009000F                 Null = M[r7 + Null];
0x003BE0        DD000009                 if EQ jump $M.check_wired_subwoofer.done;
0x003BE1        FD0000FF 019036F5        r7 = Null + -51467;
0x003BE3        01A02000                 r8 = Null + 8192;
0x003BE4        E1F0F9DC                 call $music_example.peq.process;
0x003BE5        01A09063                 r8 = Null + -28573;
0x003BE6        E1F0CD8A                 call $cmpd100.analysis;
0x003BE7        01A09063                 r8 = Null + -28573;
0x003BE8        E1F0D042                 call $cmpd100.applygain;

 <$M.check_wired_subwoofer.done>
0x003BE9        DDF0DAE0                 jump $pop_rLink_and_rts;

 <$sbcdec.read_scale_factors>
0x003BEA        F3D00000                 push rLink;
0x003BEB        D18B001F                 r6 = M[r9 + 31];
0x003BEC        D19B0021                 r7 = M[r9 + 33];
0x003BED        9B890000                 r6 = r6 * r7 (int);
0x003BEE        D12B0018                 r0 = M[r9 + 24];
0x003BEF        5010002F                 I1 = Null + r0;
0x003BF0        51900001                 M1 = Null + 1;
0x003BF1        01200004                 r0 = Null + 4;

 <$M.sbcdec.read_scale_factors.loop>
0x003BF2        E1F0FCF8                 call $sbcdec.getbits;
0x003BF3        E1F0004A                 call $sbc.crc_calc;
0x003BF4        6689B500                 r6 = r6 - M1, M[I1,M1] = r1;
0x003BF5        DD10FFFD                 if NE jump $M.sbcdec.read_scale_factors.loop;
0x003BF6        DDF0DAD3                 jump $pop_rLink_and_rts;

 <$M.music_example_message.GetUserEqParamMsg.func>
0x003BF7        F3D00000                 push rLink;
0x003BF8        0053000F                 r3 = r1 + Null;
0x003BF9        0023000F                 r0 = r1 + Null;
0x003BFA        019092E1                 r7 = Null + -27935;
0x003BFB        E1F0F498                 call $user_eq.calcParamAddrOffset;
0x003BFC        01224E23                 r0 = r0 + 20003;
0x003BFD        D062000F                 r4 = M[r0 + Null];
0x003BFE        01700000                 r5 = Null + 0;
0x003BFF        01800000                 r6 = Null + 0;
0x003C00        0140329A                 r2 = Null + 12954;
0x003C01        E1F0D8CD                 call $message.send_short;
0x003C02        DDF0DAC7                 jump $pop_rLink_and_rts;

 <$M.music_example_message.SetUserEqGroupParamMsg.func>
0x003C03        F3D00000                 push rLink;
0x003C04        5000005F                 I0 = Null + r3;
0x003C05        03003100                 Null = Null + Null, r1 = M[I0,1];
0x003C06        019092E1                 r7 = Null + -27935;
0x003C07        00C3000F                 r10 = r1 + Null;
0x003C08        E5F00007                 do $M.music_example_message.SetUserEqGroupParamMsg.SetParamsLoop;
0x003C09        03002100                 Null = Null + Null, r0 = M[I0,1];
0x003C0A        E1F0F489                 call $user_eq.calcParamAddrOffset;
0x003C0B        01224E23                 r0 = r0 + 20003;
0x003C0C        03003100                 Null = Null + Null, r1 = M[I0,1];
0x003C0D        8133FFFF                 r1 = r1 AND 0xffff;
0x003C0E        1823000F                 M[r0] = r1 + Null;

 <$M.music_example_message.SetUserEqGroupParamMsg.SetParamsLoop>
0x003C0F        DDF0DABA                 jump $pop_rLink_and_rts;

 <$audio_proc.vse.get_input_buffer_details>
0x003C10        F3D00000                 push rLink;
0x003C11        D12A0000                 r0 = M[r8 + 0];
0x003C12        D10A0004                 Null = M[r8 + 4];
0x003C13        DD100005                 if NE jump $M.audio_proc.vse.get_input_buffer_details.input_frame_buffer_details;
0x003C14        E1F0DA72                 call $cbuffer.get_read_address_and_size;
0x003C15        0052000F                 r3 = r0 + Null;
0x003C16        50C0003F                 L0 = Null + r1;
0x003C17        DDF00004                 jump $M.audio_proc.vse.get_input_buffer_details.input_buffer_details_done;

 <$M.audio_proc.vse.get_input_buffer_details.input_frame_buffer_details>
0x003C18        E1F0DA83                 call $frmbuffer.get_buffer;
0x003C19        0052000F                 r3 = r0 + Null;
0x003C1A        50C0003F                 L0 = Null + r1;

 <$M.audio_proc.vse.get_input_buffer_details.input_buffer_details_done>
0x003C1B        DDF0DAAE                 jump $pop_rLink_and_rts;

 <$audio_proc.vse.get_output_buffer_details>
0x003C1C        F3D00000                 push rLink;
0x003C1D        D12A0001                 r0 = M[r8 + 1];
0x003C1E        D10A0004                 Null = M[r8 + 4];
0x003C1F        DD100005                 if NE jump $M.audio_proc.vse.get_output_cbuffer_details.output_frame_buffer_details;
0x003C20        E1F0DA6B                 call $cbuffer.get_write_address_and_size;
0x003C21        0052000F                 r3 = r0 + Null;
0x003C22        50C0003F                 L0 = Null + r1;
0x003C23        DDF00004                 jump $M.audio_proc.vse.get_output_cbuffer_details.output_buffer_details_done;

 <$M.audio_proc.vse.get_output_cbuffer_details.output_frame_buffer_details>
0x003C24        E1F0DA77                 call $frmbuffer.get_buffer;
0x003C25        0052000F                 r3 = r0 + Null;
0x003C26        50C0003F                 L0 = Null + r1;

 <$M.audio_proc.vse.get_output_cbuffer_details.output_buffer_details_done>
0x003C27        DDF0DAA2                 jump $pop_rLink_and_rts;

 <$bass_boost_process_wrapper>
0x003C28        F3D00000                 push rLink;
0x003C29        09304FBD                 r1 = Null + M[0x4fbd];
0x003C2A        81030001                 Null = r1 AND 0x1;
0x003C2B        DD000007                 if EQ jump $M.bass_boost_process_wrapper.exit;
0x003C2C        F3A00000                 push r8;
0x003C2D        01A00080                 r8 = Null + 128;
0x003C2E        E1F0F992                 call $music_example.peq.process;
0x003C2F        F3940000                 pop r7;
0x003C30        01A00080                 r8 = Null + 128;
0x003C31        E1F0F98F                 call $music_example.peq.process;

 <$M.bass_boost_process_wrapper.exit>
0x003C32        DDF0DA97                 jump $pop_rLink_and_rts;

 <$signal_detect_timer_handler>
0x003C33        F3D00000                 push rLink;
0x003C34        01A09305                 r8 = Null + -27899;
0x003C35        E1F0EC21                 call $cbops.signal_detect_op.timer_handler;
0x003C36        FD0000FF 01306FFC        r1 = Null + -36868;
0x003C38        FD00000F 01404240        r2 = Null + 1000000;
0x003C3A        01503C33                 r3 = Null + 15411;
0x003C3B        E1F0DA7E                 call $timer.schedule_event_in_period;
0x003C3C        DDF0DA8D                 jump $pop_rLink_and_rts;

 <$sbc.crc_calc>
0x003C3D        D14B0024                 r2 = M[r9 + 36];
0x003C3E        0170001D                 r5 = Null + 29;
0x003C3F        65520008                 r3 = 8 - r0;
0x003C40        00C2000F                 r10 = r0 + Null;
0x003C41        8C53005F                 r3 = r1 LSHIFT r3;
0x003C42        E5F00006                 do $M.sbc.crc_calc.crc_loop;
0x003C43        8865004F                 r4 = r3 XOR r2;
0x003C44        8D440001                 r2 = r2 LSHIFT 1;
0x003C45        81660080                 r4 = r4 AND 0x80;
0x003C46        88440071                 if NE r2 = r2 XOR r5;
0x003C47        8D550001                 r3 = r3 LSHIFT 1;

 <$M.sbc.crc_calc.crc_loop>
0x003C48        D54B0024                 M[r9 + 36] = r2;
0x003C49        DC0D000F                 rts;

 <$av_audio_out_silence_insert>
0x003C4A        F3D00000                 push rLink;
0x003C4B        0150648D                 r3 = Null + 25741;
0x003C4C        016000AD                 r4 = Null + 173;
0x003C4D        E1F0FCE1                 call $av_insert_silence;
0x003C4E        0150948D                 r3 = Null + -27507;
0x003C4F        0160941A                 r4 = Null + -27622;
0x003C50        E1F0FCDE                 call $av_insert_silence;
0x003C51        DDF0DA78                 jump $pop_rLink_and_rts;

 <$audio_proc.dbe.gains_copy>
0x003C52        F3D00000                 push rLink;
0x003C53        D1290052                 r0 = M[r7 + 82];
0x003C54        D52A0052                 M[r8 + 82] = r0;
0x003C55        D1290033                 r0 = M[r7 + 51];
0x003C56        D52A0033                 M[r8 + 51] = r0;
0x003C57        D129004B                 r0 = M[r7 + 75];
0x003C58        D52A004B                 M[r8 + 75] = r0;
0x003C59        D129002C                 r0 = M[r7 + 44];
0x003C5A        D52A002C                 M[r8 + 44] = r0;
0x003C5B        DDF0DA6E                 jump $pop_rLink_and_rts;

 <$sco_timer_handler>
0x003C5C        F3D00000                 push rLink;
0x003C5D        01401D4C                 r2 = Null + 7500;
0x003C5E        013093EE                 r1 = Null + -27666;
0x003C5F        01503C5C                 r3 = Null + 15452;
0x003C60        E1F0DA59                 call $timer.schedule_event_in_period;
0x003C61        195064B3                 M[$sco_timer_id] = r3 + Null;
0x003C62        1900649C                 M[$M.Sleep.sync_flag_esco] = Null + Null;
0x003C63        DDF0DA66                 jump $pop_rLink_and_rts;

 <$bass_plus_process_wrapper>
0x003C64        F3D00000                 push rLink;
0x003C65        09304FBD                 r1 = Null + M[0x4fbd];
0x003C66        81030002                 Null = r1 AND 0x2;
0x003C67        DD000004                 if EQ jump $M.bass_plus_process_wrapper.exit;
0x003C68        09204DDC                 r0 = Null + M[$M.system_config.data.CurParams];
0x003C69        81020080                 Null = r0 AND 0x80;
0x003C6A        E100EA30                 if EQ call $M.audio_proc.dbe.process.set_buffer_left_data_object;

 <$M.bass_plus_process_wrapper.exit>
0x003C6B        DDF0DA5E                 jump $pop_rLink_and_rts;

 <$n3dv_process_wrapper>
0x003C6C        F3D00000                 push rLink;
0x003C6D        09304FC6                 r1 = Null + M[0x4fc6];
0x003C6E        81030002                 Null = r1 AND 0x2;
0x003C6F        DD000004                 if EQ jump $M.n3dv_process_wrapper.exit;
0x003C70        09204DDC                 r0 = Null + M[$M.system_config.data.CurParams];
0x003C71        81020040                 Null = r0 AND 0x40;
0x003C72        E100EC4A                 if EQ call $M.audio_proc.vse.process.set_buffer_left_data_object;

 <$M.n3dv_process_wrapper.exit>
0x003C73        DDF0DA56                 jump $pop_rLink_and_rts;

 <$M.music_example_message.vmdB2vol>
0x003C74        FD000035 0130F5E3        r1 = Null + 3536355;
0x003C76        991200B5                 rMAC = r0 * 181 (int);
0x003C77        AC12003F                 rMAC = rMAC + r0 * r1 (SS);
0x003C78        FD000004 21210000        r0 = rMAC - 262144;
0x003C7A        00200005                 if POS r0 = Null + Null;
0x003C7B        DDF0D8E5                 jump $math.pow2_taylor;

 <$M.music_example_message.MultiChannelAuxMute_s.func>
0x003C7C        0150629D                 r3 = Null + 25245;
0x003C7D        5000005F                 I0 = Null + r3;
0x003C7E        81230001                 r0 = r1 AND 0x1;
0x003C7F        0300A100                 Null = Null + Null, M[I0,1] = r0;
0x003C80        8D33007F                 r1 = r1 LSHIFT -1;
0x003C81        81230001                 r0 = r1 AND 0x1;
0x003C82        0300A100                 Null = Null + Null, M[I0,1] = r0;
0x003C83        DDF0FF4D                 jump $M.music_example_message.MultiChannelAuxMute.func;

 <$usb_cond_buffer_reset>
0x003C84        F3D00000                 push rLink;
0x003C85        F3200000                 push r0;
0x003C86        090064A4                 Null = Null + M[$usb_reset_pending];
0x003C87        E110F844                 if NE call $master_app_reset;
0x003C88        190064A4                 M[$usb_reset_pending] = Null + Null;
0x003C89        F3240000                 pop r0;
0x003C8A        DDF0DA3F                 jump $pop_rLink_and_rts;

 <$melod_expansion_process_wrapper>
0x003C8B        F3D00000                 push rLink;
0x003C8C        09304FC6                 r1 = Null + M[0x4fc6];
0x003C8D        81030001                 Null = r1 AND 0x1;
0x003C8E        DD000002                 if EQ jump $M.melod_expansion_process_wrapper.exit;
0x003C8F        E1F0CC73                 call $MeloD_Expansion.process;

 <$M.melod_expansion_process_wrapper.exit>
0x003C90        DDF0DA39                 jump $pop_rLink_and_rts;

 <$sbcdec.reset_decoder>
0x003C91        F3D00000                 push rLink;
0x003C92        01200010                 r0 = Null + 16;
0x003C93        D1B70005                 r9 = M[r5 + 5];
0x003C94        D52B003B                 M[r9 + 59] = r0;
0x003C95        E1F0FF0D                 call $sbcdec.silence_decoder;
0x003C96        DDF0DA33                 jump $pop_rLink_and_rts;

 <$sbcdec.init_tables>
0x003C97        F3D00000                 push rLink;
0x003C98        D1B70005                 r9 = M[r5 + 5];
0x003C99        E1F0FC33                 call $sbcdec.private.init_tables;
0x003C9A        E1F0FD59                 call $sbc.private.init_tables_common;
0x003C9B        DDF0DA2E                 jump $pop_rLink_and_rts;

 <$M.music_example_message.SetANCMode.func>
0x003C9C        09406491                 r2 = Null + M[$music_example.config_raw];
0x003C9D        09209491                 r0 = Null + M[$music_example.config_anc];
0x003C9E        81330003                 r1 = r1 AND 0x3;
0x003C9F        1930648B                 M[$ancMode] = r1 + Null;
0x003CA0        00420001                 if NE r2 = r0 + Null;
0x003CA1        19400FFC                 M[$M.MUSIC_EXAMPLE_MODULES_STAMP.CompConfig] = r2 + Null;
0x003CA2        DC0D000F                 rts;

 <$M.music_example_message.SignalDetect.func>
0x003CA3        F3D00000                 push rLink;
0x003CA4        8D330008                 r1 = r1 LSHIFT 8;
0x003CA5        01A09305                 r8 = Null + -27899;
0x003CA6        E1F00012                 call $M.cbops.signal_detect_op.message_handler.func;
0x003CA7        DDF0DA22                 jump $pop_rLink_and_rts;

 <$sbcdec.byte_align>
0x003CA8        F3D00000                 push rLink;
0x003CA9        D12B003B                 r0 = M[r9 + 59];
0x003CAA        81220007                 r0 = r0 AND 0x7;
0x003CAB        E1F0FC3F                 call $sbcdec.getbits;
0x003CAC        DDF0DA1D                 jump $pop_rLink_and_rts;

 <$calc_us_per_sample_addr>
0x003CAD        0140007E                 r2 = Null + 126;
0x003CAE        0150007F                 r3 = Null + 127;
0x003CAF        FD000000 2102BB80        Null = r0 - 48000;
0x003CB1        00540001                 if NE r3 = r2 + Null;
0x003CB2        DC0D000F                 rts;

 <$av_audio_out_silence_prime>
0x003CB3        09209481                 r0 = Null + M[$current_codec_sampling_rate];
0x003CB4        9122007D                 r0 = r0 ASHIFT -3;
0x003CB5        1920648D                 M[$M.av_audio_out_silence_insert.left_zero_samples] = r0 + Null;
0x003CB6        1920948D                 M[$M.av_audio_out_silence_insert.right_zero_samples] = r0 + Null;
0x003CB7        DC0D000F                 rts;

 <$M.cbops.signal_detect_op.message_handler.func>
0x003CB8        F3D00000                 push rLink;
0x003CB9        D53A0000                 M[r8 + 0] = r1;
0x003CBA        D54A0001                 M[r8 + 1] = r2;
0x003CBB        DDF0DA0E                 jump $pop_rLink_and_rts;

 <$M.music_example_message.SetResolutionModes.func>
0x003CBC        19309489                 M[$inputResolutionMode] = r1 + Null;
0x003CBD        1940648A                 M[$procResolutionMode] = r2 + Null;
0x003CBE        1950948A                 M[$outputResolutionMode] = r3 + Null;
0x003CBF        DC0D000F                 rts;

 <$M.music_example_message.SetI2SMode.func>
0x003CC0        193094C9                 M[$M.multi_chan_output.i2s_slave0] = r1 + Null;
0x003CC1        DC0D000F                 rts;

 <$sbc.init_static_common>
0x003CC2        DC0D000F                 rts;

 <$spi_comm.polled_service_routine>
0x003CC3        FD000000 0120AAAA        r0 = Null + 43690;
0x003CC5        29020046                 Null = r0 - M[$M.spi_block.cmd_ready];
0x003CC6        DC0D0001                 if NE rts;
0x003CC7        F3D00000                 push rLink;
0x003CC8        01C00032                 r10 = Null + 50;
0x003CC9        093064EA                 r1 = Null + M[$M.spi_comm.last_addr];
0x003CCA        09200045                 r0 = Null + M[$M.spi_block.command];
0x003CCB        FD000000 0190AAAA        r7 = Null + 43690;
0x003CCD        E5F00007                 do $M.spi_comm.polled_service_routine.loop;
0x003CCE        E403002F                 Null = r1 + 1;
0x003CCF        DD00000B                 if EQ jump $M.spi_comm.polled_service_routine.no_handler;
0x003CD0        D1430001                 r2 = M[r1 + 1];
0x003CD1        2002004F                 Null = r0 - r2;
0x003CD2        DD000003                 if EQ jump $M.spi_comm.polled_service_routine.found;
0x003CD3        D1330000                 r1 = M[r1 + 0];

 <$M.spi_comm.polled_service_routine.loop>
0x003CD4        E1F000B7                 call $error;

 <$M.spi_comm.polled_service_routine.found>
0x003CD5        D1D30002                 rLink = M[r1 + 2];
0x003CD6        01300005                 r1 = Null + 5;
0x003CD7        09400049                 r2 = Null + M[$M.spi_block.cmd_length];
0x003CD8        E00D000F                 call rLink;
0x003CD9        01905555                 r7 = Null + 21845;

 <$M.spi_comm.polled_service_routine.no_handler>
0x003CDA        01205555                 r0 = Null + 21845;
0x003CDB        FD000000 0130AAAA        r1 = Null + 43690;
0x003CDD        19A00049                 M[$M.spi_block.cmd_length] = r8 + Null;
0x003CDE        19900048                 M[$M.spi_block.cmd_status] = r7 + Null;
0x003CDF        19200046                 M[$M.spi_block.cmd_ready] = r0 + Null;
0x003CE0        19300047                 M[$M.spi_block.cmd_complete] = r1 + Null;
0x003CE1        DDF0D9E8                 jump $pop_rLink_and_rts;

 <$cmpd100.initialize>
0x003CE2        D12A000A                 r0 = M[r8 + 10];
0x003CE3        D13A000B                 r1 = M[r8 + 11];
0x003CE4        D14A000C                 r2 = M[r8 + 12];
0x003CE5        D15A000E                 r3 = M[r8 + 14];
0x003CE6        D16A000F                 r4 = M[r8 + 15];
0x003CE7        2073002F                 r5 = r1 - r0;
0x003CE8        CC17005F                 rMAC = r5 * r3 (SS);
0x003CE9        D51A0012                 M[r8 + 18] = rMAC;
0x003CEA        2074003F                 r5 = r2 - r1;
0x003CEB        CC17006F                 rMAC = r5 * r4 (SS);
0x003CEC        D51A0013                 M[r8 + 19] = rMAC;
0x003CED        D15A000D                 r3 = M[r8 + 13];
0x003CEE        D16A0010                 r4 = M[r8 + 16];
0x003CEF        2075004F                 r5 = r3 - r2;
0x003CF0        CC17006F                 rMAC = r5 * r4 (SS);
0x003CF1        D51A0014                 M[r8 + 20] = rMAC;
0x003CF2        01300000                 r1 = Null + 0;
0x003CF3        D16A0007                 r4 = M[r8 + 7];
0x003CF4        1863000F                 M[r4] = r1 + Null;
0x003CF5        DC0D000F                 rts;

 <$message.register_handler_with_mask>
0x003CF6        8966FFFF                 r4 = r4 XOR 0xffff;
0x003CF7        D5630003                 M[r1 + 3] = r4;
0x003CF8        DDF00003                 jump $M.message.register_handler.mask_field_set;

 <$message.register_handler>
0x003CF9        8520FFFF                 r0 = Null OR 0xffff;
0x003CFA        D5230003                 M[r1 + 3] = r0;

 <$M.message.register_handler.mask_field_set>
0x003CFB        F3D00000                 push rLink;
0x003CFC        E1F0D983                 call $block_interrupts;
0x003CFD        092064D8                 r0 = Null + M[$message.last_addr];
0x003CFE        D5230000                 M[r1 + 0] = r0;
0x003CFF        193064D8                 M[$message.last_addr] = r1 + Null;
0x003D00        D5430001                 M[r1 + 1] = r2;
0x003D01        D5530002                 M[r1 + 2] = r3;
0x003D02        E1F0D96D                 call $interrupt.unblock;
0x003D03        DDF0D9C6                 jump $pop_rLink_and_rts;

 <$message.send_ready_wait_for_go>
0x003D04        F3D00000                 push rLink;
0x003D05        01306427                 r1 = Null + 25639;
0x003D06        01407000                 r2 = Null + 28672;
0x003D07        01503D0A                 r3 = Null + 15626;
0x003D08        E1F0FFF1                 call $message.register_handler;
0x003D09        DDF00004                 jump $M.message.send_ready_wait_for_go.go_from_vm_setup_done;

 <$M.message.send_ready_wait_for_go.go_from_vm_handler>
0x003D0A        E420002F                 r0 = Null + 1;
0x003D0B        192094DA                 M[$M.message.send_ready_wait_for_go.go_from_vm] = r0 + Null;
0x003D0C        DC0D000F                 rts;

 <$M.message.send_ready_wait_for_go.go_from_vm_setup_done>
0x003D0D        85408000                 r2 = Null OR 0x8000;
0x003D0E        E1F0D7C0                 call $message.send_short;

 <$M.message.send_ready_wait_for_go.vm_go_wait>
0x003D0F        090094DA                 Null = Null + M[$M.message.send_ready_wait_for_go.go_from_vm];
0x003D10        DD00FFFF                 if EQ jump $M.message.send_ready_wait_for_go.vm_go_wait;
0x003D11        DDF0D9B8                 jump $pop_rLink_and_rts;

 <$pskey.initialise>
0x003D12        F3D00000                 push rLink;
0x003D13        0130940A                 r1 = Null + -27638;
0x003D14        FD000000 01408007        r2 = Null + 32775;
0x003D16        01501381                 r3 = Null + 4993;
0x003D17        E1F0FFE2                 call $message.register_handler;
0x003D18        0130642B                 r1 = Null + 25643;
0x003D19        85408008                 r2 = Null OR 0x8008;
0x003D1A        01501381                 r3 = Null + 4993;
0x003D1B        E1F0FFDE                 call $message.register_handler;
0x003D1C        DDF0D9AD                 jump $pop_rLink_and_rts;

 <$interrupt.initialise>
0x003D1D        01200015                 r0 = Null + 21;
0x003D1E        1920FE14                 M[0xfffe14] = r0 + Null;
0x003D1F        01200311                 r0 = Null + 785;
0x003D20        1920FE15                 M[0xfffe15] = r0 + Null;
0x003D21        E420002F                 r0 = Null + 1;
0x003D22        1920FE11                 M[0xfffe11] = r0 + Null;
0x003D23        1920FE12                 M[0xfffe12] = r0 + Null;
0x003D24        1920FE13                 M[0xfffe13] = r0 + Null;
0x003D25        1900FE4E                 M[0xfffe4e] = Null + Null;
0x003D26        85EE0080                 rFlags = rFlags OR 0x80;
0x003D27        DC0D000F                 rts;
0x003D28        DDF0C2D8                 jump $reset;
0x003D29        DDF0C2D9                 jump $interrupt.handler;

 <$message.unregister_handler>
0x003D2A        01C00032                 r10 = Null + 50;
0x003D2B        093064D8                 r1 = Null + M[$message.last_addr];
0x003D2C        014064D8                 r2 = Null + 25816;
0x003D2D        E5F0000B                 do $M.message.unregister_handler.find_id_loop;
0x003D2E        E403002F                 Null = r1 + 1;
0x003D2F        DD000009                 if EQ jump $M.message.unregister_handler.find_id_loop;
0x003D30        D1230001                 r0 = M[r1 + 1];
0x003D31        2002005F                 Null = r0 - r3;
0x003D32        DD100004                 if NE jump $M.message.unregister_handler.get_next;
0x003D33        D1230000                 r0 = M[r1 + 0];
0x003D34        1842000F                 M[r2] = r0 + Null;
0x003D35        DC0D000F                 rts;

 <$M.message.unregister_handler.get_next>
0x003D36        01430000                 r2 = r1 + 0;
0x003D37        D1330000                 r1 = M[r1 + 0];

 <$M.message.unregister_handler.find_id_loop>
0x003D38        DC0D000F                 rts;

 <$wall_clock.initialise>
0x003D39        F3D00000                 push rLink;
0x003D3A        0130642F                 r1 = Null + 25647;
0x003D3B        8540801C                 r2 = Null OR 0x801c;
0x003D3C        01501088                 r3 = Null + 4232;
0x003D3D        E1F0FFBC                 call $message.register_handler;
0x003D3E        01309412                 r1 = Null + -27630;
0x003D3F        8540801D                 r2 = Null OR 0x801d;
0x003D40        015016CD                 r3 = Null + 5837;
0x003D41        E1F0FFB8                 call $message.register_handler;
0x003D42        DDF0D987                 jump $pop_rLink_and_rts;

 <$audio_proc.hq_peq.initialize>
0x003D43        D1A90003                 r8 = M[r7 + 3];
0x003D44        D12A0000                 r0 = M[r8 + 0];
0x003D45        812200FF                 r0 = r0 AND 0xff;
0x003D46        D5290006                 M[r7 + 6] = r0;
0x003D47        99C20003                 r10 = r0 * 3 (int);
0x003D48        01CC0002                 r10 = r10 + 2;
0x003D49        D5C90007                 M[r7 + 7] = r10;
0x003D4A        01390009                 r1 = r7 + 9;
0x003D4B        D5390004                 M[r7 + 4] = r1;
0x003D4C        99C20005                 r10 = r0 * 5 (int);
0x003D4D        D5C90008                 M[r7 + 8] = r10;
0x003D4E        012A0003                 r0 = r8 + 3;
0x003D4F        D5290005                 M[r7 + 5] = r0;
0x003D50        DC0D000F                 rts;

 <$audio_proc.delay.initialize>
0x003D51        D12A0002                 r0 = M[r8 + 2];
0x003D52        F3D00000                 push rLink;
0x003D53        E1F0D933                 call $cbuffer.get_read_address_and_size;
0x003D54        5000002F                 I0 = Null + r0;
0x003D55        50C0003F                 L0 = Null + r1;
0x003D56        00C3000F                 r10 = r1 + Null;
0x003D57        F3D40000                 pop rLink;
0x003D58        01200000                 r0 = Null + 0;
0x003D59        E5F00002                 do $M.audio_proc.delay.initialize.loop_delay_init;
0x003D5A        0300A100                 Null = Null + Null, M[I0,1] = r0;

 <$M.audio_proc.delay.initialize.loop_delay_init>
0x003D5B        51C00000                 L0 = Null + 0;
0x003D5C        DC0D000F                 rts;

 <$_stack_initialise>
0x003D5D        FD0000FF 01B034A8        r9 = Null + -52056;
0x003D5F        19B0FE67                 M[0xfffe67] = r9 + Null;
0x003D60        FD0000FF 01B033E9        r9 = Null + -52247;
0x003D62        19B0FE66                 M[0xfffe66] = r9 + Null;
0x003D63        19B0FE68                 M[0xfffe68] = r9 + Null;
0x003D64        19B0FE6A                 M[0xfffe6a] = r9 + Null;
0x003D65        E420002F                 r0 = Null + 1;
0x003D66        1920FE9F                 M[0xfffe9f] = r0 + Null;
0x003D67        DC0D000F                 rts;

 <$audio_proc.peq.zero_delay_data>
0x003D68        F3C00000                 push r10;
0x003D69        D1C90002                 r10 = M[r7 + 2];
0x003D6A        E4CC002F                 r10 = r10 + 1;
0x003D6B        91CC0001                 r10 = r10 ASHIFT 1;
0x003D6C        01390009                 r1 = r7 + 9;
0x003D6D        5000003F                 I0 = Null + r1;
0x003D6E        0030000F                 r1 = Null + Null;
0x003D6F        E5F00002                 do $M.audio_proc.peq.zero_delay_data.init_dly_ln_loop;
0x003D70        0300B100                 Null = Null + Null, M[I0,1] = r1;

 <$M.audio_proc.peq.zero_delay_data.init_dly_ln_loop>
0x003D71        F3C40000                 pop r10;
0x003D72        DC0D000F                 rts;

 <$audio_proc.hq_peq.zero_delay_data>
0x003D73        F3C00000                 push r10;
0x003D74        D1C90002                 r10 = M[r7 + 2];
0x003D75        99CC0003                 r10 = r10 * 3 (int);
0x003D76        01CC0002                 r10 = r10 + 2;
0x003D77        01390009                 r1 = r7 + 9;
0x003D78        5000003F                 I0 = Null + r1;
0x003D79        0030000F                 r1 = Null + Null;
0x003D7A        E5F00002                 do $M.audio_proc.hq_peq.zero_delay_data.init_dly_ln_loop;
0x003D7B        0300B100                 Null = Null + Null, M[I0,1] = r1;

 <$M.audio_proc.hq_peq.zero_delay_data.init_dly_ln_loop>
0x003D7C        F3C40000                 pop r10;
0x003D7D        DC0D000F                 rts;

 <$cbuffer.initialise>
0x003D7E        F3D00000                 push rLink;
0x003D7F        01306423                 r1 = Null + 25635;
0x003D80        85408001                 r2 = Null OR 0x8001;
0x003D81        01500D80                 r3 = Null + 3456;
0x003D82        E1F0FF77                 call $message.register_handler;
0x003D83        DDF0D946                 jump $pop_rLink_and_rts;

 <$spi_comm.register_handler>
0x003D84        F3D00000                 push rLink;
0x003D85        092064EA                 r0 = Null + M[$M.spi_comm.last_addr];
0x003D86        D5230000                 M[r1 + 0] = r0;
0x003D87        193064EA                 M[$M.spi_comm.last_addr] = r1 + Null;
0x003D88        D5430001                 M[r1 + 1] = r2;
0x003D89        D5530002                 M[r1 + 2] = r3;
0x003D8A        DDF0D93F                 jump $pop_rLink_and_rts;

 <$error>
0x003D8B        81EEFF7F                 rFlags = rFlags AND 0xff7f;
0x003D8C        09B064D6                 r9 = Null + M[$error.handler];
0x003D8D        DC0B0001                 if NE jump r9;

 <$M.error.error_loop>
0x003D8E        E400001F                 break;
0x003D8F        DDF0FFFF                 jump $M.error.error_loop;

 <$message.initialise>
0x003D90        0920E000                 r0 = Null + M[0xffe000];
0x003D91        192094D9                 M[$message.last_seq_sent] = r0 + Null;
0x003D92        DC0D000F                 rts;

 <$MeloD_Expansion.initialize>
0x003D93        F3D00000                 push rLink;
0x003D94        DDF0D935                 jump $pop_rLink_and_rts;

 <$spi_comm.initialize>
0x003D95        01205555                 r0 = Null + 21845;
0x003D96        19200046                 M[$M.spi_block.cmd_ready] = r0 + Null;
0x003D97        DC0D000F                 rts;
========================================================================
datadump
========================================================================

------------------------------------------------------------------------
Region: DM1_REGION
------------------------------------------------------------------------
0x000000	$M.spi_block.SPI_BLOCK
0x000000	$M.spi_block.signature
        435352 204356 432043 4F4E54 
        524F4C 

0x000005	$M.spi_block.payload
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x000045	$M.spi_block.command
        000000 

0x000046	$M.spi_block.cmd_ready
        00AAAA 

0x000047	$M.spi_block.cmd_complete
        005555 

0x000048	$M.spi_block.cmd_status
        005555 

0x000049	$M.spi_block.cmd_length
        000000 

0x00004A	$analogue_audio_in_mono_copy_struc
        FF939C 000001 800000 000002 
        0000AD FF941A 

0x000050	$codec_tones.tone_left_resample_hist
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 

0x00005D	$interrupt.start_time
        000000 

0x00005E	$sbcdec.codec_struc
        000000 000000 

0x000060	$codec_tones.tone_right_resample_hist
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 

0x00006F	$app_config.io
        FFFFFF 

0x000070	$M.multi_chan_output.chain0_ch0_mix_op._hist
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x00007C	$us_per_sample_sbc
        000000 000000 5AB3F4 535555 

0x000080	$codec_rate_adj.hist_left
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x0000A4	$audio_out_timer_struc
        000000 000000 000000 000000 

0x0000A8	$M.music_example.load_default_params.operatorvals
        000008 00FF00 FFFFF8 00FFFF 
        000010 

0x0000AD	$audio_out_left_cbuffer_struc
        0005DC 004800 004800 

0x0000B0	$M.multi_chan_output.chain0_ch1_mix_op._hist
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x0000BC	$set_dac_rate_from_vm_message_struc
        000000 000000 000000 000000 

0x0000C0	$codec_rate_adj.hist_right
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x0000E4	$codec_in_copy_op
0x0000E4	$codec_in_copy_op.next
        FFFFFF 

0x0000E5	$codec_in_copy_op.func
        00645C 

0x0000E6	$codec_in_copy_op.param
        000000 000001 

0x0000E8	$M.multi_chan_output.chain0_ch0_dither_and_shift_op.dither_hist
        000000 000000 000000 000000 
        000000 

0x0000ED	$codec_resamp_out_left_cbuffer_struc
        000334 FF6C00 FF6C00 

0x0000F0	$M.multi_chan_output.chain0_ch2_mix_op._hist
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x0000FC	$music_example.Statistics
0x0000FC	$music_example.CurMode
        000000 

0x0000FD	$music_example.PeakMipsFunc
        000000 

0x0000FE	$music_example.PeakMipsDecoder
        000000 

0x0000FF	$music_example.SamplingRate
        000000 

0x000100	$M.multi_chan_output.chain1_sync_rate_adjustment_and_shift._sr_hist0
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x000124	$M.music_example_message.set_mode_message_struc
        000000 000000 000000 000000 

0x000128	$M.multi_chan_output.chain0_ch1_dither_and_shift_op.dither_hist
        000000 000000 000000 000000 
        000000 

0x00012D	$codec_rate_adj_out_left_cbuffer_struc
        000334 FF7C00 FF7C00 

0x000130	$M.multi_chan_output.chain0_ch3_mix_op._hist
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x00013C	$M.music_example_message.load_params_message_struc
        000000 000000 000000 000000 

0x000140	$M.multi_chan_output.chain1_sync_rate_adjustment_and_shift._sr_hist1
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x000164	$M.music_example_message.set_i2s_mode_message_struc
        000000 000000 000000 000000 

0x000168	$M.multi_chan_output.chain0_ch2_dither_and_shift_op.dither_hist
        000000 000000 000000 000000 
        000000 

0x00016D	$M.music_example_spi.status_message_struc
        000000 000000 000000 

0x000170	$M.multi_chan_output.chain1_ch0_mix_op._hist
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x00017C	$M.music_example_message.signal_detect_message_struct
        000000 000000 000000 000000 

0x000180	$M.multi_chan_output.chain1_ch1_mix_op._hist
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x00018C	$M.music_example_message.set_user_eq_param_message_struct
        000000 000000 000000 000000 

0x000190	$M.multi_chan_output.chain0_ch3_dither_and_shift_op.dither_hist
        000000 000000 000000 000000 
        000000 

0x000195	$M.music_example_spi.reinit_message_struc
        000000 000000 000000 

0x000198	$M.multi_chan_output.chain0_ch4_dither_and_shift_op.dither_hist
        000000 000000 000000 000000 
        000000 

0x00019D	$M.music_example_spi.control_message_struc
        000000 000000 000000 

0x0001A0	$M.multi_chan_output.chain0_ch5_dither_and_shift_op.dither_hist
        000000 000000 000000 000000 
        000000 

0x0001A5	$M.sra_calcrate.mode_funtion_table
        0006D2 0006D6 0006E2 

0x0001A8	$M.multi_chan_output.chain1_ch0_dither_and_shift_op.dither_hist
        000000 000000 000000 000000 
        000000 

0x0001AD	$usb_fn_table
        002571 00257E 002594 

0x0001B0	$M.multi_chan_output.chain1_ch1_dither_and_shift_op.dither_hist
        000000 000000 000000 000000 
        000000 

0x0001B5	$M.system_config.data.delay_buf_pri_right_cbuffer_struc
        000BCD FF5000 FF5000 

0x0001B8	$M.cbops.rate_adjustment_and_shift.main.dith_hist_left
        000000 000000 000000 000000 
        000000 

0x0001BD	$M.system_config.data.delay_buf_sec_right_cbuffer_struc
        000BCD FF6000 FF6000 

0x0001C0	$M.cbops.rate_adjustment_and_shift.main.dith_hist_right
        000000 000000 000000 000000 
        000000 

0x0001C5	$sbc.audio_sample
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x0002C5	$sbc.win_coefs_m8_ram
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x000315	$sbc.win_coefs_m4_ram
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x00033D	$M.math.log2_table.tab32_log2
        000000 000B5E 001664 002119 
        002B80 00359F 003F78 004910 
        00526A 005B88 00646F 006D20 
        00759E 007DEA 008608 008DFA 
        0095C0 009D5E 00A4D4 00AC24 
        00B350 00BA59 00C141 00C807 
        00CEAF 00D538 00DBA4 00E1F5 
        00E82A 00EE45 00F446 00FA2F 
        010000 

0x00035E	$M.math.pow2_table.tab32_pow2
        3FFFFF 4166C2 42D561 444C06 
        45CAE0 47521C 48E1E9 4A7A77 
        4C1BF7 4DC69C 4F7A98 513821 
        52FF6A 54D0AC 56AC1E 5891FA 
        5A8279 5C7DD7 5E8451 609625 
        62B394 64DCDE 671245 69540E 
        6BA27D 6DFDDB 70666E 72DC82 
        756062 77F25C 7A92BE 7D41D8 
        7FFFFF 

0x00037F	$decoder_codec_stream_struc
        000000 000000 000000 FF4BFD 
        0000AD FF941A 000000 000000 
        000000 000000 000000 011170 
        6CCCCD 000000 000001 0034CB 
        000000 000000 000000 000000 
        000000 000000 

0x000395	$sbc.scale_factor
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x0003A5	$sbc.scale_factor_js
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x0003B5	$sbc.bitneed
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x0003C5	$sbc.bits
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x0003D5	$usb_audio_in_copy_struc
        800000 0000AD FF941A 0000C0 
        000008 000000 000000 000000 
        000000 000000 

0x0003DF	$analogue_audio_in_copy_struc
        FF9397 000002 800000 800001 
        000002 0000AD FF941A 

0x0003E6	$M.math.log2_taylor.log2_coefs
        FE693B 078BD6 EE91AD 1D0C08 
        D21CE0 5C5036 000035 

0x0003ED	$M.math.pow2_taylor.pow2_coefs
        000291 001641 009D90 038D32 
        0F5FE0 2C5C8C 400000 

0x0003F4	$M.math.sin.coefs
        F1735A 31F837 FD1170 ADCD6B 
        FFF641 32443B 

0x0003FA	$M.system_config.data.SpkrEqDefnTable
        000001 00000A FF30D0 FF35A7 
        FF8ED3 0053C1 

0x000400	$multi_chan_primary_left_out
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x000760	$M.wbs.decoder.frame_buffer
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0x00077E	$M.main.handler_period_table_16bit
        0005DC 0002EE 

0x000780	$codec_packets_info
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0x0007B2	$sbc.sbc_common_data_array
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        0001C5 0002C5 000315 FF30A0 
        000395 0003A5 0003B5 0003C5 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 

0x0007F7	$M.system_config.data.spkr_ctrl_coefs
        000001 FF35D0 FF35F0 000000 
        000000 FF3670 006185 006185 
        FF9163 

0x000800	$multi_chan_sub_out
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x000F08	$M.system_config.data.full_proc_funcs
        00146C FF9253 000000 001056 
        000000 FF9235 0015C1 FF9473 
        000000 0015C1 0057FE 000000 
        000EDE 0063FB 000000 000EDE 
        FF93DE 000000 003A2B 0064A8 
        FF94A8 000970 000000 0060DD 
        000C2A 000000 0060DD 0035C0 
        FF36C1 000100 0035C0 FF36DB 
        000100 003720 FF368D 020000 
        003720 FF36A7 020000 003C28 
        FF3726 FF3734 003C64 FF8C17 
        002F60 0035C0 FF30D0 000400 
        0035C0 FF35A7 000400 003C8B 
        FF3742 000000 003C6C FF8A67 
        FF8B03 0001C7 006268 000000 
        003BDE 0064A9 000000 0007FE 
        000000 FF92F3 0007FE 000000 
        006339 0007FE 000000 FF92F9 
        0007FE 000000 00633F 0007FE 
        000000 FF92FF 0007FE 000000 
        006345 0004C5 FF8FFE 000000 
        0004C5 006195 000000 0015C1 
        FF9475 000000 0015C1 006477 
        000000 0015C1 FF9477 000000 
        0015C1 006479 000000 0015C1 
        FF9479 000000 0015C1 00647B 
        000000 0015C1 FF947B 000000 
        001063 000000 FF9235 001C43 
        000000 000000 001C08 000000 
        000000 0013FD FF9253 000000 
        000000 

0x000F81	$M.n3dv.right_int
0x000F81	$M.n3dv.right_int.out_ipsi_buf
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x000FBD	$M.n3dv.right_int.out_contra_buf
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x000FF9	$M.MUSIC_EXAMPLE_MODULES_STAMP.ModulesStamp
0x000FF9	$M.MUSIC_EXAMPLE_MODULES_STAMP.s1
        00FEEB 

0x000FFA	$M.MUSIC_EXAMPLE_MODULES_STAMP.s2
        00FEEB 

0x000FFB	$M.MUSIC_EXAMPLE_MODULES_STAMP.s3
        00FEEB 

0x000FFC	$M.MUSIC_EXAMPLE_MODULES_STAMP.CompConfig
        87FBC0 

0x000FFD	$M.MUSIC_EXAMPLE_MODULES_STAMP.s4
        00FEEB 

0x000FFE	$M.MUSIC_EXAMPLE_MODULES_STAMP.s5
        00FEEB 

0x000FFF	$M.MUSIC_EXAMPLE_MODULES_STAMP.s6
        00FEEB 

0x001000	$codec_in
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x002000	$M.system_config.data.delay_buf_sec_left
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 

0x002BCD	$M.system_config.data.spkr_ctrl_pri_eq_coefs_A
        000000 000001 400000 000000 
        000000 400000 000000 000000 
        000000 000000 400000 000000 
        000000 000000 000000 400000 
        000000 000000 000000 000000 
        400000 000000 000000 000000 
        000000 400000 000000 000000 
        000000 000000 400000 000000 
        000000 000000 000000 400000 
        000000 000000 000001 000001 
        000001 000001 000001 000001 
        000001 

0x002BFA	$M.system_config.data.AncEqDefnTable
        000001 000005 FF368D FF36A7 
        0057C8 00607C 

0x002C00	$multi_chan_primary_right_out
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x002F60	$M.system_config.data.bass_plus_right
        00621B 00621B 000001 000000 
        0062CD 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 

0x002FD5	$M.system_config.data.spkr_ctrl_bass_eq_coefs_B
        000000 000001 400000 000000 
        000000 400000 000000 000000 
        000000 000000 400000 000000 
        000000 000000 000000 400000 
        000000 000000 000000 000000 
        400000 000000 000000 000000 
        000000 400000 000000 000000 
        000000 000000 400000 000000 
        000000 000001 000001 000001 
        000001 000001 000001 

0x002FFC	$M.music_example_message.set_user_eq_group_param_message_struct
        000000 000000 000000 000000 

0x003000	$M.system_config.data.delay_buf_aux_left
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 

0x003BCD	$M.system_config.data.spkr_ctrl_pri_eq_coefs_B
        000000 000001 400000 000000 
        000000 400000 000000 000000 
        000000 000000 400000 000000 
        000000 000000 000000 400000 
        000000 000000 000000 000000 
        400000 000000 000000 000000 
        000000 400000 000000 000000 
        000000 000000 400000 000000 
        000000 000000 000000 400000 
        000000 000000 000001 000001 
        000001 000001 000001 000001 
        000001 

0x003BFA	$M.system_config.data.spkr_ctrl_pri_eq_defn_table
        000002 000007 FF35D0 FF35F0 
        002BCD 003BCD 

0x003C00	$multi_chan_secondary_right_out
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x003F60	$chain0_ch1_resamp_op
0x003F60	$M.multi_chan_output.chain0_ch1_resamp_op.next
        FFFFFF 

0x003F61	$M.multi_chan_output.chain0_ch1_resamp_op.func
        FF9462 

0x003F62	$M.multi_chan_output.chain0_ch1_resamp_op.param
        000001 000000 000000 000000 
        000000 004600 00018A 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 

0x003FD3	$M.system_config.data.spkr_ctrl_sec_eq_coefs_B
        000000 000001 400000 000000 
        000000 400000 000000 000000 
        000000 000000 400000 000000 
        000000 000000 000000 400000 
        000000 000000 000000 000000 
        400000 000000 000000 000000 
        000000 400000 000000 000000 
        000000 000000 400000 000000 
        000000 000000 000000 400000 
        000000 000000 000001 000001 
        000001 000001 000001 000001 
        000001 

0x004000	$tone_in_left_resample
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x004600	$M.multi_chan_output.chain0_ch1_resamp_op.iir_temp
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0x00478A	$codec_resampler.right
        FF941A FF941D 000000 FFFFF8 
        000008 005E04 000278 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 

0x0047FB	$sub_esco_out_copy_struc
        0063C9 000001 FF9438 000001 
        91A00C 

0x004800	$audio_out_left
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x004DDC	$M.system_config.data.CurParams
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0x004FE6	$cbuffer.read_port_limit_addr
0x004FE6	$cbuffer.port_limit_addr
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x004FF2	$cbuffer.write_port_limit_addr
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x004FFE	$M.sra_tagtimes.mode_funtion_table
        0004A7 0004B1 

0x005000	$multi_chan_aux_right_out
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x005360	$M.music_example.power_up_reset.message_handlers
        FF93AE 001020 0038B1 003CF9 
        000124 001001 0034E3 003CF9 
        FF93B2 00100E 003B19 003CF9 
        00013C 001012 003556 003CF9 
        00017C 001018 003CA3 003CF9 
        FF93BE 00101A 003A5F 003CF9 
        006417 001027 001572 003CF9 
        00018C 00121A 003A70 003CF9 
        FF93C2 00129A 003BF7 003CF9 
        002FFC 00121B 003C03 003CF9 
        FF93C6 00129B 003A7F 003CF9 
        FF93B6 0010A5 003CBC 003CF9 
        000164 0010A1 003CC0 003CF9 
        FF93BA 0010A4 003C9C 003CF9 
        00016D 001007 00359A 003D84 
        FF9423 00100A 0036FE 003D84 
        00019D 00100B 003328 003D84 
        000195 001009 003723 003D84 
        FF9426 001008 0036F5 003D84 
        0063E7 0010A6 003A4D 003CF9 
        FF93CE 0010A7 003B08 003CF9 
        0063EF 0010A8 003C7C 003CF9 
        FF93CA 0010A9 003943 003CF9 
        0063EB 0010AA 003B58 003CF9 
        000000 

0x0053C1	$M.system_config.data.SpkrEqCoefsB
        00000A 000001 400000 000000 
        000000 400000 000000 000000 
        000000 000000 400000 000000 
        000000 000000 000000 400000 
        000000 000000 000000 000000 
        400000 000000 000000 000000 
        000000 400000 000000 000000 
        000000 000000 400000 000000 
        000000 000000 000000 400000 
        000000 000000 000000 000000 
        400000 000000 000000 000000 
        000000 400000 000000 000000 
        000000 000000 400000 000000 
        000000 000001 000001 000001 
        000001 000001 000001 000001 
        000001 000001 000001 

0x005400	$codec_resamp_out_right
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x005734	$M.bass_plus.right_int.hp1_out_buf
0x005734	$M.bass_plus.right_int
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x005740	$M.bass_plus.right_int.hp3_out_buf
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x00574C	$M.bass_plus.right_int.hp2_out_buf
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x005764	$M.bass_plus.right_int.ntp_tp_filters_buf
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x005770	$M.bass_plus.right_int.high_freq_output_buf
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x005788	$sra_struct
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x0057C8	$M.system_config.data.AncEqCoefsA
        000005 000001 400000 000000 
        000000 400000 000000 000000 
        000000 000000 400000 000000 
        000000 000000 000000 400000 
        000000 000000 000000 000000 
        400000 000000 000000 000000 
        000000 400000 000000 000000 
        000001 000001 000001 000001 
        000001 

0x0057E9	$M.system_config.data.aux_stereo_volume_and_limit_obj
0x0057E9	$M.system_config.data.aux_stereo_volume_and_limit_block
        000000 001000 000002 006481 
        000000 FBD57B 072148 79999A 
        000000 000000 000000 

0x0057F4	$M.system_config.data.aux_left_channel_vol_struc
        FF9202 FF9202 080000 000000 
        000000 

0x0057F9	$M.system_config.data.aux_right_channel_vol_struc
        006242 006242 080000 000000 
        000000 

0x0057FE	$M.system_config.data.pcmin_r_pk_dtct
        00621B 000000 

0x005800	$codec_rate_adj_out_right
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x005B34	$M.system_config.data.spkr_ctrl_bass_buffer
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x005E04	$codec_resampler.iir_temp
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x00607C	$M.system_config.data.AncEqCoefsB
        000005 000001 400000 000000 
        000000 400000 000000 000000 
        000000 000000 400000 000000 
        000000 000000 000000 400000 
        000000 000000 000000 000000 
        400000 000000 000000 000000 
        000000 400000 000000 000000 
        000001 000001 000001 000001 
        000001 

0x00609D	$M.system_config.data.UserEqCoefsB
        000000 000001 400000 000000 
        000000 400000 000000 000000 
        000000 000000 400000 000000 
        000000 000000 000000 400000 
        000000 000000 000000 000000 
        400000 000000 000000 000000 
        000000 400000 000000 000000 
        000001 000001 000001 000001 
        000001 

0x0060BE	$M.system_config.data.filter_reset_table
        003D73 FF30D0 000000 003D73 
        FF35A7 000000 003D73 FF3726 
        000000 003D73 FF3734 000000 
        003D73 FF368D 000000 003D73 
        FF36A7 000000 003D73 FF36C1 
        000000 003D73 FF36DB 000000 
        000E26 005B34 0002D0 003D68 
        FF36F5 000000 000000 

0x0060DD	$M.system_config.data.cmpd100_obj
        000040 000020 FF91DB 00621B 
        FF91DB 00621B 080000 FF94AA 
        800000 080000 F9B037 FA0541 
        FE56CB FF8070 100000 080000 
        015555 00CCCD 000000 000000 
        000000 420B8C 030F11 420B8C 
        00ECE9 62032E 009E22 7C997B 
        0076AC 020000 

0x0060FB	$M.system_config.data.SubEqCoefsB
        000003 000001 400000 000000 
        000000 400000 000000 000000 
        000000 000000 400000 000000 
        000000 000000 000000 400000 
        000000 000000 000001 000001 
        000001 

0x006110	$M.multi_chan_output.chain0_copy_struc
        00634B 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x006124	$chain0_ch1_mix_op
0x006124	$M.multi_chan_output.chain0_ch1_mix_op.next
        FF9311 

0x006125	$M.multi_chan_output.chain0_ch1_mix_op.func
        006468 

0x006126	$M.multi_chan_output.chain0_ch1_mix_op.param
        000001 FFFFFF FF9450 FF3529 
        006481 0000B0 006481 400000 
        400000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0x006138	$chain0_ch3_mix_op
0x006138	$M.multi_chan_output.chain0_ch3_mix_op.next
        0062B1 

0x006139	$M.multi_chan_output.chain0_ch3_mix_op.func
        006468 

0x00613A	$M.multi_chan_output.chain0_ch3_mix_op.param
        000003 FFFFFF FF9453 FF3529 
        006481 000130 006481 400000 
        400000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0x00614C	$M.multi_chan_output.chain1_ch1_mix_op.next
0x00614C	$chain1_ch1_mix_op
        FF925D 

0x00614D	$M.multi_chan_output.chain1_ch1_mix_op.func
        006468 

0x00614E	$M.multi_chan_output.chain1_ch1_mix_op.param
        000001 FFFFFF FF9456 FF3529 
        006481 000180 006481 400000 
        400000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0x006160	$usb_rate_candidates
        00BB80 0000C0 000000 001F40 
        000020 000000 003E80 000040 
        000000 005622 00005C 000014 
        007D00 000080 000000 00AC44 
        0000B4 00000A 000000 

0x006173	$M.system_config.data.MeloD_Expansion_filter_data
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0x006185	$M.system_config.data.spkr_ctrl_gain_coefs_A
        200000 000000 000000 000000 
        200000 000000 200000 000000 
        000000 000000 200000 000000 
        000000 000000 000000 000000 

0x006195	$M.system_config.data.sub_volume_and_limit_block
0x006195	$M.system_config.data.sub_volume_and_limit_obj
        000000 001000 000001 006481 
        200000 FBD57B 072148 79999A 
        000000 000000 000000 

0x0061A0	$M.system_config.data.sub_channel_vol_struc
        FF920F FF920F 080000 000000 
        000000 

0x0061A5	$cbops.buffer_addresses
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x0061B5	$flash.code.address
	-------- [0x000C octets]

0x0061B9	$flash.data16.address
	-------- [0x000C octets]

0x0061BD	$flash.data24.address
	-------- [0x000C octets]

0x0061C1	$flash.windowed_data16.address
	-------- [0x000C octets]

0x0061C5	$M.system_config.data.MeloD_Expansion_coefficients
        B1AA81 571F3E C3ECED 400000 
        84DA2F 3B3194 400000 D53FA4 
        FEA000 400000 81543A 3EB7E0 
        400000 BB3B4C 24BC7F 

0x0061D4	$mono_tone_in_right_resample_op
0x0061D4	$mono_tone_in_right_resample_op.next
        00647F 

0x0061D5	$mono_tone_in_right_resample_op.func
        FF946B 

0x0061D6	$mono_tone_in_right_resample_op.param
        000000 000002 FF3529 FF94D1 
        006481 000060 000000 000000 
        000000 000000 000000 000000 
        000000 

0x0061E3	$tone_in_right_resample_op.next
0x0061E3	$tone_in_right_resample_op
        00647F 

0x0061E4	$tone_in_right_resample_op.func
        FF946B 

0x0061E5	$tone_in_right_resample_op.param
        000001 000003 FF3529 FF94D1 
        006481 000060 000000 000000 
        000000 000000 000000 000000 
        000000 

0x0061F2	$chain1_to_chain0_pcm_sync_struct
        0147AE 001388 00647D FF947D 
        FF7FFD 00627C 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0x006200	$kal_filter_coef_lib.__warp.constants
        000081 C90FDB 00007D BE76C9 
        80007D E24DD3 80007D AC0831 
        00007F 8624DD 00007D EB851F 
        000080 800000 

0x00620E	$usb_stats
        0000FF 0064A5 0064A5 0064A5 
        0064A5 0064A5 0064A5 0064A5 
        0064A5 0064A5 0064A5 0064A5 
        0064A5 

0x00621B	$M.system_config.data.stream_map_right_in
        000000 000000 000000 000168 
        000BB8 001660 001612 000000 
        000000 000000 000000 000000 
        000000 

0x006228	$M.system_config.data.stream_map_primary_right_out
        006444 000000 000000 000168 
        000BB8 001641 001480 000000 
        000000 000000 000000 000000 
        000000 

0x006235	$M.system_config.data.stream_map_secondary_right_out
        006447 000000 000000 000168 
        000BB8 001641 001480 000000 
        000000 000000 000000 000000 
        000000 

0x006242	$M.system_config.data.stream_map_aux_right_out
        00644A 000000 000000 000168 
        000BB8 001641 001480 000000 
        000000 000000 000000 000000 
        000000 

0x00624F	$analogue_stats
        0000FF 0064A5 0064A5 0064A5 
        0064A5 0064A5 0064A5 0064A5 
        0064A5 0064A5 0064A5 0064A5 
        0064A5 

0x00625C	$M.main.write_port_function_table
        001BA5 001BC3 003233 003233 
        003233 003233 003233 003233 
        003233 003233 003233 003233 

0x006268	$M.system_config.data.spkr_ctrl_struct
        FF91DB 00621B 000000 000000 
        000000 000000 000000 000000 
        005B34 004DDC 000800 0007F7 

0x006274	$calc_chain0_actual_port_rate_struc
        800011 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 

0x00627F	$music_example.SpiSysControl
0x00627F	$music_example.SysControl
        000000 

0x006280	$music_example.OvrSystemVolume
        000009 

0x006281	$music_example.OvrCallState
        000000 

0x006282	$music_example.OvrMode
        000000 

0x006283	$music_example.AuxOvrMasterVolumes
        000000 

0x006284	$music_example.AuxOvrTrimVolumes
        000000 

0x006285	$music_example.MainOvrMasterVolumes
        000000 

0x006286	$music_example.PriOvrTrimVolumes
        000000 

0x006287	$music_example.SecOvrTrimVolumes
        000000 

0x006288	$music_example.SubOvrTrimVolumes
        000000 

0x006289	$DecoderMips_data_block
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0x006293	$M.music_example_message_payload_cache.set_output_dev_type_s
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0x00629D	$M.music_example_message_payload_cache.multi_channel_aux_mute_s
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0x0062A7	$M.music_example_message_payload_cache.aux_volume_s
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0x0062B1	$chain0_ch0_5_signal_detect_op
0x0062B1	$M.multi_chan_output.chain0_ch0_5_signal_detect_op.next
        FF9317 

0x0062B2	$M.multi_chan_output.chain0_ch0_5_signal_detect_op.func
        FF9465 

0x0062B3	$M.multi_chan_output.chain0_ch0_5_signal_detect_op.param
        FF9305 000000 000000 000001 
        000002 000003 000004 000005 

0x0062BB	$kal_filter_coef_lib.__db2lin.constants
        000082 C0A8C1 000074 BBFFCB 
        000078 CC9A78 00007C EC8E69 
        000080 800000 

0x0062C5	$ufe_main.message_volume_struc
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x0062CD	$M.system_config.data.bass_plus_params
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x0062D5	$chain0_ch0_dither_and_shift_op
0x0062D5	$M.multi_chan_output.chain0_ch0_dither_and_shift_op.next
        FF9335 

0x0062D6	$M.multi_chan_output.chain0_ch0_dither_and_shift_op.func
        00645F 

0x0062D7	$M.multi_chan_output.chain0_ch0_dither_and_shift_op.param
        000000 000000 000000 000000 
        0000E8 000000 

0x0062DD	$M.multi_chan_output.chain0_ch2_dither_and_shift_op.next
0x0062DD	$chain0_ch2_dither_and_shift_op
        FF9341 

0x0062DE	$M.multi_chan_output.chain0_ch2_dither_and_shift_op.func
        00645F 

0x0062DF	$M.multi_chan_output.chain0_ch2_dither_and_shift_op.param
        000002 000000 000000 000000 
        000168 000000 

0x0062E5	$M.multi_chan_output.chain0_ch4_dither_and_shift_op.next
0x0062E5	$chain0_ch4_dither_and_shift_op
        FF9353 

0x0062E6	$M.multi_chan_output.chain0_ch4_dither_and_shift_op.func
        00645F 

0x0062E7	$M.multi_chan_output.chain0_ch4_dither_and_shift_op.param
        000004 000000 000000 000000 
        000198 000000 

0x0062ED	$M.multi_chan_output.chain1_ch0_dither_and_shift_op.next
0x0062ED	$chain1_ch0_dither_and_shift_op
        FF9377 

0x0062EE	$M.multi_chan_output.chain1_ch0_dither_and_shift_op.func
        00645F 

0x0062EF	$M.multi_chan_output.chain1_ch0_dither_and_shift_op.param
        000000 000000 000000 000000 
        0001A8 000000 

0x0062F5	$M.multi_chan_output.wired_in_buffer_table
        FF943E 006444 FF9444 00644A 
        FF9441 006447 FF9447 

0x0062FC	$M.multi_chan_output.wired_24_bit_out_port_table
        93B411 93B412 93B415 93B416 
        93B413 93B414 93B410 

0x006303	$M.multi_chan_output.chain1_pcm_cbuffers_latency_measure
        000000 FF9484 FF94D0 000000 
        FF9484 000000 000000 

0x00630A	$M.multi_chan_output.chain0_ch0_mute_op.next
0x00630A	$chain0_ch0_mute_op
        00635D 

0x00630B	$M.multi_chan_output.chain0_ch0_mute_op.func
        00646B 

0x00630C	$M.multi_chan_output.chain0_ch0_mute_op.param
        000000 000000 000001 000000 
        000000 

0x006311	$M.multi_chan_output.chain0_ch2_mute_op.next
0x006311	$chain0_ch2_mute_op
        FF933B 

0x006312	$M.multi_chan_output.chain0_ch2_mute_op.func
        00646B 

0x006313	$M.multi_chan_output.chain0_ch2_mute_op.param
        000000 000000 000001 000002 
        000002 

0x006318	$chain0_ch4_mute_op
0x006318	$M.multi_chan_output.chain0_ch4_mute_op.next
        FF934D 

0x006319	$M.multi_chan_output.chain0_ch4_mute_op.func
        00646B 

0x00631A	$M.multi_chan_output.chain0_ch4_mute_op.param
        000000 000000 000001 000004 
        000004 

0x00631F	$M.multi_chan_output.chain1_ch0_mute_op.next
0x00631F	$chain1_ch0_mute_op
        FF9365 

0x006320	$M.multi_chan_output.chain1_ch0_mute_op.func
        00646B 

0x006321	$M.multi_chan_output.chain1_ch0_mute_op.param
        000000 000000 000001 000000 
        000000 

0x006326	$stereo_tone_in_resample_copy_struc
        FF91B1 000002 00644D FF944A 
        000002 006450 FF944D 

0x00632D	$M.system_config.data.spkr_ctrl_bass_eq_defn_table
        000002 000006 FF3670 000000 
        FF8FD7 002FD5 

0x006333	$M.system_config.data.WiredSubEqDefnTable
        000001 000003 FF36F5 000000 
        FF90C7 0060FB 

0x006339	$M.system_config.data.delay_pri_right
        006228 006228 0001B5 000000 
        000000 000000 

0x00633F	$M.system_config.data.delay_sec_right
        006235 006235 0001BD 000000 
        000000 000000 

0x006345	$M.system_config.data.delay_aux_right
        006242 006242 00643B 000000 
        000000 000000 

0x00634B	$M.multi_chan_output.chain0_processing_switch_op.next
0x00634B	$chain0_processing_switch_op
        FF930B 

0x00634C	$M.multi_chan_output.chain0_processing_switch_op.func
        FF9468 

0x00634D	$M.multi_chan_output.chain0_processing_switch_op.param
        FF94C5 FFFFFF 000001 000000 

0x006351	$M.multi_chan_output.chain0_ch1_tone_switch_op.next
0x006351	$chain0_ch1_tone_switch_op
        006124 

0x006352	$M.multi_chan_output.chain0_ch1_tone_switch_op.func
        FF9468 

0x006353	$M.multi_chan_output.chain0_ch1_tone_switch_op.param
        FF94C7 FF9311 000002 000000 

0x006357	$chain0_ch3_tone_switch_op
0x006357	$M.multi_chan_output.chain0_ch3_tone_switch_op.next
        006138 

0x006358	$M.multi_chan_output.chain0_ch3_tone_switch_op.func
        FF9468 

0x006359	$M.multi_chan_output.chain0_ch3_tone_switch_op.param
        FF94C7 0062B1 000008 000000 

0x00635D	$M.multi_chan_output.chain0_ch0_dc_remove_switch_op.next
0x00635D	$chain0_ch0_dc_remove_switch_op
        006363 

0x00635E	$M.multi_chan_output.chain0_ch0_dc_remove_switch_op.func
        FF9468 

0x00635F	$M.multi_chan_output.chain0_ch0_dc_remove_switch_op.param
        0064C7 FF931D 000001 000000 

0x006363	$chain0_ch1_switch_op
0x006363	$M.multi_chan_output.chain0_ch1_switch_op.next
        FF92B8 

0x006364	$M.multi_chan_output.chain0_ch1_switch_op.func
        FF9468 

0x006365	$M.multi_chan_output.chain0_ch1_switch_op.param
        FF94C5 FF9329 000002 000000 

0x006369	$chain0_ch1_dc_remove_op
0x006369	$M.multi_chan_output.chain0_ch1_dc_remove_op.next
        FF9329 

0x00636A	$M.multi_chan_output.chain0_ch1_dc_remove_op.func
        FF9459 

0x00636B	$M.multi_chan_output.chain0_ch1_dc_remove_op.param
        000001 000001 000000 000000 

0x00636F	$chain0_ch0_resamp_switch_op
0x00636F	$M.multi_chan_output.chain0_ch0_resamp_switch_op.next
        FF8C8C 

0x006370	$M.multi_chan_output.chain0_ch0_resamp_switch_op.func
        FF9468 

0x006371	$M.multi_chan_output.chain0_ch0_resamp_switch_op.param
        FF94C5 FF932F 000001 000000 

0x006375	$M.multi_chan_output.chain0_ch0_dither_switch_op.next
0x006375	$chain0_ch0_dither_switch_op
        0062D5 

0x006376	$M.multi_chan_output.chain0_ch0_dither_switch_op.func
        FF9468 

0x006377	$M.multi_chan_output.chain0_ch0_dither_switch_op.param
        FF94C5 FF9335 000001 000000 

0x00637B	$M.multi_chan_output.chain0_ch2_switch_op.next
0x00637B	$chain0_ch2_switch_op
        006311 

0x00637C	$M.multi_chan_output.chain0_ch2_switch_op.func
        FF9468 

0x00637D	$M.multi_chan_output.chain0_ch2_switch_op.param
        FF94C5 FF9341 000004 000000 

0x006381	$M.multi_chan_output.chain0_ch2_dc_remove_op.next
0x006381	$chain0_ch2_dc_remove_op
        0062DD 

0x006382	$M.multi_chan_output.chain0_ch2_dc_remove_op.func
        FF9459 

0x006383	$M.multi_chan_output.chain0_ch2_dc_remove_op.param
        000002 000002 000000 000000 

0x006387	$chain0_ch3_dc_remove_switch_op
0x006387	$M.multi_chan_output.chain0_ch3_dc_remove_switch_op.next
        FF9292 

0x006388	$M.multi_chan_output.chain0_ch3_dc_remove_switch_op.func
        FF9468 

0x006389	$M.multi_chan_output.chain0_ch3_dc_remove_switch_op.param
        0064C7 FF9347 000001 000000 

0x00638D	$M.multi_chan_output.chain0_ch4_switch_op.next
0x00638D	$chain0_ch4_switch_op
        006318 

0x00638E	$M.multi_chan_output.chain0_ch4_switch_op.func
        FF9468 

0x00638F	$M.multi_chan_output.chain0_ch4_switch_op.param
        FF94C5 FF9353 000010 000000 

0x006393	$M.multi_chan_output.chain0_ch4_dc_remove_op.next
0x006393	$chain0_ch4_dc_remove_op
        0062E5 

0x006394	$M.multi_chan_output.chain0_ch4_dc_remove_op.func
        FF9459 

0x006395	$M.multi_chan_output.chain0_ch4_dc_remove_op.param
        000004 000004 000000 000000 

0x006399	$chain0_ch5_dc_remove_switch_op
0x006399	$M.multi_chan_output.chain0_ch5_dc_remove_switch_op.next
        FF929A 

0x00639A	$M.multi_chan_output.chain0_ch5_dc_remove_switch_op.func
        FF9468 

0x00639B	$M.multi_chan_output.chain0_ch5_dc_remove_switch_op.param
        0064C7 FF9359 000001 000000 

0x00639F	$chain1_processing_switch_op
0x00639F	$M.multi_chan_output.chain1_processing_switch_op.next
        FF935F 

0x0063A0	$M.multi_chan_output.chain1_processing_switch_op.func
        FF9468 

0x0063A1	$M.multi_chan_output.chain1_processing_switch_op.param
        0064C6 FFFFFF 000001 000000 

0x0063A5	$M.multi_chan_output.chain1_ch1_tone_switch_op.next
0x0063A5	$chain1_ch1_tone_switch_op
        00614C 

0x0063A6	$M.multi_chan_output.chain1_ch1_tone_switch_op.func
        FF9468 

0x0063A7	$M.multi_chan_output.chain1_ch1_tone_switch_op.param
        0064C8 FF925D 000002 000000 

0x0063AB	$M.multi_chan_output.chain1_ch0_dc_remove_op.next
0x0063AB	$chain1_ch0_dc_remove_op
        FF936B 

0x0063AC	$M.multi_chan_output.chain1_ch0_dc_remove_op.func
        FF9459 

0x0063AD	$M.multi_chan_output.chain1_ch0_dc_remove_op.param
        000000 000000 000000 000000 

0x0063B1	$chain1_ch1_dc_remove_switch_op
0x0063B1	$M.multi_chan_output.chain1_ch1_dc_remove_switch_op.next
        0063B7 

0x0063B2	$M.multi_chan_output.chain1_ch1_dc_remove_switch_op.func
        FF9468 

0x0063B3	$M.multi_chan_output.chain1_ch1_dc_remove_switch_op.param
        0064C7 FF9371 000001 000000 

0x0063B7	$M.multi_chan_output.chain1_rm_type_switch_op.next
0x0063B7	$chain1_rm_type_switch_op
        0062ED 

0x0063B8	$M.multi_chan_output.chain1_rm_type_switch_op.func
        FF9468 

0x0063B9	$M.multi_chan_output.chain1_rm_type_switch_op.param
        0064D0 FF90DC 000000 000000 

0x0063BD	$mono_tone_in_resample_copy_struc
        FF91A2 000001 00644D 000002 
        006450 FF944D 

0x0063C3	$stereo_tone_in_copy_op
0x0063C3	$stereo_tone_in_copy_op.next
        FFFFFF 

0x0063C4	$stereo_tone_in_copy_op.func
        00646E 

0x0063C5	$stereo_tone_in_copy_op.param
        000000 000001 000002 000008 

0x0063C9	$signal_detect_op.next
0x0063C9	$signal_detect_op
        FF93E6 

0x0063CA	$signal_detect_op.func
        FF9465 

0x0063CB	$signal_detect_op.param
        FF9305 000001 000000 

0x0063CE	$hw_warp_struct
        007D00 005799 000080 000000 
        000000 

0x0063D3	$tone_in_copy_op.next
0x0063D3	$tone_in_copy_op
        FFFFFF 

0x0063D4	$tone_in_copy_op.func
        006465 

0x0063D5	$tone_in_copy_op.param
        000000 000001 00000B 

0x0063D8	$analogue_in_right_copy_op
0x0063D8	$analogue_in_right_copy_op.next
        FFFFFF 

0x0063D9	$analogue_in_right_copy_op.func
        006465 

0x0063DA	$analogue_in_right_copy_op.param
        000001 000003 000008 

0x0063DD	$analogue_mono_in_left_copy_op
0x0063DD	$analogue_mono_in_left_copy_op.next
        FF93A1 

0x0063DE	$analogue_mono_in_left_copy_op.func
        006465 

0x0063DF	$analogue_mono_in_left_copy_op.param
        000001 000001 000008 

0x0063E2	$M.cbops.dac_av_copy.default_dac_av_copy_srtuct
        000000 000000 000000 000000 
        000000 

0x0063E7	$M.music_example_message.set_output_dev_type_s_message_struc
        000000 000000 000000 000000 

0x0063EB	$M.music_example_message.aux_volume_s_message_struc
        000000 000000 000000 000000 

0x0063EF	$M.music_example_message.multi_channel_aux_mute_s_message_struc
        000000 000000 000000 000000 

0x0063F3	$M.system_config.data.passthru_primary_right
        00621B 000000 FF4FB4 FF4FB5 

0x0063F7	$M.system_config.data.passthru_secondary_left
        FF91DB 000000 FF4FB6 FF4FB7 

0x0063FB	$M.system_config.data.left_headroom_obj
        FF91DB FF91DB 0064A6 0064A5 

0x0063FF	$M.system_config.data.n3dv_params
        000000 000000 000000 000000 

0x006403	$M.system_config.data.mode_table
        FF8F12 FF8F12 000F08 000000 

0x006407	$bdaddr_message_struc
        000000 000000 000000 000000 

0x00640B	$wall_clock_message_struc
        000000 000000 000000 000000 

0x00640F	$wall_clock_timer_struc
        000000 000000 000000 000000 

0x006413	$bass_timer_struc
        000000 000000 000000 000000 

0x006417	$M.configure_latency_reporting.message_struct
        000000 000000 000000 000000 

0x00641B	$M.multi_chan_output.handler_period_table_16bit
        0005DC 0002EE 0002EE 00012C 

0x00641F	$tone_copy_timer_struc
        000000 000000 000000 000000 

0x006423	$cbuffer.configure_port_message_struc
        000000 000000 000000 000000 

0x006427	$M.message.send_ready_wait_for_go.go_from_vm_message_struc
        000000 000000 000000 000000 

0x00642B	$pskey.result_fail_message_struc
        000000 000000 000000 000000 

0x00642F	$wall_clock.message_struc
        000000 000000 000000 000000 

0x006433	$M.iir_perform_resample.main_function_table
        000000 0010E1 000BDF 000A97 

0x006437	$M.frame_sync.usb_in_stereo_audio_copy.usb_in_state_fn
        000777 00078A 00078A 0007B4 

0x00643B	$M.system_config.data.delay_buf_aux_right_cbuffer_struc
        000BCD FF7000 FF7000 

0x00643E	$sub_out_1k2_cbuffer_struc
        00002D FF4FC0 FF4FC0 

0x006441	$codec_packets_info_cbuffer_struc
        000032 000780 000780 

0x006444	$multi_chan_primary_right_out_cbuffer_struc
        000360 002C00 002C00 

0x006447	$multi_chan_secondary_right_out_cbuffer_struc
        000360 003C00 003C00 

0x00644A	$multi_chan_aux_right_out_cbuffer_struc
        000360 005000 005000 

0x00644D	$tone_in_left_cbuffer_struc
        000100 FF3E00 FF3E00 

0x006450	$tone_in_left_resample_cbuffer_struc
        000600 004000 004000 

0x006453	$tone0_in_left_resample_cbuffer_struc
        000600 004000 004000 

0x006456	$tone1_in_left_resample_cbuffer_struc
        000600 004000 004000 

0x006459	$tone2_in_left_resample_cbuffer_struc
        000600 004000 004000 

0x00645C	$cbops.copy_op
        000000 000000 00158F 

0x00645F	$cbops.dither_and_shift
        000000 000000 000AF6 

0x006462	$cbops.one_to_two_chan_copy
        000000 000000 0013E5 

0x006465	$cbops.shift
        000000 000000 001504 

0x006468	$cbops.auto_upsample_and_mix
        000000 000000 000302 

0x00646B	$cbops.soft_mute
        000000 000000 003754 

0x00646E	$cbops.deinterleave
        000000 0016AB 00134A 

0x006471	$cbops_fir_resample_complete
        000000 000000 0016C4 

0x006474	$M.audio_proc.delay.process.write_byte_pos_func
        000863 000869 000871 

0x006477	$M.system_config.data.primout_r_pk_dtct
        006228 000000 

0x006479	$M.system_config.data.scndout_l_pk_dtct
        FF91F5 000000 

0x00647B	$M.system_config.data.auxout_l_pk_dtct
        FF9202 000000 

0x00647D	$M.multi_chan_output.chain1_pcm_latency_input_struct
        006303 000000 

0x00647F	$tone_in_resample_complete_op.next
0x00647F	$tone_in_resample_complete_op
        FFFFFF 

0x006480	$tone_in_resample_complete_op.func
        006471 

0x006481	$current_dac_sampling_rate
        000000 

0x006482	$local_encoded_play_back
        000000 

0x006483	$max_clock_mismatch
        000000 

0x006484	$inv_codec_fs
        14D555 

0x006485	$M.main.zero
        000000 

0x006486	$latency_calc_port_warp
        006485 

0x006487	$codec_config
        FFFFFF 

0x006488	$tmr_period_audio_copy
        000000 

0x006489	$sra_rate_addr
        005799 

0x00648A	$procResolutionMode
        000010 

0x00648B	$ancMode
        000000 

0x00648C	$debug_codec_in_level
        000000 

0x00648D	$M.av_audio_out_silence_insert.left_zero_samples
        000000 

0x00648E	$codec_resampler.resampler_active
        000000 

0x00648F	$music_example.Version
        000001 

0x006490	$music_example.reinit
        000001 

0x006491	$music_example.config_raw
        87FBC0 

0x006492	$music_example.SystemVolume
        00000B 

0x006493	$music_example.Aux.ToneVolume
        000000 

0x006494	$music_example.Aux.RightTrimVolume
        000000 

0x006495	$music_example.Main.ToneVolume
        000000 

0x006496	$music_example.Main.PrimaryRightTrimVolume
        000000 

0x006497	$music_example.Main.SecondaryRightTrimVolume
        000000 

0x006498	$music_example.DAC_IF_Connections
        000000 

0x006499	$music_example.I2S_IF_Connections
        000000 

0x00649A	$M.mips_profile.evalinterval_us
        0186A0 

0x00649B	$M.Sleep.LastUpdateTm
        000000 

0x00649C	$M.Sleep.sync_flag_esco
        000000 

0x00649D	$aux_vol_msg_echo
        000000 

0x00649E	$multichannel_vol_msg_echo
        000000 

0x00649F	$M.music_example.LoadParams.paramoffset
        000000 

0x0064A0	$M.music_example.LoadParams.Last_PsKey
        000000 

0x0064A1	$sra_resamp_adjust_int
        000001 

0x0064A2	$usb_state
        000000 

0x0064A3	$usb_pause_period_thresh
        000003 

0x0064A4	$usb_reset_pending
        000001 

0x0064A5	$M.system_config.data.ZeroValue
        000000 

0x0064A6	$M.system_config.data.headroom_mant
        200000 

0x0064A7	$M.system_config.data.BoostEqParams
        004E07 

0x0064A8	$M.system_config.data.uses_aux_out
        000000 

0x0064A9	$M.system_config.data.uses_wired_sub
        000000 

0x0064AA	$cmpd_subwoofer_gain
        000000 

0x0064AB	$M.system_config.data.dithertype
        000000 

0x0064AC	$DAC_conn_aux
        000000 

0x0064AD	$sub_link_port
        000000 

0x0064AE	$wall_clock_msw
        000000 

0x0064AF	$wall_clock_time
        000000 

0x0064B0	$sco_param_clock_msw
        000000 

0x0064B1	$sco_param_to_air_size
        000000 

0x0064B2	$sco_param_to_air_time
        000000 

0x0064B3	$sco_timer_id
        000000 

0x0064B4	$sub_app_esco_func
        000000 

0x0064B5	$M.Subwoofer.recompute_time_to_play_flag
        000000 

0x0064B6	$queue_another_bass_packet
        000000 

0x0064B7	$late_write_counter
        000000 

0x0064B8	$early_write_counter
        000000 

0x0064B9	$max_early_write
        000000 

0x0064BA	$M.downsample_sub_to_1k2.residual
        000000 

0x0064BB	$wall_clock_adjustment
        000000 

0x0064BC	$wall_clock_timer_id
        000000 

0x0064BD	$subwoofer.running
        000000 

0x0064BE	$codec_packets_info_last_write_address
        001000 

0x0064BF	$codec_packets_info_timer_gap
        001388 

0x0064C0	$M.report_latency_to_vm.smoothing_factor_low
        19999A 

0x0064C1	$M.report_latency_to_vm.reported_latency
        000000 

0x0064C2	$M.report_latency_to_vm.latency_max_counter
        000000 

0x0064C3	$M.configure_latency_reporting.report_period
        002710 

0x0064C4	$M.configure_latency_reporting.average_latency
        FFFFFF 

0x0064C5	$M.multi_chan_output.num_chain1_channels
        000000 

0x0064C6	$M.multi_chan_output.chain1_enables
        000000 

0x0064C7	$M.multi_chan_output.dc_remove_disable
        000000 

0x0064C8	$M.multi_chan_output.chain1_tone_mix_en
        000000 

0x0064C9	$M.multi_chan_output.aux_tone_mix_ratio
        000000 

0x0064CA	$M.multi_chan_output.chain0_sync_port
        000000 

0x0064CB	$M.multi_chan_output.tone0_in_left_read_ptr
        000000 

0x0064CC	$M.multi_chan_output.tone2_in_left_read_ptr
        000000 

0x0064CD	$M.multi_chan_output.tone1_in_right_read_ptr
        000000 

0x0064CE	$M.multi_chan_output.channels_mute_en
        000000 

0x0064CF	$M.multi_chan_output.chain1_mute_en
        000000 

0x0064D0	$chain1_hw_warp_enable
        000000 

0x0064D1	$M.multi_chan_port_scan_and_routing_config.fp_config_input
        000000 

0x0064D2	$stereo_tone
        000000 

0x0064D3	$no_tone_timer
        000000 

0x0064D4	$cbuffer.write_port_disconnect_address
        000000 

0x0064D5	$cbuffer.read_port_disconnect_address
        000000 

0x0064D6	$error.handler
        000000 

0x0064D7	$interrupt.block_count
        000000 

0x0064D8	$message.last_addr
        FFFFFF 

0x0064D9	$message.queue_write_ptr
        000000 

0x0064DA	$message.long_message_size
        000000 

0x0064DB	$pskey.request_in_progress
        000000 

0x0064DC	$timer.id
        000001 

0x0064DD	$wall_clock.last_addr
        FFFFFF 

0x0064DE	$cbops.amount_to_use
        000000 

0x0064DF	$M.cbops.av_copy.control_port
        000000 

0x0064E0	$M.cbops.dac_av_copy.buffer_level
        000000 

0x0064E1	$M.cbops.dither_and_shift.main.rand_num
        005555 

0x0064E2	$M.cbops.rate_adjustment_and_shift.main.dither_function
        000000 

0x0064E3	$M.cbops.iir_resamplev2.amount_used
        000000 

0x0064E4	$M.cbops.fir_resample.amount_used
        000000 

0x0064E5	$master_reset_needed
        000001 

0x0064E6	$M.frame_sync.handlers.LOOP_COUNT
        000000 

0x0064E7	$M.cmpd100.analysis.MusicComp_Peak_log
        000000 

0x0064E8	$M.cmpd100.analysis.inst_gain
        000000 

0x0064E9	$M.cmpd100.applygain.old_lin_gain
        000000 

0x0064EA	$M.spi_comm.last_addr
        FFFFFF 


------------------------------------------------------------------------
Region: DM2_REGION
------------------------------------------------------------------------
0xFF3000	$sbcdec.synthesis_vch1
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF30A0	$sbc.loudness_offset_m4_ram
0xFF30A0	$sbc.loudness_offset_ram
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF30B0	$sbc.loudness_offset_m8_ram
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF30D0	$M.system_config.data.spkr_eq_left_dm2
        FF91DB FF91DB 00000A FF8ED3 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 

0xFF30F9	$M.system_config.data.user_eq_bank_select
        000000 004E24 004E3A 004E50 
        004E66 004E7C 004E92 

0xFF3100	$sbcdec.synthesis_vch2
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF31A0	$sra_coeffs_hd_quality
        7649F5 7587F0 740625 71C90F 
        6ED751 6B399F 66FA9F 6226C4 
        5CCC23 56FA3E 50C1D1 4A3496 
        436505 3C661B 354B11 2E2720 
        270D3E 200FDE 1940B9 12B08B 
        0C6EE9 068A09 010E9C FC07A6 
        F77E66 F37A3C F00099 ED14FA 
        EAB8E5 E8EBF3 E7ABDA E6F485 
        E6C02E E7077E E7C1B4 E8E4D1 
        EA65C3 EC389A EE50B9 F0A10E 
        F31C43 F5B4F9 F85DF6 FB0A5D 
        FDADD7 003CC6 02AC66 04F2F6 
        0707D3 08E391 0A8013 0BD890 
        0CE9A2 0DB144 0E2ED0 0E62F2 
        0E4F9B 0DF7EE 0D6024 0C8D75 
        0B85F2 0A5068 08F438 077932 
        05E770 04472A 02A097 00FBC1 
        FF6067 FDD5DA FC62DE FB0D92 
        F9DB57 F8D0BD F7F178 F7404F 
        F6BF1D F66ECD F64F59 F65FD8 
        F69E86 F708CE F79B66 F85259 
        F92926 FA1AD7 FB2219 FC395A 
        FD5AE7 FE8103 FFA605 00C473 
        01D71A 02D922 03C626 049A46 
        055231 05EB37 06634D 06B915 
        06EBDE 06FBA5 06E90E 06B55E 
        066270 05F2AA 0568ED 04C880 
        041506 035263 0284AB 01B00D 
        00D8BB 0002DD FF3274 FE6B4F 
        FDB0F8 FD06A3 FC6F20 FBECD5 
        FB81B1 FB2F24 FAF620 FAD715 
        FAD1F1 FAE627 FB12B1 FB561A 
        FBAE86 FC19C3 FC954C FD1E61 
        FDB211 FE4D48 FEECE4 FF8DBF 
        002CC3 00C6F5 015985 01E1D9 
        025D9B 02CAC0 032791 0372B2 
        03AB26 03D04F 03E1F5 03E03D 
        03CBAA 03A51B 036DBD 03270B 
        02D2BE 0272CB 02094E 019889 
        0122D1 00AA85 003200 FFBB90 
        FF496C FEDDA4 FE7A1F FE208D 
        FDD264 FD90D8 FD5CD7 FD3708 
        FD1FC8 FD1728 FD1CF4 FD30B0 
        FD51A1 FD7ECE FDB70B FDF8F9 
        FE4318 FE93C4 FEE949 FF41E2 
        FF9BC8 FFF53C 004C89 00A012 
        00EE58 0135FD 0175D0 01ACCD 
        01DA22 01FD34 02159C 02232C 
        0225EC 021E1A 020C26 01F0AE 
        01CC7B 01A07D 016DC3 013575 
        00F8CF 00B91A 0077A6 0035C0 
        FFF4AF FFB5AF FF79E5 FF4260 
        FF1012 FEE3CD FEBE3F FE9FED 
        FE8939 FE7A5A FE735D FE742A 
        FE7C84 FE8C06 FEA22F FEBE5E 
        FEDFDA FF05D6 FF2F72 FF5BC5 
        FF89E0 FFB8D1 FFE7A9 001581 
        004180 006ADA 0090D8 00B2DA 
        00D058 00E8E5 00FC2F 010A04 
        01124B 01150B 011263 010A90 
        00FDE2 00ECC4 00D7AF 00BF2E 
        00A3DA 008652 00673C 004741 
        002707 000732 FFE85B FFCB13 
        FFAFDE FF9731 FF816E FF6EE7 
        FF5FDB FF5473 FF4CC6 FF48D7 
        FF4895 FF4BDF FF5280 FF5C37 
        FF68B5 FF77A0 FF8894 FF9B28 
        FFAEEE FFC376 FFD852 FFED15 
        000158 0014BB 0026E4 003785 
        00465C 005330 005DD8 006635 
        006C37 006FDA 007127 007032 
        006D1A 006807 00612C 0058C0 
        004F01 004431 003894 002C6F 
        002008 0013A2 00077B FFFBD0 
        FFF0D5 FFE6BC FFDDAB FFD5C4 
        FFCF21 FFC9D1 FFC5DF FFC34C 
        FFC212 FFC223 FFC36D FFC5D7 
        FFC944 FFCD92 FFD29D FFD83F 
        FFDE51 FFE4AB FFEB28 FFF1A3 
        FFF7F8 FFFE08 0003B7 0008ED 
        000D96 0011A1 001504 0017B9 
        0019BB 001B0F 001BB8 001BC1 
        001B36 001A24 00189D 0016B3 
        001479 001202 000F63 000CAD 
        0009F3 000746 0004B5 00024C 
        000016 FFFE1C FFFC65 FFFAF4 
        FFF9CC FFF8EC FFF852 FFF7FB 
        FFF7E1 FFF7FE FFF84B FFF8BF 
        FFF953 FFF9FE FFFAB9 FFFB7B 
        FFFC3E FFFCFB FFFDAD FFFE50 
        FFFEE0 FFFF5C FFFFC2 000013 
        00004E 000075 00008B 000093 
        00008E 000080 00006C 000056 
        00003E 000029 000017 00000A 
        000002 000000 

0xFF331A	$M.system_config.data.ParameterMap
        004EB9 0061C5 004EBA 0061C6 
        004EBB 0061C7 004EBC 0061C8 
        004EBD 0061C9 004EBE 0061CA 
        004EBF 0061CB 004EC0 0061CC 
        004EC1 0061CD 004EC2 0061CE 
        004EC3 0061CF 004EC4 0061D0 
        004EC5 0061D1 004EC6 0061D2 
        004EC7 0061D3 004F77 006185 
        004F78 006186 004F79 006187 
        004F7A 006188 004F7B 006189 
        004F7C 00618A 004F7D 00618B 
        004F7E 00618C 004F7F 00618D 
        004F80 00618E 004F81 00618F 
        004F82 006190 004F83 006191 
        004F84 006192 004F85 006193 
        004F86 006194 004F87 FF9163 
        004F88 FF9164 004F89 FF9165 
        004F8A FF9166 004F8B FF9167 
        004F8C FF9168 004F8D FF9169 
        004F8E FF916A 004F8F FF916B 
        004F90 FF916C 004F91 FF916D 
        004F92 FF916E 004F93 FF916F 
        004F94 FF9170 004F95 FF9171 
        004F96 FF9172 004DDC 0060DD 
        004F97 0060E7 004F98 0060E8 
        004F99 0060E9 004F9A 0060EA 
        004F9B 0060EB 004F9C 0060EC 
        004F9D 0060ED 004F9E 0060EE 
        004F9F 0060F2 004FA0 0060F3 
        004FA1 0060F4 004FA2 0060F5 
        004FA3 0060F6 004FA4 0060F7 
        004FA5 0060F8 004FA6 0060F9 
        004FA7 0060E3 004DDC FF9063 
        004FA8 FF906D 004FA9 FF906E 
        004FAA FF906F 004FAB FF9070 
        004FAC FF9071 004FAD FF9072 
        004FAE FF9073 004FAF FF9074 
        004FB0 FF9078 004FB1 FF9079 
        004FB2 FF907A 004FB3 FF907B 
        004FB4 FF907C 004FB5 FF907D 
        004FB6 FF907E 004FB7 FF907F 
        004FB8 FF9069 004FBB 0064AB 
        004DDC FF8FFE 004DDC 006195 
        004FBC 0064C7 004FBE 0062CD 
        004FBF 0062CE 004FC0 0062CF 
        004FC1 0062D0 004FC2 0062D1 
        004FC3 0062D2 004FC4 0062D3 
        004FC5 0062D4 006481 FF8C1A 
        006481 002F63 004FC7 0063FF 
        004FC8 006400 004FC9 006401 
        004FCA 006402 006481 FF8A6A 
        006481 FF8B06 000000 

0xFF33E9	$stack.buffer
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF34A9	$sbcdec.synthesis_coefs_m8_ram
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF3529	$sra_coeffs
        7898E8 77C2D9 76198F 73A2A2 
        70665A 6C6F8E 67CB70 62895B 
        5CBA95 567200 4FC3D4 48C549 
        418C41 3A2EF1 32C38B 2B5FE5 
        241928 1D037D 1631CA 0FB568 
        099DEE 03F8FD FED216 FA3281 
        F62134 F2A2CE EFB995 ED6585 
        EBA464 EA71E0 E9C7B7 E99DE7 
        E9EADD EAA3B6 EBBC77 ED2852 
        EED9E3 F0C377 F2D748 F507BF 
        F747AC F98A80 FBC47A FDEAD4 
        FFF3E8 01D74D 038DEB 05120A 
        065F5C 0772F6 084B4E 08E82B 
        094A90 0974A2 09698F 092D67 
        08C4F9 0835B0 078568 06BA47 
        05DA99 04ECAA 03F6A0 02FE61 
        02096F 011CD7 003D16 FF6E0D 
        FEB2F5 FE0E56 FD8207 FD0F2C 
        FCB642 FC7723 FC5112 FC42D0 
        FC4AA7 FC6680 FC93F9 FCD074 
        FD1930 FD6B5E FDC42E FE20E8 
        FE7EF5 FEDBF3 FF35BD FF8A72 
        FFD881 001EA9 005BFE 008FE3 
        00BA0C 00DA76 00F165 00FF56 
        0104F8 010327 00FADC 00ED23 
        00DB17 00C5D0 00AE63 0095D1 
        007D09 0064DC 004DFE 0038FF 
        00264C 00162F 0008CE FFFE32 
        FFF645 FFF0D8 FFEDA9 FFEC68 
        FFECB9 FFEE3B FFF091 FFF35D 
        FFF64F FFF920 FFFB98 FFFD91 
        FFFEF6 FFFFC1 

0xFF35A7	$M.system_config.data.spkr_eq_right_dm2
        00621B 00621B 00000A FF8ED3 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 

0xFF35D0	$M.system_config.data.spkr_ctrl_left_pri_eq_dm
        FF91E8 FF91E8 000007 002BCD 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF35F0	$M.system_config.data.spkr_ctrl_right_pri_eq_dm
        006228 006228 000007 002BCD 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF3610	$M.system_config.data.spkr_ctrl_left_sec_eq_dm
        FF91F5 FF91F5 000007 FF8F7F 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF3630	$M.system_config.data.spkr_ctrl_right_sec_eq_dm
        006235 006235 000007 FF8F7F 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF3650	$sbcdec.synthesis_coefs_m4_ram
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF3670	$M.system_config.data.spkr_ctrl_bass_eq_dm
        005B34 005B34 000006 FF8FD7 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 

0xFF368D	$M.system_config.data.anc_eq_left_dm2
        FF91DB FF91DB 000005 0057C8 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0xFF36A7	$M.system_config.data.anc_eq_right_dm2
        00621B 00621B 000005 0057C8 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0xFF36C1	$M.system_config.data.user_eq_left_dm2
        FF91DB FF91DB 000005 FF9022 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0xFF36DB	$M.system_config.data.user_eq_right_dm2
        00621B 00621B 000005 FF9022 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0xFF36F5	$M.system_config.data.sub_eq_dm2
        FF920F FF920F 000003 FF90C7 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 

0xFF3706	$sbcdec.bitmask_lookup_ram
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 

0xFF3717	$sbcdec.levelrecip_coefs_ram
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 

0xFF3726	$M.system_config.data.boost_eq_left_dm2
        FF91DB FF91DB 000001 FF9267 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0xFF3734	$M.system_config.data.boost_eq_right_dm2
        00621B 00621B 000001 FF9267 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0xFF3742	$M.system_config.data.MeloD_Expansion_struct
        FF91DB 00621B FF91DB 00621B 
        004DDC 000040 000000 006173 
        0061C5 

0xFF374B	$cbops.dither_and_shift.coeffs
        45E430 AE5D7D 45580B D37E72 
        0EE9D5 000000 000000 

0xFF3752	$M.cbops.rate_adjustment_and_shift.main.dither_coeffs
        45E430 AE5D7D 45580B D37E72 
        0EE9D5 000000 000000 

0xFF3759	$M.system_config.data.spkr_ctrl_pri_eq_bank_select
        000000 004EC9 004EE7 

0xFF375C	$M.system_config.data.spkr_ctrl_sec_eq_bank_select
        000000 004F06 004F24 

0xFF375F	$M.system_config.data.spkr_ctrl_bass_eq_bank_select
        000000 004F43 004F5D 

0xFF3762	$M.iir_resamplev2.fir_L4_M7_K10.coeffs
        FF9963 FFE4F0 FFFDB6 000000 
        FBF807 FCFD2B FE1B51 FF0328 
        06CD1E 001DD0 FCAD66 FB9A3F 
        458F80 31ABA5 1FD2E4 11569E 
        7FFFFF 78CBEF 6B62A4 598F18 

0xFF3776	$M.iir_resamplev2.fir_L2_M1_K10.coeffs
        002B5A 000000 FF9B87 009B13 
        F534D2 FAC27C 1E52F5 FC63A7 
        7FFFFF 54CFE6 

0xFF3780	$M.cbops.av_copy.left_silence_buffer
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 

0xFF37F9	$M.iir_resamplev2.fir_L1_M2_K10.coeffs
        E5884E E94580 12BFED 51683D 
        7FFFFF 

0xFF37FE	$pcm_latency_input_struct
        FF9153 FF93AA 

0xFF3800	$tone_in_right_resample
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF3E00	$tone_in_left
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF3F00	$tone_in_right
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF4000	$M.system_config.data.delay_buf_pri_left
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 

0xFF4BCD	$M.iir_resamplev2.Up_147_Down_320.int_ratio
0xFF4BCD	$M.iir_resamplev2.Up_147_Down_320.filter
        000002 

0xFF4BCE	$M.iir_resamplev2.Up_147_Down_320.frac_ratio
        16A3B3 

0xFF4BCF	$M.iir_resamplev2.Up_147_Down_320.int_ratio_s1
        000000 

0xFF4BD0	$M.iir_resamplev2.Up_147_Down_320.frac_ratio_s1
        3CF3CF 

0xFF4BD1	$M.iir_resamplev2.Up_147_Down_320.func_ptr1_s1
        000001 

0xFF4BD2	$M.iir_resamplev2.Up_147_Down_320.FIR_Size_s1
        000006 

0xFF4BD3	$M.iir_resamplev2.Up_147_Down_320.IIR_Size_s1
        000000 

0xFF4BD4	$M.iir_resamplev2.Up_147_Down_320.Rout_s1
        000015 

0xFF4BD5	$M.iir_resamplev2.Up_147_Down_320.input_scale_s1
        000007 

0xFF4BD6	$M.iir_resamplev2.Up_147_Down_320.FirFilter_s1
        FF7F34 

0xFF4BD7	$M.iir_resamplev2.Up_147_Down_320.FracRatio_s1
        3CF3D0 

0xFF4BD8	$M.iir_resamplev2.Up_147_Down_320.func_ptr1_s2
        000003 

0xFF4BD9	$M.iir_resamplev2.Up_147_Down_320.FIR_Size_s2
        00000A 

0xFF4BDA	$M.iir_resamplev2.Up_147_Down_320.IIR_Size_s2
        000013 

0xFF4BDB	$M.iir_resamplev2.Up_147_Down_320.Rout_s2
        000007 

0xFF4BDC	$M.iir_resamplev2.Up_147_Down_320.input_scale_s2
        FFFFF9 

0xFF4BDD	$M.iir_resamplev2.Up_147_Down_320.output_scale_s2
        FFFFF7 

0xFF4BDE	$M.iir_resamplev2.Up_147_Down_320.FirFilter_s2
        FF8898 

0xFF4BDF	$M.iir_resamplev2.Up_147_Down_320.FracRatio_s2
        492493 

0xFF4BE0	$M.iir_resamplev2.Up_147_Down_320.IntRatio_s2
        000004 

0xFF4BE1	$M.iir_resamplev2.Up_147_Down_320.IIRFunction_s2
        000002 

0xFF4BE2	$M.iir_resamplev2.Up_147_Down_320.IIRCoeffs_s21
        025535 000000 F3998A 3A615E 
        8BD44E 79EFA9 BC57E8 

0xFF4BE9	$M.iir_resamplev2.Up_147_Down_320.IIRScale_s21
        000003 

0xFF4BEA	$M.iir_resamplev2.Up_147_Down_320.IIRCoeffs_s22
        0048DF 000000 0CE8ED CF8C88 
        49D719 CA4327 

0xFF4BF0	$M.iir_resamplev2.Up_147_Down_320.IIRScale_s22
        000003 

0xFF4BF1	$M.iir_resamplev2.Up_147_Down_320.IIRCoeffs_s23
        005BF0 0C4AB2 CFFF2D 4A8C8E 
        C9690D 

0xFF4BF6	$M.iir_resamplev2.Up_147_Down_320.IIRScale_s23
        000003 

0xFF4BF7	$M.iir_resamplev2.Up_147_Down_320.IIRCoeffs_s24
        0088FC 0BCE7A D036FF 4B8DDE 
        C87F9F 

0xFF4BFC	$M.iir_resamplev2.Up_147_Down_320.IIRScale_s24
        000003 

0xFF4BFD	$codec_in_cbuffer_struc
        001000 001000 001000 

0xFF4C00	$multi_chan_secondary_left_out
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF4F60	$M.iir_resamplev2.fir_L4_M1_K10.coeffs
        004B72 0010FA FFFFD6 000000 
        004F1B 012883 011C49 00B23D 
        F39204 F67313 FA8E7F FE1C72 
        21F045 0AE75B FBAB6D F47264 
        7FFFFF 72A641 5AFFA0 3E31F4 

0xFF4F74	$M.main.write_port_disconnected_function_table
        001BF8 001BF8 003233 003233 
        003233 003233 003233 003233 
        003233 003233 003233 003233 

0xFF4F80	$sub_codec_out
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0xFF4FB2	$M.system_config.data.ModeControl
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0xFF4FC0	$sub_out_1k2
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 

0xFF4FED	$M.iir_resamplev2.fir_L3_M1_K10.coeffs
        FE8D2F FF79F6 004647 043253 
        004510 FE5DAC F946D5 03EAF1 
        0702B8 00F96E EBE55D ED1295 
        7FFFFF 5E4D6D 2C305E 

0xFF4FFC	$con_in_timer_struc
        000000 000000 000000 000000 

0xFF5000	$M.system_config.data.delay_buf_pri_right
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 

0xFF5BCD	$M.iir_resamplev2.Up_147_Down_80.filter
0xFF5BCD	$M.iir_resamplev2.Up_147_Down_80.int_ratio
        000000 

0xFF5BCE	$M.iir_resamplev2.Up_147_Down_80.frac_ratio
        45A8ED 

0xFF5BCF	$M.iir_resamplev2.Up_147_Down_80.int_ratio_s1
        000000 

0xFF5BD0	$M.iir_resamplev2.Up_147_Down_80.frac_ratio_s1
        3CF3CF 

0xFF5BD1	$M.iir_resamplev2.Up_147_Down_80.func_ptr1_s1
        000001 

0xFF5BD2	$M.iir_resamplev2.Up_147_Down_80.FIR_Size_s1
        000006 

0xFF5BD3	$M.iir_resamplev2.Up_147_Down_80.IIR_Size_s1
        000000 

0xFF5BD4	$M.iir_resamplev2.Up_147_Down_80.Rout_s1
        000015 

0xFF5BD5	$M.iir_resamplev2.Up_147_Down_80.input_scale_s1
        000007 

0xFF5BD6	$M.iir_resamplev2.Up_147_Down_80.FirFilter_s1
        FF7F34 

0xFF5BD7	$M.iir_resamplev2.Up_147_Down_80.FracRatio_s1
        3CF3D0 

0xFF5BD8	$M.iir_resamplev2.Up_147_Down_80.func_ptr1_s2
        000003 

0xFF5BD9	$M.iir_resamplev2.Up_147_Down_80.FIR_Size_s2
        00000A 

0xFF5BDA	$M.iir_resamplev2.Up_147_Down_80.IIR_Size_s2
        000013 

0xFF5BDB	$M.iir_resamplev2.Up_147_Down_80.Rout_s2
        000007 

0xFF5BDC	$M.iir_resamplev2.Up_147_Down_80.input_scale_s2
        FFFFF9 

0xFF5BDD	$M.iir_resamplev2.Up_147_Down_80.output_scale_s2
        FFFFF8 

0xFF5BDE	$M.iir_resamplev2.Up_147_Down_80.FirFilter_s2
        FF8852 

0xFF5BDF	$M.iir_resamplev2.Up_147_Down_80.FracRatio_s2
        124926 

0xFF5BE0	$M.iir_resamplev2.Up_147_Down_80.IntRatio_s2
        000001 

0xFF5BE1	$M.iir_resamplev2.Up_147_Down_80.IIRFunction_s2
        000001 

0xFF5BE2	$M.iir_resamplev2.Up_147_Down_80.IIRCoeffs_s21
        1950A0 FC472A 1068EE D95F73 
        3BF680 BE612D 32E641 E5877B 

0xFF5BEA	$M.iir_resamplev2.Up_147_Down_80.IIRScale_s21
        000004 

0xFF5BEB	$M.iir_resamplev2.Up_147_Down_80.IIRCoeffs_s22
        0288E1 07D6DF E19AFE 3FC492 
        AA63B8 4E6316 D19633 

0xFF5BF2	$M.iir_resamplev2.Up_147_Down_80.IIRScale_s22
        000003 

0xFF5BF3	$M.iir_resamplev2.Up_147_Down_80.IIRCoeffs_s23
        03DBB8 06FF00 E00C87 476F04 
        9C3222 5B984B CA8F01 

0xFF5BFA	$M.iir_resamplev2.Up_147_Down_80.IIRScale_s23
        000003 

0xFF5BFB	$codec_in_copy_struc
        0000E4 000001 800000 000001 
        FF4BFD 

0xFF5C00	$multi_chan_aux_left_out
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF5F60	$M.iir_resamplev2.fir_L40_M21_K6.coeffs
        00192B 0045FD 006BC5 008AE8 
        00A3D9 00B70E 00C503 00CE37 
        00D329 00D459 00D241 00CD5B 
        00C61B 00BCEE 00B23D 00A668 
        0099C8 008CAE 007F61 007223 
        00652B 0058A9 004CC4 00419D 
        00374C 002DE3 00256D 001DEF 
        001769 0011D7 000D2D 00095F 
        00065C 00040F 000263 000140 
        00008C 00002C 000007 000000 
        FF052E FD3502 FB9622 FA2780 
        F8E7CC F7D575 F6EEB4 F63190 
        F59BE4 F52B67 F4DDB2 F4B048 
        F4A09A F4AC0F F4D00A F509EF 
        F5572A F5B532 F62191 F699E4 
        F71BE2 F7A55F F8344D F8C6C3 
        F95AF8 F9EF4A FA823E FB1280 
        FB9EE0 FC2659 FCA809 FD2335 
        FD9744 FE03C2 FE6858 FEC4D1 
        FF1912 FF6519 FFA900 FFE4F1 
        7FFFFF 7FAA20 7EFEE4 7DFF4D 
        7CACD9 7B0985 7917C1 76DA72 
        7454E8 718AD7 6E8051 6B39BE 
        67BBD2 640B83 602E00 5C28A8 
        5800FD 53BC9B 4F612C 4AF460 
        467BDF 41FD40 3D7E00 39037A 
        3492D8 303111 2BE2DD 27ACB0 
        2392B3 1F98BE 1BC253 18129B 
        148C63 113217 0E05C6 0B091B 
        083D64 05A38E 033C28 010769 

0xFF5FD8	$M.iir_resamplev2.fir_L8_M7_K10.coeffs
        FF3E47 FF6C7F FF97C1 FFBD1B 
        FFDABF FFEFCA FFFC13 000000 
        00D48D FFEC08 FF5441 FEFCEA 
        FED700 FED522 FEEBCC FF1168 
        1AC598 154C35 10815E 0C64D1 
        08F14F 061D65 03DC4E 021EE5 
        578E06 4F5F8F 470F3E 3EC897 
        36B3B7 2EF438 27A84B 20E821 
        7FFFFF 7EB058 7C1A04 784E9D 
        7367A9 6D859E 66CEA1 5F6D15 

0xFF6000	$M.system_config.data.delay_buf_sec_right
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 

0xFF6BCD	$M.iir_resamplev2.Up_160_Down_147.filter
0xFF6BCD	$M.iir_resamplev2.Up_160_Down_147.int_ratio
        000000 

0xFF6BCE	$M.iir_resamplev2.Up_160_Down_147.frac_ratio
        75999A 

0xFF6BCF	$M.iir_resamplev2.Up_160_Down_147.int_ratio_s1
        000000 

0xFF6BD0	$M.iir_resamplev2.Up_160_Down_147.frac_ratio_s1
        433333 

0xFF6BD1	$M.iir_resamplev2.Up_160_Down_147.func_ptr1_s1
        000001 

0xFF6BD2	$M.iir_resamplev2.Up_160_Down_147.FIR_Size_s1
        000006 

0xFF6BD3	$M.iir_resamplev2.Up_160_Down_147.IIR_Size_s1
        000000 

0xFF6BD4	$M.iir_resamplev2.Up_160_Down_147.Rout_s1
        000028 

0xFF6BD5	$M.iir_resamplev2.Up_160_Down_147.input_scale_s1
        000007 

0xFF6BD6	$M.iir_resamplev2.Up_160_Down_147.FirFilter_s1
        FF5F60 

0xFF6BD7	$M.iir_resamplev2.Up_160_Down_147.FracRatio_s1
        433334 

0xFF6BD8	$M.iir_resamplev2.Up_160_Down_147.func_ptr1_s2
        000003 

0xFF6BD9	$M.iir_resamplev2.Up_160_Down_147.FIR_Size_s2
        00000A 

0xFF6BDA	$M.iir_resamplev2.Up_160_Down_147.IIR_Size_s2
        000013 

0xFF6BDB	$M.iir_resamplev2.Up_160_Down_147.Rout_s2
        000004 

0xFF6BDC	$M.iir_resamplev2.Up_160_Down_147.input_scale_s2
        FFFFF9 

0xFF6BDD	$M.iir_resamplev2.Up_160_Down_147.output_scale_s2
        FFFFF9 

0xFF6BDE	$M.iir_resamplev2.Up_160_Down_147.FirFilter_s2
        FF3762 

0xFF6BDF	$M.iir_resamplev2.Up_160_Down_147.FracRatio_s2
        600001 

0xFF6BE0	$M.iir_resamplev2.Up_160_Down_147.IntRatio_s2
        000001 

0xFF6BE1	$M.iir_resamplev2.Up_160_Down_147.IIRFunction_s2
        000000 

0xFF6BE2	$M.iir_resamplev2.Up_160_Down_147.IIRCoeffs_s21
        126DE1 012549 F936BB 158A93 
        D14CB0 4B88F6 A147C2 5D47B7 
        B8581F 29A476 EF0696 

0xFF6BED	$M.iir_resamplev2.Up_160_Down_147.IIRScale_s21
        000005 

0xFF6BEE	$M.iir_resamplev2.Up_160_Down_147.IIRCoeffs_s22
        002DBC FEDAB7 06B358 EB875C 
        29E241 C16137 46C3C6 C359EA 
        2668A0 EF5323 

0xFF6BF8	$M.iir_resamplev2.Up_160_Down_147.IIRScale_s22
        000005 

0xFF6BF9	$M.system_config.data.spkr_ctrl_init_struct
        006268 003BFA FF3759 000000 
        000000 00632D FF375F 

0xFF6C00	$codec_resamp_out_left
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF6F34	$M.iir_resamplev2.fir_L21_M8_K10.coeffs
        FF69FF FF7082 FF7879 FF8191 
        FF8B7B FF95F3 FFA0B8 FFAB92 
        FFB64F FFC0C0 FFCABF FFD428 
        FFDCDE FFE4C5 FFEBC9 FFF1D7 
        FFF6E0 FFFAD6 FFFDB2 FFFF6C 
        000000 03BF9F 032646 029BD1 
        021F73 01B05D 014DBF 00F6CC 
        00AAB9 0068BD 003014 000000 
        FFD7C6 FFB6B5 FF9C1F FF875F 
        FF77D9 FF6CF7 FF662C FF62F3 
        FF62D0 FF654D 22079B 1FBD31 
        1D87E8 1B6846 195EB8 176B8C 
        158EFB 13C920 1219FF 108185 
        0EFF88 0D93CA 0C3DF7 0AFDAA 
        09D26E 08BBBD 07B903 06C9A1 
        05ECEA 05222C 0468AA 5D268F 
        5A508D 576E4D 548206 518DE7 
        4E941C 4B96CA 489808 4599E4 
        429E5B 3FA75A 3CB6BB 39CE45 
        36EFA7 341C79 31563D 2E9E58 
        2BF617 295EA9 26D925 246681 
        7FFFFF 7FD3C8 7F7B83 7EF780 
        7E4838 7D6E4A 7C6A7D 7B3DBC 
        79E916 786DBD 76CD04 75085D 
        732157 71199E 6EF2F5 6CAF37 
        6A5052 67D847 654926 62A50D 
        5FEE20 

0xFF6F9D	$M.iir_resamplev2.fir_L16_M7_K10.coeffs
        FF2624 FF3DCC FF5592 FF6CE9 
        FF835A FF9883 FFAC17 FFBDDB 
        FFCDA2 FFDB4D FFE6CB FFF017 
        FFF732 FFFC29 FFFF0F 000000 
        0123DE 00957C 001EB5 FFBD68 
        FF6F7D FF32EB FF05BA FEE609 
        FED20D FEC818 FEC698 FECC18 
        FED744 FEE6E4 FEF9E1 FF0F40 
        1C7B9B 1991E9 16D2B0 143EA7 
        11D627 0F9931 0D8773 0BA050 
        09E2E3 084E05 06E059 05984F 
        04742D 037213 02900A 01CC02 
        59ACB7 55AABB 51978D 4D78D5 
        49541F 452ED7 410E33 3CF733 
        38EE92 34F8C2 3119E1 2D55B6 
        29AFAB 262AC9 22C9B5 1F8EB2 
        7FFFFF 7FAC58 7F0598 7E0CDB 
        7CC3C9 7B2C8F 7949DA 771ED3 
        74AF14 71FEA3 6F11E2 6BED8A 
        68969F 65125F 61663B 5D97C9 

0xFF6FED	$M.iir_resamplev2.fir_L3_M2_K10.coeffs
        004CBB 000DB7 000000 FF0BD3 
        0082B5 00A27E F4FD59 F74DCC 
        FBB02D 25DF93 0996C2 F99AB5 
        7FFFFF 6B7916 49BEBE 

0xFF6FFC	$signal_detect_timer_struc
        000000 000000 000000 000000 

0xFF7000	$M.system_config.data.delay_buf_aux_right
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 

0xFF7BCD	$M.iir_resamplev2.Up_147_Down_160.int_ratio
0xFF7BCD	$M.iir_resamplev2.Up_147_Down_160.filter
        000001 

0xFF7BCE	$M.iir_resamplev2.Up_147_Down_160.frac_ratio
        0B51DA 

0xFF7BCF	$M.iir_resamplev2.Up_147_Down_160.int_ratio_s1
        000000 

0xFF7BD0	$M.iir_resamplev2.Up_147_Down_160.frac_ratio_s1
        3CF3CF 

0xFF7BD1	$M.iir_resamplev2.Up_147_Down_160.func_ptr1_s1
        000001 

0xFF7BD2	$M.iir_resamplev2.Up_147_Down_160.FIR_Size_s1
        000006 

0xFF7BD3	$M.iir_resamplev2.Up_147_Down_160.IIR_Size_s1
        000000 

0xFF7BD4	$M.iir_resamplev2.Up_147_Down_160.Rout_s1
        000015 

0xFF7BD5	$M.iir_resamplev2.Up_147_Down_160.input_scale_s1
        000007 

0xFF7BD6	$M.iir_resamplev2.Up_147_Down_160.FirFilter_s1
        FF7F34 

0xFF7BD7	$M.iir_resamplev2.Up_147_Down_160.FracRatio_s1
        3CF3D0 

0xFF7BD8	$M.iir_resamplev2.Up_147_Down_160.func_ptr1_s2
        000003 

0xFF7BD9	$M.iir_resamplev2.Up_147_Down_160.FIR_Size_s2
        00000A 

0xFF7BDA	$M.iir_resamplev2.Up_147_Down_160.IIR_Size_s2
        000013 

0xFF7BDB	$M.iir_resamplev2.Up_147_Down_160.Rout_s2
        000007 

0xFF7BDC	$M.iir_resamplev2.Up_147_Down_160.input_scale_s2
        FFFFF9 

0xFF7BDD	$M.iir_resamplev2.Up_147_Down_160.output_scale_s2
        FFFFF8 

0xFF7BDE	$M.iir_resamplev2.Up_147_Down_160.FirFilter_s2
        FF8875 

0xFF7BDF	$M.iir_resamplev2.Up_147_Down_160.FracRatio_s2
        24924A 

0xFF7BE0	$M.iir_resamplev2.Up_147_Down_160.IntRatio_s2
        000002 

0xFF7BE1	$M.iir_resamplev2.Up_147_Down_160.IIRFunction_s2
        000000 

0xFF7BE2	$M.iir_resamplev2.Up_147_Down_160.IIRCoeffs_s21
        010EA0 00B4A5 FAEC08 124FF2 
        D4F5F1 48910C A4811A 576A65 
        C14A41 2090F8 F4CADB 

0xFF7BED	$M.iir_resamplev2.Up_147_Down_160.IIRScale_s21
        000006 

0xFF7BEE	$M.iir_resamplev2.Up_147_Down_160.IIRCoeffs_s22
        002BB9 FE96B6 09B4B6 DF1AC6 
        476E88 92F341 7944E0 9D8C40 
        38983F EADC4F 

0xFF7BF8	$M.iir_resamplev2.Up_147_Down_160.IIRScale_s22
        000005 

0xFF7BF9	$M.multi_chan_output.wired_out_port_table
        800011 800012 800015 800016 
        800013 800014 800010 

0xFF7C00	$codec_rate_adj_out_left
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF7F34	$M.iir_resamplev2.fir_L21_M10_K6.coeffs
        002D83 007554 00A5E9 00C270 
        00CE4C 00CCE3 00C17C 00AF1E 
        00987C 007FE4 00673A 004FF5 
        003B20 002966 001B1A 001040 
        0008A0 0003CD 000135 00002E 
        000000 FE2E6C FB11F8 F8A2C3 
        F6D640 F59F18 F4EDD2 F4B176 
        F4D832 F54FF9 F6070F F6EC87 
        F7F0B0 F90565 FA1E4B FB30F8 
        FC3500 FD23F6 FDF952 FEB24D 
        FF4DB4 FFCBAF 7FFFFF 7EC8AD 
        7C60AF 78D51B 743918 6EA54C 
        683727 611005 595441 512A2D 
        48B907 4027F1 379CEA 2F3BE0 
        2725DC 1F7845 184C53 11B69D 
        0BC6DC 0687CE 01FF49 

0xFF7F73	$M.iir_resamplev2.Up_441_Down_320.filter
0xFF7F73	$M.iir_resamplev2.Up_441_Down_320.int_ratio
        000000 

0xFF7F74	$M.iir_resamplev2.Up_441_Down_320.frac_ratio
        5CE13C 

0xFF7F75	$M.iir_resamplev2.Up_441_Down_320.int_ratio_s1
        000000 

0xFF7F76	$M.iir_resamplev2.Up_441_Down_320.frac_ratio_s1
        3CF3CF 

0xFF7F77	$M.iir_resamplev2.Up_441_Down_320.func_ptr1_s1
        000001 

0xFF7F78	$M.iir_resamplev2.Up_441_Down_320.FIR_Size_s1
        000006 

0xFF7F79	$M.iir_resamplev2.Up_441_Down_320.IIR_Size_s1
        000000 

0xFF7F7A	$M.iir_resamplev2.Up_441_Down_320.Rout_s1
        000015 

0xFF7F7B	$M.iir_resamplev2.Up_441_Down_320.input_scale_s1
        000007 

0xFF7F7C	$M.iir_resamplev2.Up_441_Down_320.FirFilter_s1
        FF7F34 

0xFF7F7D	$M.iir_resamplev2.Up_441_Down_320.FracRatio_s1
        3CF3D0 

0xFF7F7E	$M.iir_resamplev2.Up_441_Down_320.func_ptr1_s2
        000003 

0xFF7F7F	$M.iir_resamplev2.Up_441_Down_320.FIR_Size_s2
        00000A 

0xFF7F80	$M.iir_resamplev2.Up_441_Down_320.IIR_Size_s2
        000013 

0xFF7F81	$M.iir_resamplev2.Up_441_Down_320.Rout_s2
        000015 

0xFF7F82	$M.iir_resamplev2.Up_441_Down_320.input_scale_s2
        FFFFF9 

0xFF7F83	$M.iir_resamplev2.Up_441_Down_320.output_scale_s2
        FFFFF9 

0xFF7F84	$M.iir_resamplev2.Up_441_Down_320.FirFilter_s2
        FF6F34 

0xFF7F85	$M.iir_resamplev2.Up_441_Down_320.FracRatio_s2
        430C32 

0xFF7F86	$M.iir_resamplev2.Up_441_Down_320.IntRatio_s2
        000001 

0xFF7F87	$M.iir_resamplev2.Up_441_Down_320.IIRFunction_s2
        000000 

0xFF7F88	$M.iir_resamplev2.Up_441_Down_320.IIRCoeffs_s21
        01DAA0 00A5D4 FBB33F 0EB2F6 
        DE9B31 375325 BA6945 43543C 
        CE4C70 1B0E4C F6015A 

0xFF7F93	$M.iir_resamplev2.Up_441_Down_320.IIRScale_s21
        000006 

0xFF7F94	$M.iir_resamplev2.Up_441_Down_320.IIRCoeffs_s22
        003057 FEB458 085037 E50E02 
        39048E A9C4E7 6080C7 AFDCE6 
        2FFD13 ECE4FB 

0xFF7F9E	$M.iir_resamplev2.Up_441_Down_320.IIRScale_s22
        000005 

0xFF7F9F	$M.iir_resamplev2.Up_80_Down_147.filter
0xFF7F9F	$M.iir_resamplev2.Up_80_Down_147.int_ratio
        000001 

0xFF7FA0	$M.iir_resamplev2.Up_80_Down_147.frac_ratio
        6B3333 

0xFF7FA1	$M.iir_resamplev2.Up_80_Down_147.int_ratio_s1
        000000 

0xFF7FA2	$M.iir_resamplev2.Up_80_Down_147.frac_ratio_s1
        000000 

0xFF7FA3	$M.iir_resamplev2.Up_80_Down_147.func_ptr1_s1
        000000 

0xFF7FA4	$M.iir_resamplev2.Up_80_Down_147.func_ptr1_s2
        000003 

0xFF7FA5	$M.iir_resamplev2.Up_80_Down_147.FIR_Size_s2
        00000A 

0xFF7FA6	$M.iir_resamplev2.Up_80_Down_147.IIR_Size_s2
        000013 

0xFF7FA7	$M.iir_resamplev2.Up_80_Down_147.Rout_s2
        000050 

0xFF7FA8	$M.iir_resamplev2.Up_80_Down_147.input_scale_s2
        000000 

0xFF7FA9	$M.iir_resamplev2.Up_80_Down_147.output_scale_s2
        FFFFF8 

0xFF7FAA	$M.iir_resamplev2.Up_80_Down_147.FirFilter_s2
        FF85DC 

0xFF7FAB	$M.iir_resamplev2.Up_80_Down_147.FracRatio_s2
        6B3334 

0xFF7FAC	$M.iir_resamplev2.Up_80_Down_147.IntRatio_s2
        000001 

0xFF7FAD	$M.iir_resamplev2.Up_80_Down_147.IIRFunction_s2
        000003 

0xFF7FAE	$M.iir_resamplev2.Up_80_Down_147.IIRCoeffs_s21
        5322EE 2BA913 BD5274 6ECE95 
        B99C26 

0xFF7FB3	$M.iir_resamplev2.Up_80_Down_147.IIRScale_s21
        000001 

0xFF7FB4	$M.iir_resamplev2.Up_80_Down_147.IIRCoeffs_s22
        2D5EA8 27515F B0B821 7118A4 
        A4A853 

0xFF7FB9	$M.iir_resamplev2.Up_80_Down_147.IIRScale_s22
        000001 

0xFF7FBA	$M.iir_resamplev2.Up_80_Down_147.IIRCoeffs_s23
        374FB1 23FDE5 A49BC5 7D9BEA 
        8DE6DD 

0xFF7FBF	$M.iir_resamplev2.Up_80_Down_147.IIRScale_s23
        000001 

0xFF7FC0	$M.iir_resamplev2.Up_80_Down_147.IIRCoeffs_s24
        19A90C 10C3A7 CCE3EC 497863 
        BBF2A0 

0xFF7FC5	$M.iir_resamplev2.Up_80_Down_147.IIRScale_s24
        000002 

0xFF7FC6	$M.iir_resamplev2.Up_80_Down_147.IIRCoeffs_s25
        3B6E18 D940D7 584400 9977C1 

0xFF7FCA	$M.iir_resamplev2.Up_80_Down_147.IIRScale_s25
        000001 

0xFF7FCB	$M.iir_resamplev2.Up_441_Down_160.int_ratio
0xFF7FCB	$M.iir_resamplev2.Up_441_Down_160.filter
        000000 

0xFF7FCC	$M.iir_resamplev2.Up_441_Down_160.frac_ratio
        2E709E 

0xFF7FCD	$M.iir_resamplev2.Up_441_Down_160.int_ratio_s1
        000000 

0xFF7FCE	$M.iir_resamplev2.Up_441_Down_160.frac_ratio_s1
        3CF3CF 

0xFF7FCF	$M.iir_resamplev2.Up_441_Down_160.func_ptr1_s1
        000001 

0xFF7FD0	$M.iir_resamplev2.Up_441_Down_160.FIR_Size_s1
        000006 

0xFF7FD1	$M.iir_resamplev2.Up_441_Down_160.IIR_Size_s1
        000000 

0xFF7FD2	$M.iir_resamplev2.Up_441_Down_160.Rout_s1
        000015 

0xFF7FD3	$M.iir_resamplev2.Up_441_Down_160.input_scale_s1
        000007 

0xFF7FD4	$M.iir_resamplev2.Up_441_Down_160.FirFilter_s1
        FF7F34 

0xFF7FD5	$M.iir_resamplev2.Up_441_Down_160.FracRatio_s1
        3CF3D0 

0xFF7FD6	$M.iir_resamplev2.Up_441_Down_160.func_ptr1_s2
        000002 

0xFF7FD7	$M.iir_resamplev2.Up_441_Down_160.FIR_Size_s2
        00000A 

0xFF7FD8	$M.iir_resamplev2.Up_441_Down_160.IIR_Size_s2
        00000F 

0xFF7FD9	$M.iir_resamplev2.Up_441_Down_160.Rout_s2
        000015 

0xFF7FDA	$M.iir_resamplev2.Up_441_Down_160.input_scale_s2
        FFFFF9 

0xFF7FDB	$M.iir_resamplev2.Up_441_Down_160.output_scale_s2
        FFFFF9 

0xFF7FDC	$M.iir_resamplev2.Up_441_Down_160.FirFilter_s2
        FF6F34 

0xFF7FDD	$M.iir_resamplev2.Up_441_Down_160.FracRatio_s2
        618619 

0xFF7FDE	$M.iir_resamplev2.Up_441_Down_160.IntRatio_s2
        000000 

0xFF7FDF	$M.iir_resamplev2.Up_441_Down_160.IIRFunction_s2
        000004 

0xFF7FE0	$M.iir_resamplev2.Up_441_Down_160.IIRCoeffs_s21
        0B6A70 043DED EAE08C 31263F 
        BBDB01 3B4FC8 E0DBA9 

0xFF7FE7	$M.iir_resamplev2.Up_441_Down_160.IIRScale_s21
        000004 

0xFF7FE8	$M.iir_resamplev2.Up_441_Down_160.IIRCoeffs_s22
        01CA86 F70BCC 25E520 B60E9A 
        522202 CBB779 

0xFF7FEE	$M.iir_resamplev2.Up_441_Down_160.IIRScale_s22
        000003 

0xFF7FEF	$M.iir_resamplev2.Up_441_Down_160.IIRCoeffs_s23
        022E26 134B43 BCED2E 68FE06 
        AB1AB0 

0xFF7FF4	$M.iir_resamplev2.Up_441_Down_160.IIRScale_s23
        000002 

0xFF7FF5	$calc_chain1_actual_port_rate_struc
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 

0xFF8000	$audio_out_right
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF85DC	$M.iir_resamplev2.fir_L80_M147_K10.coeffs
        FFE755 FFEBF4 FFF054 FFF475 
        FFF85A FFFC03 FFFF73 0002AB 
        0005AC 000879 000B12 000D7A 
        000FB1 0011BA 001396 001547 
        0016CD 00182B 001963 001A75 
        001B63 001C2F 001CDA 001D65 
        001DD3 001E24 001E5A 001E76 
        001E7A 001E66 001E3D 001E00 
        001DAF 001D4D 001CDA 001C57 
        001BC6 001B28 001A7E 0019C9 
        00190B 001844 001775 00169F 
        0015C4 0014E5 001401 00131B 
        001232 001149 00105F 000F75 
        000E8D 000DA7 000CC4 000BE4 
        000B08 000A30 00095E 000892 
        0007CD 00070E 000657 0005A7 
        000500 000462 0003CD 000341 
        0002C0 000248 0001DB 000179 
        000121 0000D5 000094 00005F 
        000036 000018 000006 000000 
        FA87FA FAA096 FAB960 FAD250 
        FAEB61 FB048D FB1DCD FB371C 
        FB5075 FB69D0 FB832A FB9C7D 
        FBB5C4 FBCEFA FBE81B FC0122 
        FC1A0A FC32D0 FC4B6F FC63E3 
        FC7C29 FC943D FCAC1C FCC3C2 
        FCDB2C FCF257 FD0941 FD1FE6 
        FD3645 FD4C5A FD6224 FD77A0 
        FD8CCC FDA1A6 FDB62D FDCA5F 
        FDDE3B FDF1BE FE04E9 FE17B9 
        FE2A2E FE3C47 FE4E03 FE5F61 
        FE7061 FE8103 FE9145 FEA128 
        FEB0AB FEBFCF FECE93 FEDCF8 
        FEEAFD FEF8A3 FF05EB FF12D4 
        FF1F5F FF2B8D FF375E FF42D3 
        FF4DEC FF58AC FF6311 FF6D1E 
        FF76D4 FF8032 FF893B FF91F0 
        FF9A51 FFA260 FFAA1E FFB18D 
        FFB8AD FFBF81 FFC609 FFCC46 
        FFD23B FFD7E9 FFDD51 FFE274 
        0124F1 00BAC4 0053A3 FFEF86 
        FF8E68 FF3044 FED512 FE7CCC 
        FE276B FDD4E9 FD853C FD385F 
        FCEE49 FCA6F2 FC6251 FC205F 
        FBE113 FBA464 FB6A49 FB32B9 
        FAFDAA FACB13 FA9AEA FA6D27 
        FA41BE FA18A6 F9F1D5 F9CD40 
        F9AADE F98AA3 F96C86 F9507C 
        F9367B F91E77 F90866 F8F43E 
        F8E1F3 F8D17B F8C2CA F8B5D7 
        F8AA97 F8A0FD F89901 F89296 
        F88DB2 F88A4A F88854 F887C5 
        F88892 F88AB1 F88E17 F892B9 
        F8988D F89F8A F8A7A3 F8B0D0 
        F8BB07 F8C63D F8D268 F8DF7E 
        F8ED77 F8FC47 F90BE7 F91C4C 
        F92D6D F93F41 F951BF F964DE 
        F97896 F98CDD F9A1AC F9B6FA 
        F9CCBF F9E2F2 F9F98D FA1087 
        FA27D9 FA3F7B FA5766 FA6F93 
        46038A 44E1F4 43C04D 429EAF 
        417D31 405BEA 3F3AF1 3E1A5E 
        3CFA47 3BDAC3 3ABBE9 399DCE 
        388087 37642C 3648D0 352E88 
        34156A 32FD89 31E6FA 30D1D0 
        2FBE1E 2EABF8 2D9B6F 2C8C97 
        2B7F81 2A743E 296ADF 286376 
        275E13 265AC5 25599C 245AA7 
        235DF5 226395 216B94 2075FF 
        1F82E4 1E924F 1DA44C 1CB8E8 
        1BD02D 1AEA27 1A06E0 192661 
        1848B5 176DE5 1695F8 15C0F9 
        14EEED 141FDE 1353D1 128ACD 
        11C4D8 1101F8 104233 0F858C 
        0ECC08 0E15AC 0D627A 0CB275 
        0C05A1 0B5C00 0AB593 0A125B 
        09725B 08D592 083C00 07A5A7 
        071284 068297 05F5DF 056C5B 
        04E607 0462E2 03E2EA 03661A 
        02EC70 0275E8 02027D 01922D 
        7FFFFF 7FFA4B 7FEEE4 7FDDCB 
        7FC703 7FAA8C 7F886A 7F60A2 
        7F3336 7F002C 7EC78A 7E8954 
        7E4593 7DFC4C 7DAD87 7D594E 
        7CFFA8 7CA09E 7C3C3C 7BD28B 
        7B6397 7AEF6B 7A7612 79F79B 
        797411 78EB82 785DFE 77CB91 
        77344C 76983E 75F777 755207 
        74A800 73F973 734671 728F0D 
        71D35A 71136A 704F52 6F8724 
        6EBAF5 6DEADA 6D16E7 6C3F31 
        6B63CF 6A84D5 69A25B 68BC75 
        67D33C 66E6C5 65F728 65047D 
        640EDA 631658 621B0F 611D17 
        601C87 5F197A 5E1406 5D0C46 
        5C0251 5AF641 59E82F 58D834 
        57C669 56B2E7 559DC8 548724 
        536F15 5255B5 513B1C 501F64 
        4F02A6 4DE4FA 4CC67B 4BA741 
        4A8765 4966FF 484628 4724F9 

0xFF876C	$M.iir_resamplev2.Up_3_Down_1.int_ratio
0xFF876C	$M.iir_resamplev2.Up_3_Down_1.filter
        000000 

0xFF876D	$M.iir_resamplev2.Up_3_Down_1.frac_ratio
        2AAAAA 

0xFF876E	$M.iir_resamplev2.Up_3_Down_1.int_ratio_s1
        000000 

0xFF876F	$M.iir_resamplev2.Up_3_Down_1.frac_ratio_s1
        000000 

0xFF8770	$M.iir_resamplev2.Up_3_Down_1.func_ptr1
        000000 

0xFF8771	$M.iir_resamplev2.Up_3_Down_1.func_ptr1_s2
        000002 

0xFF8772	$M.iir_resamplev2.Up_3_Down_1.FIR_Size_s2
        00000A 

0xFF8773	$M.iir_resamplev2.Up_3_Down_1.IIR_Size_s2
        000013 

0xFF8774	$M.iir_resamplev2.Up_3_Down_1.Rout_s2
        000003 

0xFF8775	$M.iir_resamplev2.Up_3_Down_1.input_scale_s2
        000000 

0xFF8776	$M.iir_resamplev2.Up_3_Down_1.output_scale_s2
        FFFFF9 

0xFF8777	$M.iir_resamplev2.Up_3_Down_1.FirFilter_s2
        FF4FED 

0xFF8778	$M.iir_resamplev2.Up_3_Down_1.FracRatio_s2
        2AAAAC 

0xFF8779	$M.iir_resamplev2.Up_3_Down_1.IntRatio_s2
        000000 

0xFF877A	$M.iir_resamplev2.Up_3_Down_1.IIRFunction_s2
        000001 

0xFF877B	$M.iir_resamplev2.Up_3_Down_1.IIRCoeffs_s21
        01D0BF FDA0AE 0DEAC7 D9D456 
        3F01E9 BC83FF 2F0233 EC2249 

0xFF8783	$M.iir_resamplev2.Up_3_Down_1.IIRScale_s21
        000005 

0xFF8784	$M.iir_resamplev2.Up_3_Down_1.IIRCoeffs_s22
        00320F 04E927 E6F590 3AF29B 
        AEF1B1 44AE60 DDCC80 

0xFF878B	$M.iir_resamplev2.Up_3_Down_1.IIRScale_s22
        000004 

0xFF878C	$M.iir_resamplev2.Up_3_Down_1.IIRCoeffs_s23
        002858 048911 E72FCB 3CD517 
        AA724C 48E472 DC297B 

0xFF8793	$M.iir_resamplev2.Up_3_Down_1.IIRScale_s23
        000004 

0xFF8794	$M.iir_resamplev2.Up_320_Down_147.filter
0xFF8794	$M.iir_resamplev2.Up_320_Down_147.int_ratio
        000000 

0xFF8795	$M.iir_resamplev2.Up_320_Down_147.frac_ratio
        3ACCCD 

0xFF8796	$M.iir_resamplev2.Up_320_Down_147.int_ratio_s1
        000000 

0xFF8797	$M.iir_resamplev2.Up_320_Down_147.frac_ratio_s1
        433333 

0xFF8798	$M.iir_resamplev2.Up_320_Down_147.func_ptr1_s1
        000001 

0xFF8799	$M.iir_resamplev2.Up_320_Down_147.FIR_Size_s1
        000006 

0xFF879A	$M.iir_resamplev2.Up_320_Down_147.IIR_Size_s1
        000000 

0xFF879B	$M.iir_resamplev2.Up_320_Down_147.Rout_s1
        000028 

0xFF879C	$M.iir_resamplev2.Up_320_Down_147.input_scale_s1
        000007 

0xFF879D	$M.iir_resamplev2.Up_320_Down_147.FirFilter_s1
        FF5F60 

0xFF879E	$M.iir_resamplev2.Up_320_Down_147.FracRatio_s1
        433334 

0xFF879F	$M.iir_resamplev2.Up_320_Down_147.func_ptr1_s2
        000002 

0xFF87A0	$M.iir_resamplev2.Up_320_Down_147.FIR_Size_s2
        00000A 

0xFF87A1	$M.iir_resamplev2.Up_320_Down_147.IIR_Size_s2
        00000F 

0xFF87A2	$M.iir_resamplev2.Up_320_Down_147.Rout_s2
        000008 

0xFF87A3	$M.iir_resamplev2.Up_320_Down_147.input_scale_s2
        FFFFF9 

0xFF87A4	$M.iir_resamplev2.Up_320_Down_147.output_scale_s2
        FFFFF9 

0xFF87A5	$M.iir_resamplev2.Up_320_Down_147.FirFilter_s2
        FF5FD8 

0xFF87A6	$M.iir_resamplev2.Up_320_Down_147.FracRatio_s2
        700001 

0xFF87A7	$M.iir_resamplev2.Up_320_Down_147.IntRatio_s2
        000000 

0xFF87A8	$M.iir_resamplev2.Up_320_Down_147.IIRFunction_s2
        000005 

0xFF87A9	$M.iir_resamplev2.Up_320_Down_147.IIRCoeffs_s21
        18C7CD 02B0D1 F0FCD2 2AEC7D 
        AFEE7F 69B8DD 9ABF37 455530 
        E055ED 

0xFF87B2	$M.iir_resamplev2.Up_320_Down_147.IIRScale_s21
        000004 

0xFF87B3	$M.iir_resamplev2.Up_320_Down_147.IIRCoeffs_s22
        00922C FD4F31 0E501A DA0D01 
        3FDC01 B69DAF 39EA2A E26A76 

0xFF87BB	$M.iir_resamplev2.Up_320_Down_147.IIRScale_s22
        000004 

0xFF87BC	$M.iir_resamplev2.Up_2_Down_1.int_ratio
0xFF87BC	$M.iir_resamplev2.Up_2_Down_1.filter
        000000 

0xFF87BD	$M.iir_resamplev2.Up_2_Down_1.frac_ratio
        400000 

0xFF87BE	$M.iir_resamplev2.Up_2_Down_1.int_ratio_s1
        000000 

0xFF87BF	$M.iir_resamplev2.Up_2_Down_1.frac_ratio_s1
        000000 

0xFF87C0	$M.iir_resamplev2.Up_2_Down_1.func_ptr1
        000000 

0xFF87C1	$M.iir_resamplev2.Up_2_Down_1.func_ptr1_s2
        000002 

0xFF87C2	$M.iir_resamplev2.Up_2_Down_1.FIR_Size_s2
        00000A 

0xFF87C3	$M.iir_resamplev2.Up_2_Down_1.IIR_Size_s2
        000013 

0xFF87C4	$M.iir_resamplev2.Up_2_Down_1.Rout_s2
        000002 

0xFF87C5	$M.iir_resamplev2.Up_2_Down_1.input_scale_s2
        000000 

0xFF87C6	$M.iir_resamplev2.Up_2_Down_1.output_scale_s2
        FFFFF9 

0xFF87C7	$M.iir_resamplev2.Up_2_Down_1.FirFilter_s2
        FF3776 

0xFF87C8	$M.iir_resamplev2.Up_2_Down_1.FracRatio_s2
        400001 

0xFF87C9	$M.iir_resamplev2.Up_2_Down_1.IntRatio_s2
        000000 

0xFF87CA	$M.iir_resamplev2.Up_2_Down_1.IIRFunction_s2
        000000 

0xFF87CB	$M.iir_resamplev2.Up_2_Down_1.IIRCoeffs_s21
        21DB4E 0137A2 F88329 186193 
        CA4BC2 5782B3 9253BA 6B1360 
        AF2393 2DC17E EE0E49 

0xFF87D6	$M.iir_resamplev2.Up_2_Down_1.IIRScale_s21
        000005 

0xFF87D7	$M.iir_resamplev2.Up_2_Down_1.IIRCoeffs_s22
        001AF3 FEC85E 074E34 E94E97 
        2ED3E6 B9EB60 4EB089 BD7CF5 
        2934A5 EEA788 

0xFF87E1	$M.iir_resamplev2.Up_2_Down_1.IIRScale_s22
        000005 

0xFF87E2	$M.iir_resamplev2.Up_1_Down_2.filter
0xFF87E2	$M.iir_resamplev2.Up_1_Down_2.int_ratio
        000002 

0xFF87E3	$M.iir_resamplev2.Up_1_Down_2.frac_ratio
        000000 

0xFF87E4	$M.iir_resamplev2.Up_1_Down_2.int_ratio_s1
        000000 

0xFF87E5	$M.iir_resamplev2.Up_1_Down_2.frac_ratio_s1
        000000 

0xFF87E6	$M.iir_resamplev2.Up_1_Down_2.func_ptr1
        000000 

0xFF87E7	$M.iir_resamplev2.Up_1_Down_2.func_ptr1_s2
        000003 

0xFF87E8	$M.iir_resamplev2.Up_1_Down_2.FIR_Size_s2
        00000A 

0xFF87E9	$M.iir_resamplev2.Up_1_Down_2.IIR_Size_s2
        000013 

0xFF87EA	$M.iir_resamplev2.Up_1_Down_2.Rout_s2
        000001 

0xFF87EB	$M.iir_resamplev2.Up_1_Down_2.input_scale_s2
        000000 

0xFF87EC	$M.iir_resamplev2.Up_1_Down_2.output_scale_s2
        FFFFFB 

0xFF87ED	$M.iir_resamplev2.Up_1_Down_2.FirFilter_s2
        FF37F9 

0xFF87EE	$M.iir_resamplev2.Up_1_Down_2.FracRatio_s2
        000000 

0xFF87EF	$M.iir_resamplev2.Up_1_Down_2.IntRatio_s2
        000002 

0xFF87F0	$M.iir_resamplev2.Up_1_Down_2.IIRFunction_s2
        000000 

0xFF87F1	$M.iir_resamplev2.Up_1_Down_2.IIRCoeffs_s21
        0317C3 013A0F F862ED 18E5AA 
        C90672 59AD95 8F9D8F 6D9A07 
        AD693A 2E8E89 EDD34A 

0xFF87FC	$M.iir_resamplev2.Up_1_Down_2.IIRScale_s21
        000005 

0xFF87FD	$M.iir_resamplev2.Up_1_Down_2.IIRCoeffs_s22
        001FCD FEC5F1 076A0A E8E7AA 
        2FB5A4 B89A08 5018E8 BC6985 
        29C300 EE79B3 

0xFF8807	$M.iir_resamplev2.Up_1_Down_2.IIRScale_s22
        000005 

0xFF8808	$M.iir_resamplev2.Up_3_Down_2.int_ratio
0xFF8808	$M.iir_resamplev2.Up_3_Down_2.filter
        000000 

0xFF8809	$M.iir_resamplev2.Up_3_Down_2.frac_ratio
        555556 

0xFF880A	$M.iir_resamplev2.Up_3_Down_2.int_ratio_s1
        000000 

0xFF880B	$M.iir_resamplev2.Up_3_Down_2.frac_ratio_s1
        000000 

0xFF880C	$M.iir_resamplev2.Up_3_Down_2.func_ptr1
        000000 

0xFF880D	$M.iir_resamplev2.Up_3_Down_2.func_ptr1_s2
        000002 

0xFF880E	$M.iir_resamplev2.Up_3_Down_2.FIR_Size_s2
        00000A 

0xFF880F	$M.iir_resamplev2.Up_3_Down_2.IIR_Size_s2
        000013 

0xFF8810	$M.iir_resamplev2.Up_3_Down_2.Rout_s2
        000003 

0xFF8811	$M.iir_resamplev2.Up_3_Down_2.input_scale_s2
        000000 

0xFF8812	$M.iir_resamplev2.Up_3_Down_2.output_scale_s2
        FFFFF9 

0xFF8813	$M.iir_resamplev2.Up_3_Down_2.FirFilter_s2
        FF6FED 

0xFF8814	$M.iir_resamplev2.Up_3_Down_2.FracRatio_s2
        555556 

0xFF8815	$M.iir_resamplev2.Up_3_Down_2.IntRatio_s2
        000000 

0xFF8816	$M.iir_resamplev2.Up_3_Down_2.IIRFunction_s2
        000000 

0xFF8817	$M.iir_resamplev2.Up_3_Down_2.IIRCoeffs_s21
        420971 033E5F F4C4FC 1AC226 
        CF9D10 46ECC6 A94E63 5931C8 
        B277E2 37BEFB E2336B 

0xFF8822	$M.iir_resamplev2.Up_3_Down_2.IIRScale_s21
        000003 

0xFF8823	$M.iir_resamplev2.Up_3_Down_2.IIRCoeffs_s22
        28FA23 FCC1A1 0C4D5C E29ED9 
        34251A B6936E 544FDF B08851 
        3C37C6 DCEA2E 

0xFF882D	$M.iir_resamplev2.Up_3_Down_2.IIRScale_s22
        000003 

0xFF882E	$M.iir_resamplev2.Up_4_Down_1.filter
0xFF882E	$M.iir_resamplev2.Up_4_Down_1.int_ratio
        000000 

0xFF882F	$M.iir_resamplev2.Up_4_Down_1.frac_ratio
        200000 

0xFF8830	$M.iir_resamplev2.Up_4_Down_1.int_ratio_s1
        000000 

0xFF8831	$M.iir_resamplev2.Up_4_Down_1.frac_ratio_s1
        000000 

0xFF8832	$M.iir_resamplev2.Up_4_Down_1.func_ptr1
        000000 

0xFF8833	$M.iir_resamplev2.Up_4_Down_1.func_ptr1_s2
        000002 

0xFF8834	$M.iir_resamplev2.Up_4_Down_1.FIR_Size_s2
        00000A 

0xFF8835	$M.iir_resamplev2.Up_4_Down_1.IIR_Size_s2
        00000F 

0xFF8836	$M.iir_resamplev2.Up_4_Down_1.Rout_s2
        000004 

0xFF8837	$M.iir_resamplev2.Up_4_Down_1.input_scale_s2
        000000 

0xFF8838	$M.iir_resamplev2.Up_4_Down_1.output_scale_s2
        FFFFF9 

0xFF8839	$M.iir_resamplev2.Up_4_Down_1.FirFilter_s2
        FF4F60 

0xFF883A	$M.iir_resamplev2.Up_4_Down_1.FracRatio_s2
        200001 

0xFF883B	$M.iir_resamplev2.Up_4_Down_1.IntRatio_s2
        000000 

0xFF883C	$M.iir_resamplev2.Up_4_Down_1.IIRFunction_s2
        000004 

0xFF883D	$M.iir_resamplev2.Up_4_Down_1.IIRCoeffs_s21
        033C6B 052949 E31869 474710 
        9CF8AD 51D4D7 D9B4BC 

0xFF8844	$M.iir_resamplev2.Up_4_Down_1.IIRScale_s21
        000004 

0xFF8845	$M.iir_resamplev2.Up_4_Down_1.IIRCoeffs_s22
        00617A F54FFD 3274C8 99FD54 
        6E2517 C045F6 

0xFF884B	$M.iir_resamplev2.Up_4_Down_1.IIRScale_s22
        000003 

0xFF884C	$M.iir_resamplev2.Up_4_Down_1.IIRCoeffs_s23
        00510B 0B350E D4FA26 4380DC 
        CCF071 

0xFF8851	$M.iir_resamplev2.Up_4_Down_1.IIRScale_s23
        000003 

0xFF8852	$M.iir_resamplev2.fir_L7_M8_K10.coeffs
        FF3B1E FF84E3 FFBB05 FFDF22 
        FFF424 FFFDBD 000000 FCE823 
        FCE427 FD213A FD84F7 FDFA29 
        FE70DD FEDE13 0F1386 09ABF5 
        055EEC 0219A6 FFC0B6 FE32EF 
        FD4C36 4F078F 445041 39B114 
        2F79A4 25ED99 1D4238 159D06 
        7FFFFF 7DE57E 79C6C4 73CF0A 
        6C3BE5 6359A0 597ED7 

0xFF8875	$M.iir_resamplev2.fir_L7_M16_K10.coeffs
        FF2CF7 FF72C3 FFAAA0 FFD384 
        FFEE0E FFFC05 000000 FE74F5 
        FE00B7 FDE03C FDF9C3 FE3765 
        FE8776 FEDC7F 14483A 0E7B7A 
        09B0FB 05DE46 02F05A 00CDF0 
        FF59CB 52E19F 48C9F7 3EAD7C 
        34D440 2B7D33 22DBE6 1B171E 
        7FFFFF 7E16B5 7A56D9 74E4CF 
        6DF49C 65C711 5CA640 

0xFF8898	$M.iir_resamplev2.fir_L7_M32_K10.coeffs
        01549E 00CFEA 00742D 00389A 
        001591 00048F 000000 0D1E6A 
        0A3ABB 07D1B5 05D824 0441CC 
        030206 020C4A 306874 29CF60 
        23AD02 1E0E76 18FC07 147973 
        108647 639A8A 5C9DA9 5549E3 
        4DC461 463130 3EB236 37664A 
        7FFFFF 7EDEF3 7CA3CD 795C2F 
        751BEE 6FFC5D 6A1B68 

0xFF88BB	$M.iir_resamplev2.Up_640_Down_147.int_ratio
0xFF88BB	$M.iir_resamplev2.Up_640_Down_147.filter
        000000 

0xFF88BC	$M.iir_resamplev2.Up_640_Down_147.frac_ratio
        1D6666 

0xFF88BD	$M.iir_resamplev2.Up_640_Down_147.int_ratio_s1
        000000 

0xFF88BE	$M.iir_resamplev2.Up_640_Down_147.frac_ratio_s1
        433333 

0xFF88BF	$M.iir_resamplev2.Up_640_Down_147.func_ptr1_s1
        000001 

0xFF88C0	$M.iir_resamplev2.Up_640_Down_147.FIR_Size_s1
        000006 

0xFF88C1	$M.iir_resamplev2.Up_640_Down_147.IIR_Size_s1
        000000 

0xFF88C2	$M.iir_resamplev2.Up_640_Down_147.Rout_s1
        000028 

0xFF88C3	$M.iir_resamplev2.Up_640_Down_147.input_scale_s1
        000007 

0xFF88C4	$M.iir_resamplev2.Up_640_Down_147.FirFilter_s1
        FF5F60 

0xFF88C5	$M.iir_resamplev2.Up_640_Down_147.FracRatio_s1
        433334 

0xFF88C6	$M.iir_resamplev2.Up_640_Down_147.func_ptr1_s2
        000002 

0xFF88C7	$M.iir_resamplev2.Up_640_Down_147.FIR_Size_s2
        00000A 

0xFF88C8	$M.iir_resamplev2.Up_640_Down_147.IIR_Size_s2
        000009 

0xFF88C9	$M.iir_resamplev2.Up_640_Down_147.Rout_s2
        000010 

0xFF88CA	$M.iir_resamplev2.Up_640_Down_147.input_scale_s2
        FFFFF9 

0xFF88CB	$M.iir_resamplev2.Up_640_Down_147.output_scale_s2
        FFFFF9 

0xFF88CC	$M.iir_resamplev2.Up_640_Down_147.FirFilter_s2
        FF6F9D 

0xFF88CD	$M.iir_resamplev2.Up_640_Down_147.FracRatio_s2
        380001 

0xFF88CE	$M.iir_resamplev2.Up_640_Down_147.IntRatio_s2
        000000 

0xFF88CF	$M.iir_resamplev2.Up_640_Down_147.IIRFunction_s2
        000006 

0xFF88D0	$M.iir_resamplev2.Up_640_Down_147.IIRCoeffs_s21
        0CD991 F6B527 2D8777 A11BF6 
        692B83 C1C774 

0xFF88D6	$M.iir_resamplev2.Up_640_Down_147.IIRScale_s21
        000003 

0xFF88D7	$M.iir_resamplev2.Up_640_Down_147.IIRCoeffs_s22
        010E87 126569 B408A9 7DBE6B 
        9CDF80 

0xFF88DC	$M.iir_resamplev2.Up_640_Down_147.IIRScale_s22
        000002 

0xFF88DD	$M.multi_chan_output.chain0_ch0_resamp_op.iir_temp
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0xFF8A67	$M.system_config.data.n3dv_left
        FF91DB FF91DB 0063FF 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF8B03	$M.system_config.data.n3dv_right
        00621B 00621B 0063FF 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF8B9F	$M.n3dv.left_int.out_ipsi_buf
0xFF8B9F	$M.n3dv.left_int
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF8BDB	$M.n3dv.left_int.out_contra_buf
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF8C17	$M.system_config.data.bass_plus_left
        FF91DB FF91DB 000001 000000 
        0062CD 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 

0xFF8C8C	$M.multi_chan_output.chain0_ch0_resamp_op.next
0xFF8C8C	$chain0_ch0_resamp_op
        FF932F 

0xFF8C8D	$M.multi_chan_output.chain0_ch0_resamp_op.func
        FF9462 

0xFF8C8E	$M.multi_chan_output.chain0_ch0_resamp_op.param
        000000 000000 000000 000000 
        000000 FF88DD 00018A 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 

0xFF8CFF	$codec_resampler.left
        0000AD 0000ED 000000 FFFFF8 
        000008 005E04 000278 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 

0xFF8D70	$message.queue
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0xFF8DDE	$message.long_message_data
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF8E36	$M.bass_plus.left_int.hp1_out_buf
0xFF8E36	$M.bass_plus.left_int
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF8E42	$M.bass_plus.left_int.hp3_out_buf
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF8E4E	$M.bass_plus.left_int.hp2_out_buf
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF8E66	$M.bass_plus.left_int.ntp_tp_filters_buf
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF8E72	$M.bass_plus.left_int.high_freq_output_buf
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF8E8A	$codec_resampler.filter_spec_lookup_table
        017700 017700 000000 015888 
        015888 000000 00BB80 00BB80 
        000000 00AC44 00AC44 000000 
        007D00 007D00 000000 005622 
        005622 000000 003E80 003E80 
        000000 001F40 001F40 000000 
        00AC44 017700 FF8794 00BB80 
        017700 FF87BC 015888 017700 
        FF6BCD 00AC44 015888 FF87BC 
        00BB80 015888 FF5BCD 017700 
        015888 FF7BCD 003E80 00BB80 
        FF876C 007D00 00BB80 FF8808 
        00AC44 00BB80 FF6BCD 003E80 
        00AC44 FF7FCB 007D00 00AC44 
        FF7F73 00BB80 00AC44 FF7BCD 
        015888 00BB80 FF7F9F 017700 
        00BB80 FF87E2 015888 00AC44 
        FF87E2 017700 00AC44 FF4BCD 
        000000 

0xFF8ED3	$M.system_config.data.SpkrEqCoefsA
        00000A 000001 400000 000000 
        000000 400000 000000 000000 
        000000 000000 400000 000000 
        000000 000000 000000 400000 
        000000 000000 000000 000000 
        400000 000000 000000 000000 
        000000 400000 000000 000000 
        000000 000000 400000 000000 
        000000 000000 000000 400000 
        000000 000000 000000 000000 
        400000 000000 000000 000000 
        000000 400000 000000 000000 
        000000 000000 400000 000000 
        000000 000001 000001 000001 
        000001 000001 000001 000001 
        000001 000001 000001 

0xFF8F12	$M.system_config.data.copy_proc_funcs
        00146C FF9253 000000 001056 
        000000 FF9235 0015C1 FF9473 
        000000 0015C1 0057FE 000000 
        000EDE 0063FB 000000 000EDE 
        FF93DE 000000 00244E FF4FB2 
        000000 003A2B 0064A8 FF94A8 
        0004C5 FF8FFE 000000 0015C1 
        FF9475 000000 0015C1 006477 
        000000 0015C1 FF9477 000000 
        0015C1 006479 000000 0015C1 
        FF9479 000000 0015C1 00647B 
        000000 0015C1 FF947B 000000 
        001063 000000 FF9235 0013FD 
        FF9253 000000 000000 

0xFF8F49	$M.system_config.data.StatisticsPtrs
        0000FC 00627F 0000FD 0000FE 
        FF949B FF9474 0057FF 0064A5 
        00647C FF947C FF9476 006478 
        00647A FF947A FF9478 FF9478 
        006492 FF9492 FF9493 006494 
        FF9494 FF9495 006496 FF9496 
        006497 FF9497 004DDC 000FFC 
        0064C4 006498 FF9498 006499 
        FF9499 0000FF 006481 FF9481 
        FF9486 00648B FF9489 00648A 
        FF948A 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0xFF8F7F	$M.system_config.data.spkr_ctrl_sec_eq_coefs_A
        000000 000001 400000 000000 
        000000 400000 000000 000000 
        000000 000000 400000 000000 
        000000 000000 000000 400000 
        000000 000000 000000 000000 
        400000 000000 000000 000000 
        000000 400000 000000 000000 
        000000 000000 400000 000000 
        000000 000000 000000 400000 
        000000 000000 000001 000001 
        000001 000001 000001 000001 
        000001 

0xFF8FAC	$M.system_config.data.reinitialize_table
        003020 0003FA FF94A6 003020 
        FF92DB 0064A7 003020 002BFA 
        FF94A7 00387B FF8C17 002F60 
        003000 FF92E1 FF30F9 003D93 
        FF3742 000000 003B2A FF8A67 
        FF8B03 003CE2 000000 0060DD 
        001604 FF8FFE 000000 001604 
        0057E9 000000 001604 006195 
        000000 000DF7 FF6BF9 000000 
        003020 006333 FF94A9 003CE2 
        000000 FF9063 000000 

0xFF8FD7	$M.system_config.data.spkr_ctrl_bass_eq_coefs_A
        000000 000001 400000 000000 
        000000 400000 000000 000000 
        000000 000000 400000 000000 
        000000 000000 000000 400000 
        000000 000000 000000 000000 
        400000 000000 000000 000000 
        000000 400000 000000 000000 
        000000 000000 400000 000000 
        000000 000001 000001 000001 
        000001 000001 000001 

0xFF8FFE	$M.system_config.data.multichannel_volume_and_limit_obj
0xFF8FFE	$M.system_config.data.multichannel_volume_and_limit_block
        000000 001000 000005 006481 
        000000 FBD57B 072148 79999A 
        000000 000000 000000 

0xFF9009	$M.system_config.data.left_primary_channel_vol_struc
        FF91E8 FF91E8 080000 000000 
        000000 

0xFF900E	$M.system_config.data.right_primary_channel_vol_struc
        006228 006228 080000 000000 
        000000 

0xFF9013	$M.system_config.data.left_secondary_channel_vol_struc
        FF91F5 FF91F5 080000 000000 
        000000 

0xFF9018	$M.system_config.data.right_secondary_channel_vol_struc
        006235 006235 080000 000000 
        000000 

0xFF901D	$M.system_config.data.wired_sub_channel_vol_struc
        FF920F FF920F 080000 000000 
        000000 

0xFF9022	$M.system_config.data.UserEqCoefsA
        000000 000001 400000 000000 
        000000 400000 000000 000000 
        000000 000000 400000 000000 
        000000 000000 000000 400000 
        000000 000000 000000 000000 
        400000 000000 000000 000000 
        000000 400000 000000 000000 
        000001 000001 000001 000001 
        000001 

0xFF9043	$M.cbops.soft_mute.mute_coefs
        000000 FFABF1 FEB09F FD109F 
        FAD035 F7F54C F48764 F08F7F 
        EC1809 E72CBF E1DA8C DC2F6B 
        D63A40 D00AB1 C9B0FF C33DD7 
        BCC22A B64F02 AFF550 A9C5C1 
        A3D096 9E2575 98D342 93E7F8 
        8F7082 8B789D 880AB5 852FCC 
        82EF62 814F62 805410 800000 

0xFF9063	$M.system_config.data.cmpd100_obj_wired_sub
        000040 004000 FF920F FF920F 
        FF920F FF920F 080000 0064AA 
        800000 080000 F9B037 FA0541 
        FE56CB FF8070 100000 080000 
        015555 00CCCD 000000 000000 
        000000 420B8C 030F11 420B8C 
        00ECE9 62032E 009E22 7C997B 
        0076AC 020000 

0xFF9081	$cbuffer.port_buffer_size
0xFF9081	$cbuffer.read_port_buffer_size
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF908D	$cbuffer.write_port_buffer_size
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF9099	$cbuffer.port_offset_addr
0xFF9099	$cbuffer.read_port_offset_addr
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF90A5	$cbuffer.write_port_offset_addr
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF90B1	$M.multi_chan_output.filter_spec_lookup_table
        00AC44 000001 FF8794 00BB80 
        000001 FF87BC 015888 000001 
        FF6BCD 00AC44 000002 FF88BB 
        00BB80 000002 FF882E 015888 
        000002 FF8794 017700 000002 
        FF87BC 000000 

0xFF90C7	$M.system_config.data.SubEqCoefsA
        000003 000001 400000 000000 
        000000 400000 000000 000000 
        000000 000000 400000 000000 
        000000 000000 000000 400000 
        000000 000000 000001 000001 
        000001 

0xFF90DC	$M.multi_chan_output.chain1_sync_rate_adjustment_and_shift.next
0xFF90DC	$chain1_sync_rate_adjustment_and_shift
        FFFFFF 

0xFF90DD	$M.multi_chan_output.chain1_sync_rate_adjustment_and_shift.func
        FF945F 

0xFF90DE	$M.multi_chan_output.chain1_sync_rate_adjustment_and_shift.param
        000000 000000 000000 000000 
        FFFFF8 FF3529 000100 000140 
        0061FA 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 

0xFF90F1	$chain0_ch0_mix_op
0xFF90F1	$M.multi_chan_output.chain0_ch0_mix_op.next
        006351 

0xFF90F2	$M.multi_chan_output.chain0_ch0_mix_op.func
        006468 

0xFF90F3	$M.multi_chan_output.chain0_ch0_mix_op.param
        000000 FFFFFF 006453 FF3529 
        006481 000070 006481 400000 
        400000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0xFF9105	$M.multi_chan_output.chain0_ch2_mix_op.next
0xFF9105	$chain0_ch2_mix_op
        006357 

0xFF9106	$M.multi_chan_output.chain0_ch2_mix_op.func
        006468 

0xFF9107	$M.multi_chan_output.chain0_ch2_mix_op.param
        000002 FFFFFF 006456 FF3529 
        006481 0000F0 006481 400000 
        400000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0xFF9119	$chain1_ch0_mix_op
0xFF9119	$M.multi_chan_output.chain1_ch0_mix_op.next
        0063A5 

0xFF911A	$M.multi_chan_output.chain1_ch0_mix_op.func
        006468 

0xFF911B	$M.multi_chan_output.chain1_ch0_mix_op.param
        000000 FFFFFF 006459 FF3529 
        006481 000170 006481 400000 
        400000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0xFF912D	$codec_rate_adj.stereo
        0000ED 00012D FF941D FF9420 
        000000 FF3529 000080 0000C0 
        005799 000000 000000 000024 
        000000 000000 000000 000000 
        000000 000000 000000 

0xFF9140	$M.system_config.data.delay_reinitialize_table
        003D51 000000 FF92F3 003D51 
        000000 006339 003D51 000000 
        FF92F9 003D51 000000 00633F 
        003D51 000000 FF92FF 003D51 
        000000 006345 000000 

0xFF9153	$M.main.cbuffers_latency_measure
        0000AD 006484 FF9485 0000ED 
        FF9484 FF9485 00012D FF9484 
        006486 FF943E FF9484 006486 
        800011 FF9484 006486 000000 

0xFF9163	$M.system_config.data.spkr_ctrl_gain_coefs_B
        200000 000000 000000 000000 
        200000 000000 200000 000000 
        000000 000000 200000 000000 
        100000 100000 000000 200000 

0xFF9173	$cbops.buffer_sizes
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF9183	$cbops.buffer_pointers
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF9193	$encoded_latency_struct
        FF37FE 006441 FF4BFD 0000AD 
        006484 FF9485 000003 000000 
        000000 000000 000000 000000 
        000000 000000 000000 

0xFF91A2	$mono_tone_in_left_resample_op.next
0xFF91A2	$mono_tone_in_left_resample_op
        0061D4 

0xFF91A3	$mono_tone_in_left_resample_op.func
        FF946B 

0xFF91A4	$mono_tone_in_left_resample_op.param
        000000 000001 FF3529 FF94D1 
        006481 000050 000000 000000 
        000000 000000 000000 000000 
        000000 

0xFF91B1	$tone_in_left_resample_op.next
0xFF91B1	$tone_in_left_resample_op
        0061E3 

0xFF91B2	$tone_in_left_resample_op.func
        FF946B 

0xFF91B3	$tone_in_left_resample_op.param
        000000 000002 FF3529 FF94D1 
        006481 000050 000000 000000 
        000000 000000 000000 000000 
        000000 

0xFF91C0	$M.iir_perform_resample.iir_function_table
        0013CB 00139B 001311 0012B7 
        001429 0014A8 0015B1 000E30 
        000D3E 000C6D 000B8F 000E6B 
        001023 0011F2 

0xFF91CE	$sbc_stats
        0007CE 0007D0 0007D4 0007CF 
        0007D1 0007D3 0007D2 0064A5 
        0064A5 0064A5 0064A5 0064A5 
        0064A5 

0xFF91DB	$M.system_config.data.stream_map_left_in
        000000 000000 000000 000168 
        000BB8 001660 001612 000000 
        000000 000000 000000 000000 
        000000 

0xFF91E8	$M.system_config.data.stream_map_primary_left_out
        FF943E 000000 000000 000168 
        000BB8 001641 001480 000000 
        000000 000000 000000 000000 
        000000 

0xFF91F5	$M.system_config.data.stream_map_secondary_left_out
        FF9441 000000 000000 000168 
        000BB8 001641 001480 000000 
        000000 000000 000000 000000 
        000000 

0xFF9202	$M.system_config.data.stream_map_aux_left_out
        FF9444 000000 000000 000168 
        000BB8 001641 001480 000000 
        000000 000000 000000 000000 
        000000 

0xFF920F	$M.system_config.data.stream_map_sub_out
        FF9447 000000 000000 000168 
        000BB8 001641 001480 000000 
        000000 000000 000000 000000 
        000000 

0xFF921C	$i2s_stats
        0000FF 0064A5 0064A5 0064A5 
        0064A5 0064A5 0064A5 0064A5 
        0064A5 0064A5 0064A5 0064A5 
        0064A5 

0xFF9229	$M.multi_chan_output.chain1_copy_struc
        00639F 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF9235	$FunctionMips_data_block
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0xFF923F	$M.music_example_message_payload_cache.multi_channel_main_mute_s
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0xFF9249	$M.music_example_message_payload_cache.multi_volume_s
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0xFF9253	$M.system_config.data.rcv_process_streams
        FF91DB 00621B FF91E8 006228 
        FF91F5 006235 FF9202 006242 
        FF920F 000000 

0xFF925D	$chain1_ch0_1_signal_detect_op
0xFF925D	$M.multi_chan_output.chain1_ch0_1_signal_detect_op.next
        00631F 

0xFF925E	$M.multi_chan_output.chain1_ch0_1_signal_detect_op.func
        FF9465 

0xFF925F	$M.multi_chan_output.chain1_ch0_1_signal_detect_op.param
        FF9305 000000 000000 000001 
        000002 000003 000004 000005 

0xFF9267	$M.system_config.data.BoostEqCoefsA
        000001 000001 400000 000000 
        000000 400000 000000 000000 
        000001 

0xFF9270	$M.system_config.data.BoostEqCoefsB
        000001 000001 400000 000000 
        000000 400000 000000 000000 
        000001 

0xFF9279	$interrupt.isr_call_table
        001413 003D8B 000CB7 003D8B 
        003D8B 003D8B 003D8B 003D8B 
        003D8B 

0xFF9282	$M.downsample_sub_to_1k2.sub_mute_coefs
        000000 F9A97A E7E742 CE3DC9 
        B1C238 9818BF 865687 800000 

0xFF928A	$chain0_ch1_dither_and_shift_op
0xFF928A	$M.multi_chan_output.chain0_ch1_dither_and_shift_op.next
        00637B 

0xFF928B	$M.multi_chan_output.chain0_ch1_dither_and_shift_op.func
        00645F 

0xFF928C	$M.multi_chan_output.chain0_ch1_dither_and_shift_op.param
        000001 000000 000000 000000 
        000128 000000 

0xFF9292	$chain0_ch3_dither_and_shift_op
0xFF9292	$M.multi_chan_output.chain0_ch3_dither_and_shift_op.next
        00638D 

0xFF9293	$M.multi_chan_output.chain0_ch3_dither_and_shift_op.func
        00645F 

0xFF9294	$M.multi_chan_output.chain0_ch3_dither_and_shift_op.param
        000003 000000 000000 000000 
        000190 000000 

0xFF929A	$chain0_ch5_dither_and_shift_op
0xFF929A	$M.multi_chan_output.chain0_ch5_dither_and_shift_op.next
        FFFFFF 

0xFF929B	$M.multi_chan_output.chain0_ch5_dither_and_shift_op.func
        00645F 

0xFF929C	$M.multi_chan_output.chain0_ch5_dither_and_shift_op.param
        000005 000000 000000 000000 
        0001A0 000000 

0xFF92A2	$chain1_ch1_dither_and_shift_op
0xFF92A2	$M.multi_chan_output.chain1_ch1_dither_and_shift_op.next
        FFFFFF 

0xFF92A3	$M.multi_chan_output.chain1_ch1_dither_and_shift_op.func
        00645F 

0xFF92A4	$M.multi_chan_output.chain1_ch1_dither_and_shift_op.param
        000001 000003 000000 000000 
        0001B0 000000 

0xFF92AA	$M.multi_chan_output.wired_out_type_table
        000000 000000 000000 000000 
        000000 000000 000000 

0xFF92B1	$M.multi_chan_output.chain0_pcm_cbuffers_latency_measure
        000000 FF9484 000000 000000 
        FF9484 000000 000000 

0xFF92B8	$M.multi_chan_output.chain0_ch1_mute_op.next
0xFF92B8	$chain0_ch1_mute_op
        FF9323 

0xFF92B9	$M.multi_chan_output.chain0_ch1_mute_op.func
        00646B 

0xFF92BA	$M.multi_chan_output.chain0_ch1_mute_op.param
        000000 000000 000001 000001 
        000001 

0xFF92BF	$M.multi_chan_output.chain0_ch3_mute_op.next
0xFF92BF	$chain0_ch3_mute_op
        006387 

0xFF92C0	$M.multi_chan_output.chain0_ch3_mute_op.func
        00646B 

0xFF92C1	$M.multi_chan_output.chain0_ch3_mute_op.param
        000000 000000 000001 000003 
        000003 

0xFF92C6	$M.multi_chan_output.chain0_ch5_mute_op.next
0xFF92C6	$chain0_ch5_mute_op
        006399 

0xFF92C7	$M.multi_chan_output.chain0_ch5_mute_op.func
        00646B 

0xFF92C8	$M.multi_chan_output.chain0_ch5_mute_op.param
        000000 000000 000001 000005 
        000005 

0xFF92CD	$chain1_ch1_mute_op
0xFF92CD	$M.multi_chan_output.chain1_ch1_mute_op.next
        0063B1 

0xFF92CE	$M.multi_chan_output.chain1_ch1_mute_op.func
        00646B 

0xFF92CF	$M.multi_chan_output.chain1_ch1_mute_op.param
        000000 000000 000001 000001 
        000001 

0xFF92D4	$M.iir_buffer_sizes.iir_size_table
        000017 000019 00001B 00001D 
        000015 000013 00000D 

0xFF92DB	$M.system_config.data.BoostEqDefnTable
        000001 000001 FF3726 FF3734 
        FF9267 FF9270 

0xFF92E1	$M.system_config.data.UserEqDefnTable
        000006 000005 FF36C1 FF36DB 
        FF9022 00609D 

0xFF92E7	$M.system_config.data.spkr_ctrl_sec_eq_defn_table
        000002 000007 FF3610 FF3630 
        FF8F7F 003FD3 

0xFF92ED	$M.system_config.data.aux_mix_obj
        FF91DB 00621B FF9202 FF94A5 
        FF94A5 0064A5 

0xFF92F3	$M.system_config.data.delay_pri_left
        FF91E8 FF91E8 FF942F 000000 
        000000 000000 

0xFF92F9	$M.system_config.data.delay_sec_left
        FF91F5 FF91F5 FF9432 000000 
        000000 000000 

0xFF92FF	$M.system_config.data.delay_aux_left
        FF9202 FF9202 FF9435 000000 
        000000 000000 

0xFF9305	$M.multi_chan_output.signal_detect_coeffs
        000A5B 000258 000000 000000 
        000001 001019 

0xFF930B	$M.multi_chan_output.chain0_ch0_tone_switch_op.next
0xFF930B	$chain0_ch0_tone_switch_op
        FF90F1 

0xFF930C	$M.multi_chan_output.chain0_ch0_tone_switch_op.func
        FF9468 

0xFF930D	$M.multi_chan_output.chain0_ch0_tone_switch_op.param
        FF94C7 006351 000001 000000 

0xFF9311	$M.multi_chan_output.chain0_ch2_tone_switch_op.next
0xFF9311	$chain0_ch2_tone_switch_op
        FF9105 

0xFF9312	$M.multi_chan_output.chain0_ch2_tone_switch_op.func
        FF9468 

0xFF9313	$M.multi_chan_output.chain0_ch2_tone_switch_op.param
        FF94C7 006357 000004 000000 

0xFF9317	$M.multi_chan_output.chain0_ch0_switch_op.next
0xFF9317	$chain0_ch0_switch_op
        00630A 

0xFF9318	$M.multi_chan_output.chain0_ch0_switch_op.func
        FF9468 

0xFF9319	$M.multi_chan_output.chain0_ch0_switch_op.param
        FF94C5 006363 000001 000000 

0xFF931D	$M.multi_chan_output.chain0_ch0_dc_remove_op.next
0xFF931D	$chain0_ch0_dc_remove_op
        006363 

0xFF931E	$M.multi_chan_output.chain0_ch0_dc_remove_op.func
        FF9459 

0xFF931F	$M.multi_chan_output.chain0_ch0_dc_remove_op.param
        000000 000000 000000 000000 

0xFF9323	$chain0_ch1_dc_remove_switch_op
0xFF9323	$M.multi_chan_output.chain0_ch1_dc_remove_switch_op.next
        FF9329 

0xFF9324	$M.multi_chan_output.chain0_ch1_dc_remove_switch_op.func
        FF9468 

0xFF9325	$M.multi_chan_output.chain0_ch1_dc_remove_switch_op.param
        0064C7 006369 000001 000000 

0xFF9329	$M.multi_chan_output.chain0_anc_switch_op.next
0xFF9329	$chain0_anc_switch_op
        00636F 

0xFF932A	$M.multi_chan_output.chain0_anc_switch_op.func
        FF9468 

0xFF932B	$M.multi_chan_output.chain0_anc_switch_op.param
        FF94C6 006375 000003 000000 

0xFF932F	$chain0_ch1_resamp_switch_op
0xFF932F	$M.multi_chan_output.chain0_ch1_resamp_switch_op.next
        003F60 

0xFF9330	$M.multi_chan_output.chain0_ch1_resamp_switch_op.func
        FF9468 

0xFF9331	$M.multi_chan_output.chain0_ch1_resamp_switch_op.param
        FF94C5 FFFFFF 000002 000000 

0xFF9335	$M.multi_chan_output.chain0_ch1_dither_switch_op.next
0xFF9335	$chain0_ch1_dither_switch_op
        FF928A 

0xFF9336	$M.multi_chan_output.chain0_ch1_dither_switch_op.func
        FF9468 

0xFF9337	$M.multi_chan_output.chain0_ch1_dither_switch_op.param
        FF94C5 00637B 000002 000000 

0xFF933B	$M.multi_chan_output.chain0_ch2_dc_remove_switch_op.next
0xFF933B	$chain0_ch2_dc_remove_switch_op
        0062DD 

0xFF933C	$M.multi_chan_output.chain0_ch2_dc_remove_switch_op.func
        FF9468 

0xFF933D	$M.multi_chan_output.chain0_ch2_dc_remove_switch_op.param
        0064C7 006381 000001 000000 

0xFF9341	$M.multi_chan_output.chain0_ch3_switch_op.next
0xFF9341	$chain0_ch3_switch_op
        FF92BF 

0xFF9342	$M.multi_chan_output.chain0_ch3_switch_op.func
        FF9468 

0xFF9343	$M.multi_chan_output.chain0_ch3_switch_op.param
        FF94C5 00638D 000008 000000 

0xFF9347	$chain0_ch3_dc_remove_op
0xFF9347	$M.multi_chan_output.chain0_ch3_dc_remove_op.next
        FF9292 

0xFF9348	$M.multi_chan_output.chain0_ch3_dc_remove_op.func
        FF9459 

0xFF9349	$M.multi_chan_output.chain0_ch3_dc_remove_op.param
        000003 000003 000000 000000 

0xFF934D	$chain0_ch4_dc_remove_switch_op
0xFF934D	$M.multi_chan_output.chain0_ch4_dc_remove_switch_op.next
        0062E5 

0xFF934E	$M.multi_chan_output.chain0_ch4_dc_remove_switch_op.func
        FF9468 

0xFF934F	$M.multi_chan_output.chain0_ch4_dc_remove_switch_op.param
        0064C7 006393 000001 000000 

0xFF9353	$chain0_ch5_switch_op
0xFF9353	$M.multi_chan_output.chain0_ch5_switch_op.next
        FF92C6 

0xFF9354	$M.multi_chan_output.chain0_ch5_switch_op.func
        FF9468 

0xFF9355	$M.multi_chan_output.chain0_ch5_switch_op.param
        FF94C5 FFFFFF 000020 000000 

0xFF9359	$M.multi_chan_output.chain0_ch5_dc_remove_op.next
0xFF9359	$chain0_ch5_dc_remove_op
        FF929A 

0xFF935A	$M.multi_chan_output.chain0_ch5_dc_remove_op.func
        FF9459 

0xFF935B	$M.multi_chan_output.chain0_ch5_dc_remove_op.param
        000005 000005 000000 000000 

0xFF935F	$chain1_ch0_tone_switch_op
0xFF935F	$M.multi_chan_output.chain1_ch0_tone_switch_op.next
        FF9119 

0xFF9360	$M.multi_chan_output.chain1_ch0_tone_switch_op.func
        FF9468 

0xFF9361	$M.multi_chan_output.chain1_ch0_tone_switch_op.param
        0064C8 0063A5 000001 000000 

0xFF9365	$chain1_ch0_dc_remove_switch_op
0xFF9365	$M.multi_chan_output.chain1_ch0_dc_remove_switch_op.next
        FF936B 

0xFF9366	$M.multi_chan_output.chain1_ch0_dc_remove_switch_op.func
        FF9468 

0xFF9367	$M.multi_chan_output.chain1_ch0_dc_remove_switch_op.param
        0064C7 0063AB 000001 000000 

0xFF936B	$M.multi_chan_output.chain1_ch1_switch_op.next
0xFF936B	$chain1_ch1_switch_op
        FF92CD 

0xFF936C	$M.multi_chan_output.chain1_ch1_switch_op.func
        FF9468 

0xFF936D	$M.multi_chan_output.chain1_ch1_switch_op.param
        0064C6 0063B7 000002 000000 

0xFF9371	$chain1_ch1_dc_remove_op
0xFF9371	$M.multi_chan_output.chain1_ch1_dc_remove_op.next
        0063B7 

0xFF9372	$M.multi_chan_output.chain1_ch1_dc_remove_op.func
        FF9459 

0xFF9373	$M.multi_chan_output.chain1_ch1_dc_remove_op.param
        000001 000001 000000 000000 

0xFF9377	$chain1_ch1_switch2_op
0xFF9377	$M.multi_chan_output.chain1_ch1_switch2_op.next
        FF92A2 

0xFF9378	$M.multi_chan_output.chain1_ch1_switch2_op.func
        FF9468 

0xFF9379	$M.multi_chan_output.chain1_ch1_switch2_op.param
        0064C6 FFFFFF 000002 000000 

0xFF937D	$stereo_tone_in_copy_struc
        0063C3 000001 946003 000002 
        00644D FF944A 

0xFF9383	$ufe_aux.message_volume_struc
        000000 000000 000000 000000 
        000000 

0xFF9388	$sub_l2cap_out_copy_struc
        0063C9 000001 FF9438 000001 
        9D800D 

0xFF938D	$output_port_and_delay_size
        800011 00007E 000BCC 00007E 
        000000 

0xFF9392	$mono_tone_in_copy_struc
        0063D3 000001 946003 000001 
        00644D 

0xFF9397	$analogue_in_left_copy_op
0xFF9397	$analogue_in_left_copy_op.next
        0063D8 

0xFF9398	$analogue_in_left_copy_op.func
        006465 

0xFF9399	$analogue_in_left_copy_op.param
        000000 000002 000008 

0xFF939C	$audio_channel_one_to_two_internal_copy_op
0xFF939C	$audio_channel_one_to_two_internal_copy_op.next
        0063DD 

0xFF939D	$audio_channel_one_to_two_internal_copy_op.func
        006462 

0xFF939E	$audio_channel_one_to_two_internal_copy_op.param
        000000 000001 000002 

0xFF93A1	$analogue_mono_in_right_copy_op.next
0xFF93A1	$analogue_mono_in_right_copy_op
        FFFFFF 

0xFF93A2	$analogue_mono_in_right_copy_op.func
        006465 

0xFF93A3	$analogue_mono_in_right_copy_op.param
        000002 000002 000008 

0xFF93A6	$set_codec_rate_from_vm_message_struc
        000000 000000 000000 000000 

0xFF93AA	$M.main.samples_latency_measure
        000000 006484 FF9485 000000 

0xFF93AE	$M.music_example_message.set_plugin_message_struc
        000000 000000 000000 000000 

0xFF93B2	$M.music_example_message.set_config_message_struc
        000000 000000 000000 000000 

0xFF93B6	$M.music_example_message.set_resolution_modes_message_struc
        000000 000000 000000 000000 

0xFF93BA	$M.music_example_message.set_anc_mode_message_struc
        000000 000000 000000 000000 

0xFF93BE	$M.music_example_message.soft_mute_message_struct
        000000 000000 000000 000000 

0xFF93C2	$M.music_example_message.get_user_eq_param_message_struct
        000000 000000 000000 000000 

0xFF93C6	$M.music_example_message.get_user_eq_group_param_message_struct
        000000 000000 000000 000000 

0xFF93CA	$M.music_example_message.multi_volume_s_message_struc
        000000 000000 000000 000000 

0xFF93CE	$M.music_example_message.multi_channel_main_mute_s_message_struc
        000000 000000 000000 000000 

0xFF93D2	$M.system_config.data.passthru_primary_left
        FF91DB 000000 FF4FB2 FF4FB3 

0xFF93D6	$M.system_config.data.passthru_sub
        FF91DB 000000 FF4FBE FF4FBF 

0xFF93DA	$M.system_config.data.passthru_secondary_right
        00621B 000000 FF4FB8 FF4FB9 

0xFF93DE	$M.system_config.data.right_headroom_obj
        00621B 00621B 0064A6 0064A5 

0xFF93E2	$M.system_config.data.aux_stereo_copy_obj
        FF91DB 00621B FF9202 006242 

0xFF93E6	$codec_out_copy_op.next
0xFF93E6	$codec_out_copy_op
        FFFFFF 

0xFF93E7	$codec_out_copy_op.func
        00645C 

0xFF93E8	$codec_out_copy_op.param
        000000 000001 

0xFF93EA	$sco_params_message_struc
        000000 000000 000000 000000 

0xFF93EE	$sco_timer_struc
        000000 000000 000000 000000 

0xFF93F2	$bdaddr_struc
        000000 000000 000000 000000 

0xFF93F6	$M.report_latency_to_vm.timer_struc
        000000 000000 000000 000000 

0xFF93FA	$interface_map_struc
        000000 000000 000000 000000 

0xFF93FE	$M.multi_chan_output.handler_period_table_24bit
        0002EE 0002EE 0002EE 00012C 

0xFF9402	$set_tone_rate_from_vm_message_struc
        000000 000000 000000 000000 

0xFF9406	$message.reattempt_timer_struc
        000000 000000 000000 000000 

0xFF940A	$pskey.result_pass_message_struc
        000000 000000 000000 000000 

0xFF940E	$pskey.reattempt_timer_struc
        000000 000000 000000 000000 

0xFF9412	$wall_clock.message_failed_struc
        000000 000000 000000 000000 

0xFF9416	$sbcdec.convert_mono_message_struc
        000000 000000 000000 000000 

0xFF941A	$audio_out_right_cbuffer_struc
        0005DC FF8000 FF8000 

0xFF941D	$codec_resamp_out_right_cbuffer_struc
        000334 005400 005400 

0xFF9420	$codec_rate_adj_out_right_cbuffer_struc
        000334 005800 005800 

0xFF9423	$M.music_example_spi.version_message_struc
        000000 000000 000000 

0xFF9426	$M.music_example_spi.parameter_message_struc
        000000 000000 000000 

0xFF9429	$M.music_example_message.ps_key_struc
        000000 000000 000000 

0xFF942C	$M.calc_actual_samples.state_tab
        0023BA 0023C1 0023D6 

0xFF942F	$M.system_config.data.delay_buf_pri_left_cbuffer_struc
        000BCD FF4000 FF4000 

0xFF9432	$M.system_config.data.delay_buf_sec_left_cbuffer_struc
        000BCD 002000 002000 

0xFF9435	$M.system_config.data.delay_buf_aux_left_cbuffer_struc
        000BCD 003000 003000 

0xFF9438	$sub_codec_out_cbuffer_struc
        000032 FF4F80 FF4F80 

0xFF943B	$output_buffers
        FF943E 00007E 000000 

0xFF943E	$multi_chan_primary_left_out_cbuffer_struc
        000360 000400 000400 

0xFF9441	$multi_chan_secondary_left_out_cbuffer_struc
        000360 FF4C00 FF4C00 

0xFF9444	$multi_chan_aux_left_out_cbuffer_struc
        000360 FF5C00 FF5C00 

0xFF9447	$multi_chan_sub_out_cbuffer_struc
        000708 000800 000800 

0xFF944A	$tone_in_right_cbuffer_struc
        000100 FF3F00 FF3F00 

0xFF944D	$tone_in_right_resample_cbuffer_struc
        000600 FF3800 FF3800 

0xFF9450	$tone0_in_right_resample_cbuffer_struc
        000600 FF3800 FF3800 

0xFF9453	$tone1_in_right_resample_cbuffer_struc
        000600 FF3800 FF3800 

0xFF9456	$tone2_in_right_resample_cbuffer_struc
        000600 FF3800 FF3800 

0xFF9459	$cbops.dc_remove
        0016CB 000000 0012F3 

0xFF945C	$M.cbops.dither_and_shift.main.dither_func
        000B0C 000B19 000B28 

0xFF945F	$cbops.rate_adjustment_and_shift
        000000 00162A 000044 

0xFF9462	$cbops_iir_resamplev2
        000000 001459 00132F 

0xFF9465	$cbops.signal_detect_op
        000000 000000 00396D 

0xFF9468	$cbops.switch_op
        0016BE 0016C0 0016C2 

0xFF946B	$cbops.fir_resample
        000000 0011A8 00088D 

0xFF946E	$M.audio_proc.delay.process.read_byte_pos_func
        00084B 000851 000857 

0xFF9471	$M.main.handler_period_table_24bit
        0002EE 0002EE 

0xFF9473	$M.system_config.data.pcmin_l_pk_dtct
        FF91DB 000000 

0xFF9475	$M.system_config.data.primout_l_pk_dtct
        FF91E8 000000 

0xFF9477	$M.system_config.data.sub_pk_dtct
        FF920F 000000 

0xFF9479	$M.system_config.data.scndout_r_pk_dtct
        006235 000000 

0xFF947B	$M.system_config.data.auxout_r_pk_dtct
        006242 000000 

0xFF947D	$M.multi_chan_output.chain0_pcm_latency_input_struct
        FF92B1 000000 

0xFF947F	$cbuffer.tmp
        000000 000000 

0xFF9481	$current_codec_sampling_rate
        000000 

0xFF9482	$aux_input_stream_available
        000000 

0xFF9483	$long_term_mismatch
        000000 

0xFF9484	$inv_dac_fs
        14D555 

0xFF9485	$latency_calc_current_warp
        FF9139 

0xFF9486	$codec_type
        FFFFFF 

0xFF9487	$tmr_period_con_copy
        000000 

0xFF9488	$rate_match_disable
        000000 

0xFF9489	$inputResolutionMode
        000010 

0xFF948A	$outputResolutionMode
        000010 

0xFF948B	$reset_count1
        000000 

0xFF948C	$M.jitter_buffering.is_buffering
        000001 

0xFF948D	$M.av_audio_out_silence_insert.right_zero_samples
        000000 

0xFF948E	$codec_resampler.rate_error
        000000 

0xFF948F	$music_example.sys_mode
        000002 

0xFF9490	$music_example.frame_processing_size
        000168 

0xFF9491	$music_example.config_anc
        87FFC0 

0xFF9492	$music_example.Aux.MasterVolume
        000000 

0xFF9493	$music_example.Aux.LeftTrimVolume
        000000 

0xFF9494	$music_example.Main.MasterVolume
        000000 

0xFF9495	$music_example.Main.PrimaryLeftTrimVolume
        000000 

0xFF9496	$music_example.Main.SecondaryLeftTrimVolume
        000000 

0xFF9497	$music_example.Main.SubTrimVolume
        000000 

0xFF9498	$music_example.SPDIF_IF_Connections
        000000 

0xFF9499	$music_example.OTA_IF_Connections
        000000 

0xFF949A	$M.Sleep.TotalTime
        000000 

0xFF949B	$M.Sleep.Mips
        000000 

0xFF949C	$M.music_example.GetControl.local_sys_vol
        000000 

0xFF949D	$M.music_example_message.AuxVolume.temp_msg_ptr
        000000 

0xFF949E	$M.music_example_message.MainVolume.temp_msg_ptr
        000000 

0xFF949F	$M.music_example.LoadParams.Pskey_fetch_flg
        000001 

0xFF94A0	$tag_averaging_fraction
        200000 

0xFF94A1	$sra_resamp_adjust_frac
        000000 

0xFF94A2	$usb_pause_period_count
        000000 

0xFF94A3	$usb_pause_silence_insertion_time
        00C49C 

0xFF94A4	$debug_usb_pause_count
        000000 

0xFF94A5	$M.system_config.data.HalfValue
        400000 

0xFF94A6	$M.system_config.data.SpkrEqParams
        004DDD 

0xFF94A7	$M.system_config.data.AncEqParams
        004E0D 

0xFF94A8	$M.system_config.data.aux_downmix
        000000 

0xFF94A9	$M.system_config.data.WiredSubEqParams
        004EA8 

0xFF94AA	$cmpd_gain
        000000 

0xFF94AB	$DAC_conn_main
        000000 

0xFF94AC	$M.frame_proc_stream_configure.if_struc_temp
        000000 

0xFF94AD	$M.Subwoofer.playback_time
        000000 

0xFF94AE	$wall_clock_lsw
        000000 

0xFF94AF	$sco_param_tesco
        000000 

0xFF94B0	$sco_param_clock_lsw
        000000 

0xFF94B1	$sco_param_from_air_size
        000000 

0xFF94B2	$sco_param_from_air_time
        000000 

0xFF94B3	$bass_timer_id
        000000 

0xFF94B4	$subwoofer_trim_buffers_flag
        000000 

0xFF94B5	$M.Subwoofer.sco_schedule_to_air_flag
        000000 

0xFF94B6	$min_port_space
        0003E8 

0xFF94B7	$max_late_write
        000000 

0xFF94B8	$min_early_write
        FFEC78 

0xFF94B9	$M.downsample_sub_to_1k2.mute_direction
        000001 

0xFF94BA	$M.downsample_sub_to_1k2.mute_index
        000000 

0xFF94BB	$esco_write_deadline
        000000 

0xFF94BC	$M.create_sub_packet.packet_counter
        000001 

0xFF94BD	$subwoofer.sco_offset
        000000 

0xFF94BE	$codec_packets_info_last_timer_time
        000000 

0xFF94BF	$first_packet_received
        000000 

0xFF94C0	$M.report_latency_to_vm.smoothing_factor_high
        4CCCCD 

0xFF94C1	$M.report_latency_to_vm.latency_max
        000000 

0xFF94C2	$M.configure_latency_reporting.enabled
        000000 

0xFF94C3	$M.configure_latency_reporting.min_change
        000000 

0xFF94C4	$M.multi_chan_output.num_chain0_channels
        000000 

0xFF94C5	$M.multi_chan_output.chain0_enables
        000000 

0xFF94C6	$M.multi_chan_output.chain0_anc_resampler_enable
        000000 

0xFF94C7	$M.multi_chan_output.chain0_tone_mix_en
        000000 

0xFF94C8	$M.multi_chan_output.prim_tone_mix_ratio
        000000 

0xFF94C9	$M.multi_chan_output.i2s_slave0
        000000 

0xFF94CA	$M.multi_chan_output.chain1_sync_port
        000000 

0xFF94CB	$M.multi_chan_output.tone1_in_left_read_ptr
        000000 

0xFF94CC	$M.multi_chan_output.tone0_in_right_read_ptr
        000000 

0xFF94CD	$M.multi_chan_output.tone2_in_right_read_ptr
        000000 

0xFF94CE	$M.multi_chan_output.chain0_mute_en
        000000 

0xFF94CF	$chain0_hw_warp_enable
        000000 

0xFF94D0	$M.multi_chan_output.chain1_warp_ptr
        FF90EA 

0xFF94D1	$current_tone_sampling_rate
        001F40 

0xFF94D2	$tmr_period_tone_copy
        001F40 

0xFF94D3	$cbuffer.write_port_connect_address
        000000 

0xFF94D4	$cbuffer.read_port_connect_address
        000000 

0xFF94D5	$cbuffer.auto_mcu_message
        000001 000000 

0xFF94D7	$interrupt.total_time
        000000 

0xFF94D8	$message.queue_read_ptr
        000000 

0xFF94D9	$message.last_seq_sent
        000000 

0xFF94DA	$M.message.send_ready_wait_for_go.go_from_vm
        000000 

0xFF94DB	$pskey.last_addr
        FFFFFF 

0xFF94DC	$timer.last_addr
        FFFFFF 

0xFF94DD	$cbops.struc_ptr
        000000 

0xFF94DE	$cbops.amount_written
        000000 

0xFF94DF	$M.cbops.av_copy.control_cbuffer
        000000 

0xFF94E0	$M.cbops.dac_av_copy.dac_av_struct
        000000 

0xFF94E1	$M.cbops.rate_adjustment_and_shift.amount_used
        000000 

0xFF94E2	$M.cbops.rate_adjustment_and_shift.main.rand_num
        005555 

0xFF94E3	$M.cbops.auto_upsample_and_mix.main.right_temp
        000000 

0xFF94E4	$M.codec_av_decode.data_ptr
        000000 

0xFF94E5	$frame_sync.sync_flag
        000000 

0xFF94E6	$M.cmpd100.analysis.MusicComp_Peak
        000000 

0xFF94E7	$M.cmpd100.analysis.region
        000000 

0xFF94E8	$M.cmpd100.applygain.lin_gain
        000000 

0xFF94E9	$M.cmpd100.applygain.remaninder_samples
        000000 


------------------------------------------------------------------------
Region: flash.data16
------------------------------------------------------------------------
0xD00000	$M.system_config.data.DefaultParameters
        000217 00F000 000000 000000 
        000000 00000D 000000 006000 
        000000 000016 00A000 00000D 
        000000 00C000 000000 000016 
        00A000 00000D 000001 007700 
        000000 000016 00A000 00000D 
        000002 00EE00 000000 000016 
        00A000 00000D 000005 00DC00 
        000000 000016 00A000 00000D 
        00000B 00B800 000000 000016 
        00A000 00000D 000017 007000 
        000000 000016 00A000 00000D 
        00002E 00E000 000000 000016 
        00A000 00000D 00005D 00C000 
        000000 000016 00A000 00000D 
        0000BB 008000 000000 000016 
        00A000 000001 000000 000000 
        00000A 000004 00B000 000000 
        00000B 005000 000000 000000 
        000000 00000D 000001 002C00 
        000000 00000B 005000 00000D 
        000017 007000 000000 00000B 
        005000 00000D 00000B 00B800 
        000000 00000B 005000 00000D 
        000024 00EA00 000000 00000B 
        005000 00000D 000075 003000 
        000000 00000B 005000 000006 
        000000 000000 000000 000000 
        000D00 00012C 000000 000000 
        000B50 000000 000D00 0003B1 
        000000 000000 000B50 000000 
        000D00 000BB8 000000 000000 
        000B50 000000 000D00 0024EA 
        000000 000000 000B50 000000 
        000D00 007530 000000 000000 
        000B50 000000 000000 000000 
        000000 000D00 00012C 000000 
        000000 000B50 000000 000D00 
        0003B1 000000 000000 000B50 
        000000 000D00 000BB8 000000 
        000000 000B50 000000 000D00 
        0024EA 000000 000000 000B50 
        000000 000D00 007530 000000 
        000000 000B50 000000 000000 
        000000 000000 000D00 00012C 
        000000 000000 000B50 000000 
        000D00 0003B1 000000 000000 
        000B50 000000 000D00 000BB8 
        000000 000000 000B50 000000 
        000D00 0024EA 000000 000000 
        000B50 000000 000D00 007530 
        000000 000000 000B50 000000 
        000000 000000 000000 000D00 
        00012C 000000 000000 000B50 
        000000 000D00 0003B1 000000 
        000000 000B50 000000 000D00 
        000BB8 000000 000000 000B50 
        000000 000D00 0024EA 000000 
        000000 000B50 000000 000D00 
        007530 000000 000000 000B50 
        000000 000000 000000 000000 
        000D00 00012C 000000 000000 
        000B50 000000 000D00 0003B1 
        000000 000000 000B50 000000 
        000D00 000BB8 000000 000000 
        000B50 000000 000D00 0024EA 
        000000 000000 000B50 000000 
        000D00 007530 000000 000000 
        000B50 000000 000000 000000 
        000000 000D00 00012C 000000 
        000000 000B50 000000 000D00 
        0003B1 000000 000000 000B50 
        000000 000D00 000BB8 000000 
        000000 000B50 000000 000D00 
        0024EA 000000 000000 000B50 
        000000 000D00 007530 000000 
        000000 000B50 000000 000000 
        000000 000000 000D00 000060 
        000000 000000 0016A0 000000 
        000D00 0000C0 000000 000000 
        0016A0 000000 000D00 000177 
        000000 000000 0016A0 000000 
        000000 00000F 000000 000FB1 
        00AA81 00571F 003EC3 00ECED 
        004000 000084 00DA2F 003B31 
        009440 000000 00D53F 00A4FE 
        00A000 004000 000081 00543A 
        003EB7 00E040 000000 00BB3B 
        004C24 00BC7F 000000 000200 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000005 000000 000000 
        000008 000001 006800 000000 
        000009 00E300 000008 000001 
        006800 000000 000008 000000 
        000008 000001 006800 000000 
        000019 00E300 000008 000001 
        006800 000000 000009 00E300 
        000008 000001 006800 000000 
        000019 00E300 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000002 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000200 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000006 000000 
        000000 000007 000001 006800 
        000000 000008 004800 000007 
        000001 006800 000000 00000B 
        005000 000007 000001 006800 
        000000 00001E 00E800 000007 
        000001 006800 000000 000008 
        004800 000007 000001 006800 
        000000 00000B 005000 000007 
        000001 006800 000000 00001E 
        00E820 000000 000000 000000 
        000000 000000 000020 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000020 000000 000000 000010 
        0009B9 000000 000020 000000 
        001009 00B900 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000010 0009B9 
        001009 00B920 000000 002000 
        0000F9 00B037 00FA05 0042FE 
        0056CC 00FF80 007110 000000 
        000800 000001 005555 0000CC 
        00CC40 0028FD 0002EF 001840 
        0028FD 0000E3 002960 0028F0 
        000097 009D7C 000CBE 000071 
        00C708 000000 00F9B0 0037FA 
        000542 00FE56 00CCFF 008071 
        001000 000008 000000 000155 
        005500 00CCCC 004028 00FD02 
        00EF18 004028 00FD00 00E329 
        006028 00F000 00979D 007C0C 
        00BE00 0071C7 000800 000000 
        000A5D 000002 005800 000000 
        000000 000000 000000 000000 
        000100 000032 000000 000000 
        000640 000006 004000 000064 
        00000C 008000 000032 000000 
        000000 000000 000000 00000C 
        00CCCD 000000 003C00 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000002 0017F0 000217 
        00F002 0017F0 000217 00F002 
        0017F0 000217 00F002 0017F0 
        000217 00F002 0017F0 000217 
        00F002 0017F0 000217 00F002 
        0017F0 000217 00F002 0017F0 
        000000 000000 


------------------------------------------------------------------------
Region: flash.data24
------------------------------------------------------------------------
0xE00000	$ref_lim_init_calc
        001000 001137 001285 0013ED 
        00156F 001710 0018D0 001AB1 
        001CB8 001EE5 00213D 0023C3 
        002679 002964 002C88 002FE9 
        00338B 003774 003BA9 00402F 
        00450E 004A4B 004FED 0055FD 
        005C83 006387 006B14 007333 
        007BF0 008557 008F74 009A56 
        00A60B 00B2A3 00C030 00CEC4 
        00DE73 00EF53 01017A 011502 
        012A05 0140A0 0158F3 01731D 
        018F43 01AD8C 01CE22 01F130 
        0216E6 023F79 026B20 029A16 
        02CC9D 0302F8 033D74 037C5E 
        03C00F 0408E2 04573B 04AB85 
        050634 0567C4 05D0BB 0641A8 
        06BB26 073DDB 07CA7A 0861C4 
        090487 09B3A3 0A7008 0B3AB7 
        0C14C5 0CFF5E 0DFBC3 0F0B4D 
        102F6F 1169BA 12BBDD 1427A5 
        15AF06 175417 191918 1B0076 
        1D0CCB 1F40E7 219FCC 242CBB 
        26EB31 29DEEF 2D0C01 3076BF 
        3423D8 381853 3C599B 40ED83 
        45DA50 4B26C0 50DA14 56FC1A 
        5D9538 

0xE00065	$all_params_32000
        E0018C E0018F E000C4 E0017D 
        E0016E E001AA E0008D E000A6 

0xE0006D	$all_params_44100
        E00192 E00195 E000C8 E00180 
        E00171 E001AC E00092 E000AB 

0xE00075	$all_params_48000
        E00198 E0019B E000CC E00183 
        E00174 E001AE E00097 E000B0 

0xE0007D	$all_params_88200
        E0019E E001A1 E000D0 E00186 
        E00177 E001B0 E0009C E000B5 

0xE00085	$all_params_96000
        E001A4 E001A7 E000D4 E00189 
        E0017A E001B2 E000A1 E000BA 

0xE0008D	$lsf_coeffs_32000
        408564 828A4E 3D0916 7D7BE1 
        C277B4 

0xE00092	$lsf_coeffs_44100
        4060B1 81D6AD 3DD5C0 7E2C99 
        C1CCD4 

0xE00097	$lsf_coeffs_48000
        4058D0 81B032 3E0214 7E5292 
        C1A7E0 

0xE0009C	$lsf_coeffs_88200
        403047 80EA88 3EE87F 7F164B 
        C0E80D 

0xE000A1	$lsf_coeffs_96000
        402C59 80D76A 3EFF06 7F2948 
        C0D552 

0xE000A6	$peak_coeffs_32000
        639F1C D46370 D4CBDA 2B9C90 
        07950A 

0xE000AB	$peak_coeffs_44100
        5F23F3 C68B5D E24842 3974A3 
        FE93CB 

0xE000B0	$peak_coeffs_48000
        5DE5D7 C315AB E6059D 3CEA55 
        FC148C 

0xE000B5	$peak_coeffs_88200
        550C41 ACF242 00A7F0 530DBE 
        EA4BCF 

0xE000BA	$peak_coeffs_96000
        53E4B7 AA4692 042160 55B96E 
        E7F9EA 

0xE000BF	$all_params
        E00065 E0006D E00075 E0007D 
        E00085 

0xE000C4	$theta_speaker_coeffs_32000
        E00132 E00141 E00150 E0015F 

0xE000C8	$theta_speaker_coeffs_44100
        E00135 E00144 E00153 E00162 

0xE000CC	$theta_speaker_coeffs_48000
        E00138 E00147 E00156 E00165 

0xE000D0	$theta_speaker_coeffs_88200
        E0013B E0014A E00159 E00168 

0xE000D4	$theta_speaker_coeffs_96000
        E0013E E0014D E0015C E0016B 

0xE000D8	$theta_virtual_60_ipsi_32000_coeff
        7B7595 96B418 64C17D 

0xE000DB	$theta_virtual_60_contra_32000_coeff
        2F3516 E2F497 64C17D 

0xE000DE	$theta_virtual_60_ipsi_44100_coeff
        7C9B27 90F83E 6BA2E9 

0xE000E1	$theta_virtual_60_contra_44100_coeff
        2E0F84 DF83E1 6BA2E9 

0xE000E4	$theta_virtual_60_ipsi_48000_coeff
        7CDC8D 8FB13D 6D2B51 

0xE000E7	$theta_virtual_60_contra_48000_coeff
        2DCE1D DEBFAD 6D2B51 

0xE000EA	$theta_virtual_60_ipsi_88200_coeff
        7E3B95 88D617 75657E 

0xE000ED	$theta_virtual_60_contra_88200_coeff
        2C6F16 DAA296 75657E 

0xE000F0	$theta_virtual_60_ipsi_96000_coeff
        7E5EF0 882550 7639A0 

0xE000F3	$theta_virtual_60_contra_96000_coeff
        2C4BBB DA3886 7639A0 

0xE000F6	$theta_virtual_120_ipsi_32000_coeff
        79AC50 94ED2A 64C17D 

0xE000F9	$theta_virtual_120_contra_32000_coeff
        0F82EB FF1690 64C17D 

0xE000FC	$theta_virtual_120_ipsi_44100_coeff
        7B4509 8FA48A 6BA2E9 

0xE000FF	$theta_virtual_120_contra_44100_coeff
        0DEA32 FCFF61 6BA2E9 

0xE00102	$theta_virtual_120_ipsi_48000_coeff
        7BA017 8E7734 6D2B51 

0xE00105	$theta_virtual_120_contra_48000_coeff
        0D8F24 FC8827 6D2B51 

0xE00108	$theta_virtual_120_ipsi_88200_coeff
        7D88D0 8825D5 75657E 

0xE0010B	$theta_virtual_120_contra_88200_coeff
        0BA66C FA0839 75657E 

0xE0010E	$theta_virtual_120_ipsi_96000_coeff
        7DBA09 8782EE 7639A0 

0xE00111	$theta_virtual_120_contra_96000_coeff
        0B7533 F9C7C5 7639A0 

0xE00114	$theta_virtual_180_ipsi_32000_coeff
        79305F 946EE2 64C17D 

0xE00117	$theta_virtual_180_contra_32000_coeff
        06CFA1 06CFA1 64C17D 

0xE0011A	$theta_virtual_180_ipsi_44100_coeff
        7AE8BA 8F45D1 6BA2E9 

0xE0011D	$theta_virtual_180_contra_44100_coeff
        051746 051746 6BA2E9 

0xE00120	$theta_virtual_180_ipsi_48000_coeff
        7B4AD4 8E1F83 6D2B51 

0xE00123	$theta_virtual_180_contra_48000_coeff
        04B52C 04B52C 6D2B51 

0xE00126	$theta_virtual_180_ipsi_88200_coeff
        7D595F 87F3E2 75657E 

0xE00129	$theta_virtual_180_contra_88200_coeff
        02A6A1 02A6A1 75657E 

0xE0012C	$theta_virtual_180_ipsi_96000_coeff
        7D8E68 8754C8 7639A0 

0xE0012F	$theta_virtual_180_contra_96000_coeff
        027198 027198 7639A0 

0xE00132	$theta_speaker_6_32000_coeff
        7A4807 9FBEE2 65F917 

0xE00135	$theta_speaker_6_44100_coeff
        7A1E05 994F7C 6C927F 

0xE00138	$theta_speaker_6_48000_coeff
        7A14AD 97E115 6E0A3F 

0xE0013B	$theta_speaker_6_88200_coeff
        79E29F 903636 75E72B 

0xE0013E	$theta_speaker_6_96000_coeff
        79DD97 8F70DD 76B18D 

0xE00141	$theta_speaker_10_32000_coeff
        76C067 A2862D 66B96C 

0xE00144	$theta_speaker_10_44100_coeff
        767E7B 9C5B76 6D260F 

0xE00147	$theta_speaker_10_48000_coeff
        766FD5 9AFCB0 6E937B 

0xE0014A	$theta_speaker_10_88200_coeff
        762175 93A7C1 7636CA 

0xE0014D	$theta_speaker_10_96000_coeff
        761995 92EB40 76FB2B 

0xE00150	$theta_speaker_12_32000_coeff
        7510CA A3D9ED 67154A 

0xE00153	$theta_speaker_12_44100_coeff
        74C3FB 9DCF90 6D6C75 

0xE00156	$theta_speaker_12_48000_coeff
        74B2ED 9C7824 6ED4EF 

0xE00159	$theta_speaker_12_88200_coeff
        7457B5 954B95 765CB6 

0xE0015C	$theta_speaker_12_96000_coeff
        744E8D 94933A 771E39 

0xE0015F	$theta_speaker_14_32000_coeff
        736E03 A52391 676E6C 

0xE00162	$theta_speaker_14_44100_coeff
        7316FC 9F384F 6DB0B5 

0xE00165	$theta_speaker_14_48000_coeff
        7303AA 9DE7F5 6F1461 

0xE00168	$theta_speaker_14_88200_coeff
        729C69 96E228 76816F 

0xE0016B	$theta_speaker_14_96000_coeff
        72920D 962DC8 77402B 

0xE0016E	$dcb_coeffs_32000
        7FBFC9 804037 7F7F93 

0xE00171	$dcb_coeffs_44100
        7FD161 802E9F 7FA2C3 

0xE00174	$dcb_coeffs_48000
        7FD52A 802AD6 7FAA53 

0xE00177	$dcb_coeffs_88200
        7FE8AC 801754 7FD159 

0xE0017A	$dcb_coeffs_96000
        7FEA91 80156F 7FD523 

0xE0017D	$gdelay_32000
        000009 000010 000016 

0xE00180	$gdelay_44100
        00000C 000016 00001E 

0xE00183	$gdelay_48000
        00000D 000018 000020 

0xE00186	$gdelay_88200
        000018 00002C 00003B 

0xE00189	$gdelay_96000
        00001A 000030 000041 

0xE0018C	$ipsi_coeffs_32000
        E000D8 E000F6 E00114 

0xE0018F	$contra_coeffs_32000
        E000DB E000F9 E00117 

0xE00192	$ipsi_coeffs_44100
        E000DE E000FC E0011A 

0xE00195	$contra_coeffs_44100
        E000E1 E000FF E0011D 

0xE00198	$ipsi_coeffs_48000
        E000E4 E00102 E00120 

0xE0019B	$contra_coeffs_48000
        E000E7 E00105 E00123 

0xE0019E	$ipsi_coeffs_88200
        E000EA E00108 E00126 

0xE001A1	$contra_coeffs_88200
        E000ED E0010B E00129 

0xE001A4	$ipsi_coeffs_96000
        E000F0 E0010E E0012C 

0xE001A7	$contra_coeffs_96000
        E000F3 E00111 E0012F 

0xE001AA	$itf_coeffs_32000
        3C1FCE 3C8A1C 

0xE001AC	$itf_coeffs_44100
        2E4E4A 4C0B44 

0xE001AE	$itf_coeffs_48000
        2B23FB 4F9874 

0xE001B0	$itf_coeffs_88200
        19687C 637DDA 

0xE001B2	$itf_coeffs_96000
        178A2A 659689 


------------------------------------------------------------------------
Region: flash.windowed_data16
------------------------------------------------------------------------
0x000000	$sbcdec.synthesis_coefs_m8
        005A82 007AA5 007D86 00A57D 
        00865A 00827A 005A82 007AA5 
        007D86 00A57D 00865A 00827A 
        00471C 00ED82 0075A1 0018F8 
        00B86A 006D99 009592 0067E7 
        000748 007D8A 005FB8 00E313 
        0030FB 00C589 00BE51 007641 
        00AFCF 00043B 00CF04 003B76 
        0041AF 0089BE 005130 00FBC5 
        0018F8 00B8B8 00E313 006A6D 
        009982 0075A1 007D8A 005F95 
        009267 00471C 00EDE7 000748 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        00E707 004847 001CED 009592 
        00677D 008A5F 008275 00A16A 
        006D99 00B8E3 001318 00F8B8 
        00CF04 003B76 0041AF 0089BE 
        005130 00FBC5 0030FB 00C589 
        00BE51 007641 00AFCF 00043B 
        00B8E3 00137D 008A5F 00E707 
        004895 009267 006A6D 009918 
        00F8B8 008275 00A147 001CED 
        00A57D 00865A 00827A 005A82 
        007AA5 007D86 00A57D 00865A 
        00827A 005A82 007AA5 007D86 
        009592 006718 00F8B8 007D8A 
        005F47 001CED 00B8E3 001382 
        0075A1 00E707 00486A 006D99 
        0089BE 0051CF 00043B 0030FB 
        00C576 0041AF 007641 00AF30 
        00FBC5 00CF04 003B89 00BE51 
        008275 00A195 009267 00B8E3 
        0013E7 000748 0018F8 00B847 
        001CED 006A6D 00997D 008A5F 
        008000 000080 000000 008000 
        000080 000000 008000 000080 
        000000 008000 000080 000000 
        008275 00A195 009267 00B8E3 
        0013E7 000748 0018F8 00B847 
        001CED 006A6D 00997D 008A5F 
        0089BE 0051CF 00043B 0030FB 
        00C576 0041AF 007641 00AF30 
        00FBC5 00CF04 003B89 00BE51 
        009592 006718 00F8B8 007D8A 
        005F47 001CED 00B8E3 001382 
        0075A1 00E707 00486A 006D99 

0x0000C0	$sbc.win_coefs_m8
        000000 000000 001486 00002C 
        00FE00 0048B2 00006B 00FE00 
        00956A 0000C1 008400 00E9CC 
        000107 00B201 0013BD 000105 
        006E00 00D3E3 000076 003FFF 
        00E890 00FF27 00C4FE 00359E 
        0002E5 00CD04 001C6E 00055A 
        00CF06 0086CE 000780 008908 
        0024A4 00084E 001907 00D7D1 
        00069F 00B404 0088FB 00017F 
        0044FD 007BAE 00F881 000DF2 
        00A1BA 00EBFE 0058E4 00C4A2 
        0022D0 00C22A 007CFA 0031F5 
        006738 00EEC6 003F1C 008844 
        003B3C 004810 00D84A 00708A 
        004B3D 00B24A 00708A 004810 
        00D844 003B3C 003F1C 008838 
        00EEC6 0031F5 00672A 007CFA 
        00DD2F 003EE4 00C4A2 00EBFE 
        0058F2 00A1BA 00F881 000DFD 
        007BAE 00017F 004404 0088FB 
        00069F 00B407 00D7D1 00084E 
        001908 0024A4 000780 008906 
        0086CE 00055A 00CF04 001C6E 
        00FD1A 0033FE 00359E 00FF27 
        00C4FF 00E890 000076 003F00 
        00D3E3 000105 006E01 0013BD 
        000107 00B200 00E9CC 0000C1 
        008400 00956A 00006B 00FE00 
        0048B2 00002C 00FE00 001486 

0x000138	$sbc.win_coefs_m4
        000000 000000 00232A 000061 
        00C600 00B328 0000FB 007A00 
        00FF12 00007A 0047FF 003774 
        0002CB 003F05 003B75 000764 
        006708 003DDD 00069F 00DC01 
        0091E5 00F89F 0024EC 001F5E 
        0022B6 003E31 00EAB9 003F23 
        009548 0025E5 004B58 004048 
        0025E5 003F23 009531 00EAB9 
        00DD49 00C2EC 001F5E 00F89F 
        002401 0091E5 00069F 00DC08 
        003DDD 000764 006705 003B75 
        00FD34 00C1FF 003774 00007A 
        004700 00FF12 0000FB 007A00 
        00B328 000061 00C600 00232A 

0x000174	$sbcdec.synthesis_coefs_m4
        005A82 007AA5 007D86 00A57D 
        00865A 00827A 0030FB 00C589 
        00BE51 007641 00AFCF 00043B 
        000000 000000 000000 000000 
        000000 000000 00CF04 003B76 
        0041AF 0089BE 005130 00FBC5 
        00A57D 00865A 00827A 005A82 
        007AA5 007D86 0089BE 0051CF 
        00043B 0030FB 00C576 0041AF 
        008000 000080 000000 008000 
        000080 000000 0089BE 0051CF 
        00043B 0030FB 00C576 0041AF 

0x0001A4	$sbc.loudness_offset
0x0001A4	$sbc.loudness_offset_m4
        FFFFFF 000000 000000 000000 
        FFFFFE 000000 000000 000001 
        FFFFFE 000000 000000 000001 
        FFFFFE 000000 000000 000001 

0x0001B4	$sbc.loudness_offset_m8
        FFFFFE 000000 000000 000000 
        000000 000000 000000 000001 
        FFFFFD 000000 000000 000000 
        000000 000000 000001 000002 
        FFFFFC 000000 000000 000000 
        000000 000000 000001 000002 
        FFFFFC 000000 000000 000000 
        000000 000000 000001 000002 

0x0001D4	$sbcdec.bitmask_lookup
        000000 000000 000001 000000 
        000300 000007 000000 000F00 
        00001F 000000 003F00 00007F 
        000000 00FF00 0001FF 000003 
        00FF00 0007FF 00000F 00FF00 
        001FFF 00003F 00FF00 007FFF 
        0000FF 00FF00 

0x0001EE	$sbcdec.levelrecip_coefs
        00AAAA 00AB92 004925 008888 
        008984 002108 008208 002181 
        000204 008080 008180 004020 
        008020 000880 001002 008008 
        000180 000400 008002 000080 
        000100 008000 008000 

========================================================================
memusage
========================================================================
DATA:
  DM1_REGION: 25835 of 32768 words used, 6933 words available in 1 blocks
  DM2_REGION: 25834 of 32768 words used, 6934 words available in 1 blocks
  flash.data16: 782 of 1048576 words used, 1047794 words available in 1 blocks
  flash.data24: 436 of 1048576 words used, 1048140 words available in 1 blocks
  flash.windowed_data16: 517 of 16777216 words used, 16776699 words available in 1 blocks
TOTAL: 53404 of 18939904 words used, 18886500 words available in 5 blocks

CODE:
  PM_REGION: 10472 of 11264 words used, 792 words available in 1 blocks
  flash.code: 3480 of 16764928 words used, 16761448 words available in 1 blocks
TOTAL: 13952 of 16776192 words used, 16762240 words available in 2 blocks

